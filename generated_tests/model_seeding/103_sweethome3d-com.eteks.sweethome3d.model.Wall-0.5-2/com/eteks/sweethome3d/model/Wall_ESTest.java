/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 17:10:08 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(25.27426F, 25.27426F, 25.27426F, 25.27426F, 25.27426F, 25.27426F);
      Float float0 = new Float(1847.9723F);
      Float float1 = new Float(25.27426F);
      Integer integer0 = Integer.valueOf(2305);
      Integer.toUnsignedString(2305);
      Integer.toUnsignedLong(2305);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideColor();
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall(53.616287F, 53.616287F, 53.616287F, 53.616287F, 53.616287F);
      Float float0 = new Float(1847.9723F);
      Float float1 = new Float(53.616287F);
      Integer integer0 = Integer.valueOf(2320);
      Integer.toUnsignedString(2320);
      Float.isFinite((-547.0F));
      Integer.toUnsignedLong(2320);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideColor();
      wall0.setWallAtStart(wall0);
      wall0.setHeight(float1);
      wall0.getPoints();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("2320");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.2320
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(14.338936F, 14.338936F, 14.338936F, 14.338936F, 14.338936F);
      Wall wall1 = new Wall(14.338936F, 14.338936F, 14.338936F, 14.338936F, 14.338936F);
      wall0.setWallAtStart(wall1);
      Float float0 = new Float(14.338936F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Integer.valueOf(2969);
      Integer.valueOf(0);
      Integer.valueOf(0);
      wall0.intersectsRectangle(746.82F, (-567.0F), 1058.8212F, 0);
      wall0.getXStart();
      wall0.setXStart(0.0F);
      wall0.setWallAtStart((Wall) null);
      Level level0 = new Level("N-nc+tz}kW#U:|6o", (-932.89886F), 746.82F, 1058.8212F);
      Level level1 = level0.clone();
      level1.getElevation();
      level1.getHeight();
      wall0.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(25.8F, 25.8F, 25.8F, 25.8F, 25.8F, 25.8F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(25.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.8F, wall0.getHeight(), 0.01F);
      assertEquals(25.8F, wall0.getYEnd(), 0.01F);
      assertEquals(25.8F, wall0.getXEnd(), 0.01F);
      assertEquals(25.8F, wall0.getThickness(), 0.01F);
      assertEquals(25.8F, wall0.getXStart(), 0.01F);
      assertEquals(25.8F, wall0.getYStart(), 0.01F);
      assertEquals(25.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(25.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.8F, wall0.getHeight(), 0.01F);
      assertEquals(25.8F, wall0.getYEnd(), 0.01F);
      assertEquals(25.8F, wall0.getXEnd(), 0.01F);
      assertEquals(25.8F, wall0.getThickness(), 0.01F);
      assertEquals(25.8F, wall0.getXStart(), 0.01F);
      assertEquals(25.8F, wall0.getYStart(), 0.01F);
      assertEquals(25.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(25.8F, 25.8F, 25.8F, 25.8F, 25.8F);
      Float float0 = new Float(25.8F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 457.7215F, 0.0F, 0.1F, 457.7215F, 7.9863358F);
      wall0.getHeight();
      Integer integer0 = Integer.valueOf(1461);
      wall0.containsWallEndAt((-923.87103F), 0.0F, 0.1F);
      wall0.setRightSideColor(integer0);
      Float float0 = new Float(0.1F);
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      wall1.isTrapezoidal();
      wall0.getYEnd();
      wall0.setRightSideShininess(428.17123F);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall((-715.55F), (-715.55F), (-715.55F), (-715.55F), (-715.55F), (-715.55F));
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall((-1204.738F), (-1217.7303F), (-1217.7303F), (-1217.7303F), (-1.0F));
      Integer integer0 = new Integer((-537));
      Integer.getInteger("X_START");
      wall0.setRightSideColor(integer0);
      Wall wall1 = new Wall((-1204.738F), 0.033333335F, 1227.13F, 1372.4F, (-1217.7303F));
      wall1.setWallAtStart(wall0);
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.move(2031.0F, (-92.66F));
      Float float0 = wall0.getHeight();
      Float.min((-92.66F), 2031.0F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-715.55F), (-715.55F), (-715.55F), (-715.55F), (-715.55F));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(512.1373F);
      Wall wall0 = new Wall(512.1373F, 512.1373F, (-1.0F), 512.1373F, (-1.0F));
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      Float float0 = new Float((double) 2465.5F);
      wall0.containsPoint(2465.5F, 2465.5F, 2465.5F);
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      wall0.setRightSideShininess(1701.9586F);
      wall0.setWallAtEnd((Wall) null);
      wall0.getPoints();
      wall0.getRightSideShininess();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setThickness(1578.9F);
      wall0.getXStart();
      wall0.containsPoint(1578.9F, (-345.72F), 0.0F);
      wall0.setLevel((Level) null);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      wall0.isAtLevel(level0);
      Integer integer0 = new Integer((-2315));
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      wall0.getHeight();
      Float float0 = new Float(2249.4092742304874);
      float0.floatValue();
      wall0.setArcExtent((Float) 2249.4092F);
      Float float1 = new Float(0.1F);
      wall0.setHeight(float1);
      Wall wall1 = wall0.clone();
      wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, 0.0F);
      wall0.getXStart();
      wall1.move(0.1F, 483.09F);
      wall0.setXStart(0.0F);
      wall1.setWallAtStart(wall0);
      Wall wall2 = wall0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("RIGHT_SIDE_COLOR", (Content) null, 0.1F, 0.0F, false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall1.setRightSideTexture(homeTexture0);
      wall0.setYStart(0.1F);
      wall2.getLevel();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      wall0.getHeight();
      Float float0 = new Float(2249.4092742304874);
      float0.floatValue();
      wall0.setArcExtent((Float) 2249.4092F);
      Float float1 = new Float(0.1F);
      wall0.setHeight(float1);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(0.0F, 0.0F, 0.0F);
      wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      wall0.getXStart();
      wall1.move((-1.0F), 483.09F);
      wall0.setXStart(0.0F);
      wall1.setWallAtStart(wall0);
      Float.floatToIntBits(483.09F);
      wall1.getHeightAtEnd();
      wall1.setArcExtent((Float) null);
      wall0.getLevel();
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      wall0.getHeight();
      Float float0 = new Float(2249.4092742304874);
      float0.floatValue();
      wall0.setArcExtent((Float) 2249.4092F);
      Float float1 = new Float(0.1F);
      wall0.setHeight(float1);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      wall0.getXStart();
      wall1.move(0.1F, 483.09F);
      wall0.setXStart(0.0F);
      wall1.setWallAtStart(wall0);
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, (-435.27707F), (-435.27707F));
      wall1.setLeftSideShininess(0.1F);
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Wall wall2 = wall1.getWallAtStart();
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(level0, "", wall2, wall0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level1.getElevation();
      level0.getHeight();
      wall1.setHeightAtEnd(float1);
      wall1.getLength();
      wall1.getLevel();
      wall1.getYStart();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall((-39.373F), 3143.8F, (-1.0F), (-39.373F), (-15.905408F));
      wall0.getArcExtent();
      wall0.setArcExtent((Float) null);
      Float float0 = new Float(0.1F);
      wall0.setHeight((Float) null);
      wall0.clone();
      wall0.containsWallEndAt((-1.0F), 0.0F, (-1.0F));
      Integer.valueOf(150);
      Integer.valueOf(150);
      int int0 = 574;
      Integer.valueOf(1432);
      try { 
        Integer.valueOf("yzZW>2nf9:BlQBZA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yzZW>2nf9:BlQBZA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      Float float0 = wall0.getHeight();
      float0.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      Float float1 = new Float(0.1F);
      wall0.setHeight(float1);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Float.min(0.0F, (-1.0F));
      Wall wall2 = new Wall(0.1F, 0.0F, (-1204), (-1.0F), (-1.0F), (-4375.12F));
      wall2.setHeightAtEnd(float1);
      Wall wall3 = wall2.clone();
      wall3.getArcExtent();
      Wall.Property.values();
      wall3.setLeftSideColor((Integer) null);
      wall1.containsWallEndAt(0.1F, (-911.7499F), 1.0F);
      wall0.getRightSideShininess();
      wall2.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall((-349.741F), 209.91742F, (-3279.0F), 209.91742F, (-3279.0F), 209.91742F);
      wall0.setArcExtent((Float) 209.91742F);
      wall0.containsPoint(209.91742F, (-349.741F), 209.91742F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      wall0.getHeight();
      Integer integer0 = Integer.valueOf(1461);
      wall0.containsWallEndAt((-923.87103F), 0.0F, 0.1F);
      wall0.setRightSideColor(integer0);
      Float float0 = new Float(0.1F);
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      wall1.isTrapezoidal();
      wall0.getYEnd();
      wall0.setRightSideShininess(428.17123F);
      wall0.setRightSideTexture((HomeTexture) null);
      Wall.Property.values();
      wall0.setYStart(428.17123F);
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      wall0.getHeight();
      Float float0 = new Float(2249.4092742304874);
      float0.floatValue();
      wall0.setArcExtent((Float) 2249.4092F);
      Float float1 = new Float(0.1F);
      wall0.setHeight(float1);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      wall0.getXStart();
      wall1.move(0.1F, 483.09F);
      wall0.setXStart(0.0F);
      wall1.setWallAtStart(wall0);
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, 0.1F, 0.1F);
      Level level1 = level0.clone();
      level1.getElevation();
      level0.getHeight();
      wall0.setLevel(level1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(56.331444F, 56.331444F, 56.331444F, 56.331444F, 56.331444F);
      Wall wall1 = new Wall(56.331444F, 56.331444F, 56.331444F, (-17.555668F), (-17.555668F));
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall1.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      Float float0 = wall0.getHeight();
      float0.floatValue();
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall0.setRightSideShininess((-0.9F));
      wall0.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall1.getHeightAtEnd();
      Integer.getInteger("com.eteks.sweethome3d.tools.ResourceURLContent");
      Integer.compare(2142479855, 2142479855);
      wall1.setLeftSideColor((Integer) null);
      wall1.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-39.373F), 3143.8F, 3143.8F, (-39.373F), 0.0F);
      wall0.getLevel();
      wall0.isAtLevel((Level) null);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-386.93805F), (-386.93805F), 0.022817591F, (-386.93805F), (-386.93805F));
      wall0.setRightSideShininess(1701.9586F);
      wall0.setWallAtEnd(wall0);
      Float float0 = new Float(75.17468F);
      Float float1 = new Float(1701.9586F);
      wall0.setArcExtent(float1);
      wall0.getRightSideTexture();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      wall0.getHeight();
      Float float0 = new Float(2249.4092742304874);
      float0.floatValue();
      Float.max(0.0F, 0.0F);
      wall0.setArcExtent((Float) 2249.4092F);
      Float float1 = new Float((double) 0.0F);
      Float.isFinite(1747.4474F);
      wall0.setHeight(float1);
      Wall wall1 = wall0.clone();
      wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      wall0.getXStart();
      wall1.move(0.1F, 483.09F);
      wall1.setXEnd((-2921.9475F));
      wall0.setXStart(0.0F);
      wall1.setWallAtStart(wall0);
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 2249.4092F, (-435.27707F), (-435.27707F));
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level1.getElevation();
      wall1.clone();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      Float float1 = wall0.getHeight();
      float1.floatValue();
      wall0.setArcExtent((Float) 0.0F);
      Float float2 = new Float(0.1F);
      wall0.setHeight(float2);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(0.0F, 0.0F, 0.0F);
      Integer.valueOf(150);
      Integer.valueOf(150);
      Integer.valueOf(574);
      Integer.valueOf((-1204));
      try { 
        Integer.valueOf("yzZW>2nf9:BlQBZA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yzZW>2nf9:BlQBZA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      
      Wall wall1 = new Wall((-491.5714F), (-491.5714F), (-2515.82F), (-2515.82F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(float2);
      
      wall1.move(1578.3F, (-491.5714F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      
      float float3 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1086.7286F, float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      
      boolean boolean1 = wall2.intersectsRectangle(593.6676F, 0.0F, 0.01F, (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      
      wall2.setThickness(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      
      int int0 = Float.floatToIntBits(2465.5F);
      assertEquals(1159337984, int0);
      
      wall1.setArcExtent((Float) 2465.5F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      Level level0 = wall2.getLevel();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(level0);
      
      List<Wall> list3 = Wall.clone(list2);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list3.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list0.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list3);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall3.getLength(), 0.01F);
      assertEquals((-491.5714F), wall3.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(2862.72F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-2515.82F), wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals((-491.5714F), wall3.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall3.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall3);
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      
      boolean boolean2 = wall2.isTrapezoidal();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(512.1373F, 512.1373F, 512.1373F, 512.1373F, 512.1373F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(512.1373F);
      assertEquals(512.1373F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = wall0.containsPoint(512.1373F, (float) float0, (float) float0);
      assertTrue(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      
      wall0.setHeight(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(float0);
      
      Float float1 = new Float(2249.4092742304874);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall1.move(0.1F, 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, (-435.27707F), (-435.27707F));
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      wall1.setLeftSideShininess(0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      
      float float5 = level1.getElevation();
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals(1434.928F, float5, 0.01F);
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      
      float float6 = level0.getHeight();
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals((-435.27707F), float6, 0.01F);
      assertNotSame(level0, level1);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      
      wall1.setHeightAtEnd(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float6, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      float float7 = wall1.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(7799.948F, float7, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Level level2 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(level2);
      
      float float8 = wall1.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertEquals(483.19F, float8, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall((-39.373F), 3143.8F, (-1.0F), (-39.373F), (-15.905408F));
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Integer integer0 = Integer.valueOf((-262));
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.setRightSideShininess((-1.0F));
      Integer.getInteger("&z");
      Integer integer1 = new Integer((-679));
      wall0.setLeftSideColor(integer0);
      wall0.getLevel();
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      wall0.getHeight();
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall((-1204.738F), (-1219.381F), (-1219.381F), (-1204.738F), (-1.0F), 0.0F);
      Integer integer0 = new Integer((-537));
      Object object0 = new Object();
      integer0.equals(object0);
      wall0.setRightSideColor(integer0);
      Integer integer1 = wall0.getRightSideColor();
      wall0.setRightSideColor(integer1);
      wall0.getLeftSideColor();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("GBC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.GBC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float float0 = (-1.0F);
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), 458.45554F, (-1.0F), 1293.1608F);
      float float1 = (-2572.0F);
      wall0.setThickness((-2572.0F));
      wall0.setXEnd(0.0F);
      String string0 = "";
      try { 
        MockURL.URL("Super class isn't cloneable", "|,f.C%u ykM{", "Super class isn't cloneable");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: super class isn't cloneable
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall((-2242.66F), (-2242.66F), (-2242.66F), 0.0F, 483.9F);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("X_START", temporaryURLContent0, 0.0F, (-171.5F), true);
      catalogTexture0.getName();
      Content content0 = catalogTexture0.getImage();
      CatalogTexture catalogTexture1 = new CatalogTexture("X_START", "HEIGHT", content0, (-2740.79F), 671.339F, "X_START", true);
      catalogTexture1.getWidth();
      catalogTexture1.getHeight();
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture1);
      wall0.setRightSideTexture(homeTexture0);
      wall0.getYArcCircleCenter();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, (-1.0F), (-1.0F), (-1798.0938F), 0.1F, 1.0F);
      wall0.getHeight();
      Integer integer0 = Integer.valueOf(1461);
      wall0.containsWallEndAt(0.1F, 0.0F, 1461);
      wall0.setRightSideColor(integer0);
      wall0.setHeight((Float) null);
      Wall wall1 = wall0.clone();
      wall1.isTrapezoidal();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Unknown resource ", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      propertyChangeListenerProxy1.propertyChange((PropertyChangeEvent) null);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.move((-1220.0815F), 0.0F);
      wall1.isTrapezoidal();
      wall0.setYStart(0.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Integer.valueOf(2969);
      Integer.valueOf(0);
      Integer.valueOf(0);
      wall0.setRightSideShininess(0.0F);
      Wall wall1 = new Wall(0.0F, 2969, 1.0F, 0.0F, (-3220.0F));
      Wall wall2 = new Wall(0, 0.0F, 0.0F, (-3083.5266F), 0, 1.0F);
      wall1.getXArcCircleCenter();
      Wall wall3 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      wall3.getHeight();
      Float float0 = new Float(0.1F);
      wall3.setHeight(float0);
      wall3.getLeftSideTexture();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      wall0.getHeight();
      Float float0 = new Float(2249.4092742304874);
      float0.floatValue();
      wall0.setArcExtent((Float) 2249.4092F);
      Float float1 = new Float(0.1F);
      wall0.setHeight(float1);
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      wall0.getXStart();
      wall1.move(0.1F, 483.09F);
      wall0.setXStart(0.0F);
      wall1.setWallAtStart(wall0);
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, (-435.27707F), (-435.27707F));
      Level level1 = level0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level1.getElevation();
      level0.getHeight();
      wall1.setHeightAtEnd(float1);
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-1204.738F), (-1219.381F), (-1219.381F), (-1204.738F), (-1.0F), 0.0F);
      wall0.move(0.2F, (-1204.738F));
      wall0.containsWallEndAt((-629.0F), 0.0F, (-629.0F));
      Integer integer0 = new Integer((-537));
      Wall wall1 = wall0.clone();
      wall1.containsWallStartAt(0.0F, 0.0F, 0.0F);
      wall1.setRightSideShininess((-537));
      wall0.setRightSideTexture((HomeTexture) null);
      Level level0 = new Level("577Lm", (-629.0F), 0.0F, (-1219.381F));
      Level level1 = level0.clone();
      wall1.setLevel(level1);
      wall1.setLeftSideTexture((HomeTexture) null);
      Wall.Property.values();
      wall1.setYStart((-1219.381F));
      wall1.setLeftSideTexture((HomeTexture) null);
      wall1.getLevel();
      wall0.getRightSideShininess();
      wall1.getXEnd();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotNull(list2);
      
      Wall wall1 = new Wall((-491.5714F), (-491.5714F), (-2515.82F), (-2515.82F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(float2);
      
      wall1.move(1578.3F, (-491.5714F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall2.intersectsRectangle(593.6676F, 0.0F, 0.01F, (-1.0F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall2.setThickness(0.0F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      int int0 = Float.floatToIntBits(2465.5F);
      assertEquals(1159337984, int0);
      
      wall1.setArcExtent((Float) 2465.5F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Level level0 = wall2.getLevel();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(level0);
      
      List<Wall> list3 = Wall.clone(list2);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list3.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertFalse(list2.contains(wall1));
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list0.equals((Object)list2));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list3);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotNull(list3);
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      boolean boolean2 = wall2.isTrapezoidal();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float float3 = wall1.getThickness();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, float3, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(512.1373F, 512.1373F, 512.1373F, 512.1373F, 512.1373F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float(512.1373F);
      assertEquals(512.1373F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(2146490477);
      assertEquals(2146490477, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(2146490477, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 2.0254416F, 0.0F, 0.1F, 2.0254416F, 2.0254416F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.9280367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.9280367F, wall0.getLength(), 0.01F);
      assertEquals(1.0627208F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0254416F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(2.0254416F, (float)float0, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.9280367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.9280367F, wall0.getLength(), 0.01F);
      assertEquals(1.0627208F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0254416F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(float0);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.9280367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.9280367F, wall0.getLength(), 0.01F);
      assertEquals(1.0627208F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0254416F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float2 = wall0.getYStart();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(2.0254416F, float2, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.9280367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.9280367F, wall0.getLength(), 0.01F);
      assertEquals(1.0627208F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0254416F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideShininess((-1525.6F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.9280367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.9280367F, wall0.getLength(), 0.01F);
      assertEquals(1.0627208F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1525.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Float float3 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float(0.1F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(0.1F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall1.setHeight(float4);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      
      float float5 = wall1.getRightSideShininess();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall1.containsWallStartAt(2.0254416F, 1243.64F, 2.0254416F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      
      Wall wall2 = new Wall(246.695F, (-1525.6F), 2083.66F, 0.1F, 2.0254416F, (-1.0F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-762.75F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2387.928F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1165.1775F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(246.695F, wall2.getXStart(), 0.01F);
      assertEquals(2387.928F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2083.66F, wall2.getXEnd(), 0.01F);
      assertEquals((-1525.6F), wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotNull(wall2);
      
      wall2.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.9280367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.9280367F, wall0.getLength(), 0.01F);
      assertEquals(1.0627208F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1525.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-762.75F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2387.928F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1165.1775F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(246.695F, wall2.getXStart(), 0.01F);
      assertEquals(2387.928F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2083.66F, wall2.getXEnd(), 0.01F);
      assertEquals((-1525.6F), wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      float float6 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals((-1525.6F), float6, 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.9280367F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.9280367F, wall0.getLength(), 0.01F);
      assertEquals(1.0627208F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1525.6F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.0254416F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0254416F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(list1.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list1, list0);
      assertNotSame(list0, list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list0);
      assertFalse(list2.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list0.equals((Object)list1));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list2);
      
      List<Wall> list3 = Wall.clone(list1);
      assertFalse(list1.contains(wall0));
      assertFalse(list3.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list3, list0);
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list3);
      
      List<Wall> list4 = Wall.clone(list2);
      assertFalse(list2.contains(wall0));
      assertFalse(list4.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list3));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list2, list4);
      assertNotSame(list2, list3);
      assertNotSame(list4, list0);
      assertNotSame(list4, list1);
      assertNotSame(list4, list3);
      assertNotSame(list4, list2);
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list4);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list4);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.1F, 0.1F, 811.14F, 1.0F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(float0);
      
      wall0.setRightSideShininess((-616.0F));
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall((-1.0F), (-1222.7183F), 0.1F, 1.0F, 5669.28F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1223.7188F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1222.7183F), wall1.getYStart(), 0.01F);
      assertEquals((-610.85913F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1223.7188F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5669.28F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = new Wall((-22.700672F), 4286.513F, (-22.700672F), 5669.28F, (-1222.7183F), (-1.0F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-22.700672F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(4286.513F, wall2.getYStart(), 0.01F);
      assertEquals(4977.8965F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1382.7666F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1222.7183F), wall2.getThickness(), 0.01F);
      assertEquals((-22.700672F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-22.700672F), wall2.getXStart(), 0.01F);
      assertEquals(5669.28F, wall2.getYEnd(), 0.01F);
      assertEquals(1382.7666F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall2);
      
      float float1 = wall2.getXArcCircleCenter();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-22.700672F), float1, 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-22.700672F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(4286.513F, wall2.getYStart(), 0.01F);
      assertEquals(4977.8965F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1382.7666F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1222.7183F), wall2.getThickness(), 0.01F);
      assertEquals((-22.700672F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-22.700672F), wall2.getXStart(), 0.01F);
      assertEquals(5669.28F, wall2.getYEnd(), 0.01F);
      assertEquals(1382.7666F, wall2.getStartPointToEndPointDistance(), 0.01F);
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-22.700672F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(4286.513F, wall2.getYStart(), 0.01F);
      assertEquals(4977.8965F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1382.7666F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-1222.7183F), wall2.getThickness(), 0.01F);
      assertEquals((-22.700672F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-22.700672F), wall2.getXStart(), 0.01F);
      assertEquals(5669.28F, wall2.getYEnd(), 0.01F);
      assertEquals(1382.7666F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      float float2 = wall1.getLength();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1223.7188F, float2, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1223.7188F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1222.7183F), wall1.getYStart(), 0.01F);
      assertEquals((-610.85913F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1223.7188F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5669.28F, wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-3640.6F), (-3640.6F), 0.0F, 2.0F);
      assertEquals((-3640.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3640.6F), wall0.getXEnd(), 0.01F);
      assertEquals(5148.586F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5148.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1820.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1820.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(2045);
      assertEquals(2045, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      wall0.setThickness(0.0F);
      assertEquals((-3640.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3640.6F), wall0.getXEnd(), 0.01F);
      assertEquals(5148.586F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5148.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1820.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1820.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setRightSideColor(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-3640.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3640.6F), wall0.getXEnd(), 0.01F);
      assertEquals(5148.586F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5148.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1820.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1820.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Integer integer4 = wall0.getRightSideColor();
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(0, (int)integer4);
      assertEquals((-3640.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3640.6F), wall0.getXEnd(), 0.01F);
      assertEquals(5148.586F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5148.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1820.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1820.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(integer4);
      
      Integer integer5 = new Integer(165);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(165, (int)integer5);
      assertNotNull(integer5);
      
      wall0.setRightSideColor(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals((-3640.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3640.6F), wall0.getXEnd(), 0.01F);
      assertEquals(5148.586F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5148.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1820.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(165, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1820.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Integer integer6 = wall0.getLeftSideColor();
      assertEquals((-3640.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3640.6F), wall0.getXEnd(), 0.01F);
      assertEquals(5148.586F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5148.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1820.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(165, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1820.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(integer6);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(integer0.equals((Object)integer4));
      assertFalse(integer0.equals((Object)integer5));
      assertFalse(integer0.equals((Object)integer3));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(integer0.equals((Object)integer1));
      assertEquals((-3640.6F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-3640.6F), wall0.getXEnd(), 0.01F);
      assertEquals(5148.586F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5148.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1820.3F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2045, (int)wall0.getLeftSideColor());
      assertEquals(165, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1820.3F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(209.91742F, 209.91742F, (-3279.0F), 209.91742F, (-3279.0F), 209.91742F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1534.5413F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(3488.9175F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.0F), wall0.getXEnd(), 0.01F);
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3488.9175F, wall0.getLength(), 0.01F);
      assertEquals(209.91742F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-3279.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setArcExtent((Float) 209.91742F);
      assertEquals((-300.4925F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(209.91742F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1534.5413F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(3488.9175F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(381545.0F, wall0.getLength(), 0.01F);
      assertEquals((-3279.0F), wall0.getXEnd(), 0.01F);
      assertEquals(209.91742F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3279.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint(209.91742F, 209.91742F, 209.91742F);
      assertEquals((-300.4925F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(512.1373F, 512.1373F, 512.1373F, 512.1373F, 512.1373F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(1701.9586F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      wall0.setRightSideShininess(786.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertEquals(786.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Integer integer0 = Integer.getInteger("iH2K(RLB7&vc");
      assertNull(integer0);
      
      Wall wall1 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(wall1);
      
      Float float1 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotNull(float1);
      
      Float float2 = new Float(0.1F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall1.setHeight(float2);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(homeTexture0);
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setThickness(1578.9F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float float1 = wall0.getXStart();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-345.72F), float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.containsPoint(1578.9F, (-345.72F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = wall0.isAtLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(2466.0034F, 2466.0034F, 2466.0034F, 2466.0034F, 2466.0034F, 2466.0034F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2466.0034F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2466.0034F, wall0.getThickness(), 0.01F);
      assertEquals(2466.0034F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2466.0034F, wall0.getYStart(), 0.01F);
      assertEquals(2466.0034F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2466.0034F, wall0.getXStart(), 0.01F);
      assertEquals(2466.0034F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2466.0034F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2466.0034F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2466.0034F, wall0.getThickness(), 0.01F);
      assertEquals(2466.0034F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2466.0034F, wall0.getYStart(), 0.01F);
      assertEquals(2466.0034F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2466.0034F, wall0.getXStart(), 0.01F);
      assertEquals(2466.0034F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2466.0034F, wall0.getYEnd(), 0.01F);
      assertNull(float0);
      
      wall0.setHeight((Float) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2466.0034F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2466.0034F, wall0.getThickness(), 0.01F);
      assertEquals(2466.0034F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2466.0034F, wall0.getYStart(), 0.01F);
      assertEquals(2466.0034F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2466.0034F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2466.0034F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(25.27426F, (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(26.27426F, wall0.getLength(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = new Float(1847.9723F);
      assertEquals(1847.9723F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-912.02F), 1061.2361F);
      assertEquals((-912.02F), float1, 0.01F);
      
      float float2 = Float.min((-1786.0F), (-1.0F));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1786.0F), float2, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float3 = new Float((-3039.8618F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((-3039.8618F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = new Float((double) (-912.02F));
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-912.02F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setHeight(float4);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-912.02F), wall0.getHeight(), 0.01F);
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-912.02F), wall0.getHeight(), 0.01F);
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(26.27426F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(69301.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXStart(), 0.01F);
      assertEquals((-912.02F), wall1.getHeight(), 0.01F);
      assertEquals((-36.124817F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(12.13713F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      float float5 = 0.0F;
      boolean boolean0 = wall1.containsWallEndAt(2368.0F, 0.0F, (-4369.98F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-912.02F), wall0.getHeight(), 0.01F);
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(26.27426F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(69301.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXStart(), 0.01F);
      assertEquals((-912.02F), wall1.getHeight(), 0.01F);
      assertEquals((-36.124817F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(12.13713F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      
      int int0 = (-1204);
      Integer integer0 = Integer.valueOf((-1204));
      assertTrue(integer0.equals((Object)int0));
      assertEquals((-1204), (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.valueOf("yzZW>2nf9:BlQBZA");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"yzZW>2nf9:BlQBZA\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(2803.32F, 0.0F, 2803.32F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2803.32F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2803.32F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2803.32F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(0.0F, 1.0F, 2803.32F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2803.32F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2803.32F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2803.32F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, (-1728.864F), (-1728.864F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1728.864F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1728.864F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1728.864F), wall0.getYEnd(), 0.01F);
      assertEquals((-864.432F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1728.864F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt(1.0F, (-1333.0F), 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1728.864F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1728.864F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1728.864F), wall0.getYEnd(), 0.01F);
      assertEquals((-864.432F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1728.864F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(1728.864F, float0, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1728.864F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1728.864F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1728.864F), wall0.getYEnd(), 0.01F);
      assertEquals((-864.432F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1728.864F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(512.1373F, 512.1373F, (-0.20111495F), 512.1373F, (-0.20111495F));
      assertEquals(512.33844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.20111495F), wall0.getXEnd(), 0.01F);
      assertEquals(512.33844F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(255.96811F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.20111495F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd(1652.1443F);
      assertEquals(1652.1443F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.20111495F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1249.8427F, wall0.getLength(), 0.01F);
      assertEquals(255.96811F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(1082.1409F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1249.8427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.20111495F), wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(1652.1443F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.20111495F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1249.8427F, wall0.getLength(), 0.01F);
      assertEquals(255.96811F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(1082.1409F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1249.8427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.20111495F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(1652.1443F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.20111495F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1249.8427F, wall0.getLength(), 0.01F);
      assertEquals(255.96811F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(1082.1409F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1249.8427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.20111495F), wall0.getThickness(), 0.01F);
      assertNull(wall1);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(255.96811F, float0, 0.01F);
      assertEquals(1652.1443F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.20111495F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1249.8427F, wall0.getLength(), 0.01F);
      assertEquals(255.96811F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(1082.1409F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1249.8427F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.20111495F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setThickness(1578.9F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getXStart();
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-345.72F), float1, 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsPoint(1578.9F, (-345.72F), 0.0F);
      assertFalse(boolean0);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = wall0.isAtLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1578.9F, wall0.getThickness(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall(6.529417F, 6.529417F, 6.529417F, 6.529417F, 6.529417F, 6.529417F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6.529417F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6.529417F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.529417F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(6.529417F, wall0.getYEnd(), 0.01F);
      assertEquals(6.529417F, wall0.getXEnd(), 0.01F);
      assertEquals(6.529417F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6.529417F, wall0.getYStart(), 0.01F);
      assertEquals(6.529417F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(2167.781F);
      assertEquals(1087.1552F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6.529417F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.529417F, wall0.getHeight(), 0.01F);
      assertEquals(2161.2517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(6.529417F, wall0.getYEnd(), 0.01F);
      assertEquals(6.529417F, wall0.getXEnd(), 0.01F);
      assertEquals(6.529417F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2167.781F, wall0.getYStart(), 0.01F);
      assertEquals(2161.2517F, wall0.getLength(), 0.01F);
      assertEquals(6.529417F, wall0.getThickness(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals(1087.1552F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(6.529417F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6.529417F, wall0.getHeight(), 0.01F);
      assertEquals(2161.2517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(6.529417F, wall0.getYEnd(), 0.01F);
      assertEquals(6.529417F, wall0.getXEnd(), 0.01F);
      assertEquals(6.529417F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2167.781F, wall0.getYStart(), 0.01F);
      assertEquals(2161.2517F, wall0.getLength(), 0.01F);
      assertEquals(6.529417F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1435.2843F, (-1580.24F), 2.0F, (-1662.766F), 1435.2843F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1662.766F), wall1.getYEnd(), 0.01F);
      assertEquals(718.64215F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1621.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getXStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getLength(), 0.01F);
      assertEquals((-1580.24F), wall1.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1662.766F), wall1.getYEnd(), 0.01F);
      assertEquals(718.64215F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1621.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getXStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getLength(), 0.01F);
      assertEquals((-1580.24F), wall1.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1621.5029F), float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(level0);
      
      float float1 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1435.2843F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(integer0);
      
      wall1.setRightSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1662.766F), wall1.getYEnd(), 0.01F);
      assertEquals(718.64215F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1621.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getXStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getLength(), 0.01F);
      assertEquals((-1580.24F), wall1.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      
      Integer integer1 = wall1.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1662.766F), wall1.getYEnd(), 0.01F);
      assertEquals(718.64215F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1621.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getXStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getLength(), 0.01F);
      assertEquals((-1580.24F), wall1.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(integer1);
      
      Wall.Property wall_Property0 = Wall.Property.valueOf("HEIGHT_AT_END");
      assertEquals(Wall.Property.HEIGHT_AT_END, wall_Property0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1621.5029F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1435.6582F, wall2.getLength(), 0.01F);
      assertEquals((-1662.766F), wall2.getYEnd(), 0.01F);
      assertEquals(1435.2843F, wall2.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall2.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1435.2843F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall2.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      Integer integer2 = new Integer(2146529384);
      assertEquals(2146529384, (int)integer2);
      assertNotNull(integer2);
      
      wall0.setLeftSideColor(integer2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2146529384, (int)wall0.getLeftSideColor());
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall((-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F));
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess((-983.1428F));
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-983.1428F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-983.1428F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-983.1428F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-983.1428F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(25.82726F, (-1.2873425F), (-1.2873425F), 25.82726F, 25.82726F, 25.82726F);
      assertEquals(25.82726F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getThickness(), 0.01F);
      assertEquals(25.82726F, wall0.getXStart(), 0.01F);
      assertEquals(38.345837F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.2873425F), wall0.getYStart(), 0.01F);
      assertEquals(38.345837F, wall0.getLength(), 0.01F);
      assertEquals(12.2699585F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.82726F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.2873425F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(25.82726F);
      assertEquals(25.82726F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1847.9723F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1847.9723F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(25.82726F, wall0.getYEnd(), 0.01F);
      assertEquals(1455.047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-25.188883F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getThickness(), 0.01F);
      assertEquals(25.82726F, wall0.getXStart(), 0.01F);
      assertEquals(38.345837F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.2873425F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.82726F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-25.188883F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXEnd(), 0.01F);
      
      Float float2 = new Float(25.82726F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(25.82726F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeightAtEnd(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(25.82726F, wall0.getYEnd(), 0.01F);
      assertEquals(1455.047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-25.188883F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getThickness(), 0.01F);
      assertEquals(25.82726F, wall0.getXStart(), 0.01F);
      assertEquals(38.345837F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.2873425F), wall0.getYStart(), 0.01F);
      assertEquals(25.82726F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(25.82726F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-25.188883F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(25.82726F, wall0.getYEnd(), 0.01F);
      assertEquals(1455.047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-25.188883F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getThickness(), 0.01F);
      assertEquals(25.82726F, wall0.getXStart(), 0.01F);
      assertEquals(38.345837F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.2873425F), wall0.getYStart(), 0.01F);
      assertEquals(25.82726F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(25.82726F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-25.188883F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      float float3 = wall0.getYArcCircleCenter();
      assertEquals((-25.188883F), float3, 0.01F);
      assertEquals(25.82726F, wall0.getYEnd(), 0.01F);
      assertEquals(1455.047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-25.188883F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getThickness(), 0.01F);
      assertEquals(25.82726F, wall0.getXStart(), 0.01F);
      assertEquals(38.345837F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.2873425F), wall0.getYStart(), 0.01F);
      assertEquals(25.82726F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(25.82726F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-25.188883F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(568);
      assertEquals(568, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall0 = new Wall(568, 568, 568, (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(569.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(569.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(568.0F, wall0.getXEnd(), 0.01F);
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setThickness(568);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(569.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(569.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(568.0F, wall0.getXEnd(), 0.01F);
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568, (int)wall0.getRightSideColor());
      assertEquals(569.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(569.0F, wall0.getLength(), 0.01F);
      assertEquals(568.0F, wall0.getXEnd(), 0.01F);
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568, (int)wall0.getRightSideColor());
      assertEquals(569.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(569.0F, wall0.getLength(), 0.01F);
      assertEquals(568.0F, wall0.getXEnd(), 0.01F);
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(568.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568, (int)wall0.getRightSideColor());
      assertEquals(569.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(569.0F, wall0.getLength(), 0.01F);
      assertEquals(568.0F, wall0.getXEnd(), 0.01F);
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall((-715.55F), (-715.55F), (-715.55F), (-715.55F), (-715.55F));
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float((-715.55F));
      assertEquals((-715.55F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = new Float((double) (-715.55F));
      assertEquals((-715.55F), float1, 0.01F);
      
      Float float2 = new Float((-2153.7636859830195));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-2153.7637F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = float2.floatValue();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals((-2153.7637F), float3, 0.01F);
      
      wall0.setHeightAtEnd((Float) (-2153.7637F));
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2153.7637F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall((-1204.738F), (-1219.381F), (-1219.381F), (-1204.738F), (-1.0F), 0.0F);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt((-629.0F), 0.0F, (-629.0F));
      assertFalse(boolean0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = new Integer((-537));
      assertEquals((-537), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((-1204.738F));
      assertEquals((-1204.738F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1204.738F), wall1.getYEnd(), 0.01F);
      assertEquals((-1212.0596F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(20.70825F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(20.70825F, wall1.getLength(), 0.01F);
      assertEquals((-1212.0596F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall1.getYStart(), 0.01F);
      assertEquals((-1219.381F), wall1.getXEnd(), 0.01F);
      assertEquals((-1204.738F), wall1.getXStart(), 0.01F);
      assertEquals((-1204.738F), wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setRightSideShininess((-537));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1204.738F), wall1.getYEnd(), 0.01F);
      assertEquals((-1212.0596F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-537.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(20.70825F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(20.70825F, wall1.getLength(), 0.01F);
      assertEquals((-1212.0596F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall1.getYStart(), 0.01F);
      assertEquals((-1219.381F), wall1.getXEnd(), 0.01F);
      assertEquals((-1204.738F), wall1.getXStart(), 0.01F);
      assertEquals((-1204.738F), wall1.getHeight(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1204.738F), wall1.getYEnd(), 0.01F);
      assertEquals((-1212.0596F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-537.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(20.70825F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(20.70825F, wall1.getLength(), 0.01F);
      assertEquals((-1212.0596F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall1.getYStart(), 0.01F);
      assertEquals((-1219.381F), wall1.getXEnd(), 0.01F);
      assertEquals((-1204.738F), wall1.getXStart(), 0.01F);
      assertEquals((-1204.738F), wall1.getHeight(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall1.setYStart((-1219.381F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1204.738F), wall1.getYEnd(), 0.01F);
      assertEquals((-1212.0596F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-537.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(20.70825F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(20.70825F, wall1.getLength(), 0.01F);
      assertEquals((-1212.0596F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall1.getYStart(), 0.01F);
      assertEquals((-1219.381F), wall1.getXEnd(), 0.01F);
      assertEquals((-1204.738F), wall1.getXStart(), 0.01F);
      assertEquals((-1204.738F), wall1.getHeight(), 0.01F);
      
      Level level0 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1204.738F), wall1.getYEnd(), 0.01F);
      assertEquals((-1212.0596F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-537.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(20.70825F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(20.70825F, wall1.getLength(), 0.01F);
      assertEquals((-1212.0596F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall1.getYStart(), 0.01F);
      assertEquals((-1219.381F), wall1.getXEnd(), 0.01F);
      assertEquals((-1204.738F), wall1.getXStart(), 0.01F);
      assertEquals((-1204.738F), wall1.getHeight(), 0.01F);
      assertNull(level0);
      
      float float1 = wall0.getRightSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float2 = wall1.getXEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1219.381F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1204.738F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1204.738F), wall1.getYEnd(), 0.01F);
      assertEquals((-1212.0596F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-537.0F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(20.70825F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(20.70825F, wall1.getLength(), 0.01F);
      assertEquals((-1212.0596F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall1.getYStart(), 0.01F);
      assertEquals((-1219.381F), wall1.getXEnd(), 0.01F);
      assertEquals((-1204.738F), wall1.getXStart(), 0.01F);
      assertEquals((-1204.738F), wall1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 2.0F, 2.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(2.0F, 3145.7F, 3145.7F, 0.0F, 0.0F, 672.431F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3145.7F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1573.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4447.2773F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(672.431F, wall1.getHeight(), 0.01F);
      assertEquals(1572.85F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4447.2773F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(float0);
      
      Integer integer0 = Integer.valueOf(1461);
      assertEquals(1461, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = Integer.toUnsignedLong((-3123));
      assertEquals(4294964173L, long0);
      
      boolean boolean0 = wall1.containsWallEndAt(0.01F, 0.0F, 1281.2289F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3145.7F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1573.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4447.2773F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(672.431F, wall1.getHeight(), 0.01F);
      assertEquals(1572.85F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4447.2773F, wall1.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Wall wall2 = new Wall(3145.7F, (-1221.0815F), 4294964173L, (-4362.621F), 0.0F, 809.5F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      wall2.setRightSideColor(integer0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      
      Float float1 = new Float((-1525.6F));
      assertEquals((-1525.6F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((-1525.6F));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1525.6F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1525.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Wall wall3 = wall2.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2.14748365E9F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(4.29496115E9F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1461, (int)wall3.getRightSideColor());
      assertEquals(3145.7F, wall3.getXStart(), 0.01F);
      assertEquals(4.29496422E9F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-1221.0815F), wall3.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall3.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-2791.8513F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(809.5F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNotNull(wall3);
      
      Wall wall4 = wall2.clone();
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2791.8513F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall4.getXStart(), 0.01F);
      assertEquals(1461, (int)wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(809.5F, wall4.getHeight(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(4.29496115E9F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(4.29496422E9F, wall4.getXEnd(), 0.01F);
      assertEquals(2.14748365E9F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getArcExtent());
      assertEquals(4.29496115E9F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4362.621F), wall4.getYEnd(), 0.01F);
      assertEquals((-1221.0815F), wall4.getYStart(), 0.01F);
      assertNotNull(wall4);
      
      boolean boolean1 = wall4.isTrapezoidal();
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2791.8513F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall4.getXStart(), 0.01F);
      assertEquals(1461, (int)wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(809.5F, wall4.getHeight(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(4.29496115E9F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(4.29496422E9F, wall4.getXEnd(), 0.01F);
      assertEquals(2.14748365E9F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getArcExtent());
      assertEquals(4.29496115E9F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4362.621F), wall4.getYEnd(), 0.01F);
      assertEquals((-1221.0815F), wall4.getYStart(), 0.01F);
      
      float float3 = wall4.getYEnd();
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertEquals((-4362.621F), float3, 0.01F);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2791.8513F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall4.getXStart(), 0.01F);
      assertEquals(1461, (int)wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(809.5F, wall4.getHeight(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(4.29496115E9F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(4.29496422E9F, wall4.getXEnd(), 0.01F);
      assertEquals(2.14748365E9F, wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getArcExtent());
      assertEquals(4.29496115E9F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4362.621F), wall4.getYEnd(), 0.01F);
      assertEquals((-1221.0815F), wall4.getYStart(), 0.01F);
      
      wall3.setRightSideShininess(4294964173L);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall4));
      assertFalse(wall3.equals((Object)wall1));
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall4);
      assertNotSame(wall3, wall1);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals(2.14748365E9F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(4.29496115E9F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1461, (int)wall3.getRightSideColor());
      assertEquals(3145.7F, wall3.getXStart(), 0.01F);
      assertEquals(4.29496422E9F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-1221.0815F), wall3.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall3.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(4.29496422E9F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2791.8513F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(809.5F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      
      wall2.setRightSideTexture((HomeTexture) null);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      
      wall2.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1221.0815F), wall2.getYStart(), 0.01F);
      assertEquals((-4362.621F), wall2.getYEnd(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getLength(), 0.01F);
      assertEquals(4.29496115E9F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.29496422E9F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2.14748365E9F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3145.7F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1461, (int)wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(809.5F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-2791.8513F), wall2.getYArcCircleCenter(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall1.setYStart((-2552.158F));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall2);
      assertEquals((-2552.158F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4049.242F, wall1.getLength(), 0.01F);
      assertEquals((-1276.079F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1573.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(672.431F, wall1.getHeight(), 0.01F);
      assertEquals(4049.242F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3145.7F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Level level0 = wall1.getLevel();
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall2);
      assertEquals((-2552.158F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(4049.242F, wall1.getLength(), 0.01F);
      assertEquals((-1276.079F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(1573.85F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(672.431F, wall1.getHeight(), 0.01F);
      assertEquals(4049.242F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3145.7F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(level0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1525.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      float float0 = 0.1F;
      Wall wall0 = new Wall((-1.0F), (-1.0F), 0.0F, (-1.0F), (-1.0F), (-1.0F));
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float1 = wall0.getHeight();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(float1);
      
      Float float2 = new Float(0.1F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = float2.equals(object0);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      float float3 = float2.floatValue();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(0.1F, float3, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.9152439F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float4 = new Float(0.1F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setHeight(float4);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.9152439F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.9152439F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0429149F, wall1.getLength(), 0.01F);
      assertEquals((-1.9152439F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean1 = wall0.containsWallEndAt((-2519.0842F), 542.33F, (-3304.741F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.9152439F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0429149F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Integer integer0 = Integer.valueOf((-2554));
      assertEquals((-2554), (int)integer0);
      assertNotNull(integer0);
      
      try { 
        Integer.valueOf("q6\"F{x`w^-*5Ly");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"q6\"F{x`w^-*5Ly\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(2465.065F, 2465.065F, 2465.065F, 2465.065F, 2465.065F, 2465.065F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(2137302015);
      assertEquals(2137302015, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals(2137302015, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      
      Integer integer1 = new Integer(4);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(4, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(integer0.equals((Object)integer1));
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals(2137302015, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall((-3279.4365F), (-349.741F), (-3279.4365F), 0.1F, (-3279.4365F), (-1.0F));
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3279.4365F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(349.841F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1985.0F));
      assertEquals((-1985.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1985.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1985.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare((-840.94745F), 636.09F);
      assertEquals((-1), int0);
      
      wall0.setArcExtent((Float) 636.09F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(636.09F, wall0.getArcExtent(), 0.01F);
      assertEquals(164265.27F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3469.415F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float2 = new Float((float) (-1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float3 = Float.valueOf((-1.0F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeightAtEnd(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(364.85446F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getArcExtent(), 0.01F);
      assertEquals((-3279.4365F), wall1.getThickness(), 0.01F);
      assertEquals((-3279.4365F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.741F), wall1.getYStart(), 0.01F);
      assertEquals((-2959.2466F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-174.8205F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(349.841F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3279.4365F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      float float4 = wall1.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2959.2466F), float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(364.85446F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getArcExtent(), 0.01F);
      assertEquals((-3279.4365F), wall1.getThickness(), 0.01F);
      assertEquals((-3279.4365F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-349.741F), wall1.getYStart(), 0.01F);
      assertEquals((-2959.2466F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-174.8205F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(349.841F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3279.4365F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(2465.5F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, (-1761.8053F), 1.0F, 0.1F, 0.0F);
      assertEquals((-1761.8053F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1761.9056F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-880.85266F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1761.9056F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals((-1761.8053F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1761.9056F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-880.85266F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1761.9056F, wall0.getLength(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-1761.8053F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1761.9056F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-880.85266F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1761.9056F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint((-1.0F), 0.0F, 0.0F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals((-1761.8053F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1761.9056F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-880.85266F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1761.9056F, wall0.getLength(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals((-1761.8053F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1761.9056F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-880.85266F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1761.9056F, wall0.getLength(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1761.8053F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1761.9056F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-880.85266F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1761.9056F, wall0.getLength(), 0.01F);
      assertNull(homeTexture0);
      
      boolean boolean2 = wall0.isAtLevel((Level) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals((-1761.8053F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1761.9056F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-880.85266F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1761.9056F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(2969);
      assertEquals(2969, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = Integer.valueOf(0);
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = Integer.valueOf((-433));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertEquals((-433), (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = Integer.valueOf(0);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      
      wall0.setLeftSideColor(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setXStart(1.0F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.1F, 0.1F, 811.14F, 1.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(float0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(integer0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("E&(", propertyChangeListener0);
      assertEquals("E&(", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("E&(", "E&(", "E&(", wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals("E&(", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.toString();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals("E&(", propertyChangeEvent0.getPropertyName());
      assertNotNull(string0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals("E&(", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("E&(", propertyChangeEvent0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals("E&(", propertyChangeListenerProxy0.getPropertyName());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setYEnd(811.14F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      float float2 = wall0.getYEnd();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(811.14F, float2, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getXEnd();
      assertEquals(1.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall1);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getYEnd();
      assertEquals(float1, float0, 0.01F);
      assertEquals(1.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getHeight(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), (-1.0F), 0.1F, (-1.0F), 0.0F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.555635F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.555635F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = new Integer(1461);
      assertEquals(1461, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall1 = new Wall(0.0F, 1.0F, (-923.87103F), 0.0F, (-491.5714F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(923.8716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-923.87103F), wall1.getXEnd(), 0.01F);
      assertEquals(923.8716F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getThickness(), 0.01F);
      assertEquals((-461.93552F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.555635F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(8.1656197E15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-923.87103F), wall1.getXEnd(), 0.01F);
      assertEquals((-7.5439796E18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      
      Float float1 = new Float((-923.87103F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-923.87103F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float((double) 0.1F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.555635F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(8.1656197E15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-923.87103F), wall1.getXEnd(), 0.01F);
      assertEquals((-7.5439796E18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-923.87103F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals((-7.5439796E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(923.8716F, wall2.getLength(), 0.01F);
      assertEquals(8.1656197E15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(923.8716F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNotNull(wall2);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      wall2.setRightSideShininess(2691.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(8.1656197E15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-923.87103F), wall1.getXEnd(), 0.01F);
      assertEquals((-7.5439796E18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-923.87103F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2691.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals((-7.5439796E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(923.8716F, wall2.getLength(), 0.01F);
      assertEquals(8.1656197E15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(923.8716F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      
      Integer integer1 = Integer.getInteger(")*");
      assertNull(integer1);
      
      Integer integer2 = new Integer(1461);
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(1461, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(1);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(1, (int)integer3);
      assertNotNull(integer3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer3.equals(object0);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(boolean0);
      
      wall0.setLeftSideColor(integer3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals((-0.45F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.555635F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.555635F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      float float3 = wall1.getLength();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(923.8716F, float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(8.1656197E15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-923.87103F), wall1.getXEnd(), 0.01F);
      assertEquals((-7.5439796E18F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(923.8716F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-491.5714F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall((-39.373F), (-39.373F), (-1.0F), (-39.373F), (-15.905408F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.373F), wall0.getYStart(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(38.373F, wall0.getLength(), 0.01F);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-15.905408F), 1532.8063F, (-1.0F), (-15.905408F), (-39.373F), 5542.02F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-39.373F), wall1.getThickness(), 0.01F);
      assertEquals(1532.8063F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-15.905408F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1548.7834F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1548.7834F, wall1.getLength(), 0.01F);
      assertEquals(758.45044F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-15.905408F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(5542.02F, wall1.getHeight(), 0.01F);
      assertEquals((-8.452703F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer((-430));
      assertEquals((-430), (int)integer0);
      assertNotNull(integer0);
      
      wall1.setRightSideColor(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals((-39.373F), wall1.getThickness(), 0.01F);
      assertEquals((-430), (int)wall1.getRightSideColor());
      assertEquals(1532.8063F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-15.905408F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1548.7834F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1548.7834F, wall1.getLength(), 0.01F);
      assertEquals(758.45044F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-15.905408F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(5542.02F, wall1.getHeight(), 0.01F);
      assertEquals((-8.452703F), wall1.getXArcCircleCenter(), 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.373F), wall0.getYStart(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(38.373F, wall0.getLength(), 0.01F);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(integer1);
      
      wall0.setRightSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.373F), wall0.getYStart(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(38.373F, wall0.getLength(), 0.01F);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.373F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.373F), wall0.getYStart(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(38.373F, wall0.getLength(), 0.01F);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(integer2);
      
      Integer integer3 = Integer.valueOf(49);
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(49, (int)integer3);
      assertNotNull(integer3);
      
      wall0.setLeftSideColor(integer3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer3.equals((Object)integer0));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.373F), wall0.getYStart(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(49, (int)wall0.getLeftSideColor());
      assertEquals(38.373F, wall0.getLength(), 0.01F);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.373F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer4 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(49, (int)integer4);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.373F), wall0.getYStart(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(49, (int)wall0.getLeftSideColor());
      assertEquals(38.373F, wall0.getLength(), 0.01F);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(integer4);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = Integer.valueOf(1461);
      assertEquals(1461, (int)integer0);
      assertNotNull(integer0);
      
      long long0 = Integer.toUnsignedLong((-3123));
      assertEquals(4294964173L, long0);
      
      boolean boolean0 = wall0.containsWallEndAt((-923.87103F), 0.0F, 0.1F);
      assertFalse(boolean0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean1 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      
      float float2 = wall0.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(428.17123F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall0.setYStart(428.17123F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(214.13562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(428.07126F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(428.17123F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(428.07126F, wall0.getLength(), 0.01F);
      
      Level level0 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(214.13562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(428.07126F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(428.17123F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(428.07126F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 458.45554F, 0.0F, 1293.1608F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1293.1608F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(458.45554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(458.45554F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(229.22777F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(458.45554F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness((-2572.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1293.1608F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2572.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(458.45554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(458.45554F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(229.22777F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(458.45554F, wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1293.1608F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2572.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(458.45554F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(458.45554F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(229.22777F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(458.45554F, wall0.getYEnd(), 0.01F);
      
      String string0 = "";
      try { 
        MockURL.URL("Super class isn't cloneable", "|,f.C%u ykM{", "Super class isn't cloneable");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: super class isn't cloneable
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(209.91742F, 209.91742F, 208.08774F, 209.91742F, 208.08774F, 914.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getThickness(), 0.01F);
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals(209.00258F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.8296814F, wall0.getLength(), 0.01F);
      assertEquals(914.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.8296814F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("VOf|Dzi?F)(Mpa(+", propertyChangeListener0);
      assertEquals("VOf|Dzi?F)(Mpa(+", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getThickness(), 0.01F);
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals(209.00258F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.8296814F, wall0.getLength(), 0.01F);
      assertEquals(914.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.8296814F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("VOf|Dzi?F)(Mpa(+", propertyChangeListenerProxy0.getPropertyName());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getThickness(), 0.01F);
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals(209.00258F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.8296814F, wall0.getLength(), 0.01F);
      assertEquals(914.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.8296814F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getThickness(), 0.01F);
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals(209.00258F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(208.08774F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.8296814F, wall0.getLength(), 0.01F);
      assertEquals(914.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.8296814F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(25.8F, 25.8F, 25.8F, 25.8F, 25.8F);
      assertEquals(25.8F, wall0.getThickness(), 0.01F);
      assertEquals(25.8F, wall0.getXStart(), 0.01F);
      assertEquals(25.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.8F, wall0.getYStart(), 0.01F);
      assertEquals(25.8F, wall0.getYEnd(), 0.01F);
      assertEquals(25.8F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(25.8F);
      assertEquals(25.8F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(25.8F, wall0.getThickness(), 0.01F);
      assertEquals(25.8F, wall0.getXStart(), 0.01F);
      assertEquals(25.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.8F, wall0.getYStart(), 0.01F);
      assertEquals(25.8F, wall0.getYEnd(), 0.01F);
      assertEquals(25.8F, wall0.getXEnd(), 0.01F);
      assertEquals(25.8F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(25.8F, wall0.getThickness(), 0.01F);
      assertEquals(25.8F, wall0.getXStart(), 0.01F);
      assertEquals(25.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.8F, wall0.getYStart(), 0.01F);
      assertEquals(25.8F, wall0.getYEnd(), 0.01F);
      assertEquals(25.8F, wall0.getXEnd(), 0.01F);
      assertEquals(25.8F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(25.8F, float1, 0.01F);
      assertEquals(25.8F, wall0.getThickness(), 0.01F);
      assertEquals(25.8F, wall0.getXStart(), 0.01F);
      assertEquals(25.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.8F, wall0.getYStart(), 0.01F);
      assertEquals(25.8F, wall0.getYEnd(), 0.01F);
      assertEquals(25.8F, wall0.getXEnd(), 0.01F);
      assertEquals(25.8F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(25.27426F, 25.27426F, 25.27426F, 25.27426F, 25.27426F);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1847.9723F);
      assertEquals(1847.9723F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall1.getYStart(), 0.01F);
      assertEquals(25.27426F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(25.27426F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(25.27426F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(25.27426F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall0.intersectsRectangle(25.27426F, 0.0F, (-2079.4F), (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float1 = wall1.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(25.27426F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall1.getYStart(), 0.01F);
      assertEquals(25.27426F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(25.27426F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(25.27426F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(25.27426F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall1.getYArcCircleCenter(), 0.01F);
      
      wall1.move(0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall1.getYStart(), 0.01F);
      assertEquals(25.27426F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(25.27426F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(25.27426F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(25.27426F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall1.getYArcCircleCenter(), 0.01F);
      
      wall1.setXStart(3826.1323F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3800.8582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(25.27426F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1925.7032F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3800.8582F, wall1.getLength(), 0.01F);
      assertEquals(25.27426F, wall1.getYEnd(), 0.01F);
      assertEquals(3826.1323F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall1.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3800.8582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(25.27426F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1925.7032F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3800.8582F, wall1.getLength(), 0.01F);
      assertEquals(25.27426F, wall1.getYEnd(), 0.01F);
      assertEquals(3826.1323F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall1.getYArcCircleCenter(), 0.01F);
      
      Level level0 = new Level("", (-2079.4F), 0.0F, 174.68489F);
      assertEquals(174.68489F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals((-2079.4F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(174.68489F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals((-2079.4F), level0.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-2079.4F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(174.68489F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("N-nc+tz}kW#U:|6o", propertyChangeListener0);
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(level0, level1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertEquals(174.68489F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals((-2079.4F), level0.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy1.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy2.getPropertyName());
      assertNotNull(propertyChangeListenerProxy2);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy2);
      assertFalse(level0.equals((Object)level1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(level0, level1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy0);
      assertEquals(174.68489F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertEquals((-2079.4F), level0.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy2.getPropertyName());
      
      Float float2 = new Float((double) 25.27426F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(25.27426F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3800.8582F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(25.27426F, wall2.getYStart(), 0.01F);
      assertEquals(25.27426F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(25.27426F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(3800.8582F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall2.getYEnd(), 0.01F);
      assertEquals(25.27426F, wall2.getXEnd(), 0.01F);
      assertEquals(3826.1323F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1925.7032F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3800.8582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(25.27426F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1925.7032F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3800.8582F, wall1.getLength(), 0.01F);
      assertEquals(25.27426F, wall1.getYEnd(), 0.01F);
      assertEquals(3826.1323F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall2);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3800.8582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.27426F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(25.27426F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1925.7032F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3800.8582F, wall1.getLength(), 0.01F);
      assertEquals(25.27426F, wall1.getYEnd(), 0.01F);
      assertEquals(3826.1323F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(25.27426F, wall1.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Wall wall3 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertEquals(25.27426F, wall0.getXEnd(), 0.01F);
      assertEquals(25.27426F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.27426F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.27426F, wall0.getYStart(), 0.01F);
      assertEquals(25.27426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(25.27426F, wall3.getYEnd(), 0.01F);
      assertEquals(25.27426F, wall3.getXEnd(), 0.01F);
      assertEquals(3800.8582F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeight());
      assertEquals(3826.1323F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(3800.8582F, wall3.getLength(), 0.01F);
      assertEquals(25.27426F, wall3.getYStart(), 0.01F);
      assertEquals(25.27426F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(25.27426F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1925.7032F, wall3.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall3);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall((-1.2873425F), 25.82726F, 25.82726F, (-923.87103F), (-923.87103F), (-2525.5156F));
      assertEquals((-449.02188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getYStart(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-923.87103F), wall0.getThickness(), 0.01F);
      assertEquals(950.08527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2525.5156F), wall0.getHeight(), 0.01F);
      assertEquals((-923.87103F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(950.08527F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer((-3683));
      assertEquals((-3683), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-449.02188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getYStart(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-923.87103F), wall0.getThickness(), 0.01F);
      assertEquals(950.08527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2525.5156F), wall0.getHeight(), 0.01F);
      assertEquals((-923.87103F), wall0.getYEnd(), 0.01F);
      assertEquals((-3683), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(950.08527F, wall0.getLength(), 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals((-3683), (int)integer1);
      assertEquals((-449.02188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getYStart(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-923.87103F), wall0.getThickness(), 0.01F);
      assertEquals(950.08527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2525.5156F), wall0.getHeight(), 0.01F);
      assertEquals((-923.87103F), wall0.getYEnd(), 0.01F);
      assertEquals((-3683), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(950.08527F, wall0.getLength(), 0.01F);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(Integer.MAX_VALUE);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(Integer.MAX_VALUE, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = wall0.getLeftSideColor();
      assertEquals((-449.02188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getYStart(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-923.87103F), wall0.getThickness(), 0.01F);
      assertEquals(950.08527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2525.5156F), wall0.getHeight(), 0.01F);
      assertEquals((-923.87103F), wall0.getYEnd(), 0.01F);
      assertEquals((-3683), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(950.08527F, wall0.getLength(), 0.01F);
      assertNull(integer3);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(integer0.equals((Object)integer2));
      assertEquals((-449.02188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getYStart(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-923.87103F), wall0.getThickness(), 0.01F);
      assertEquals(950.08527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3683), (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2525.5156F), wall0.getHeight(), 0.01F);
      assertEquals((-923.87103F), wall0.getYEnd(), 0.01F);
      assertEquals((-3683), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(950.08527F, wall0.getLength(), 0.01F);
      
      Integer integer4 = wall0.getLeftSideColor();
      assertFalse(integer4.equals((Object)integer2));
      assertEquals((-3683), (int)integer4);
      assertEquals((-449.02188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getYStart(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-923.87103F), wall0.getThickness(), 0.01F);
      assertEquals(950.08527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3683), (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2525.5156F), wall0.getHeight(), 0.01F);
      assertEquals((-923.87103F), wall0.getYEnd(), 0.01F);
      assertEquals((-3683), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(950.08527F, wall0.getLength(), 0.01F);
      assertNotNull(integer4);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-449.02188F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(12.2699585F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.82726F, wall0.getYStart(), 0.01F);
      assertEquals((-1.2873425F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-923.87103F), wall0.getThickness(), 0.01F);
      assertEquals(950.08527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3683), (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2525.5156F), wall0.getHeight(), 0.01F);
      assertEquals((-923.87103F), wall0.getYEnd(), 0.01F);
      assertEquals((-3683), (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.82726F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(950.08527F, wall0.getLength(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      Float float1 = new Float(2249.4092742304874);
      assertEquals(2249.4092F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertEquals(2249.4092F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      boolean boolean0 = Float.isFinite(1747.4474F);
      assertTrue(boolean0);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(3.5672F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(3.5672F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.move(0.1F, 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(486.6572F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(486.6572F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 2249.4092F, (-435.27707F), (-435.27707F));
      assertEquals(2249.4092F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2249.4092F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2249.4092F, level1.getElevation(), 0.01F);
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(2249.4092F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      
      Float float5 = new Float((double) 0.1F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall2.getLength(), 0.01F);
      assertEquals(483.19F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.2F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2249.4092F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(486.6572F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(483.19F, wall2.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(486.6572F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall2);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(3.5672F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(486.6572F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(floatArray0);
      assertEquals(180, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(411.4441F, (-467.2291F), 1281.2289F, 2.0F, (-141.3281F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(846.3365F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(988.2821F, wall0.getLength(), 0.01F);
      assertEquals(411.4441F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1281.2289F, wall0.getXEnd(), 0.01F);
      assertEquals(988.2821F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt(411.4441F, 1281.2289F, (-932.3314F));
      assertFalse(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(846.3365F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(988.2821F, wall0.getLength(), 0.01F);
      assertEquals(411.4441F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1281.2289F, wall0.getXEnd(), 0.01F);
      assertEquals(988.2821F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setRightSideShininess((-141.3281F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(846.3365F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(988.2821F, wall0.getLength(), 0.01F);
      assertEquals(411.4441F, wall0.getXStart(), 0.01F);
      assertEquals((-141.3281F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1281.2289F, wall0.getXEnd(), 0.01F);
      assertEquals(988.2821F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      boolean boolean1 = wall1.containsWallEndAt((-0.80668056F), (-0.80668056F), 0.1F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(846.3365F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(988.2821F, wall0.getLength(), 0.01F);
      assertEquals(411.4441F, wall0.getXStart(), 0.01F);
      assertEquals((-141.3281F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1281.2289F, wall0.getXEnd(), 0.01F);
      assertEquals(988.2821F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setXEnd(3395.57F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(3020.792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1903.5071F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3395.57F, wall0.getXEnd(), 0.01F);
      assertEquals(411.4441F, wall0.getXStart(), 0.01F);
      assertEquals((-141.3281F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3020.792F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(3020.792F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1903.5071F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3395.57F, wall0.getXEnd(), 0.01F);
      assertEquals(411.4441F, wall0.getXStart(), 0.01F);
      assertEquals((-141.3281F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(3020.792F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXStart((-1077.7252F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1158.9224F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1077.7252F), wall0.getXStart(), 0.01F);
      assertEquals(3395.57F, wall0.getXEnd(), 0.01F);
      assertEquals(4497.838F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-141.3281F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4497.838F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1158.9224F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1077.7252F), wall0.getXStart(), 0.01F);
      assertEquals(3395.57F, wall0.getXEnd(), 0.01F);
      assertEquals(4497.838F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-141.3281F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4497.838F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Level level0 = wall1.getLevel();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(level0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-141.3281F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1158.9224F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-467.2291F), wall0.getYStart(), 0.01F);
      assertEquals((-232.61455F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1077.7252F), wall0.getXStart(), 0.01F);
      assertEquals(3395.57F, wall0.getXEnd(), 0.01F);
      assertEquals(4497.838F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-141.3281F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(4497.838F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setXStart(0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float0);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 3291.342F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3291.342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      float float1 = 0.0F;
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3291.342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setYEnd(1.0F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3291.342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float2 = wall0.getYArcCircleCenter();
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.5F, float2, 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3291.342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, "$u5/?>[%+J]p", "$u5/?>[%+J]p", (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall((-386.93805F), (-386.93805F), 0.01F, (-386.93805F), (-386.93805F));
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(386.94806F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(386.94806F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(386.94806F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float((-1420.3895F));
      assertEquals((-1420.3895F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-1367.4153F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1419514.1F, wall0.getLength(), 0.01F);
      assertEquals((-1420.3895F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer(1161);
      assertEquals(1161, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1161, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-1367.4153F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1419514.1F, wall0.getLength(), 0.01F);
      assertEquals((-1420.3895F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals(1161, (int)integer1);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1161, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-1367.4153F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1419514.1F, wall0.getLength(), 0.01F);
      assertEquals((-1420.3895F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(integer1);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1161, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-1367.4153F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1419514.1F, wall0.getLength(), 0.01F);
      assertEquals((-1420.3895F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getYEnd();
      assertEquals((-386.93805F), float1, 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1161, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-1367.4153F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1419514.1F, wall0.getLength(), 0.01F);
      assertEquals((-1420.3895F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Float float2 = wall0.getArcExtent();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1420.3895F), (float)float2, 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1161, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-1367.4153F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1419514.1F, wall0.getLength(), 0.01F);
      assertEquals((-1420.3895F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float2);
      
      Float float3 = wall0.getHeightAtEnd();
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(1161, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.94806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-193.46402F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-1367.4153F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1419514.1F, wall0.getLength(), 0.01F);
      assertEquals((-1420.3895F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall((-3279.4365F), (-349.741F), (-3279.4365F), 0.1F, (-3279.4365F), (-1.0F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals(349.841F, wall0.getLength(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1985.0F));
      assertEquals((-1985.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = Float.compare((-1077.7252F), (-1077.7252F));
      assertEquals(0, int0);
      
      wall0.setArcExtent((Float) (-1077.7252F));
      assertEquals(189113.08F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-3293.3667F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-1077.7252F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(189113.08F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-3293.3667F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-1077.7252F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(189113.08F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-3293.3667F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-1077.7252F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      boolean boolean1 = wall0.containsPoint((-1.0F), (-1.0F), 3143.8F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(189113.08F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-3293.3667F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-1077.7252F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      wall0.setYStart(0.01F);
      assertEquals(0.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertEquals((-3279.4402F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.09F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(48.657963F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals((-1077.7252F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotNull(list2);
      
      Wall wall1 = new Wall((-491.5714F), (-491.5714F), (-2515.82F), (-2515.82F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(float2);
      
      wall1.move(1578.3F, (-491.5714F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float float3 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1086.7286F, float3, 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      boolean boolean1 = wall2.intersectsRectangle(593.6676F, 0.0F, 0.01F, (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      
      wall2.setThickness(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      
      int int0 = Float.floatToIntBits(2465.5F);
      assertEquals(1159337984, int0);
      
      wall1.setArcExtent((Float) 2465.5F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      
      Level level0 = wall2.getLevel();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(level0);
      
      List<Wall> list3 = Wall.clone(list2);
      assertFalse(linkedList0.contains(wall2));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list3.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list0.equals((Object)list2));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list3, list0);
      assertNotSame(list3, list1);
      assertNotSame(list3, list2);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list2, list0);
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertEquals(1, linkedList0.size());
      assertFalse(list3.isEmpty());
      assertEquals(1, list3.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertNotNull(list3);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertEquals((-1503.6958F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2862.72F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getHeight());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1503.6958F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall3.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall3.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall3.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall3.getXStart(), 0.01F);
      assertEquals(2862.72F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(wall3);
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      
      boolean boolean2 = wall2.isTrapezoidal();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2249.4092742304874);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertNull(wall0.getRightSideColor());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getRightSideColor());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall1.move(0.1F, 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, (-435.27707F), (-435.27707F));
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      
      float float5 = level1.getElevation();
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(1434.928F, float5, 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2249.4092F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall2.getYEnd(), 0.01F);
      assertEquals(7799.948F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(479.7228F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(483.19F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.2F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall2);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(180, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 2.0F, 2.0F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint(0.0F, 0.0F, 1.0F);
      assertTrue(boolean0);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      float float0 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getYStart();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setLeftSideShininess(2.0F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(1.0F, 0.0F, (-3313.15F));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall((-1789.43F), (-1.0F), (-1789.43F), 0.0F, (-567.0F), 1269.32F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1269.32F, wall1.getHeight(), 0.01F);
      assertEquals((-1789.43F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1789.43F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-567.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1789.43F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1269.32F, wall1.getHeight(), 0.01F);
      assertEquals((-1789.43F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1789.43F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-567.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1789.43F), wall1.getXStart(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      
      float float3 = wall0.getLeftSideShininess();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(2.0F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertFalse(list2.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list2);
      
      List<Wall> list3 = Wall.clone(list2);
      assertFalse(list2.contains(wall0));
      assertFalse(list3.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertNotSame(list2, list3);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list0, list3);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list3);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list3);
      
      List<Wall> list4 = Wall.clone(list3);
      assertFalse(list2.contains(wall0));
      assertFalse(list3.contains(wall0));
      assertFalse(list4.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list3.equals((Object)list1));
      assertTrue(list3.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list4.equals((Object)list0));
      assertTrue(list4.equals((Object)list2));
      assertTrue(list4.equals((Object)list1));
      assertTrue(list4.equals((Object)list3));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list3));
      assertNotSame(list2, list3);
      assertNotSame(list2, list4);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotSame(list3, list4);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list3, list0);
      assertNotSame(list4, list3);
      assertNotSame(list4, list1);
      assertNotSame(list4, list0);
      assertNotSame(list4, list2);
      assertNotSame(list0, list3);
      assertNotSame(list0, list4);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list3);
      assertNotSame(list1, list4);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list4);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.0F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float0);
      
      Integer integer0 = new Integer(1461);
      assertEquals(1461, (int)integer0);
      assertNotNull(integer0);
      
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(textureImage0).getHeight();
      doReturn((Content) null).when(textureImage0).getImage();
      doReturn((String) null).when(textureImage0).getName();
      doReturn(0.0F).when(textureImage0).getWidth();
      HomeTexture homeTexture0 = new HomeTexture(textureImage0);
      assertNull(homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      
      String string0 = homeTexture0.getName();
      assertNull(homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNull(string0);
      
      wall0.setPattern(homeTexture0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-923.87103F), 0.0F, 0.1F);
      assertFalse(boolean0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLevel((Level) null);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeight(float0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall((-12.552847F), 0.01F, (-1.0F), 568.0F, 568.0F, 595.7849F);
      assertEquals(284.005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(595.7849F, wall0.getHeight(), 0.01F);
      assertEquals(568.1075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.552847F), wall0.getXStart(), 0.01F);
      assertEquals((-6.7764235F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(568.1075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2794.4522950807586);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2794.4524F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(278.1954F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(595.7849F, wall0.getHeight(), 0.01F);
      assertEquals(1125795.2F, wall0.getLength(), 0.01F);
      assertEquals(278.84973F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2794.4524F, wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.552847F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(568.1075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(595.7849F, wall0.getHeight(), 0.01F);
      assertEquals(568.1075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertEquals(9.4336156E16F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.552847F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(568.1075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.6379902E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Float float2 = new Float((double) (-12.552847F));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-12.552847F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = wall0.getLength();
      assertEquals(568.1075F, float3, 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(595.7849F, wall0.getHeight(), 0.01F);
      assertEquals(568.1075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertEquals(9.4336156E16F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.552847F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(568.1075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.6379902E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      float float4 = wall0.getYEnd();
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(568.0F, float4, 0.01F);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(595.7849F, wall0.getHeight(), 0.01F);
      assertEquals(568.1075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertEquals(9.4336156E16F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.552847F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(568.1075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.6379902E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(595.7849F, wall0.getHeight(), 0.01F);
      assertEquals(568.1075F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertEquals(9.4336156E16F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-12.552847F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(568.1075F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4.6379902E18F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2249.4092742304874);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      
      wall1.move(0.1F, 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      
      float float5 = wall1.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(483.19F, float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(7799.948F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(479.7228F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.15F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall2.getYEnd(), 0.01F);
      assertEquals(2249.4092F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(483.19F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNotNull(wall2);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(180, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = Float.floatToIntBits(2465.5F);
      assertEquals(1159337984, int0);
      
      wall0.setHeightAtEnd((Float) 2465.5F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2465.5F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(2465.5F, 0.0F, 0.0F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2465.5F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2465.5F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1504.77F), (-349.741F), 1454.0F, 0.0F, (-1504.77F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertEquals((-174.8705F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-25.38501F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1504.77F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1504.77F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2979.369F, wall1.getLength(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2979.369F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Float float0 = new Float((-1343.2828F));
      assertEquals((-1343.2828F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-1343.2828F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      
      Level level0 = new Level("", 0.0F, (-349.741F), 1454.0F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-349.741F), level0.getFloorThickness(), 0.01F);
      assertEquals(1454.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      Level level1 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-1343.2828F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(level1);
      
      Level level2 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-1343.2828F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(level2);
      
      Float float1 = wall0.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1343.2828F), (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-1343.2828F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNotNull(float1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-1343.2828F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertFalse(list2.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      
      Wall wall1 = new Wall((-491.5714F), (-491.5714F), (-2515.82F), (-2515.82F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(float2);
      
      wall1.setWallAtEnd(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      wall1.setXStart(2475.8389F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-19.9906F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5386.487F, wall1.getLength(), 0.01F);
      assertEquals(5386.487F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2475.8389F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("hKk2IKt]vWZn`<;x]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.hKk2IKt]vWZn`<;x]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-346.6374F), 209.91742F, (-3278.3047F), 209.91742F, (-3278.3047F), 209.91742F);
      assertEquals((-3278.3047F), wall0.getThickness(), 0.01F);
      assertEquals(2931.6672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3278.3047F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(209.91742F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1812.4711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(2931.6672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals((-346.6374F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-3278.3047F), wall0.getThickness(), 0.01F);
      assertEquals(2931.6672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3278.3047F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(209.91742F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1812.4711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(2931.6672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals((-346.6374F), wall0.getXStart(), 0.01F);
      assertNull(wall1);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals((-3278.3047F), wall0.getThickness(), 0.01F);
      assertEquals(2931.6672F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(209.91742F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3278.3047F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(209.91742F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1812.4711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(209.91742F, wall0.getYEnd(), 0.01F);
      assertEquals(2931.6672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(209.91742F, wall0.getYStart(), 0.01F);
      assertEquals((-346.6374F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2259.405893500603);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2259.406F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2259.406F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2259.406F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.1F, 0.0F, 0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      wall1.move(0.1F, 446.01236F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(446.11237F, wall1.getYEnd(), 0.01F);
      assertEquals(446.11237F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(446.11237F, wall1.getYStart(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(446.11237F, wall1.getYEnd(), 0.01F);
      assertEquals(446.11237F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(446.11237F, wall1.getYStart(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.2F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(446.11237F, wall1.getYEnd(), 0.01F);
      assertEquals(446.11237F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(446.11237F, wall1.getYStart(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.2F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.2F, wall2.getXEnd(), 0.01F);
      assertEquals(446.11237F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(446.11237F, wall2.getYStart(), 0.01F);
      assertEquals(2259.406F, wall2.getArcExtent(), 0.01F);
      assertEquals(446.11237F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.2F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.2F, wall2.getXStart(), 0.01F);
      assertNotNull(wall2);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("RIGHT_SIDE_COLOR", (Content) null, 0.1F, 1701.9586F, true);
      assertEquals(1701.9586F, catalogTexture0.getHeight(), 0.01F);
      assertEquals("RIGHT_SIDE_COLOR", catalogTexture0.getName());
      assertTrue(catalogTexture0.isModifiable());
      assertEquals(0.1F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertNotNull(catalogTexture0);
      
      wall1.move(0.1F, 2259.406F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.3F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2705.5183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(2705.5183F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2705.5183F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean2 = wall2.containsPoint(1701.9586F, (-1586.491F), (-435.27707F));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.3F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2705.5183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(2705.5183F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2705.5183F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.2F, wall2.getXEnd(), 0.01F);
      assertEquals(446.11237F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(446.11237F, wall2.getYStart(), 0.01F);
      assertEquals(2259.406F, wall2.getArcExtent(), 0.01F);
      assertEquals(446.11237F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.2F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.2F, wall2.getXStart(), 0.01F);
      
      wall2.setYStart(2259.406F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2259.406F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.3F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.3F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2259.406F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.3F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2705.5183F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(2705.5183F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2705.5183F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(2259.406F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.2F, wall2.getXEnd(), 0.01F);
      assertEquals(446.11237F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2144548.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(2259.406F, wall2.getArcExtent(), 0.01F);
      assertEquals(1352.7592F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1813.2937F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-280.6998F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.2F, wall2.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(568, 568, (-386.93805F), 568, (-3632.0F), (-386.93805F));
      assertEquals(954.93805F, wall0.getLength(), 0.01F);
      assertEquals((-386.93805F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertEquals(954.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-386.93805F), wall0.getXEnd(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3632.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(90.530975F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(954.93805F, wall0.getLength(), 0.01F);
      assertEquals((-386.93805F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertEquals(954.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-386.93805F), wall0.getXEnd(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3632.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(90.530975F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getArcExtent();
      assertEquals(954.93805F, wall0.getLength(), 0.01F);
      assertEquals((-386.93805F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertEquals(954.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-386.93805F), wall0.getXEnd(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-3632.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(90.530975F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(568.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      
      Wall wall1 = new Wall((-491.5714F), (-491.5714F), (-2515.82F), (-2515.82F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(float2);
      
      wall1.move(1578.3F, (-491.5714F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      float float3 = wall1.getXStart();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1086.7286F, float3, 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean1 = wall2.intersectsRectangle(593.6676F, 0.0F, 0.01F, (-1.0F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      wall2.setThickness((-22.700672F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.700672F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall2);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.700672F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      int int0 = Float.floatToIntBits(2465.5F);
      assertEquals(1159337984, int0);
      
      wall1.setArcExtent((Float) 2465.5F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      
      Level level0 = wall2.getLevel();
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.700672F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(level0);
      
      List<Wall> list3 = Wall.clone(list2);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list3.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertFalse(list3.equals((Object)list0));
      assertFalse(list3.equals((Object)list2));
      assertFalse(list3.equals((Object)list1));
      assertFalse(list0.equals((Object)list2));
      assertFalse(list0.equals((Object)list1));
      assertFalse(list1.equals((Object)list0));
      assertFalse(list1.equals((Object)list2));
      assertFalse(list2.equals((Object)list0));
      assertFalse(list2.equals((Object)list1));
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotSame(list3, list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list3);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list3);
      assertNotSame(list1, list2);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list3);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list3.size());
      assertFalse(list3.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list3);
      
      Wall wall3 = wall2.clone();
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(2862.72F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2862.72F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-491.5714F), wall3.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2515.82F), wall3.getXEnd(), 0.01F);
      assertEquals((-22.700672F), wall3.getThickness(), 0.01F);
      assertEquals((-1503.6958F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-491.5714F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1503.6958F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.700672F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall3);
      
      wall2.setHeight((Float) null);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.700672F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      boolean boolean2 = wall2.isTrapezoidal();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(boolean2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-2336.4316F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724111.2F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(415.76868F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2465.5F, wall1.getArcExtent(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.700672F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall((-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      long long0 = Integer.toUnsignedLong(3);
      assertEquals(3L, long0);
      
      Wall wall1 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer1 = new Integer((-699));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-699), (int)integer1);
      assertNotNull(integer1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall2.getYEnd(), 0.01F);
      assertEquals((-390.4142F), wall2.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-390.4142F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-390.4142F), wall2.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals((-390.4142F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(wall2);
      
      Integer integer2 = new Integer(416);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(416, (int)integer2);
      assertNotNull(integer2);
      
      int int0 = Integer.divideUnsigned(980, (-1885));
      assertEquals(0, int0);
      
      int int1 = Integer.divideUnsigned(416, 2199);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      wall2.setLeftSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(416, (int)wall0.getLeftSideColor());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall2.getYEnd(), 0.01F);
      assertEquals((-390.4142F), wall2.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-390.4142F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-390.4142F), wall2.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(416, (int)wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals((-390.4142F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(2465.065F, 2465.065F, 2465.065F, 2465.065F, 2465.065F, 2465.065F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1504.77F), (-349.741F), 1454.0F, 0.0F, (-1504.77F));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2979.369F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-25.38501F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2979.369F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1504.77F), wall1.getYStart(), 0.01F);
      assertNotNull(wall1);
      
      Float float0 = new Float((-349.741F));
      assertEquals((-349.741F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-123.68451F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall1.getArcExtent(), 0.01F);
      assertEquals(597677.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1006.4734F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2979.369F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1504.77F), wall1.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-123.68451F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall1.getArcExtent(), 0.01F);
      assertEquals(597677.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1006.4734F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2979.369F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1504.77F), wall1.getYStart(), 0.01F);
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 0.0F, 709.8F, 709.8F);
      assertEquals(709.8F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(709.8F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      wall0.setLeftSideShininess(1434.928F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1434.928F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(709.8F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(709.8F, level0.getHeight(), 0.01F);
      assertEquals(709.8F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(709.8F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("xbvnA", propertyChangeListener0);
      assertEquals("xbvnA", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("xbvnA", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      level1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertEquals(709.8F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(709.8F, level0.getHeight(), 0.01F);
      assertEquals(709.8F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(709.8F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("xbvnA", propertyChangeListenerProxy0.getPropertyName());
      
      float float1 = level1.getElevation();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(709.8F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(709.8F, level0.getHeight(), 0.01F);
      assertEquals(709.8F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(709.8F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      
      float float2 = level1.getHeight();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(709.8F, float2, 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(709.8F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(709.8F, level0.getHeight(), 0.01F);
      assertEquals(709.8F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(709.8F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      
      wall0.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1434.928F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-349.741F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      float float3 = wall1.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(597677.2F, float3, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1434.928F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-349.741F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals((-123.68451F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-349.741F), wall1.getArcExtent(), 0.01F);
      assertEquals(597677.2F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1006.4734F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2979.369F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1504.77F), wall1.getYStart(), 0.01F);
      
      Level level2 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1434.928F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-349.741F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(level2);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Level level0 = new Level("", 0.0F, 0.0F, 0.0F);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), (-1.0F));
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = Integer.valueOf(1461);
      assertEquals(1461, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = wall0.containsWallEndAt((-923.87103F), 0.0F, 0.1F);
      assertFalse(boolean0);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean1 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      
      float float2 = wall0.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess(428.17123F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall0.setYStart(428.17123F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(214.13562F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(428.17123F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.07126F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(428.07126F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Level level0 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(214.13562F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(428.17123F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.07126F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(428.07126F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(level0);
      
      Float float3 = wall1.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(214.13562F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(428.17123F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(428.17123F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(428.07126F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(428.07126F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall(2465.065F, 2465.065F, 2465.065F, 2465.065F, 2465.065F, 2465.065F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("$PNr4nl:@IrFnhN[vg", propertyChangeListener0);
      assertEquals("$PNr4nl:@IrFnhN[vg", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals("$PNr4nl:@IrFnhN[vg", propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = new Float(1.221674024554909);
      assertEquals(1.221674F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2465.065F, wall0.getHeight(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.221674F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-39.373F), 3143.8F, (-1.0F), (-39.373F), (-15.905408F));
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-20.1865F), float0, 0.01F);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-39.373F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-20.1865F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3143.8F, wall1.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals((-39.373F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall1.setRightSideShininess((-15.905408F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.905408F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-39.373F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-20.1865F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3143.8F, wall1.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals((-39.373F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float1 = wall1.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.905408F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-39.373F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-20.1865F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3143.8F, wall1.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals((-39.373F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(float1);
      
      Integer integer0 = Integer.getInteger("com.eteks.sweethome3d.tools.ResourceURLContent");
      assertNull(integer0);
      
      wall1.setLeftSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.905408F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-39.373F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-20.1865F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3143.8F, wall1.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals((-39.373F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2);
      
      float float2 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float0, 0.01F);
      assertEquals((-20.1865F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(512.1373F, 512.1373F, 512.1373F, 512.1373F, 512.1373F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(512.1373F);
      assertEquals(512.1373F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = wall0.containsWallEndAt(512.1373F, 512.1373F, 512.1373F);
      assertTrue(boolean0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(512.1373F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall(1586.0F, 1586.0F, 1102.0F, (-1.0F), 0.1F, 1102.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1344.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1586.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.0F, wall0.getXEnd(), 0.01F);
      assertEquals(792.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1586.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1344.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1586.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.0F, wall0.getXEnd(), 0.01F);
      assertEquals(792.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1586.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1102.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1586.0F, wall1.getXStart(), 0.01F);
      assertEquals(1586.0F, wall1.getYStart(), 0.01F);
      assertEquals(1102.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1659.164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1344.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(792.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1659.164F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(1344.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1586.0F, wall0.getYStart(), 0.01F);
      assertEquals(1102.0F, wall0.getXEnd(), 0.01F);
      assertEquals(792.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1586.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      wall0.move(1461.0F, 1461.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertEquals(2253.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(2805.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(2563.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3047.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3047.0F, wall0.getYStart(), 0.01F);
      assertEquals(1460.0F, wall0.getYEnd(), 0.01F);
      
      Level level0 = new Level("LEVEL", 0.1F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("LEVEL", level0.getName());
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      level0.setHeight(1586.0F);
      assertEquals(1586.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("LEVEL", level0.getName());
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      
      boolean boolean0 = wall1.isAtLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertEquals(2253.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(2805.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(2563.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3047.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3047.0F, wall0.getYStart(), 0.01F);
      assertEquals(1460.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1102.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1586.0F, wall1.getXStart(), 0.01F);
      assertEquals(1586.0F, wall1.getYStart(), 0.01F);
      assertEquals(1102.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1659.164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1344.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(792.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1659.164F, wall1.getLength(), 0.01F);
      assertEquals(1586.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("LEVEL", level0.getName());
      assertEquals(0.1F, level0.getElevation(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertEquals(2253.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(2805.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(2563.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3047.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3047.0F, wall0.getYStart(), 0.01F);
      assertEquals(1460.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1102.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1586.0F, wall1.getXStart(), 0.01F);
      assertEquals(1586.0F, wall1.getYStart(), 0.01F);
      assertEquals(1102.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1659.164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1344.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(792.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1659.164F, wall1.getLength(), 0.01F);
      
      Float float1 = wall1.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertEquals(2253.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(2805.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(2563.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3047.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3047.0F, wall0.getYStart(), 0.01F);
      assertEquals(1460.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1102.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(1586.0F, wall1.getXStart(), 0.01F);
      assertEquals(1586.0F, wall1.getYStart(), 0.01F);
      assertEquals(1102.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1659.164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeightAtEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1344.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(792.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1659.164F, wall1.getLength(), 0.01F);
      assertNull(float1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("PATTERN", temporaryURLContent0, 0.1F, (-1.0F));
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("PATTERN", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.1F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("PATTERN", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.1F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("PATTERN", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.1F, homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      
      wall0.setLeftSideTexture(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1659.164F, wall0.getLength(), 0.01F);
      assertEquals(2253.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1102.0F, wall0.getHeight(), 0.01F);
      assertEquals(2805.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(2563.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3047.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1659.164F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3047.0F, wall0.getYStart(), 0.01F);
      assertEquals(1460.0F, wall0.getYEnd(), 0.01F);
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("PATTERN", catalogTexture0.getName());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.1F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("PATTERN", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.1F, homeTexture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall((-346.6374F), (-0.7993662F), (-3278.3047F), (-0.7993662F), (-3278.3047F), (-0.7993662F));
      assertEquals((-0.7993662F), wall0.getYStart(), 0.01F);
      assertEquals((-3278.3047F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.7993662F), wall0.getYEnd(), 0.01F);
      assertEquals((-1812.4711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2931.6672F, wall0.getLength(), 0.01F);
      assertEquals((-0.7993662F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-0.7993662F), wall0.getHeight(), 0.01F);
      assertEquals((-346.6374F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3278.3047F), wall0.getThickness(), 0.01F);
      assertEquals(2931.6672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setArcExtent((Float) (-0.7993662F));
      assertEquals((-0.7993662F), wall0.getYStart(), 0.01F);
      assertEquals((-3278.3047F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3469.2888F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.7993662F), wall0.getYEnd(), 0.01F);
      assertEquals((-1812.4711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7993662F), wall0.getHeight(), 0.01F);
      assertEquals((-0.7993662F), wall0.getArcExtent(), 0.01F);
      assertEquals((-346.6374F), wall0.getXStart(), 0.01F);
      assertEquals(3011.201F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3278.3047F), wall0.getThickness(), 0.01F);
      assertEquals(2931.6672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-0.7993662F), wall0.getYStart(), 0.01F);
      assertEquals((-3278.3047F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3469.2888F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.7993662F), wall0.getYEnd(), 0.01F);
      assertEquals((-1812.4711F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7993662F), wall0.getHeight(), 0.01F);
      assertEquals((-0.7993662F), wall0.getArcExtent(), 0.01F);
      assertEquals((-346.6374F), wall0.getXStart(), 0.01F);
      assertEquals(3011.201F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3278.3047F), wall0.getThickness(), 0.01F);
      assertEquals(2931.6672F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(86, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Wall wall0 = new Wall((-345.72F), (-345.72F), (-345.72F), (-345.72F), (-345.72F));
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals((-345.72F), wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertNotNull(wall0);
          
          float[][] floatArray0 = wall0.getPoints();
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals((-345.72F), wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          assertNotNull(floatArray0);
          assertEquals(4, floatArray0.length);
          
          float float0 = wall0.getRightSideShininess();
          assertEquals(0.0F, float0, 0.01F);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals((-345.72F), wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          wall0.setRightSideTexture((HomeTexture) null);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals((-345.72F), wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          wall0.setThickness(0.0F);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          float float1 = wall0.getXStart();
          assertNotEquals(float1, float0, 0.01F);
          assertEquals((-345.72F), float1, 0.01F);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          boolean boolean0 = wall0.containsPoint(0.0F, (-345.72F), 0.0F);
          assertFalse(boolean0);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
          boolean boolean1 = wall0.isAtLevel(level0);
          assertTrue(boolean1 == boolean0);
          assertFalse(boolean1);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertNull(wall0.getHeightAtEnd());
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          Float float2 = new Float((double) (-345.72F));
          assertEquals((float)float2, (float)float1, 0.01F);
          assertNotEquals((float)float2, (float)float0, 0.01F);
          assertEquals((-345.72F), (float)float2, 0.01F);
          assertNotNull(float2);
          
          float float3 = Float.sum((-345.72F), 2538.9F);
          assertNotEquals(float3, float0, 0.01F);
          assertNotEquals(float3, float1, 0.01F);
          assertEquals(2193.18F, float3, 0.01F);
          
          wall0.setHeightAtEnd(float2);
          assertNotEquals((float)float2, (float)float3, 0.01F);
          assertEquals((float)float2, (float)float1, 0.01F);
          assertNotEquals((float)float2, (float)float0, 0.01F);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals((-345.72F), wall0.getHeightAtEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          float float4 = wall0.getYArcCircleCenter();
          assertNotEquals(float4, float3, 0.01F);
          assertEquals(float4, float1, 0.01F);
          assertNotEquals(float4, float0, 0.01F);
          assertEquals((-345.72F), float4, 0.01F);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals((-345.72F), wall0.getHeightAtEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          boolean boolean2 = wall0.isTrapezoidal();
          assertTrue(boolean2 == boolean0);
          assertTrue(boolean2 == boolean1);
          assertFalse(boolean2);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals((-345.72F), wall0.getHeightAtEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
          
          float float5 = wall0.getYStart();
          assertNotEquals(float5, float3, 0.01F);
          assertEquals(float5, float4, 0.01F);
          assertNotEquals(float5, float0, 0.01F);
          assertEquals(float5, float1, 0.01F);
          assertEquals((-345.72F), float5, 0.01F);
          assertEquals((-345.72F), wall0.getXArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
          assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
          assertNull(wall0.getRightSideColor());
          assertNull(wall0.getArcExtent());
          assertEquals(0.0F, wall0.getThickness(), 0.01F);
          assertEquals((-345.72F), wall0.getHeightAtEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYStart(), 0.01F);
          assertEquals((-345.72F), wall0.getXStart(), 0.01F);
          assertFalse(wall0.isTrapezoidal());
          assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
          assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
          assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
          assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
          assertNull(wall0.getHeight());
          assertEquals(0.0F, wall0.getLength(), 0.01F);
          assertNull(wall0.getLeftSideColor());
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Integer integer0 = new Integer(568);
      assertEquals(568, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall0 = new Wall(568, (-1.0F), (-1.0F), 568, 568);
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(804.6875F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(283.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(804.6875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(804.6875F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(283.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(804.6875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(568, (int)wall0.getRightSideColor());
      
      wall0.setRightSideColor(integer0);
      assertEquals(568.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(283.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(568.0F, wall0.getThickness(), 0.01F);
      assertEquals(804.6875F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(283.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(568.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(804.6875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(568, (int)wall0.getRightSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Wall wall0 = new Wall((-1077.0F), 3988.575F, 2.0F, 1301.5372F, (-433.7F), 1301.5372F);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-537.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2895.585F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2895.585F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1077.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-537.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2895.585F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2895.585F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1077.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1077.0F), wall1.getXStart(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2895.585F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-537.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall1.getThickness(), 0.01F);
      assertEquals(2895.585F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean0);
      
      wall1.setXStart(1301.5372F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-537.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2895.585F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2895.585F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1077.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1301.5372F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2984.7896F, wall1.getLength(), 0.01F);
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall1.getThickness(), 0.01F);
      assertEquals(651.7686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(2984.7896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      
      Level level0 = new Level((String) null, 2.0F, 0.1F, 1233.9F);
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals(1233.9F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertNotNull(level0);
      
      wall1.setThickness((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-537.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2895.585F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2895.585F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1077.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1301.5372F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2984.7896F, wall1.getLength(), 0.01F);
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(651.7686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(2984.7896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      
      wall1.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-537.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2895.585F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2895.585F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1077.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1301.5372F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2984.7896F, wall1.getLength(), 0.01F);
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(651.7686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(2984.7896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals(1233.9F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setXStart(2495.8528F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(3665.9888F, wall0.getLength(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(3665.9888F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1248.9264F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2495.8528F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = wall1.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(3665.9888F, wall0.getLength(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(3665.9888F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1248.9264F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2495.8528F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1301.5372F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2984.7896F, wall1.getLength(), 0.01F);
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(651.7686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(2984.7896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(float0);
      
      Level level1 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertSame(level1, level0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(3665.9888F, wall0.getLength(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(3665.9888F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1248.9264F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2495.8528F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1301.5372F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2984.7896F, wall1.getLength(), 0.01F);
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(651.7686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(2984.7896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertNull(level1.getName());
      assertEquals(2.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1233.9F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      Float float1 = wall1.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(3665.9888F, wall0.getLength(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(3665.9888F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1248.9264F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2495.8528F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1301.5372F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2984.7896F, wall1.getLength(), 0.01F);
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(651.7686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(2984.7896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(float1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(3665.9888F, wall0.getLength(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(3665.9888F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1248.9264F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2495.8528F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Random.setNextRandom(235);
      wall1.setLeftSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3988.575F, wall0.getYStart(), 0.01F);
      assertEquals(3665.9888F, wall0.getLength(), 0.01F);
      assertEquals(1301.5372F, wall0.getYEnd(), 0.01F);
      assertEquals((-433.7F), wall0.getThickness(), 0.01F);
      assertEquals(3665.9888F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1248.9264F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2495.8528F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2645.0562F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1301.5372F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1301.5372F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2645.0562F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1301.5372F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2984.7896F, wall1.getLength(), 0.01F);
      assertEquals(1301.5372F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(651.7686F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3988.575F, wall1.getYStart(), 0.01F);
      assertEquals(2984.7896F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLevel((Level) null);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-390.4142F), (-390.4142F), 0.0F, (-390.4142F), (-390.4142F));
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float1 = new Float(0.10000000149011612);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(2969);
      assertEquals(2969, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = new Integer(0);
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(0);
      assertTrue(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = new Integer(0);
      assertTrue(integer4.equals((Object)integer3));
      assertTrue(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      Integer integer5 = Integer.valueOf((-433));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals((-433), (int)integer5);
      assertNotNull(integer5);
      
      Integer integer6 = Integer.valueOf(0);
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals(0, (int)integer6);
      assertNotNull(integer6);
      
      wall0.setLeftSideColor(integer6);
      assertTrue(integer6.equals((Object)integer2));
      assertTrue(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      Integer integer7 = wall0.getLeftSideColor();
      assertTrue(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)integer2));
      assertEquals(0, (int)integer7);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(integer7);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall((-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F));
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getYEnd();
      assertEquals((-390.4142F), float0, 0.01F);
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall((-213.60005F), (-213.60005F), (-213.60005F), (-213.60005F), (-213.60005F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-213.60005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-213.60005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-213.60005F), wall0.getYStart(), 0.01F);
      assertEquals((-213.60005F), wall0.getThickness(), 0.01F);
      assertEquals((-213.60005F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-213.60005F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-213.60005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-213.60005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-213.60005F), wall0.getYStart(), 0.01F);
      assertEquals((-213.60005F), wall0.getThickness(), 0.01F);
      assertEquals((-213.60005F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-213.60005F), wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-213.60005F), (-213.60005F), (-213.60005F));
      assertFalse(boolean0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-213.60005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-213.60005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-213.60005F), wall0.getYStart(), 0.01F);
      assertEquals((-213.60005F), wall0.getThickness(), 0.01F);
      assertEquals((-213.60005F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-213.60005F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-213.60005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-213.60005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-213.60005F), wall0.getYStart(), 0.01F);
      assertEquals((-213.60005F), wall0.getThickness(), 0.01F);
      assertEquals((-213.60005F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-213.60005F), wall0.getYEnd(), 0.01F);
      assertEquals((-213.60005F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall1.getXStart(), 0.01F);
      assertEquals((-213.60005F), wall1.getYStart(), 0.01F);
      assertEquals((-213.60005F), wall1.getThickness(), 0.01F);
      assertEquals((-213.60005F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-213.60005F), wall1.getYEnd(), 0.01F);
      assertEquals((-213.60005F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNotNull(wall1);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-213.60005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-213.60005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-213.60005F), wall0.getYStart(), 0.01F);
      assertEquals((-213.60005F), wall0.getThickness(), 0.01F);
      assertEquals((-213.60005F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-213.60005F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), 462.22F, (-1.0F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(462.22F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-1644.0F), (-2313.1F), (-1.0F));
      assertFalse(boolean0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(462.22F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(462.22F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(level0);
      
      wall0.setLevel((Level) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(462.22F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.1F, (-1.0F), 0.0F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(462.22F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(462.22F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(integer0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(462.22F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      
      int int0 = Float.compare((-345.72F), 3129.1565F);
      assertEquals((-1), int0);
      
      Float float0 = new Float((-1919.49F));
      assertEquals((-1919.49F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-347.71844F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(331825.22F, wall0.getLength(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-347.71844F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(331825.22F, wall0.getLength(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, (-1919.49F), (-1.0F));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-347.71844F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(331825.22F, wall0.getLength(), 0.01F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYStart(0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(488.9219F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-174.85844F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(469271.72F, wall0.getLength(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-174.85844F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Level", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall0, "3-/9NO:!J|d[.", "3-/9NO:!J|d[.", wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals("3-/9NO:!J|d[.", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("3-/9NO:!J|d[.", propertyChangeEvent0.getPropertyName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent("com.eteks.sweethome3d.model.Level", "com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0, object0);
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeEvent1.getPropertyName());
      assertNotNull(propertyChangeEvent1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeEvent1.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeEvent1.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeEvent1.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Level", propertyChangeListenerProxy0.getPropertyName());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setThickness(1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(1.0F, (-2285.562F), 5964.2383F, 3398.0F, 3753.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(8237.905F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5964.2383F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3753.0F, wall1.getThickness(), 0.01F);
      assertEquals(8237.905F, wall1.getLength(), 0.01F);
      assertEquals((-2285.562F), wall1.getYStart(), 0.01F);
      assertEquals(2982.6191F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(556.219F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3398.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(8237.905F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5964.2383F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3753.0F, wall1.getThickness(), 0.01F);
      assertEquals(8237.905F, wall1.getLength(), 0.01F);
      assertEquals((-2285.562F), wall1.getYStart(), 0.01F);
      assertEquals(2982.6191F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(556.219F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3398.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2465.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2465.5F, wall1.getThickness(), 0.01F);
      assertEquals(2465.5F, wall1.getYStart(), 0.01F);
      assertEquals(2465.5F, wall1.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2465.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2465.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2465.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2465.5F, wall1.getThickness(), 0.01F);
      assertEquals(2465.5F, wall1.getYStart(), 0.01F);
      assertEquals(2465.5F, wall1.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2465.5F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Float float0 = new Float((double) 2465.5F);
      assertEquals(2465.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(2465.5F, wall2.getYStart(), 0.01F);
      assertEquals(2465.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(2465.5F, wall2.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall2.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotNull(wall2);
      
      boolean boolean0 = wall2.containsPoint(2465.5F, 2465.5F, 733.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertTrue(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(2465.5F, wall2.getYStart(), 0.01F);
      assertEquals(2465.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2465.5F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(2465.5F, wall2.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall2.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      
      Random.setNextRandom(780);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float1 = wall0.getHeight();
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(2249.4092742304874);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      float float3 = float2.floatValue();
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(2249.4092F, float3, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      
      Float float4 = new Float(0.1F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(0.1F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setHeight(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.9171999F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(86153.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, (-22.778427F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.9171999F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(86153.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall1.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, (-0.3506309F), (-0.3506309F), (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.9171999F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(86153.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall1.getXArcCircleCenter(), 0.01F);
      
      float float5 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(0.1F, float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3.9171999F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(86153.4F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.move((-1.0F), 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(1.1045421F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.089413F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(482.09F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.17282F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(86153.875F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(85799.59F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.139202F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(85799.59F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-38.139202F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(1.1045421F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-39.089413F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.9F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(482.09F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(479.17282F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(86153.875F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      
      try { 
        Integer.valueOf("N-nc+tz}kW#U:|6o");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N-nc+tz}kW#U:|6o\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-213.60005F), (-213.60005F), (-213.60005F), (-213.60005F), (-213.60005F));
      assertEquals((-213.60005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-213.60005F), wall0.getThickness(), 0.01F);
      assertEquals((-213.60005F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-213.60005F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-213.60005F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall((-213.60005F), (-3857.3567F), (-213.60005F), 1929.159F, (-3857.3567F), (-3857.3567F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1929.159F, wall1.getYEnd(), 0.01F);
      assertEquals((-964.0988F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-213.60005F), wall1.getXStart(), 0.01F);
      assertEquals((-213.60005F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5786.5156F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall1.getXEnd(), 0.01F);
      assertEquals((-3857.3567F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3857.3567F), wall1.getYStart(), 0.01F);
      assertEquals((-3857.3567F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5786.5156F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      
      Float float0 = new Float((-3857.3567F));
      assertEquals((-3857.3567F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(1929.159F, wall1.getYEnd(), 0.01F);
      assertEquals((-964.0988F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-213.60005F), wall1.getXStart(), 0.01F);
      assertEquals((-11109.6F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(5786.5156F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-213.60005F), wall1.getXEnd(), 0.01F);
      assertEquals((-3857.3567F), wall1.getHeight(), 0.01F);
      assertEquals((-3857.3567F), wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(4.3486244E7F, wall1.getLength(), 0.01F);
      assertEquals((-3857.3567F), wall1.getYStart(), 0.01F);
      assertEquals((-3857.3567F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      // Undeclared exception!
      wall1.containsPoint(53.6163F, (-3088.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(512.1373F);
      assertEquals(512.1373F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(512.1373F, 512.1373F, (-1.0F), 512.1373F, (-1.0F));
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(513.1373F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(513.1373F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(255.56866F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setXEnd(1920.056F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(1407.9187F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1407.9187F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1216.0967F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1920.056F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Float float1 = wall0.getArcExtent();
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(1407.9187F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1407.9187F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1216.0967F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1920.056F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(float1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall(53.6163F, 53.6163F, 53.6163F, 53.6163F, 53.6163F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1847.9723F);
      assertEquals(1847.9723F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(53.6163F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(53.6163F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = Float.isFinite(1847.9723F);
      assertTrue(boolean0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertNull(integer0);
      
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(textureImage0).getHeight();
      doReturn((Content) null).when(textureImage0).getImage();
      doReturn((String) null).when(textureImage0).getName();
      doReturn(0.0F).when(textureImage0).getWidth();
      HomeTexture homeTexture0 = new HomeTexture(textureImage0);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNull(homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertNotNull(homeTexture0);
      
      String string0 = homeTexture0.getName();
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNull(homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertNull(string0);
      
      HomeTexture homeTexture1 = new HomeTexture(homeTexture0);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNull(homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertNull(homeTexture1.getName());
      assertEquals(0.0F, homeTexture1.getHeight(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture1.getWidth(), 0.01F);
      assertNotNull(homeTexture1);
      
      wall0.setLeftSideTexture(homeTexture1);
      assertNotSame(homeTexture0, homeTexture1);
      assertNotSame(homeTexture1, homeTexture0);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNull(homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertNull(homeTexture1.getName());
      assertEquals(0.0F, homeTexture1.getHeight(), 0.01F);
      assertTrue(homeTexture1.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture1.getWidth(), 0.01F);
      
      float float2 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      boolean boolean0 = Float.isFinite(0.1F);
      assertTrue(boolean0);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotNull(wall1);
      
      wall1.setRightSideShininess((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      boolean boolean1 = wall1.containsPoint(0.1F, 0.1F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture0);
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      float float2 = wall1.getYEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, 0.1F, 0.1F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertNotNull(level0);
      
      Integer integer0 = Integer.valueOf(2017);
      assertEquals(2017, (int)integer0);
      assertNotNull(integer0);
      
      wall1.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2017, (int)wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertNotNull(level1);
      
      level0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      
      float float3 = level1.getElevation();
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals(1434.928F, float3, 0.01F);
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      
      float float4 = level0.getHeight();
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      
      wall0.setXStart((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.4866068F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.4866068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall1.setLevel(level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(level0.equals((Object)level1));
      assertNotSame(wall0, wall1);
      assertNotSame(level1, level0);
      assertNotSame(wall1, wall0);
      assertNotSame(level0, level1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.4866068F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.4866068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2017, (int)wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.4866068F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.4866068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2017, (int)wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2017, (int)wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertNotNull(wall2);
      
      wall2.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.4866068F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.4866068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2017, (int)wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals((-1.0F), wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2017, (int)wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.4866068F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.4866068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float float5 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals((-1.0F), float5, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.4866068F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.4866068F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(235);
      assertEquals(235, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(235, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1942.1786F), (-1942.1786F), (-3279.0F), (-3279.0F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float(2023.409456413);
      assertEquals(2023.4094F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      long long0 = Integer.toUnsignedLong((-625));
      assertEquals(4294966671L, long0);
      
      Integer integer0 = new Integer(1482);
      assertEquals(1482, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = integer0.equals("!4#?9HJ>\"4^");
      assertFalse(boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1482, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer1 = new Integer((-625));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-625), (int)integer1);
      assertNotNull(integer1);
      
      wall0.setLeftSideColor(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      float float1 = wall0.getYEnd();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-625), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list1.equals((Object)list0));
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
      
      Wall wall1 = new Wall((-491.5714F), (-491.5714F), (-2515.82F), (-2515.82F), 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotNull(wall1);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2515.82F), wall1.getYEnd(), 0.01F);
      assertEquals((-491.5714F), wall1.getYStart(), 0.01F);
      assertEquals((-2515.82F), wall1.getXEnd(), 0.01F);
      assertEquals((-1503.6958F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-491.5714F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1503.6958F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNull(float2);
      
      wall1.move(1578.3F, (-491.5714F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall2.setRightSideColor((Integer) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      
      Integer integer0 = wall2.getRightSideColor();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-1503.6958F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-2515.82F), wall2.getXEnd(), 0.01F);
      assertEquals((-2515.82F), wall2.getYEnd(), 0.01F);
      assertEquals(2862.72F, wall2.getLength(), 0.01F);
      assertEquals(2862.72F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-491.5714F), wall2.getYStart(), 0.01F);
      assertEquals((-491.5714F), wall2.getXStart(), 0.01F);
      assertEquals((-1503.6958F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNull(integer0);
      
      wall1.setRightSideColor((Integer) null);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2862.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1995.2672F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2862.72F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-983.1428F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(74.60431F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-937.52F), wall1.getXEnd(), 0.01F);
      assertEquals(1086.7286F, wall1.getXStart(), 0.01F);
      assertEquals((-3007.3916F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      Wall wall3 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNotNull(wall3);
      
      Float float3 = wall3.getHeight();
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNotNull(float3);
      
      Float float4 = new Float(0.1F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall3.setHeight(float4);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      
      Integer integer1 = wall3.getLeftSideColor();
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(integer1);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("GBC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.GBC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Float.compare((-1233.24F), 3129.1565F);
      assertEquals((-1), int0);
      
      Float float0 = new Float((-1919.49F));
      assertEquals((-1919.49F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(3129.1565F, 686.6636F, 1130.0946F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setYStart(3129.1565F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3492.0322F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1391.7183F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3129.1565F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3492.0322F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall((-390.4142F), (-390.4142F), 0.0F, (-390.4142F), (-390.4142F));
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      
      Float float1 = new Float((-390.4142F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-390.4142F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall1.getYEnd(), 0.01F);
      assertEquals((-195.2071F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-390.4142F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(390.4142F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNotNull(wall1);
      
      float float2 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-195.2071F), float2, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(390.4142F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(390.4142F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-195.2071F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      int int0 = Float.compare((-1233.24F), 3129.1565F);
      assertEquals((-1), int0);
      
      Float float0 = new Float((-1919.49F));
      assertEquals((-1919.49F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals((-347.71844F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(331825.22F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals((-347.71844F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(331825.22F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals((-347.71844F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(331825.22F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean1 = wall0.containsPoint(3129.1565F, 686.6636F, 1130.0946F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertEquals((-347.71844F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(331825.22F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setYStart(3129.1565F);
      assertEquals((-1919.49F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(1389.7198F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3492.0322F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals(3129.1565F, wall0.getYStart(), 0.01F);
      assertEquals((-192.94664F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3351684.2F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 0.1F, 0.1F, 811.14F, 1.0F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideShininess((-616.0F));
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(integer0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("E&(", propertyChangeListener0);
      assertEquals("E&(", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("E&(", "E&(", "E&(", wall0);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals("E&(", propertyChangeEvent0.getPropertyName());
      assertNotNull(propertyChangeEvent0);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals("E&(", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("E&(", propertyChangeEvent0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals("E&(", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("E&(", propertyChangeEvent0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertEquals("E&(", propertyChangeListenerProxy0.getPropertyName());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setYEnd(811.14F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      float float2 = wall0.getYEnd();
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(811.14F, float2, 0.01F);
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      
      Float float3 = wall0.getHeight();
      assertEquals(811.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(405.62F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(811.0405F, wall0.getLength(), 0.01F);
      assertEquals((-616.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(float3);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      wall0.setArcExtent((Float) 0.0F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Float float2 = new Float(0.1F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-8.9821816E15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-8.16562E14F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-8.9821816E15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-8.16562E14F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = integer0.equals(object0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall1.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-8.9821816E15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(33, (int)wall1.getRightSideColor());
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-8.16562E14F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Integer integer1 = wall1.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(33, (int)integer1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-8.9821816E15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(33, (int)wall1.getRightSideColor());
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-8.16562E14F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((-2846));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2846), (int)integer2);
      assertNotNull(integer2);
      
      wall1.setRightSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-8.9821816E15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2846), (int)wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-8.16562E14F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Integer integer3 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.9821816E15F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(integer3);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("GBC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.GBC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(512.1373F, 512.1373F, 512.1373F, 512.1373F, 512.1373F, 512.1373F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(512.1373F, float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, 0.1F, 0.1F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      float float1 = level1.getElevation();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1434.928F, float1, 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      
      float float2 = level0.getHeight();
      assertFalse(level0.equals((Object)level1));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.1F, float2, 0.01F);
      assertNotSame(level0, level1);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      
      wall0.setLevel(level1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      
      Float float3 = new Float(512.1373F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(512.1373F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setArcExtent(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(512.1373F, wall0.getArcExtent(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(512.1373F, 512.1373F, 512.1373F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(512.1373F, wall0.getThickness(), 0.01F);
      assertEquals(512.1373F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(512.1373F, wall0.getYEnd(), 0.01F);
      assertEquals(512.1373F, wall0.getYStart(), 0.01F);
      assertEquals(512.1373F, wall0.getXStart(), 0.01F);
      assertEquals(512.1373F, wall0.getArcExtent(), 0.01F);
      assertEquals(512.1373F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(512.1373F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(512.1373F, wall0.getXEnd(), 0.01F);
      
      Float float4 = new Float((double) 512.1373F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals(512.1373F, (float)float4, 0.01F);
      assertNotNull(float4);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall((-386.93805F), (-386.93805F), 0.0F, (-386.93805F), (-386.93805F));
      assertEquals(386.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.93805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-193.46902F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertEquals(386.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.93805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-193.46902F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(386.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.93805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-193.46902F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(386.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.93805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-193.46902F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(1701.9586F, float0, 0.01F);
      assertEquals(386.93805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(386.93805F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-193.46902F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setXStart((-726.438F));
      assertEquals((-726.438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals(726.438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-363.219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(726.438F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-726.438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals(726.438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-363.219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(726.438F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1701.9586F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-726.438F), wall1.getXStart(), 0.01F);
      assertEquals((-363.219F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall1.getYStart(), 0.01F);
      assertEquals(726.438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-386.93805F), wall1.getYEnd(), 0.01F);
      assertEquals((-386.93805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(726.438F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertEquals((-726.438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals(726.438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-363.219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(726.438F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1701.9586F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-726.438F), wall1.getXStart(), 0.01F);
      assertEquals((-363.219F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall1.getYStart(), 0.01F);
      assertEquals(726.438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-386.93805F), wall1.getYEnd(), 0.01F);
      assertEquals((-386.93805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(726.438F, wall1.getLength(), 0.01F);
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 2.9864864F, 1701.9586F, (-91.0F));
      assertEquals(1701.9586F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.9864864F, level0.getElevation(), 0.01F);
      assertEquals((-91.0F), level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(1701.9586F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.9864864F, level0.getElevation(), 0.01F);
      assertEquals((-91.0F), level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-91.0F), level1.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(2.9864864F, level1.getElevation(), 0.01F);
      assertEquals(1701.9586F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("%<XS", propertyChangeListener0);
      assertEquals("%<XS", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("temp", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("%<XS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("temp", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      level1.removePropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertEquals(1701.9586F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.9864864F, level0.getElevation(), 0.01F);
      assertEquals((-91.0F), level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-91.0F), level1.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals(2.9864864F, level1.getElevation(), 0.01F);
      assertEquals(1701.9586F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("%<XS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("temp", propertyChangeListenerProxy1.getPropertyName());
      
      float float1 = level0.getElevation();
      assertFalse(level0.equals((Object)level1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2.9864864F, float1, 0.01F);
      assertNotSame(level0, level1);
      assertEquals(1701.9586F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.9864864F, level0.getElevation(), 0.01F);
      assertEquals((-91.0F), level0.getHeight(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      
      Wall wall2 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(float2);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall2.setHeight(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      
      Wall wall3 = wall2.clone();
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(wall3);
      
      float[][] floatArray1 = wall3.getPoints();
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.05F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.45F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotNull(floatArray1);
      assertEquals(4, floatArray1.length);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertEquals((-726.438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals(726.438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-363.219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(726.438F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1701.9586F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-726.438F), wall1.getXStart(), 0.01F);
      assertEquals((-363.219F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall1.getYStart(), 0.01F);
      assertEquals(726.438F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-386.93805F), wall1.getYEnd(), 0.01F);
      assertEquals((-386.93805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(726.438F, wall1.getLength(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall1);
      assertEquals((-726.438F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals(726.438F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-363.219F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(726.438F, wall0.getLength(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = Integer.valueOf(1461);
      assertEquals(1461, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = wall0.containsWallEndAt((-923.87103F), 0.0F, 0.1F);
      assertFalse(boolean0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      
      wall0.setHeight(float0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean1 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("- Ol2kX", propertyChangeListener0);
      assertEquals("- Ol2kX", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("- Ol2kX", propertyChangeListenerProxy0.getPropertyName());
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-0.45F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals("- Ol2kX", propertyChangeListenerProxy0.getPropertyName());
      
      wall1.move(1.0F, (-4361.621F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      assertEquals((-4362.621F), wall1.getYStart(), 0.01F);
      assertEquals(1.1F, wall1.getXStart(), 0.01F);
      assertEquals((-4362.0713F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.1046333F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1461, (int)wall1.getRightSideColor());
      assertEquals((-4361.521F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(1.1046333F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      
      boolean boolean2 = wall0.containsPoint((-1.0F), 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
      
      wall0.setYStart((-4361.621F));
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(4361.721F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2180.7605F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4361.721F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-4361.621F), wall0.getYStart(), 0.01F);
      assertEquals(1461, (int)wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(53.6163F, 53.6163F, 53.6163F, 53.6163F, 53.6163F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float(1847.9723F);
      assertEquals(1847.9723F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(53.6163F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(53.6163F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(integer0);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(53.6163F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(53.6163F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(53.6163F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(53.6163F, wall0.getYStart(), 0.01F);
      assertEquals(53.6163F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(53.6163F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(53.6163F, wall0.getYEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getXEnd(), 0.01F);
      assertEquals(53.6163F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1504.77F), (-349.741F), 1454.0F, 0.0F, (-1504.77F));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1504.77F), wall1.getYStart(), 0.01F);
      assertEquals(2979.369F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals((-25.38501F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-174.8705F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2979.369F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      Level level0 = new Level("", 0.0F, (-349.741F), 1454.0F);
      assertEquals((-349.741F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1454.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      boolean boolean0 = wall1.isAtLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-25.38501F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals(2979.369F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1504.77F), wall0.getYStart(), 0.01F);
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2979.369F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1504.77F), wall1.getYStart(), 0.01F);
      assertEquals(2979.369F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals((-25.38501F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-174.8705F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2979.369F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1504.77F), wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1454.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall((-39.745808F), (-39.745808F), (-39.745808F), (-39.745808F), 4738.0F, (-600.0F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.745808F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-39.745808F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallEndAt((-39.745808F), (-39.745808F), (-600.0F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.745808F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-39.745808F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setYEnd((-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getThickness(), 0.01F);
      assertEquals(38.745808F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-20.372904F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setThickness(3295.011F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3295.011F, wall0.getThickness(), 0.01F);
      assertEquals((-20.372904F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setRightSideShininess(4738.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3295.011F, wall0.getThickness(), 0.01F);
      assertEquals((-20.372904F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(38.745808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setLeftSideShininess((-39.745808F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getLength(), 0.01F);
      assertEquals((-39.745808F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3295.011F, wall0.getThickness(), 0.01F);
      assertEquals((-20.372904F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(38.745808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-39.745808F), float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getLength(), 0.01F);
      assertEquals((-39.745808F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3295.011F, wall0.getThickness(), 0.01F);
      assertEquals((-20.372904F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(38.745808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Float float1 = new Float(3295.011F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3295.011F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = wall0.getLength();
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(38.745808F, float2, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getLength(), 0.01F);
      assertEquals((-39.745808F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3295.011F, wall0.getThickness(), 0.01F);
      assertEquals((-20.372904F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(38.745808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-39.745808F), wall0.getXEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(38.745808F, wall0.getLength(), 0.01F);
      assertEquals((-39.745808F), wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-39.745808F), wall0.getXStart(), 0.01F);
      assertEquals((-600.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-39.745808F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3295.011F, wall0.getThickness(), 0.01F);
      assertEquals((-20.372904F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4738.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(38.745808F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-39.745808F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(38.745808F, wall1.getLength(), 0.01F);
      assertEquals((-39.745808F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-39.745808F), wall1.getYStart(), 0.01F);
      assertEquals(38.745808F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.745808F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3295.011F, wall1.getThickness(), 0.01F);
      assertEquals((-39.745808F), wall1.getXEnd(), 0.01F);
      assertEquals(4738.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-600.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-20.372904F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall((-39.373F), 3143.8F, (-1.0F), (-39.373F), 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-20.1865F), float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-212.1F), (-212.1F), (-212.1F), (-212.1F), (-212.1F), (-212.1F));
      assertEquals((-212.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-212.1F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-212.1F), wall0.getThickness(), 0.01F);
      assertEquals((-212.1F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-212.1F), wall0.getHeight(), 0.01F);
      assertEquals((-212.1F), wall0.getXEnd(), 0.01F);
      assertEquals((-212.1F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-212.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-212.1F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-212.1F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-212.1F), wall0.getThickness(), 0.01F);
      assertEquals((-212.1F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-212.1F), wall0.getHeight(), 0.01F);
      assertEquals((-212.1F), wall0.getXEnd(), 0.01F);
      assertEquals((-212.1F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-212.1F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(1435.2843F, (-1580.24F), 2.0F, (-1662.766F), 1435.2843F);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1435.6582F, wall1.getLength(), 0.01F);
      assertEquals((-1580.24F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1621.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1662.766F), wall1.getYEnd(), 0.01F);
      assertEquals(718.64215F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getThickness(), 0.01F);
      assertEquals(1435.6582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1435.6582F, wall1.getLength(), 0.01F);
      assertEquals((-1580.24F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1621.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1662.766F), wall1.getYEnd(), 0.01F);
      assertEquals(718.64215F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getThickness(), 0.01F);
      assertEquals(1435.6582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1621.5029F), float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertNull(level0);
      
      float float1 = wall0.getThickness();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1435.2843F, float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.offerFirst(wall0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall1));
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1435.6582F, wall1.getLength(), 0.01F);
      assertEquals((-1580.24F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1621.5029F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1662.766F), wall1.getYEnd(), 0.01F);
      assertEquals(718.64215F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1435.2843F, wall1.getThickness(), 0.01F);
      assertEquals(1435.6582F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      Float float2 = new Float((double) (-1580.24F));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1580.24F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1662.766F), wall0.getYEnd(), 0.01F);
      assertEquals((-1580.24F), wall0.getHeight(), 0.01F);
      assertEquals((-1621.5029F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(718.64215F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1435.6582F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1435.6582F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1435.2843F, wall0.getXStart(), 0.01F);
      assertEquals(1435.2843F, wall0.getThickness(), 0.01F);
      assertEquals((-1580.24F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      
      Wall.Property wall_Property0 = Wall.Property.valueOf("LEFT_SIDE_COLOR");
      assertEquals(Wall.Property.LEFT_SIDE_COLOR, wall_Property0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(1468.201F, 1468.201F, 1468.201F, 1468.201F, (-158.70653F), (-1504.77F));
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-1504.77F), (-440.219F), (-440.219F));
      assertFalse(boolean0);
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals((-158.70653F), float0, 0.01F);
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(integer0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setLeftSideShininess((-158.70653F));
      assertEquals((-158.70653F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals((-158.70653F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1468.201F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1504.77F), wall0.getHeight(), 0.01F);
      assertEquals((-158.70653F), wall0.getThickness(), 0.01F);
      assertEquals(1468.201F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1468.201F, wall0.getXEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYEnd(), 0.01F);
      assertEquals(1468.201F, wall0.getYStart(), 0.01F);
      assertEquals(1468.201F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getRightSideShininess();
      assertEquals(1701.9586F, float0, 0.01F);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsPoint(1578.9F, (-345.72F), 0.0F);
      assertFalse(boolean0);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = wall0.isAtLevel(level0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer((-2315));
      assertEquals((-2315), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2315), (int)wall0.getRightSideColor());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals((-345.72F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall0.getXStart(), 0.01F);
      assertEquals((-345.72F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-345.72F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2315), (int)wall0.getRightSideColor());
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall(811.14F, 811.14F, (-2058.9011F), 811.14F, 1086.7286F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-623.88055F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(811.14F, wall0.getXStart(), 0.01F);
      assertEquals(811.14F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2870.041F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1086.7286F, wall0.getThickness(), 0.01F);
      assertEquals((-2058.9011F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2870.041F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(811.14F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getRightSideColor());
      assertEquals((-623.88055F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(811.14F, wall0.getXStart(), 0.01F);
      assertEquals(811.14F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2870.041F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1086.7286F, wall0.getThickness(), 0.01F);
      assertEquals((-2058.9011F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2870.041F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(811.14F, wall0.getYStart(), 0.01F);
      assertNull(float0);
      
      wall0.setRightSideShininess(1086.7286F);
      assertEquals(1086.7286F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-623.88055F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(811.14F, wall0.getXStart(), 0.01F);
      assertEquals(811.14F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2870.041F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(811.14F, wall0.getYEnd(), 0.01F);
      assertEquals(1086.7286F, wall0.getThickness(), 0.01F);
      assertEquals((-2058.9011F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2870.041F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(811.14F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall(2150.917F, 2.0F, 1.0F, 811.14F, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(811.14F, wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(1075.9585F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2150.917F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2297.1396F, wall1.getLength(), 0.01F);
      assertEquals(2297.1396F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(406.57F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertNotNull(wall1);
      
      Wall wall2 = new Wall(0.0F, 1.0F, 1.0F, 2390.635F, (-708.2122F), (-1.0F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1195.8175F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(2389.6353F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-708.2122F), wall2.getThickness(), 0.01F);
      assertEquals(2389.6353F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals(2390.635F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotNull(wall2);
      
      float float1 = wall2.getXArcCircleCenter();
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.5F, float1, 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(1195.8175F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(2389.6353F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-708.2122F), wall2.getThickness(), 0.01F);
      assertEquals(2389.6353F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals(2390.635F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      Wall wall3 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertNotNull(wall3);
      
      Float float2 = wall3.getHeight();
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall3.setHeight(float3);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall3.getLeftSideTexture();
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      float float4 = wall3.getLength();
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(1.104536F, float4, 0.01F);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals(1.104536F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-0.45F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-1.0F), wall3.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F), (-390.4142F));
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-390.4142F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-390.4142F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-390.4142F), wall0.getThickness(), 0.01F);
      assertEquals((-390.4142F), wall0.getYStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getXStart(), 0.01F);
      assertEquals((-390.4142F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-390.4142F), wall0.getXEnd(), 0.01F);
      assertEquals((-390.4142F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setYStart(2465.5F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Level level0 = new Level("", 2465.5F, 2465.5F, 4059.7627F);
      assertEquals(2465.5F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(4059.7627F, level0.getHeight(), 0.01F);
      assertEquals(2465.5F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      boolean boolean0 = wall0.containsPoint(4059.7627F, 4059.7627F, 2465.5F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(2465.065F, 2465.065F, 2465.065F, 2465.065F, 2465.065F);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertNull(float0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
      assertNull(integer0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(2465.065F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.065F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2465.065F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.065F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2465.065F, wall0.getYStart(), 0.01F);
      assertEquals(2465.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.065F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-39.373F), 3143.8F, (-1.0F), (-39.373F), (-15.905408F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getArcExtent();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      
      float float1 = Float.sum((-15.905408F), 879.33167F);
      assertEquals(863.4263F, float1, 0.01F);
      
      Float float2 = new Float(0.1F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setHeight((Float) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3143.8F, wall1.getYStart(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-20.1865F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1552.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.373F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-39.373F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall0.containsWallEndAt((-1.0F), 0.0F, (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, (-4375.12F), (-4375.12F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean2 = wall1.intersectsRectangle((-39.373F), (-1.0F), (-1.0F), 0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(3143.8F, wall1.getYStart(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-20.1865F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1552.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-39.373F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-39.373F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.move(3739.198F, (-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1551.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3699.825F, wall1.getXStart(), 0.01F);
      assertEquals(3719.0115F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3142.8F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals(3738.198F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-40.373F), wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1551.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3699.825F, wall1.getXStart(), 0.01F);
      assertEquals(3719.0115F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3142.8F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals(3738.198F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-40.373F), wall1.getYEnd(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1551.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3699.825F, wall1.getXStart(), 0.01F);
      assertEquals(3719.0115F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3142.8F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals(3738.198F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-40.373F), wall1.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1551.2135F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3719.0115F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(3699.825F, wall2.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall2.getLength(), 0.01F);
      assertEquals(3738.198F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-15.905408F), wall2.getThickness(), 0.01F);
      assertEquals((-40.373F), wall2.getYEnd(), 0.01F);
      assertEquals(3183.4043F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3142.8F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNotNull(wall2);
      
      float[][] floatArray0 = wall1.getPoints();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1551.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3699.825F, wall1.getXStart(), 0.01F);
      assertEquals(3719.0115F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3142.8F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals(3738.198F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-40.373F), wall1.getYEnd(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Float float3 = wall2.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1551.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3699.825F, wall1.getXStart(), 0.01F);
      assertEquals(3719.0115F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3142.8F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals(3738.198F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-40.373F), wall1.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1551.2135F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(3719.0115F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(3699.825F, wall2.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall2.getLength(), 0.01F);
      assertEquals(3738.198F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-15.905408F), wall2.getThickness(), 0.01F);
      assertEquals((-40.373F), wall2.getYEnd(), 0.01F);
      assertEquals(3183.4043F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3142.8F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(float3);
      
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      doReturn(0.0F).when(textureImage0).getHeight();
      doReturn((Content) null).when(textureImage0).getImage();
      doReturn((String) null).when(textureImage0).getName();
      doReturn(0.0F).when(textureImage0).getWidth();
      HomeTexture homeTexture0 = new HomeTexture(textureImage0);
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNull(homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNotNull(homeTexture0);
      
      String string0 = homeTexture0.getName();
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNull(homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertNull(string0);
      
      wall1.setPattern(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertNull(homeTexture0.getName());
      assertEquals(0.0F, homeTexture0.getWidth(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1551.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3699.825F, wall1.getXStart(), 0.01F);
      assertEquals(3719.0115F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3142.8F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals(3738.198F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-40.373F), wall1.getYEnd(), 0.01F);
      
      Integer integer0 = Integer.valueOf((-343));
      assertEquals((-343), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      wall1.setLeftSideColor(integer2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(3183.4043F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-39.373F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-39.373F), wall0.getXStart(), 0.01F);
      assertEquals(3183.4043F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-15.905408F), wall0.getThickness(), 0.01F);
      assertEquals(3143.8F, wall0.getYStart(), 0.01F);
      assertEquals(1552.2135F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-20.1865F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3183.4043F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-15.905408F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1551.2135F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3699.825F, wall1.getXStart(), 0.01F);
      assertEquals(3719.0115F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(3142.8F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3183.4043F, wall1.getLength(), 0.01F);
      assertEquals(3738.198F, wall1.getXEnd(), 0.01F);
      assertEquals(0, (int)wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-40.373F), wall1.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(25.454124F, 25.454124F, 25.454124F, 25.454124F, 25.454124F);
      assertEquals(25.454124F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.454124F, wall0.getYStart(), 0.01F);
      assertEquals(25.454124F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.454124F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(25.454124F, wall0.getXEnd(), 0.01F);
      assertEquals(25.454124F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.454124F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(25.454124F);
      assertEquals(25.454124F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(25.454124F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.454124F, wall0.getYStart(), 0.01F);
      assertEquals(25.454124F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.454124F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(25.454124F, wall0.getXEnd(), 0.01F);
      assertEquals(25.454124F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.454124F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(25.454124F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(25.454124F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(25.454124F, wall0.getYStart(), 0.01F);
      assertEquals(25.454124F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(25.454124F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(25.454124F, wall0.getXEnd(), 0.01F);
      assertEquals(25.454124F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(25.454124F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      wall0.setXStart((-1757.0F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1757.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-878.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1757.0F, wall0.getLength(), 0.01F);
      assertEquals(1757.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1757.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-878.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1757.0F, wall0.getLength(), 0.01F);
      assertEquals(1757.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1757.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-878.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1757.0F, wall0.getLength(), 0.01F);
      assertEquals(1757.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(25.27426F, (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(26.27426F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(1847.9723F);
      assertEquals(1847.9723F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-912.02F), 1061.2361F);
      assertEquals((-912.02F), float1, 0.01F);
      
      float float2 = Float.min((-1786.0F), (-1.0F));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-1786.0F), float2, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      Float float3 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(float3);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(326.7F, (-1786.0F), 326.7F);
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(526, floatArray0.length);
      
      float float4 = wall0.getXArcCircleCenter();
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(12.13713F, float4, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture1);
      
      float float5 = wall0.getYArcCircleCenter();
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals((-36.124817F), float5, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Float float6 = new Float((-1.0F));
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      float float7 = Float.min(0.0F, 12.13713F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float1, 0.01F);
      assertEquals(0.0F, float7, 0.01F);
      
      wall0.setHeightAtEnd(float6);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float7, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Float float8 = wall0.getArcExtent();
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertEquals(1847.9723F, (float)float8, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(float8);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt((-36.124817F), (-2515.82F), 25.27426F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      float float9 = wall0.getRightSideShininess();
      assertEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float1, 0.01F);
      assertNotEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertNotEquals(float9, float4, 0.01F);
      assertEquals(0.0F, float9, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-36.124817F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(26.27426F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(69301.1F, wall0.getLength(), 0.01F);
      assertEquals(12.13713F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1847.9723F, wall0.getArcExtent(), 0.01F);
      assertEquals(25.27426F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 0.1F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-0.8991665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.10004168F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-0.8991665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.10004168F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-0.8991665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.10004168F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.8991665F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.10004168F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-0.8991665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.10004168F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.8991665F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.10004168F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-0.8991665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.10004168F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.8991665F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.10004168F, wall1.getLength(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-0.8991665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.10004168F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall1.move(0.1F, 483.99023F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals((-0.8991665F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.10004168F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.09106F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(484.09024F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.10004263F, wall1.getLength(), 0.01F);
      assertEquals(484.09024F, wall1.getYStart(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.09106F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(484.09024F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.10004263F, wall1.getLength(), 0.01F);
      assertEquals(484.09024F, wall1.getYStart(), 0.01F);
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, (-435.27707F), (-435.27707F));
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      wall1.setLeftSideShininess(0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.09106F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(484.09024F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.10004263F, wall1.getLength(), 0.01F);
      assertEquals(484.09024F, wall1.getYStart(), 0.01F);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("N-nc+tz}kW#U:|6o", propertyChangeListener0);
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals("N-nc+tz}kW#U:|6o", propertyChangeListenerProxy0.getPropertyName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      
      float float5 = level1.getElevation();
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals(1434.928F, float5, 0.01F);
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      
      float float6 = level0.getHeight();
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals((-435.27707F), float6, 0.01F);
      assertNotSame(level0, level1);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      
      Integer integer0 = Integer.getInteger("cLscNV9C");
      assertNull(integer0);
      
      wall1.setLeftSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.09106F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(484.09024F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.10004263F, wall1.getLength(), 0.01F);
      assertEquals(484.09024F, wall1.getYStart(), 0.01F);
      
      float float7 = wall0.getXArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float5, 0.01F);
      assertEquals(0.0F, float7, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall((-715.55F), (-715.55F), (-715.55F), (-715.55F), (-715.55F));
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.offer(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2249.4092742304874);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.move(0.1F, 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, (-435.27707F), (-435.27707F));
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      
      float float5 = level1.getElevation();
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(1434.928F, float5, 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      
      float float6 = level0.getHeight();
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals((-435.27707F), float6, 0.01F);
      assertNotSame(level0, level1);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      
      wall1.setHeightAtEnd(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertNotEquals((float)float3, (float)float6, 0.01F);
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      
      Float float7 = wall0.getArcExtent();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float7, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(float7);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall((-715.55F), (-715.55F), (-715.55F), (-715.55F), (-715.55F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      boolean boolean0 = linkedList0.offer(wall0);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals((-715.55F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-715.55F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-715.55F), wall0.getYStart(), 0.01F);
      assertEquals((-715.55F), wall0.getYEnd(), 0.01F);
      assertEquals((-715.55F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-715.55F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-715.55F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall((-1204.738F), (-1219.381F), (-1219.381F), (-1204.738F), (-1.0F), (-1219.381F));
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(integer0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1219.381F), wall0.getYStart(), 0.01F);
      assertEquals((-1212.0596F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(20.70825F, wall0.getLength(), 0.01F);
      assertEquals((-1204.738F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1204.738F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(20.70825F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1212.0596F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1219.381F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1219.381F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-345.72F), 0.0F, (-345.72F), (-345.72F));
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      
      Wall wall1 = new Wall((-345.72F), (-0.024390243F), 0.0F, 0.0F, 0.0F, 1895.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(345.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.0121951215F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-0.024390243F), wall1.getYStart(), 0.01F);
      assertEquals((-172.86F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-345.72F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(345.72F, wall1.getLength(), 0.01F);
      assertEquals(1895.0F, wall1.getHeight(), 0.01F);
      assertNotNull(wall1);
      
      Integer integer0 = new Integer(33);
      assertEquals(33, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(33, (int)integer1);
      assertNotSame(wall0, wall1);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(integer1);
      
      wall0.setRightSideColor(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(integer2);
      
      int int0 = Integer.compareUnsigned((-3998), (-1));
      assertEquals((-1), int0);
      
      wall0.setLeftSideColor((Integer) null);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals((-172.86F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-345.72F), wall0.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(345.72F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-345.72F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(345.72F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float((double) (-345.72F));
      assertEquals((-345.72F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      assertEquals(345.72F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-0.024390243F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2383.2542F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(826098.9F, wall1.getLength(), 0.01F);
      assertEquals((-172.69186F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-345.72F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1895.0F, wall1.getHeight(), 0.01F);
      assertEquals((-345.72F), wall1.getArcExtent(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, 0.1F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2249.4092742304874);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.1F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.9624F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals((-3.3672001F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      wall1.move(0.1F, 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7799.9624F, wall0.getLength(), 0.01F);
      assertEquals((-3.3672001F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, (-435.27707F), (-435.27707F));
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      wall1.setLeftSideShininess(0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertNotNull(level1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertNotSame(level0, level1);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      
      float float5 = level1.getElevation();
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals(1434.928F, float5, 0.01F);
      assertNotSame(level1, level0);
      assertNotSame(level0, level1);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertEquals((-435.27707F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-435.27707F), level1.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      
      float float6 = level0.getHeight();
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals((-435.27707F), float6, 0.01F);
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals((-435.27707F), level0.getFloorThickness(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals((-435.27707F), level0.getHeight(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      
      wall1.setHeightAtEnd(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float5, 0.01F);
      assertNotEquals((float)float3, (float)float6, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float4, 0.01F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      float float7 = wall1.getLength();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float7, float5, 0.01F);
      assertNotEquals(float7, float4, 0.01F);
      assertNotEquals(float7, float2, 0.01F);
      assertNotEquals(float7, float6, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(7799.948F, float7, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      Level level2 = wall1.getLevel();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(level2);
      
      float float8 = wall1.getYStart();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float8, float5, 0.01F);
      assertNotEquals(float8, float7, 0.01F);
      assertNotEquals(float8, float4, 0.01F);
      assertNotEquals(float8, float2, 0.01F);
      assertNotEquals(float8, float6, 0.01F);
      assertEquals(483.19F, float8, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      
      float float9 = wall0.getStartPointToEndPointDistance();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float9, float4, 0.01F);
      assertNotEquals(float9, float6, 0.01F);
      assertNotEquals(float9, float8, 0.01F);
      assertNotEquals(float9, float5, 0.01F);
      assertNotEquals(float9, float7, 0.01F);
      assertNotEquals(float9, float2, 0.01F);
      assertEquals(0.0F, float9, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float10 = wall1.getHeightAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float10, (float)float4, 0.01F);
      assertNotEquals((float)float10, (float)float2, 0.01F);
      assertEquals((float)float10, (float)float0, 0.01F);
      assertNotEquals((float)float10, (float)float6, 0.01F);
      assertNotEquals((float)float10, (float)float9, 0.01F);
      assertNotEquals((float)float10, (float)float1, 0.01F);
      assertNotEquals((float)float10, (float)float8, 0.01F);
      assertNotEquals((float)float10, (float)float7, 0.01F);
      assertNotEquals((float)float10, (float)float5, 0.01F);
      assertEquals(0.1F, (float)float10, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(483.19F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7799.948F, wall1.getLength(), 0.01F);
      assertEquals(0.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.15F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(479.7228F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNotNull(float10);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(float0);
      
      Float float1 = new Float(0.1F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideShininess(1686.085F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.085F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(0.0F, 1607.1428F, (-1.0F), 0.0F, 0.0F, 1701.9586F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1607.1432F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(803.5714F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1607.1428F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1607.1432F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotNull(wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.085F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1607.1432F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(803.5714F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1607.1428F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1607.1432F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      
      int int0 = Float.compare(602.0F, 0.0F);
      assertEquals(1, int0);
      
      Float float2 = new Float(1607.1428F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1607.1428F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setArcExtent(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.3877004F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1607.1428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.7352955F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.085F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1418.0348F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall1, wall0);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(1607.1432F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(803.5714F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1607.1428F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1607.1432F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1701.9586F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(1.0F, (-859.37F), (-859.37F));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.3877004F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1607.1428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.7352955F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.085F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1418.0348F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall2 = wall0.getWallAtEnd();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-0.3877004F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1607.1428F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.7352955F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.085F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1418.0348F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall2.getRightSideColor());
      assertEquals(1607.1432F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(803.5714F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1607.1432F, wall2.getLength(), 0.01F);
      assertEquals(1607.1428F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1701.9586F, wall2.getHeight(), 0.01F);
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-386.93805F), (-386.93805F), 0.022817591F, (-386.93805F), (-386.93805F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-193.45761F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(386.96088F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(386.96088F, wall0.getLength(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.022817591F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setRightSideShininess(1701.9586F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-193.45761F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(386.96088F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(386.96088F, wall0.getLength(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.022817591F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-193.45761F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(386.96088F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertEquals((-386.93805F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(386.96088F, wall0.getLength(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.022817591F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float(75.17468F);
      assertEquals(75.17468F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(130402.51F, wall0.getLength(), 0.01F);
      assertEquals((-193.45761F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(386.96088F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2110.774F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.022817591F, wall0.getXEnd(), 0.01F);
      assertEquals(75.17468F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(130402.51F, wall0.getLength(), 0.01F);
      assertEquals((-193.45761F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(386.96088F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2110.774F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.022817591F, wall0.getXEnd(), 0.01F);
      assertEquals(75.17468F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      boolean boolean1 = wall0.containsPoint(1701.9586F, (-1.0F), 212.29439F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(130402.51F, wall0.getLength(), 0.01F);
      assertEquals((-193.45761F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(386.96088F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2110.774F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.022817591F, wall0.getXEnd(), 0.01F);
      assertEquals(75.17468F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float1 = wall0.getLength();
      assertEquals(130402.51F, float1, 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(130402.51F, wall0.getLength(), 0.01F);
      assertEquals((-193.45761F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(386.96088F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-386.93805F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2110.774F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1701.9586F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-386.93805F), wall0.getXStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getYStart(), 0.01F);
      assertEquals((-386.93805F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.022817591F, wall0.getXEnd(), 0.01F);
      assertEquals(75.17468F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Integer integer0 = Integer.getInteger(">@U.K");
      assertNull(integer0);
      
      wall0.setLeftSideColor((Integer) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideColor((Integer) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-349.741F), 1454.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(727.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1495.4714F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1495.4714F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(727.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1495.4714F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1495.4714F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(727.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1495.4714F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-174.8705F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1495.4714F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(727.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1495.4714F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1495.4714F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(727.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1495.4714F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-174.8705F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1495.4714F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      
      float float0 = wall1.getYArcCircleCenter();
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(727.0F, float0, 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-174.8705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(727.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1454.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1495.4714F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-349.741F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1495.4714F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(727.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1495.4714F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-349.741F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-174.8705F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1454.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1495.4714F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.0F, 0.1F, (-1.0F), 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.104536F, wall0.getLength(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(2249.4092742304874);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2249.4092F, float2, 0.01F);
      
      wall0.setArcExtent((Float) 2249.4092F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Float float3 = new Float(0.1F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-3.9171999F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-38.0892F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(86153.4F, wall1.getLength(), 0.01F);
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsWallEndAt(0.0F, 0.0F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-3.9171999F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-38.0892F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(86153.4F, wall1.getLength(), 0.01F);
      
      boolean boolean1 = wall1.intersectsRectangle(0.1F, 0.0F, 0.0F, (-435.27707F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-3.9171999F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-38.0892F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(86153.4F, wall1.getLength(), 0.01F);
      
      float float4 = wall0.getXStart();
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, float4, 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      wall1.move((-1.0F), 483.09F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(86153.4F, wall0.getLength(), 0.01F);
      assertEquals((-3.9171999F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-38.0892F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.104536F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-0.9F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(479.17282F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(482.09F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(86153.875F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-39.089413F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(1.1045421F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(85799.59F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.139202F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(85799.59F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.139202F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.9F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(479.17282F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall1.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(482.09F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals(86153.875F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-39.089413F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(483.19F, wall1.getYEnd(), 0.01F);
      assertEquals(1.1045421F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Level level0 = new Level("N-nc+tz}kW#U:|6o", 1434.928F, 0.1F, 0.1F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      assertNotNull(level1);
      
      float float5 = level1.getElevation();
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(1434.928F, float5, 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
      
      float float6 = level0.getHeight();
      assertNotEquals(float6, float5, 0.01F);
      assertEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertEquals(0.1F, float6, 0.01F);
      assertNotSame(level0, level1);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      
      wall0.setLevel(level1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotSame(wall0, wall1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(85799.59F, wall0.getLength(), 0.01F);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-38.139202F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.4092F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("N-nc+tz}kW#U:|6o", level0.getName());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level0.getElevation(), 0.01F);
      assertEquals(0.1F, level1.getFloorThickness(), 0.01F);
      assertEquals(1434.928F, level1.getElevation(), 0.01F);
      assertEquals("N-nc+tz}kW#U:|6o", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.1F, level1.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall(2465.5F, 2465.5F, 2465.5F, 2465.5F, 2465.5F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2465.5F, wall0.getYStart(), 0.01F);
      assertEquals(2465.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2465.5F, wall0.getYEnd(), 0.01F);
      assertEquals(2465.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2465.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2465.5F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall((-3279.4365F), (-349.741F), (-3279.4365F), 0.1F, (-3279.4365F), (-1.0F));
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(349.841F, wall0.getLength(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1985.0F));
      assertEquals((-1985.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1985.0F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1985.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare((-840.94745F), 636.09F);
      assertEquals((-1), int0);
      
      wall0.setArcExtent((Float) 636.09F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertEquals(164265.27F, wall0.getLength(), 0.01F);
      assertEquals((-3469.415F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(636.09F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float2 = new Float((float) (-1));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      Float float3 = Float.valueOf((-1.0F));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1.0F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeightAtEnd(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-2959.2466F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-349.741F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(349.841F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(364.85446F, wall0.getLength(), 0.01F);
      assertEquals((-3279.4365F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3279.4365F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3279.4365F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-174.8205F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-3279.0F), (-3279.0F), (-3279.0F), 0.05F, 1.0F, (-3279.0F));
      wall0.setArcExtent((Float) null);
      boolean boolean0 = wall0.intersectsRectangle(0.05F, 1.0F, (-3279.0F), 0.05F);
      assertFalse(boolean0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-3279.0F), wall0.getHeight(), 0.01F);
      assertEquals(3279.05F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Integer.valueOf(2969);
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Integer.valueOf((-433));
      Integer integer2 = Integer.valueOf(0);
      wall0.setLeftSideColor(integer2);
      wall0.setXStart(1.0F);
      wall0.clone();
      Float float0 = new Float(1431.1);
      Object object0 = new Object();
      float0.equals(object0);
      wall0.setHeight(float0);
      wall0.isTrapezoidal();
      Float float1 = new Float((float) 0);
      wall0.setHeightAtEnd(float1);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall((-345.72F), (-345.72F), 0.0F, (-345.72F), (-345.72F));
      wall0.setRightSideShininess(1701.9586F);
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
      wall0.getRightSideShininess();
      Integer integer0 = new Integer(8192);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.setRightSideShininess(0.0F);
      Integer.getInteger("LEFT_SIDE_COLOR");
      Wall.Property.valueOf("LEFT_SIDE_COLOR");
      wall0.getWallAtEnd();
      Wall.Property.valueOf("LEVEL");
      wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }
}

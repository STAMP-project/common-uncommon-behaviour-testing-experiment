/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:32:24 GMT 2019
 */

package net.sourceforge.squirrel_sql.fw.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import java.io.File;
import java.io.FileFilter;
import java.io.FilenameFilter;
import java.net.URI;
import net.sourceforge.squirrel_sql.fw.util.FileExtensionFilter;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileWrapperImpl_ESTest extends FileWrapperImpl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("}V>}x.:bB");
      fileWrapperImpl0.deleteOnExit();
      assertEquals(0L, fileWrapperImpl0.lastModified());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(")");
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0, ")");
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/)/)", fileWrapperImpl1.getPath());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("5Hd;)ndlf/", "5Hd;)ndlf/");
      String string0 = fileWrapperImpl0.toString();
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/5Hd;)ndlf/5Hd;)ndlf", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      String string0 = fileWrapperImpl0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("1+6\"L=");
      FileWrapperImpl.createTempFile("1+6\"L=", "1+6\"L=", (FileWrapper) fileWrapperImpl0);
      boolean boolean0 = fileWrapperImpl0.setReadOnly();
      assertEquals(1392409281320L, fileWrapperImpl0.lastModified());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      boolean boolean0 = fileWrapperImpl0.setLastModified(1821L);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("5Hd;)ndlf/", "5Hd;)ndlf/");
      boolean boolean0 = fileWrapperImpl0.setLastModified(1318L);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("", "");
      boolean boolean0 = fileWrapperImpl0.mkdirs();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(file0).mkdir();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(file0);
      boolean boolean0 = fileWrapperImpl0.mkdir();
      boolean boolean1 = fileWrapperImpl0.mkdir();
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      URI uRI0 = MockURI.aFileURI;
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(uRI0);
      String[] stringArray0 = new String[4];
      FileExtensionFilter fileExtensionFilter0 = new FileExtensionFilter(",>b9mBCgysX19hgQ*", stringArray0);
      FileWrapper[] fileWrapperArray0 = fileWrapperImpl0.listFiles((FileFilter) fileExtensionFilter0);
      assertNull(fileWrapperArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(mockFile0);
      String[] stringArray0 = fileWrapperImpl0.list();
      FileExtensionFilter fileExtensionFilter0 = new FileExtensionFilter("", stringArray0);
      FileWrapper[] fileWrapperArray0 = fileWrapperImpl0.listFiles((FileFilter) fileExtensionFilter0);
      assertEquals(2, fileWrapperArray0.length);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("1+6\"L=");
      FileWrapperImpl.createTempFile("1+6\"L=", "1+6\"L=", (FileWrapper) fileWrapperImpl0);
      fileWrapperImpl0.listFiles();
      assertTrue(fileWrapperImpl0.exists());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      FileWrapper[] fileWrapperArray0 = fileWrapperImpl0.listFiles();
      assertEquals(0, fileWrapperArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("0hzJbHZ0M0:tCE", "0hzJbHZ0M0:tCE");
      String[] stringArray0 = new String[4];
      FileExtensionFilter fileExtensionFilter0 = new FileExtensionFilter("0hzJbHZ0M0:tCE", stringArray0);
      String[] stringArray1 = fileWrapperImpl0.list((FilenameFilter) fileExtensionFilter0);
      assertNull(stringArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("!*YLND3UoHX", "!*YLND3UoHX");
      FileWrapperImpl.createTempFile("!*YLND3UoHX", "!*YLND3UoHX", (FileWrapper) fileWrapperImpl0);
      String[] stringArray0 = new String[0];
      FileExtensionFilter fileExtensionFilter0 = new FileExtensionFilter("!*YLND3UoHX", stringArray0);
      fileWrapperImpl0.list((FilenameFilter) fileExtensionFilter0);
      assertFalse(fileWrapperImpl0.isFile());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String[] stringArray0 = new String[1];
      File file0 = mock(File.class, new ViolatedAssumptionAnswer());
      doReturn(stringArray0).when(file0).list();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(file0);
      String[] stringArray1 = fileWrapperImpl0.list();
      assertSame(stringArray0, stringArray1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      String[] stringArray0 = fileWrapperImpl0.list();
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("}V>}x.:1Qp");
      long long0 = fileWrapperImpl0.length();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("{?$PV`CA/nB");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("{?$PV`CA/nB");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "");
      long long0 = fileWrapperImpl0.length();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("");
      long long0 = fileWrapperImpl0.lastModified();
      assertEquals(1392409281320L, long0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl");
      FileWrapperImpl.createTempFile("net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl", "Us/=R-ZW'9_Z}18)", fileWrapperImpl0);
      boolean boolean0 = fileWrapperImpl0.isFile();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl");
      boolean boolean0 = fileWrapperImpl0.mkdirs();
      boolean boolean1 = fileWrapperImpl0.isDirectory();
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("{?$PV`CA/nB", "{?$PV`CA/nB");
      boolean boolean0 = fileWrapperImpl0.isAbsolute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl("_jx-.Uku-[", "_jx-.Uku-[");
      String string0 = fileWrapperImpl0.getPath();
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/_jx-.Uku-[/_jx-.Uku-[", string0);
  }
}

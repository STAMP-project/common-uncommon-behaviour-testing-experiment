/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 16:45:07 GMT 2019
 */

package visu.handball.moves.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ActionEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import visu.handball.moves.actions.NewPassEventAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewPassEventAction_ESTest extends NewPassEventAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(1694, 0).when(player0).getCurrent_x();
      doReturn((-1275), 0).when(player0).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player0).getPlayerNumber();
      doReturn(true, true, false).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, 0);
      moveEvent0.setDestinationPoint(1000, 4917, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.actionPerformed((ActionEvent) null);
      assertEquals(HandballModel.State.EDIT_EVENT, handballModel0.getState());
      assertEquals(1, handballModel0.getAcutalSequenceNr());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(player0).getCurrent_x();
      doReturn(1).when(player0).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player0).getPlayerNumber();
      MoveEvent moveEvent0 = new MoveEvent(player0, 4917);
      Player player1 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(4917, 0).when(player1).getCurrent_x();
      doReturn(1, 0).when(player1).getCurrent_y();
      doReturn(true).when(player1).hasBall();
      handballModel0.addMoveEvent(moveEvent0);
      MoveEvent moveEvent1 = new MoveEvent(player1, 4917);
      moveEvent1.setDestinationPoint(496, 1, false);
      handballModel0.setActualMoveEvent(moveEvent1);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(moveEvent0, 4917, "");
      // Undeclared exception!
      try { 
        newPassEventAction0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.model.MoveEvent", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NewPassEventAction newPassEventAction0 = null;
      try {
        newPassEventAction0 = new NewPassEventAction((HandballModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.actions.NewPassEventAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn((-8)).when(player0).getCurrent_x();
      doReturn((-8)).when(player0).getCurrent_y();
      doReturn(false).when(player0).hasBall();
      Player player1 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(player1).getCurrent_x();
      doReturn(0).when(player1).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player1).getPlayerNumber();
      MoveEvent moveEvent0 = new MoveEvent(player1, 550);
      handballModel0.addMoveEvent(moveEvent0);
      MoveEvent moveEvent1 = new MoveEvent(player0, (-8));
      moveEvent1.setDestinationPoint((-8), (-8), false);
      handballModel0.setActualMoveEvent(moveEvent1);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(4917).when(player0).getCurrent_x();
      doReturn(1).when(player0).getCurrent_y();
      doReturn(true).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, 4917);
      moveEvent0.setDestinationPoint(496, 1, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(player0).getCurrent_x();
      doReturn(1).when(player0).getCurrent_y();
      MoveEvent moveEvent0 = new MoveEvent(player0, 1);
      moveEvent0.setPlayer((Player) null);
      moveEvent0.setDestinationPoint(1, 1, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(player0).getCurrent_x();
      doReturn(1).when(player0).getCurrent_y();
      doReturn(false).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, 4917);
      moveEvent0.setDestinationPoint(496, 1, false);
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn((-2919)).when(player0).getCurrent_x();
      doReturn((-883)).when(player0).getCurrent_y();
      doReturn(false).when(player0).hasBall();
      MoveEvent moveEvent0 = new MoveEvent(player0, 4917);
      handballModel0.setActualMoveEvent(moveEvent0);
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(moveEvent0, 4917, "");
      newPassEventAction0.actionPerformed(actionEvent0);
      assertEquals(0, actionEvent0.getModifiers());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewPassEventAction newPassEventAction0 = new NewPassEventAction(handballModel0);
      newPassEventAction0.actionPerformed((ActionEvent) null);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:10:33 GMT 2019
 */

package org.jcvi.jillion.trace.sff;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.sff.DefaultSffReadHeader;
import org.jcvi.jillion.trace.sff.SffFlowgram;
import org.jcvi.jillion.trace.sff.SffFlowgramImpl;
import org.jcvi.jillion.trace.sff.SffReadHeader;
import org.jcvi.jillion.trace.sff.SffUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SffUtil_ESTest extends SffUtil_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range range0 = Range.of(5L);
      Range range1 = Range.of(0L);
      DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader((-6), range1, range0, "ost,IdCa");
      // Undeclared exception!
      try { 
        SffUtil.computeTrimRangeFor((SffReadHeader) defaultSffReadHeader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = SffUtil.caclulatePaddedBytes(7);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = SffUtil.toSffIndexOffsetValue(9223372036854775807L);
      assertArrayEquals(new byte[] {(byte) (-118), (byte) (-115), (byte) (-125), (byte)127}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte) (-62);
      long long0 = SffUtil.parseSffIndexOffsetValue(byteArray0);
      assertEquals(12614850L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)84;
      long long0 = SffUtil.parseSffIndexOffsetValue(byteArray0);
      assertEquals(21420L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range range0 = Range.ofLength(2097);
      SffUtil.Linkers sffUtil_Linkers0 = SffUtil.Linkers.TITANIUM;
      NucleotideSequence nucleotideSequence0 = sffUtil_Linkers0.getReverseSequence();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[6];
      byte[] byteArray0 = new byte[1];
      SffFlowgramImpl sffFlowgramImpl0 = new SffFlowgramImpl("", nucleotideSequence0, qualitySequence0, shortArray0, range0, range0, byteArray0, shortArray0);
      Range range1 = SffUtil.computeTrimRangeFor((SffFlowgram) sffFlowgramImpl0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      long long0 = SffUtil.parseSffIndexOffsetValue(byteArray0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      long long0 = SffUtil.parseSffIndexOffsetValue(byteArray0);
      assertEquals(1608393375L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Nucleotide> arrayList0 = new ArrayList<Nucleotide>();
      int int0 = SffUtil.numberOfIntensities(arrayList0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = SffUtil.getReadDataLength(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = SffUtil.getReadDataLength((-2067), 1182);
      assertEquals((-588), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float float0 = SffUtil.convertFlowgramValue((short)0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float float0 = SffUtil.convertFlowgramValue((short)7);
      assertEquals(0.07F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        SffUtil.parseSffInfoEncodedFlowgram((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        SffUtil.parseSffIndexOffsetValue(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.jcvi.jillion.trace.sff.SffUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        SffUtil.numberOfIntensities((Iterable<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.trace.sff.SffUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Range range0 = SffUtil.EMPTY_CLIP;
      DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader((-1073741823), range0, range0, "8");
      // Undeclared exception!
      try { 
        SffUtil.computeTrimRangeFor((SffReadHeader) defaultSffReadHeader0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        SffUtil.computeTrimRangeFor((SffFlowgram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.trace.sff.SffUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      DefaultSffReadHeader defaultSffReadHeader0 = new DefaultSffReadHeader(2147119791, range0, range0, "]@Z>");
      Range range1 = SffUtil.computeTrimRangeFor((SffReadHeader) defaultSffReadHeader0);
      assertFalse(range1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        SffUtil.parseSffInfoEncodedFlowgram("ost,IdCa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // could not parse sffinfo encoded flowgram value ost,IdCa
         //
         verifyException("org.jcvi.jillion.trace.sff.SffUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = SffUtil.caclulatePaddedBytes(2139127680);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = SffUtil.caclulatePaddedBytes((-1073741823));
      assertEquals(15, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SffUtil.Linkers sffUtil_Linkers0 = SffUtil.Linkers.TITANIUM;
      NucleotideSequence nucleotideSequence0 = sffUtil_Linkers0.getReverseSequence();
      int int0 = SffUtil.numberOfIntensities(nucleotideSequence0);
      assertEquals(36, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Range range0 = Range.of((-1868L));
      SffUtil.Linkers sffUtil_Linkers0 = SffUtil.Linkers.FLX;
      NucleotideSequence nucleotideSequence0 = sffUtil_Linkers0.getForwardSequence();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      short[] shortArray0 = new short[1];
      byte[] byteArray0 = new byte[1];
      SffFlowgramImpl sffFlowgramImpl0 = new SffFlowgramImpl("", nucleotideSequence0, qualitySequence0, shortArray0, range0, range0, byteArray0, shortArray0);
      // Undeclared exception!
      try { 
        SffUtil.computeTrimRangeFor((SffFlowgram) sffFlowgramImpl0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        SffUtil.computeTrimRangeFor((SffReadHeader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.trace.sff.SffUtil", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:38:44 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)87;
      byte byte0 = (byte) (-53);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)87;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-35);
      byte byte1 = (byte) (-14);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("S=Z!QiLd;'42R");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2309, (byte)19);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1);
      simpleCharStream0.readChar();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4096
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4096);
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 0);
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(52, 1299);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("s]");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 2516);
      simpleCharStream0.getTabSize(2516);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-85);
      byteArray0[1] = (byte) (-51);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-51), 0);
      simpleCharStream0.readChar();
      simpleCharStream0.column = (-73);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleCharStream0.adjustBeginLineColumn(1992, 4075);
      simpleCharStream0.getLine();
      simpleCharStream0.FillBuff();
      simpleCharStream0.readChar();
      simpleCharStream0.getTabSize(4086);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null, 1912, 1912);
      simpleCharStream0.GetSuffix(2972);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 2413;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 2413);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('B');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.GetImage();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (byte)0, (byte)13);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0, (byte)0, 10);
      simpleCharStream1.Done();
      simpleCharStream0.adjustBeginLineColumn(3839, (-1284));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 2972;
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      int int1 = (-2018);
      int int2 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null, 0, 2031);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)10;
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)10);
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(66);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      simpleCharStream0.available = (-596);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn((-596)).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      int int0 = 3347;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream1.GetImage();
      simpleCharStream1.readChar();
      simpleCharStream1.adjustBeginLineColumn((-596), (-1));
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        pushbackInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 21;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 21, 21);
      simpleCharStream0.available = 21;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(sequenceInputStream0, 21, 21);
      int int1 = 0;
      try { 
        simpleCharStream1.ReInit((InputStream) sequenceInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream", 0, 2, (-2940));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)0);
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)13);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(66);
      simpleCharStream0.GetImage();
      simpleCharStream0.UpdateLineColumn('\r');
      simpleCharStream0.backup((byte)10);
      simpleCharStream0.readChar();
      simpleCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 2008);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 2008, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)10);
      simpleCharStream0.readChar();
      simpleCharStream0.GetSuffix(1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      simpleCharStream0.available = (-596);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream1.GetImage();
      simpleCharStream1.readChar();
      simpleCharStream1.backup(674);
      simpleCharStream1.readChar();
      simpleCharStream1.FillBuff();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1094;
      PipedInputStream pipedInputStream0 = new PipedInputStream(1094);
      String string0 = "Q:=UVy";
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "Q:=UVy");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1, 2972);
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pipedInputStream0, 2787, 2048);
      simpleCharStream0.Done();
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[1] = (byte)87;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("S=Z!QiLd;'42R");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2309, (byte)19);
      simpleCharStream0.GetImage();
      simpleCharStream0.readChar();
      simpleCharStream0.backup(1);
      simpleCharStream0.readChar();
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)10;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)0);
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(66);
      simpleCharStream0.GetImage();
      simpleCharStream0.UpdateLineColumn('\u0000');
      int int0 = 0;
      simpleCharStream0.adjustBeginLineColumn((-1270), (byte)8);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      try { 
        pushbackInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      simpleCharStream0.available = (-596);
      byte[] byteArray0 = new byte[1];
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn((-596), (-596)).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream1.GetImage();
      simpleCharStream1.readChar();
      simpleCharStream1.backup(674);
      simpleCharStream1.readChar();
      simpleCharStream1.FillBuff();
      simpleCharStream1.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader1 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 1261, (-596));
      simpleCharStream0.GetImage();
      simpleCharStream0.readChar();
      simpleCharStream1.backup(1);
      simpleCharStream0.readChar();
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1, (-955));
      simpleCharStream0.tokenBegin = 1;
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream0.GetImage();
      StringReader stringReader1 = new StringReader("");
      stringReader1.read();
      stringReader1.close();
      simpleCharStream1.ReInit((Reader) stringReader1, 88, (-955), 348);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.GetSuffix(0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 4, (-2671), 4087);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      int int0 = 4096;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)0);
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)13);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(4096);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)60;
      byteArray0[0] = (byte)87;
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte) (-31);
      byteArray0[4] = (byte)19;
      StringReader stringReader0 = new StringReader("S=Z!QiLd;'42R");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.backup(2031);
      simpleCharStream0.BeginToken();
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)10);
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)11);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.GetImage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)10);
      byteArrayInputStream0.close();
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.GetImage();
      FileSystemHandling.shouldAllThrowIOExceptions();
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, 2699, 1, 10);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-600), (-600));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream0.BeginToken();
      simpleCharStream1.ReInit((Reader) stringReader0, 0, 0, 3347);
      simpleCharStream1.ReInit((Reader) stringReader0, (-600), 1230, 2033);
      simpleCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 18, 18, 7);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1, (-955));
      simpleCharStream0.inBuf = 1;
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((-955), (-955));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 8;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 8, 8);
      simpleCharStream0.available = 8;
      Reader reader0 = null;
      int int1 = (-2018);
      simpleCharStream0.ReInit((Reader) null, 0, (-2018));
      simpleCharStream0.ReInit((Reader) null, (-2018), (-2499), 3839);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Reader reader0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 0, (-2693), 0);
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("TKJ:P/");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-24);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), (byte) (-24));
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      simpleCharStream0.ReInit((InputStream) dataInputStream0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 175;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 175, 175);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[10];
      StringReader stringReader0 = new StringReader("01|,Af..iRy9z-)^");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      stringReader0.read();
      simpleCharStream0.ReInit((Reader) stringReader0, (int) (byte)0, (int) (byte)0, 48);
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1, 2972);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.adjustBeginLineColumn(0, 1);
      try { 
        simpleCharStream1.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-72), (byte) (-72));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 8);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      simpleCharStream0.GetImage();
      simpleCharStream0.getBeginLine();
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      simpleCharStream0.available = (-596);
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn((-596), (-596)).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream1.GetImage();
      simpleCharStream1.readChar();
      simpleCharStream1.backup(674);
      simpleCharStream1.readChar();
      simpleCharStream1.FillBuff();
      simpleCharStream1.getBeginLine();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      stringReader0.read();
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = '_';
      charArray0[1] = '>';
      charArray0[2] = '&';
      charArray0[3] = 'M';
      charArray0[4] = '0';
      charArray0[6] = '=';
      charArray0[7] = '~';
      charArray0[8] = '4';
      simpleCharStream0.buffer = charArray0;
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|UJ0K+jk");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream0.BeginToken();
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(stringReader0);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-596), (-1));
      simpleCharStream1.readChar();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 18, 0);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (byte)10, 2998);
      simpleCharStream0.BeginToken();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 0);
      int int0 = 3359;
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (String) null, 13, 3359);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-2888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|UJ0K+jk");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      simpleCharStream0.readChar();
      simpleCharStream0.GetImage();
      simpleCharStream0.getLine();
      StringReader stringReader1 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader1, (-1687), 4074, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      sequenceInputStream0.read();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-4);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-81);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)47;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)0;
      pushbackInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, 2129, 1, 8);
      pushbackInputStream0.read();
      StringReader stringReader0 = new StringReader("");
      simpleCharStream0.ReInit((Reader) stringReader0);
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-39);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)8;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-61);
      byteArray0[7] = (byte)5;
      byteArray0[8] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, "P`", 0, 2048, (byte)8);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (String) null);
      simpleCharStream0.ReInit((Reader) stringReader0, 4093, 4093, (int) (byte)10);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('|');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.skip((-705L));
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, 440, 818);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, 328, 447);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "S=Z!QiLd;'42R", 2972, (-1519), (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "h~Ks?4N");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 8;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 8, 8);
      simpleCharStream0.available = 8;
      Reader reader0 = null;
      int int1 = (-2018);
      simpleCharStream0.ReInit((Reader) null, 0, (-2018));
      simpleCharStream0.ReInit((Reader) null, (-2018), (-2499), 3839);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-72), 10);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(bufferedInputStream0, "=qm", (-966), (-966));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0, 1, 1);
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(4081);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-100);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-100), (byte) (-100));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 2847, (-3082));
      simpleCharStream0.ReInit((InputStream) pipedInputStream0);
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      simpleCharStream0.ReInit((Reader) stringReader0, 8, 913);
      simpleCharStream0.ReInit((Reader) stringReader0, 8, 3839, 3839);
      simpleCharStream0.ReInit((Reader) stringReader0, 2047, 1640, 2023);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.readChar();
      simpleCharStream0.getTabSize(8);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)13;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)0);
      simpleCharStream0.backup((byte)0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, (byte)112, 2748);
      String string0 = simpleCharStream1.GetImage();
      // Undeclared exception!
      try { 
        simpleCharStream1.ReInit((InputStream) null, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.pmdesigns.jvc.tools.SimpleCharStream");
      int int0 = (-1130);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, 10, 965, (-1130));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-72), (byte) (-72));
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1, 4080, (-1059));
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 10, (byte)10);
      simpleCharStream0.readChar();
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-72);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-72), (byte) (-72));
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(bufferedInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1, (-955));
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((-955), (-955));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Enumeration<ObjectInputStream> enumeration0 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (String) null, 2972, 2972);
      simpleCharStream0.GetSuffix(2972);
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (String) null, 2972, (-516), 4083);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-596));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)10);
      simpleCharStream0.readChar();
      simpleCharStream0.GetSuffix((byte)10);
      simpleCharStream0.getEndLine();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 2645;
      simpleCharStream0.Done();
      simpleCharStream0.line = 2645;
      stringReader0.markSupported();
      simpleCharStream0.backup((-3082));
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, 3347, 3347);
      simpleCharStream0.BeginToken();
      simpleCharStream0.readChar();
      int int0 = (-676);
      // Undeclared exception!
      try { 
        simpleCharStream1.ReInit((InputStream) null, 3347, 2048, 2048);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mDMGuERW<");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)8;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)10);
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.GetImage();
      simpleCharStream0.BeginToken();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFileInputStream mockFileInputStream0 = null;
      try {
        mockFileInputStream0 = new MockFileInputStream("");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(4096);
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 0);
      int int1 = 1299;
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(0, 1299);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("|UJ0K+jk");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-596), (-596));
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(reader0, (-1), (-1));
      simpleCharStream0.BeginToken();
      int int0 = (-771);
      try { 
        simpleCharStream1.ReInit((InputStream) byteArrayInputStream0, "|UJ0K+jk", 0, (-771));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1, 2972);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.Done();
      simpleCharStream0.adjustBeginLineColumn((-1), 2972);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte) (-53);
      byteArray0[2] = (byte) (-31);
      byteArray0[5] = (byte) (-35);
      byteArray0[6] = (byte) (-14);
      byteArray0[7] = (byte)14;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("S=Z!QiLd;'42R");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2309, (byte)19);
      simpleCharStream0.readChar();
      simpleCharStream0.backup(1);
      simpleCharStream0.adjustBeginLineColumn(1111, 4088);
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)13;
      byteArray0[3] = (byte)13;
      byteArray0[4] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (byte)13, (byte)13);
      simpleCharStream0.BeginToken();
      simpleCharStream0.readChar();
      simpleCharStream0.GetSuffix(4058);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte)13;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      int int0 = (-1284);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1284), 4096, (byte)9);
      simpleCharStream0.readChar();
      simpleCharStream0.backup((byte)2);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((byte) (-1));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(66);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(2972);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 1, (-955));
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0);
      simpleCharStream1.ReInit((Reader) stringReader0, 2048, 4073, 0);
      // Undeclared exception!
      try { 
        simpleCharStream1.getBeginColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      pushbackInputStream0.read();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (byte)0, (byte)0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0, (byte)0, 10);
      simpleCharStream1.readChar();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 0, (-1));
      simpleCharStream1.ExpandBuff(true);
      simpleCharStream0.GetSuffix(1226);
      simpleCharStream1.getLine();
      simpleCharStream0.adjustBeginLineColumn((-2287), (-269));
  }
}

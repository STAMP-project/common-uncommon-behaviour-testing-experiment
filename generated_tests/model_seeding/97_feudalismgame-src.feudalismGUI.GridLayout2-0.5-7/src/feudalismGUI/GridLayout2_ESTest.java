/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:29:03 GMT 2019
 */

package src.feudalismGUI;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.AWTEventMulticaster;
import java.awt.Button;
import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.Panel;
import java.awt.SystemColor;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.MouseMotionListener;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.util.Hashtable;
import javax.swing.Action;
import javax.swing.CellRendererPane;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JColorChooser;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JSpinner;
import javax.swing.JTextArea;
import javax.swing.JToolBar;
import javax.swing.JTree;
import javax.swing.TransferHandler;
import javax.swing.colorchooser.DefaultColorSelectionModel;
import javax.swing.filechooser.FileSystemView;
import javax.swing.plaf.basic.BasicTreeUI;
import javax.swing.plaf.metal.MetalTreeUI;
import javax.swing.plaf.synth.SynthMenuUI;
import javax.swing.text.DefaultCaret;
import javax.swing.text.StyledEditorKit;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.evosuite.runtime.mock.javax.swing.filechooser.MockFileSystemView;
import org.junit.runner.RunWith;
import src.feudalismGUI.GridLayout2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridLayout2_ESTest extends GridLayout2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(2232, (-1), 2843, (-1));
      assertEquals((-1), gridLayout2_0.getVgap());
      assertEquals(2843, gridLayout2_0.getHgap());
      assertEquals(2232, gridLayout2_0.getRows());
      assertEquals((-1), gridLayout2_0.getColumns());
      assertNotNull(gridLayout2_0);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JTree jTree0 = new JTree(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertNotNull(jTree0);
      
      Object object0 = jTree0.getTreeLock();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertNotNull(object0);
      
      Insets insets0 = jTree0.getInsets();
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.right);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertNotNull(insets0);
      
      int int0 = jTree0.getComponentCount();
      assertEquals(1, int0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      
      CellRendererPane cellRendererPane0 = (CellRendererPane)jTree0.getComponent(0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertFalse(cellRendererPane0.isFocusTraversalPolicySet());
      assertEquals(0, cellRendererPane0.getY());
      assertFalse(cellRendererPane0.isOpaque());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(0, cellRendererPane0.getX());
      assertFalse(cellRendererPane0.isFocusCycleRoot());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertFalse(cellRendererPane0.isFocusTraversalPolicyProvider());
      assertFalse(cellRendererPane0.isDoubleBuffered());
      assertTrue(cellRendererPane0.getFocusTraversalKeysEnabled());
      assertFalse(cellRendererPane0.getIgnoreRepaint());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertEquals(0, cellRendererPane0.getWidth());
      assertNotNull(cellRendererPane0);
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jTree0);
      assertEquals((-2231), dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals((-1), gridLayout2_0.getVgap());
      assertEquals(2843, gridLayout2_0.getHgap());
      assertEquals(2232, gridLayout2_0.getRows());
      assertEquals((-1), gridLayout2_0.getColumns());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals((-2231.0), dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      assertNotNull(metalTreeUI0);
      
      JMenuItem jMenuItem0 = new JMenuItem("");
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertNotNull(jMenuItem0);
      
      Dimension dimension0 = metalTreeUI0.getPreferredSize((JComponent) jMenuItem0);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertNotNull(defaultTreeCellRenderer0);
      
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer1.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer1.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer1.equals((Object)defaultTreeCellRenderer0));
      assertNotNull(defaultTreeCellRenderer1);
      
      Icon icon0 = defaultTreeCellRenderer1.getClosedIcon();
      assertNotSame(defaultTreeCellRenderer1, defaultTreeCellRenderer0);
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer1.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer1.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer1.equals((Object)defaultTreeCellRenderer0));
      assertNotNull(icon0);
      
      JCheckBox jCheckBox0 = new JCheckBox("+S/kV0xd-", icon0);
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer1.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer1.getFocusTraversalKeysEnabled());
      assertTrue(jCheckBox0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBox0.getIgnoreRepaint());
      assertFalse(jCheckBox0.isFocusCycleRoot());
      assertFalse(jCheckBox0.isFocusTraversalPolicySet());
      assertFalse(jCheckBox0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.equals((Object)defaultTreeCellRenderer0));
      assertNotNull(jCheckBox0);
      
      GridLayout2 gridLayout2_1 = new GridLayout2(0, 2696);
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(gridLayout2_1);
      
      gridLayout2_1.layoutContainer(jMenuItem0);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      
      Dimension dimension1 = gridLayout2_1.preferredLayoutSize(defaultTreeCellRenderer0);
      assertNotSame(defaultTreeCellRenderer0, defaultTreeCellRenderer1);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertNotSame(dimension1, dimension0);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertTrue(defaultTreeCellRenderer0.getFocusTraversalKeysEnabled());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer0.getIgnoreRepaint());
      assertFalse(defaultTreeCellRenderer0.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer0.isFocusCycleRoot());
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertFalse(defaultTreeCellRenderer0.equals((Object)defaultTreeCellRenderer1));
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      
      Dimension dimension2 = gridLayout2_1.preferredLayoutSize(defaultTreeCellRenderer1);
      assertNotSame(defaultTreeCellRenderer1, defaultTreeCellRenderer0);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertNotSame(dimension2, dimension0);
      assertNotSame(dimension2, dimension1);
      assertEquals(0, dimension2.width);
      assertEquals(0, dimension2.height);
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer1.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer1.getFocusTraversalKeysEnabled());
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(0.0, dimension2.getHeight(), 0.01);
      assertEquals(0.0, dimension2.getWidth(), 0.01);
      assertFalse(defaultTreeCellRenderer1.equals((Object)defaultTreeCellRenderer0));
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertTrue(dimension2.equals((Object)dimension0));
      assertTrue(dimension2.equals((Object)dimension1));
      assertNotNull(dimension2);
      
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel();
      assertNotNull(defaultColorSelectionModel0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertNotNull(jSpinner0);
      
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_DefaultEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_DefaultEditor0.getIgnoreRepaint());
      assertFalse(jSpinner_DefaultEditor0.isFocusCycleRoot());
      assertTrue(jSpinner_DefaultEditor0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_DefaultEditor0.isFocusTraversalPolicySet());
      assertNotNull(jSpinner_DefaultEditor0);
      
      defaultColorSelectionModel0.addChangeListener(jSpinner_DefaultEditor0);
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_DefaultEditor0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner_DefaultEditor0.getIgnoreRepaint());
      assertFalse(jSpinner_DefaultEditor0.isFocusCycleRoot());
      assertTrue(jSpinner_DefaultEditor0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner_DefaultEditor0.isFocusTraversalPolicySet());
      
      JColorChooser jColorChooser0 = new JColorChooser(defaultColorSelectionModel0);
      assertFalse(jColorChooser0.getIgnoreRepaint());
      assertFalse(jColorChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser0.isFocusCycleRoot());
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
      assertTrue(jColorChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(jColorChooser0);
      
      Dimension dimension3 = gridLayout2_0.minimumLayoutSize(defaultTreeCellRenderer1);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertNotSame(dimension3, dimension2);
      assertNotSame(dimension3, dimension0);
      assertNotSame(dimension3, dimension1);
      assertNotSame(defaultTreeCellRenderer1, defaultTreeCellRenderer0);
      assertEquals(0, dimension3.height);
      assertEquals(0, dimension3.width);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0.0, dimension3.getWidth(), 0.01);
      assertEquals(0.0, dimension3.getHeight(), 0.01);
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer1.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer1.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      assertTrue(dimension3.equals((Object)dimension2));
      assertTrue(dimension3.equals((Object)dimension0));
      assertTrue(dimension3.equals((Object)dimension1));
      assertFalse(defaultTreeCellRenderer1.equals((Object)defaultTreeCellRenderer0));
      assertNotNull(dimension3);
      
      gridLayout2_1.layoutContainer(jColorChooser0);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertFalse(jColorChooser0.getIgnoreRepaint());
      assertFalse(jColorChooser0.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser0.isFocusCycleRoot());
      assertFalse(jColorChooser0.isFocusTraversalPolicySet());
      assertTrue(jColorChooser0.getFocusTraversalKeysEnabled());
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      
      Dimension dimension4 = gridLayout2_1.minimumLayoutSize(defaultTreeCellRenderer1);
      assertNotSame(dimension4, dimension2);
      assertNotSame(dimension4, dimension3);
      assertNotSame(dimension4, dimension0);
      assertNotSame(dimension4, dimension1);
      assertNotSame(defaultTreeCellRenderer1, defaultTreeCellRenderer0);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertEquals(0, dimension4.width);
      assertEquals(0, dimension4.height);
      assertEquals(0.0, dimension4.getHeight(), 0.01);
      assertEquals(0.0, dimension4.getWidth(), 0.01);
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer1.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer1.getFocusTraversalKeysEnabled());
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertTrue(dimension4.equals((Object)dimension2));
      assertTrue(dimension4.equals((Object)dimension3));
      assertTrue(dimension4.equals((Object)dimension0));
      assertTrue(dimension4.equals((Object)dimension1));
      assertFalse(defaultTreeCellRenderer1.equals((Object)defaultTreeCellRenderer0));
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(dimension4);
      
      JColorChooser jColorChooser1 = new JColorChooser(defaultColorSelectionModel0);
      assertFalse(jColorChooser1.isFocusTraversalPolicySet());
      assertFalse(jColorChooser1.isFocusTraversalPolicyProvider());
      assertFalse(jColorChooser1.isFocusCycleRoot());
      assertFalse(jColorChooser1.getIgnoreRepaint());
      assertTrue(jColorChooser1.getFocusTraversalKeysEnabled());
      assertFalse(jColorChooser1.equals((Object)jColorChooser0));
      assertNotNull(jColorChooser1);
      
      Dimension dimension5 = gridLayout2_0.minimumLayoutSize(defaultTreeCellRenderer1);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertNotSame(dimension5, dimension4);
      assertNotSame(dimension5, dimension2);
      assertNotSame(dimension5, dimension0);
      assertNotSame(dimension5, dimension1);
      assertNotSame(dimension5, dimension3);
      assertNotSame(defaultTreeCellRenderer1, defaultTreeCellRenderer0);
      assertEquals(0, dimension5.height);
      assertEquals(0, dimension5.width);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0.0, dimension5.getWidth(), 0.01);
      assertEquals(0.0, dimension5.getHeight(), 0.01);
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicySet());
      assertFalse(defaultTreeCellRenderer1.isFocusCycleRoot());
      assertFalse(defaultTreeCellRenderer1.isFocusTraversalPolicyProvider());
      assertFalse(defaultTreeCellRenderer1.getIgnoreRepaint());
      assertTrue(defaultTreeCellRenderer1.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      assertTrue(dimension5.equals((Object)dimension0));
      assertTrue(dimension5.equals((Object)dimension1));
      assertTrue(dimension5.equals((Object)dimension4));
      assertTrue(dimension5.equals((Object)dimension2));
      assertTrue(dimension5.equals((Object)dimension3));
      assertFalse(defaultTreeCellRenderer1.equals((Object)defaultTreeCellRenderer0));
      assertNotNull(dimension5);
      
      Dimension dimension6 = gridLayout2_1.minimumLayoutSize(jMenuItem0);
      assertNotSame(dimension6, dimension3);
      assertNotSame(dimension6, dimension4);
      assertNotSame(dimension6, dimension2);
      assertNotSame(dimension6, dimension5);
      assertNotSame(dimension6, dimension0);
      assertNotSame(dimension6, dimension1);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertEquals(4, dimension6.height);
      assertEquals(4, dimension6.width);
      assertFalse(jMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jMenuItem0.getIgnoreRepaint());
      assertFalse(jMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jMenuItem0.isFocusCycleRoot());
      assertEquals(4.0, dimension6.getHeight(), 0.01);
      assertEquals(4.0, dimension6.getWidth(), 0.01);
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertFalse(dimension6.equals((Object)dimension3));
      assertFalse(dimension6.equals((Object)dimension4));
      assertFalse(dimension6.equals((Object)dimension2));
      assertFalse(dimension6.equals((Object)dimension5));
      assertFalse(dimension6.equals((Object)dimension0));
      assertFalse(dimension6.equals((Object)dimension1));
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(dimension6);
      
      System.setCurrentTimeMillis((-1L));
      Dimension dimension7 = gridLayout2_1.minimumLayoutSize(jSpinner0);
      assertNotSame(dimension7, dimension3);
      assertNotSame(dimension7, dimension4);
      assertNotSame(dimension7, dimension2);
      assertNotSame(dimension7, dimension5);
      assertNotSame(dimension7, dimension6);
      assertNotSame(dimension7, dimension0);
      assertNotSame(dimension7, dimension1);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertEquals(19, dimension7.height);
      assertEquals(14, dimension7.width);
      assertEquals(19.0, dimension7.getHeight(), 0.01);
      assertEquals(14.0, dimension7.getWidth(), 0.01);
      assertEquals(2696, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(0, gridLayout2_1.getHgap());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(dimension7.equals((Object)dimension3));
      assertFalse(dimension7.equals((Object)dimension4));
      assertFalse(dimension7.equals((Object)dimension2));
      assertFalse(dimension7.equals((Object)dimension5));
      assertFalse(dimension7.equals((Object)dimension6));
      assertFalse(dimension7.equals((Object)dimension0));
      assertFalse(dimension7.equals((Object)dimension1));
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(dimension7);
      
      // Undeclared exception!
      gridLayout2_1.minimumLayoutSize(defaultTreeCellRenderer0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      gridLayout2_0.setRows(979);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(979, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      assertNotNull(mockJFileChooser0);
      
      gridLayout2_0.layoutContainer(mockJFileChooser0);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(979, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertNotNull(gridLayout2_0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("");
      assertNotNull(mockJFileChooser0);
      
      VetoableChangeListener[] vetoableChangeListenerArray0 = mockJFileChooser0.getVetoableChangeListeners();
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(vetoableChangeListenerArray0);
      assertEquals(0, vetoableChangeListenerArray0.length);
      
      GridLayout2 gridLayout2_1 = new GridLayout2((-2089), 976);
      assertEquals(976, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals((-2089), gridLayout2_1.getRows());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(gridLayout2_1);
      
      GridLayout2 gridLayout2_2 = new GridLayout2((-2089), 976, 553, (-2089));
      assertEquals((-2089), gridLayout2_2.getVgap());
      assertEquals((-2089), gridLayout2_2.getRows());
      assertEquals(976, gridLayout2_2.getColumns());
      assertEquals(553, gridLayout2_2.getHgap());
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_0));
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_1));
      assertNotNull(gridLayout2_2);
      
      gridLayout2_2.layoutContainer(mockJFileChooser0);
      assertNotSame(gridLayout2_2, gridLayout2_0);
      assertNotSame(gridLayout2_2, gridLayout2_1);
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals((-2089), gridLayout2_2.getVgap());
      assertEquals((-2089), gridLayout2_2.getRows());
      assertEquals(976, gridLayout2_2.getColumns());
      assertEquals(553, gridLayout2_2.getHgap());
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_0));
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_1));
      
      gridLayout2_0.layoutContainer(mockJFileChooser0);
      assertNotSame(gridLayout2_0, gridLayout2_2);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_2));
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertNotNull(gridLayout2_0);
      
      MockFile mockFile0 = new MockFile("");
      assertNotNull(mockFile0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(mockFile0);
      assertNotNull(mockJFileChooser0);
      
      gridLayout2_0.layoutContainer(mockJFileChooser0);
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertNull(mockFile0.getParent());
      assertEquals("", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isDirectory());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isFile());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertNotNull(gridLayout2_0);
      
      JPanel jPanel0 = new JPanel();
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel0);
      
      gridLayout2_0.layoutContainer(jPanel0);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertNotNull(gridLayout2_0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      assertNotNull(mockJFileChooser0);
      
      mockJFileChooser0.setBounds(1751, 1751, 1207, (-1478));
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) gridLayout2_0;
      objectArray0[1] = (Object) gridLayout2_0;
      objectArray0[2] = (Object) mockJFileChooser0;
      objectArray0[3] = (Object) gridLayout2_0;
      objectArray0[4] = (Object) gridLayout2_0;
      objectArray0[5] = (Object) mockJFileChooser0;
      objectArray0[6] = (Object) gridLayout2_0;
      objectArray0[7] = (Object) gridLayout2_0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[8] = object0;
      JTree jTree0 = new JTree(objectArray0);
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertNotNull(jTree0);
      assertEquals(9, objectArray0.length);
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jTree0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.getIgnoreRepaint());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.isFocusCycleRoot());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      assertEquals(9, objectArray0.length);
      
      System.setCurrentTimeMillis(0L);
      gridLayout2_0.layoutContainer(mockJFileChooser0);
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      
      System.setCurrentTimeMillis((-3603L));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertNotNull(gridLayout2_0);
      
      MockFile mockFile0 = new MockFile("i", "g} 23k/rKucaa0h");
      assertNotNull(mockFile0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(mockFile0);
      assertNotNull(mockJFileChooser0);
      
      VetoableChangeListener[] vetoableChangeListenerArray0 = mockJFileChooser0.getVetoableChangeListeners();
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("rKucaa0h", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/i/g} 23k", mockFile0.getParent());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/i/g} 23k/rKucaa0h", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertNotNull(vetoableChangeListenerArray0);
      assertEquals(0, vetoableChangeListenerArray0.length);
      
      GridLayout2 gridLayout2_1 = new GridLayout2(524, 584);
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(584, gridLayout2_1.getColumns());
      assertEquals(524, gridLayout2_1.getRows());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(gridLayout2_1);
      
      gridLayout2_0.layoutContainer(mockJFileChooser0);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("rKucaa0h", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/i/g} 23k", mockFile0.getParent());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/i/g} 23k/rKucaa0h", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      
      GridLayout2 gridLayout2_2 = new GridLayout2(1434, (-975), 524, 584);
      assertEquals(1434, gridLayout2_2.getRows());
      assertEquals(584, gridLayout2_2.getVgap());
      assertEquals((-975), gridLayout2_2.getColumns());
      assertEquals(524, gridLayout2_2.getHgap());
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_0));
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_1));
      assertNotNull(gridLayout2_2);
      
      gridLayout2_2.layoutContainer(mockJFileChooser0);
      assertNotSame(gridLayout2_2, gridLayout2_0);
      assertNotSame(gridLayout2_2, gridLayout2_1);
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.isAbsolute());
      assertFalse(mockFile0.isHidden());
      assertEquals("rKucaa0h", mockFile0.getName());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/i/g} 23k", mockFile0.getParent());
      assertEquals("/home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/i/g} 23k/rKucaa0h", mockFile0.toString());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertEquals(1434, gridLayout2_2.getRows());
      assertEquals(584, gridLayout2_2.getVgap());
      assertEquals((-975), gridLayout2_2.getColumns());
      assertEquals(524, gridLayout2_2.getHgap());
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_0));
      assertFalse(gridLayout2_2.equals((Object)gridLayout2_1));
      
      System.setCurrentTimeMillis(584);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-996), (-996), (-1), 0);
      assertEquals((-1), gridLayout2_0.getHgap());
      assertEquals((-996), gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals((-996), gridLayout2_0.getRows());
      assertNotNull(gridLayout2_0);
      
      String string0 = "";
      gridLayout2_0.setVgap((-1));
      assertEquals((-1), gridLayout2_0.getHgap());
      assertEquals((-1), gridLayout2_0.getVgap());
      assertEquals((-996), gridLayout2_0.getColumns());
      assertEquals((-996), gridLayout2_0.getRows());
      
      JTextArea jTextArea0 = new JTextArea("", 0, 1442);
      assertFalse(jTextArea0.getIgnoreRepaint());
      assertTrue(jTextArea0.getFocusTraversalKeysEnabled());
      assertFalse(jTextArea0.isFocusTraversalPolicySet());
      assertFalse(jTextArea0.isFocusTraversalPolicyProvider());
      assertFalse(jTextArea0.isFocusCycleRoot());
      assertNotNull(jTextArea0);
      
      gridLayout2_0.setRows((-1447));
      assertEquals((-1), gridLayout2_0.getHgap());
      assertEquals((-1), gridLayout2_0.getVgap());
      assertEquals((-996), gridLayout2_0.getColumns());
      assertEquals((-1447), gridLayout2_0.getRows());
      
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jTextArea0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(2058, 2058);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      JPanel jPanel0 = new JPanel(gridLayout2_0, true);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertNotNull(jPanel0);
      
      float float0 = jPanel0.getAlignmentX();
      assertEquals(0.5F, float0, 0.01F);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      
      SynthMenuUI synthMenuUI0 = new SynthMenuUI();
      assertNotNull(synthMenuUI0);
      
      jPanel0.removePropertyChangeListener("J4A", (PropertyChangeListener) synthMenuUI0);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jPanel0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      gridLayout2_0.layoutContainer(jPanel0);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      
      JToolBar jToolBar0 = new JToolBar();
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      assertNotNull(jToolBar0);
      
      boolean boolean0 = jToolBar0.isValidateRoot();
      assertFalse(boolean0);
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      
      SystemColor systemColor0 = SystemColor.controlShadow;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(128, systemColor0.getRed());
      assertNotNull(systemColor0);
      
      JToolBar jToolBar1 = new JToolBar(0);
      assertFalse(jToolBar1.isFocusTraversalPolicySet());
      assertFalse(jToolBar1.isFocusCycleRoot());
      assertFalse(jToolBar1.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar1.getIgnoreRepaint());
      assertTrue(jToolBar1.getFocusTraversalKeysEnabled());
      assertFalse(jToolBar1.equals((Object)jToolBar0));
      assertNotNull(jToolBar1);
      
      jToolBar1.setBackground(systemColor0);
      assertNotSame(jToolBar1, jToolBar0);
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-8355712), systemColor0.getRGB());
      assertEquals(128, systemColor0.getGreen());
      assertEquals(128, systemColor0.getBlue());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(128, systemColor0.getRed());
      assertFalse(jToolBar1.isFocusTraversalPolicySet());
      assertFalse(jToolBar1.isFocusCycleRoot());
      assertFalse(jToolBar1.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar1.getIgnoreRepaint());
      assertTrue(jToolBar1.getFocusTraversalKeysEnabled());
      assertFalse(jToolBar1.equals((Object)jToolBar0));
      
      Dimension dimension1 = gridLayout2_0.preferredLayoutSize(jPanel0);
      assertNotSame(dimension1, dimension0);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      
      JLabel jLabel0 = new JLabel("J4A");
      assertFalse(jLabel0.isFocusTraversalPolicyProvider());
      assertFalse(jLabel0.getIgnoreRepaint());
      assertFalse(jLabel0.isFocusTraversalPolicySet());
      assertTrue(jLabel0.getFocusTraversalKeysEnabled());
      assertFalse(jLabel0.isFocusCycleRoot());
      assertNotNull(jLabel0);
      
      Dimension dimension2 = gridLayout2_0.minimumLayoutSize(jLabel0);
      assertNotSame(dimension2, dimension1);
      assertNotSame(dimension2, dimension0);
      assertEquals(0, dimension2.width);
      assertEquals(0, dimension2.height);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jLabel0.isFocusTraversalPolicyProvider());
      assertFalse(jLabel0.getIgnoreRepaint());
      assertFalse(jLabel0.isFocusTraversalPolicySet());
      assertTrue(jLabel0.getFocusTraversalKeysEnabled());
      assertFalse(jLabel0.isFocusCycleRoot());
      assertEquals(0.0, dimension2.getHeight(), 0.01);
      assertEquals(0.0, dimension2.getWidth(), 0.01);
      assertTrue(dimension2.equals((Object)dimension0));
      assertTrue(dimension2.equals((Object)dimension1));
      assertNotNull(dimension2);
      
      Dimension dimension3 = gridLayout2_0.preferredLayoutSize(jToolBar0);
      assertNotSame(jToolBar0, jToolBar1);
      assertNotSame(dimension3, dimension0);
      assertNotSame(dimension3, dimension2);
      assertNotSame(dimension3, dimension1);
      assertEquals(4, dimension3.height);
      assertEquals(18, dimension3.width);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      assertEquals(18.0, dimension3.getWidth(), 0.01);
      assertEquals(4.0, dimension3.getHeight(), 0.01);
      assertFalse(jToolBar0.equals((Object)jToolBar1));
      assertFalse(dimension3.equals((Object)dimension0));
      assertFalse(dimension3.equals((Object)dimension2));
      assertFalse(dimension3.equals((Object)dimension1));
      assertNotNull(dimension3);
      
      Dimension dimension4 = gridLayout2_0.minimumLayoutSize(jToolBar0);
      assertNotSame(dimension4, dimension3);
      assertNotSame(dimension4, dimension0);
      assertNotSame(dimension4, dimension2);
      assertNotSame(dimension4, dimension1);
      assertNotSame(jToolBar0, jToolBar1);
      assertEquals(18, dimension4.width);
      assertEquals(4, dimension4.height);
      assertEquals(18.0, dimension4.getWidth(), 0.01);
      assertEquals(4.0, dimension4.getHeight(), 0.01);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      assertFalse(dimension4.equals((Object)dimension0));
      assertTrue(dimension4.equals((Object)dimension3));
      assertFalse(dimension4.equals((Object)dimension2));
      assertFalse(dimension4.equals((Object)dimension1));
      assertFalse(jToolBar0.equals((Object)jToolBar1));
      assertNotNull(dimension4);
      
      Dimension dimension5 = gridLayout2_0.minimumLayoutSize(jLabel0);
      assertNotSame(dimension5, dimension3);
      assertNotSame(dimension5, dimension2);
      assertNotSame(dimension5, dimension1);
      assertNotSame(dimension5, dimension0);
      assertNotSame(dimension5, dimension4);
      assertEquals(0, dimension5.width);
      assertEquals(0, dimension5.height);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0.0, dimension5.getWidth(), 0.01);
      assertEquals(0.0, dimension5.getHeight(), 0.01);
      assertFalse(jLabel0.isFocusTraversalPolicyProvider());
      assertFalse(jLabel0.getIgnoreRepaint());
      assertFalse(jLabel0.isFocusTraversalPolicySet());
      assertTrue(jLabel0.getFocusTraversalKeysEnabled());
      assertFalse(jLabel0.isFocusCycleRoot());
      assertTrue(dimension5.equals((Object)dimension1));
      assertFalse(dimension5.equals((Object)dimension3));
      assertTrue(dimension5.equals((Object)dimension0));
      assertTrue(dimension5.equals((Object)dimension2));
      assertFalse(dimension5.equals((Object)dimension4));
      assertNotNull(dimension5);
      
      GridLayout2 gridLayout2_1 = new GridLayout2();
      assertEquals(0, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(1, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(gridLayout2_1);
      
      gridLayout2_1.layoutContainer(jToolBar0);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertNotSame(jToolBar0, jToolBar1);
      assertEquals(0, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(1, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertFalse(jToolBar0.equals((Object)jToolBar1));
      
      gridLayout2_0.layoutContainer(jPanel0);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertEquals(2058, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(2058, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      
      Dimension dimension6 = gridLayout2_1.minimumLayoutSize(jToolBar0);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertNotSame(dimension6, dimension0);
      assertNotSame(dimension6, dimension3);
      assertNotSame(dimension6, dimension2);
      assertNotSame(dimension6, dimension4);
      assertNotSame(dimension6, dimension1);
      assertNotSame(dimension6, dimension5);
      assertNotSame(jToolBar0, jToolBar1);
      assertEquals(18, dimension6.width);
      assertEquals(4, dimension6.height);
      assertEquals(0, gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(1, gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals(4.0, dimension6.getHeight(), 0.01);
      assertEquals(18.0, dimension6.getWidth(), 0.01);
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertFalse(dimension6.equals((Object)dimension0));
      assertTrue(dimension6.equals((Object)dimension4));
      assertFalse(dimension6.equals((Object)dimension2));
      assertTrue(dimension6.equals((Object)dimension3));
      assertFalse(dimension6.equals((Object)dimension1));
      assertFalse(dimension6.equals((Object)dimension5));
      assertFalse(jToolBar0.equals((Object)jToolBar1));
      assertNotNull(dimension6);
      
      JPanel jPanel1 = new JPanel();
      assertFalse(jPanel1.isFocusTraversalPolicyProvider());
      assertFalse(jPanel1.isFocusTraversalPolicySet());
      assertFalse(jPanel1.getIgnoreRepaint());
      assertFalse(jPanel1.isFocusCycleRoot());
      assertTrue(jPanel1.getFocusTraversalKeysEnabled());
      assertFalse(jPanel1.equals((Object)jPanel0));
      assertNotNull(jPanel1);
      
      Object object0 = jPanel1.getTreeLock();
      assertNotSame(jPanel1, jPanel0);
      assertFalse(jPanel1.isFocusTraversalPolicyProvider());
      assertFalse(jPanel1.isFocusTraversalPolicySet());
      assertFalse(jPanel1.getIgnoreRepaint());
      assertFalse(jPanel1.isFocusCycleRoot());
      assertTrue(jPanel1.getFocusTraversalKeysEnabled());
      assertFalse(jPanel1.equals((Object)jPanel0));
      assertNotNull(object0);
      
      Insets insets0 = jPanel1.getInsets();
      assertNotSame(jPanel1, jPanel0);
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.right);
      assertFalse(jPanel1.isFocusTraversalPolicyProvider());
      assertFalse(jPanel1.isFocusTraversalPolicySet());
      assertFalse(jPanel1.getIgnoreRepaint());
      assertFalse(jPanel1.isFocusCycleRoot());
      assertTrue(jPanel1.getFocusTraversalKeysEnabled());
      assertFalse(jPanel1.equals((Object)jPanel0));
      assertNotNull(insets0);
      
      int int0 = jPanel1.getComponentCount();
      assertNotSame(jPanel1, jPanel0);
      assertEquals(0, int0);
      assertFalse(jPanel1.isFocusTraversalPolicyProvider());
      assertFalse(jPanel1.isFocusTraversalPolicySet());
      assertFalse(jPanel1.getIgnoreRepaint());
      assertFalse(jPanel1.isFocusCycleRoot());
      assertTrue(jPanel1.getFocusTraversalKeysEnabled());
      assertFalse(jPanel1.equals((Object)jPanel0));
      
      int int1 = jPanel1.getWidth();
      assertNotSame(jPanel1, jPanel0);
      assertEquals(0, int1);
      assertFalse(jPanel1.isFocusTraversalPolicyProvider());
      assertFalse(jPanel1.isFocusTraversalPolicySet());
      assertFalse(jPanel1.getIgnoreRepaint());
      assertFalse(jPanel1.isFocusCycleRoot());
      assertTrue(jPanel1.getFocusTraversalKeysEnabled());
      assertFalse(jPanel1.equals((Object)jPanel0));
      assertTrue(int1 == int0);
      
      int int2 = jPanel1.getHeight();
      assertNotSame(jPanel1, jPanel0);
      assertEquals(0, int2);
      assertFalse(jPanel1.isFocusTraversalPolicyProvider());
      assertFalse(jPanel1.isFocusTraversalPolicySet());
      assertFalse(jPanel1.getIgnoreRepaint());
      assertFalse(jPanel1.isFocusCycleRoot());
      assertTrue(jPanel1.getFocusTraversalKeysEnabled());
      assertFalse(jPanel1.equals((Object)jPanel0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      // Undeclared exception!
      try { 
        jPanel1.getComponent(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: 0
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      assertNotNull(styledEditorKit_BoldAction0);
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(styledEditorKit_BoldAction0);
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertNotNull(jCheckBoxMenuItem0);
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertEquals(4, dimension0.width);
      assertEquals(4, dimension0.height);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(4.0, dimension0.getWidth(), 0.01);
      assertEquals(4.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertNotSame(dimension1, dimension0);
      assertEquals(4, dimension1.width);
      assertEquals(4, dimension1.height);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(4.0, dimension1.getWidth(), 0.01);
      assertEquals(4.0, dimension1.getHeight(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      
      Dimension dimension2 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertNotSame(dimension2, dimension1);
      assertNotSame(dimension2, dimension0);
      assertEquals(4, dimension2.width);
      assertEquals(4, dimension2.height);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertEquals(4.0, dimension2.getHeight(), 0.01);
      assertEquals(4.0, dimension2.getWidth(), 0.01);
      assertTrue(dimension2.equals((Object)dimension1));
      assertTrue(dimension2.equals((Object)dimension0));
      assertNotNull(dimension2);
      
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      assertNotNull(fileSystemView0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("JI]", fileSystemView0);
      assertNotNull(mockJFileChooser0);
      
      mockJFileChooser0.setApproveButtonMnemonic('}');
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      
      mockJFileChooser0.setName("o(f{,c!E_@le.[xKn");
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      
      Dimension dimension3 = gridLayout2_0.minimumLayoutSize(mockJFileChooser0);
      assertNotSame(dimension3, dimension1);
      assertNotSame(dimension3, dimension0);
      assertNotSame(dimension3, dimension2);
      assertEquals(113, dimension3.height);
      assertEquals(596, dimension3.width);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertEquals(596.0, dimension3.getWidth(), 0.01);
      assertEquals(113.0, dimension3.getHeight(), 0.01);
      assertFalse(dimension3.equals((Object)dimension1));
      assertFalse(dimension3.equals((Object)dimension0));
      assertFalse(dimension3.equals((Object)dimension2));
      assertNotNull(dimension3);
      
      Dimension dimension4 = gridLayout2_0.preferredLayoutSize(mockJFileChooser0);
      assertNotSame(dimension4, dimension0);
      assertNotSame(dimension4, dimension3);
      assertNotSame(dimension4, dimension1);
      assertNotSame(dimension4, dimension2);
      assertEquals(1285, dimension4.width);
      assertEquals(158, dimension4.height);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertEquals(158.0, dimension4.getHeight(), 0.01);
      assertEquals(1285.0, dimension4.getWidth(), 0.01);
      assertFalse(dimension4.equals((Object)dimension0));
      assertFalse(dimension4.equals((Object)dimension3));
      assertFalse(dimension4.equals((Object)dimension1));
      assertFalse(dimension4.equals((Object)dimension2));
      assertNotNull(dimension4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      Panel panel0 = new Panel(gridLayout2_0);
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(panel0.isFocusTraversalPolicySet());
      assertEquals(0, panel0.getWidth());
      assertFalse(panel0.isFocusCycleRoot());
      assertEquals(0, panel0.getHeight());
      assertFalse(panel0.isOpaque());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertFalse(panel0.isDoubleBuffered());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertTrue(panel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertFalse(panel0.isFocusTraversalPolicyProvider());
      assertEquals(0, panel0.getX());
      assertEquals(0, panel0.getY());
      assertFalse(panel0.getIgnoreRepaint());
      assertNotNull(panel0);
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(panel0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(panel0.isFocusTraversalPolicySet());
      assertEquals(0, panel0.getWidth());
      assertFalse(panel0.isFocusCycleRoot());
      assertEquals(0, panel0.getHeight());
      assertFalse(panel0.isOpaque());
      assertEquals(Component.BaselineResizeBehavior.OTHER, panel0.getBaselineResizeBehavior());
      assertFalse(panel0.isDoubleBuffered());
      assertEquals(0.5F, panel0.getAlignmentX(), 0.01F);
      assertTrue(panel0.getFocusTraversalKeysEnabled());
      assertEquals(0.5F, panel0.getAlignmentY(), 0.01F);
      assertFalse(panel0.isFocusTraversalPolicyProvider());
      assertEquals(0, panel0.getX());
      assertEquals(0, panel0.getY());
      assertFalse(panel0.getIgnoreRepaint());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JPanel jPanel0 = new JPanel();
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertNotNull(jPanel0);
      
      GridLayout2 gridLayout2_0 = new GridLayout2((-1368), 2175, (-2589), 2487);
      assertEquals((-2589), gridLayout2_0.getHgap());
      assertEquals((-1368), gridLayout2_0.getRows());
      assertEquals(2175, gridLayout2_0.getColumns());
      assertEquals(2487, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jPanel0);
      assertEquals((-2487), dimension0.height);
      assertEquals((-5628486), dimension0.width);
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertEquals((-2589), gridLayout2_0.getHgap());
      assertEquals((-1368), gridLayout2_0.getRows());
      assertEquals(2175, gridLayout2_0.getColumns());
      assertEquals(2487, gridLayout2_0.getVgap());
      assertEquals((-2487.0), dimension0.getHeight(), 0.01);
      assertEquals((-5628486.0), dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), 0, 0, 0);
      assertEquals((-1), gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertNotNull(gridLayout2_0);
      
      JToolBar jToolBar0 = new JToolBar(0);
      assertFalse(jToolBar0.isFocusTraversalPolicyProvider());
      assertFalse(jToolBar0.isFocusCycleRoot());
      assertFalse(jToolBar0.getIgnoreRepaint());
      assertFalse(jToolBar0.isFocusTraversalPolicySet());
      assertTrue(jToolBar0.getFocusTraversalKeysEnabled());
      assertNotNull(jToolBar0);
      
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jToolBar0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertNotNull(gridLayout2_0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertNotNull(jSpinner0);
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jSpinner0);
      assertEquals(19, dimension0.height);
      assertEquals(14, dimension0.width);
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertEquals(14.0, dimension0.getWidth(), 0.01);
      assertEquals(19.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertNotNull(gridLayout2_0);
      
      JSpinner jSpinner0 = new JSpinner();
      assertFalse(jSpinner0.isFocusTraversalPolicySet());
      assertTrue(jSpinner0.getFocusTraversalKeysEnabled());
      assertFalse(jSpinner0.getIgnoreRepaint());
      assertFalse(jSpinner0.isFocusCycleRoot());
      assertFalse(jSpinner0.isFocusTraversalPolicyProvider());
      assertNotNull(jSpinner0);
      
      GridLayout2 gridLayout2_1 = new GridLayout2((-2385), (-2385));
      assertEquals((-2385), gridLayout2_1.getRows());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(0, gridLayout2_1.getVgap());
      assertEquals((-2385), gridLayout2_1.getColumns());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(gridLayout2_1);
      
      // Undeclared exception!
      try { 
        gridLayout2_1.layoutContainer(jSpinner0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Action action0 = TransferHandler.getCutAction();
      assertNotNull(action0);
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(action0);
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertNotNull(jCheckBoxMenuItem0);
      
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertNotNull(gridLayout2_0);
      
      gridLayout2_0.setHgap(2027);
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(2027, gridLayout2_0.getHgap());
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertEquals(4, dimension0.height);
      assertEquals((-2023), dimension0.width);
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(2027, gridLayout2_0.getHgap());
      assertEquals(4.0, dimension0.getHeight(), 0.01);
      assertEquals((-2023.0), dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertNotSame(dimension1, dimension0);
      assertEquals((-2023), dimension1.width);
      assertEquals(4, dimension1.height);
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(2027, gridLayout2_0.getHgap());
      assertEquals(4.0, dimension1.getHeight(), 0.01);
      assertEquals((-2023.0), dimension1.getWidth(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      
      gridLayout2_0.layoutContainer(jCheckBoxMenuItem0);
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(2027, gridLayout2_0.getHgap());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertNotNull(gridLayout2_0);
      
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      assertNotNull(mockJFileChooser0);
      
      GridLayout2 gridLayout2_0 = new GridLayout2((-2194), (-2194), (-2194), (-2194));
      assertEquals((-2194), gridLayout2_0.getVgap());
      assertEquals((-2194), gridLayout2_0.getRows());
      assertEquals((-2194), gridLayout2_0.getHgap());
      assertEquals((-2194), gridLayout2_0.getColumns());
      assertNotNull(gridLayout2_0);
      
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(mockJFileChooser0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertNotNull(gridLayout2_0);
      
      Action action0 = TransferHandler.getCutAction();
      assertNotNull(action0);
      
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem(action0);
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertNotNull(jCheckBoxMenuItem0);
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertEquals(4, dimension0.width);
      assertEquals(4, dimension0.height);
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(4.0, dimension0.getHeight(), 0.01);
      assertEquals(4.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertNotSame(dimension1, dimension0);
      assertEquals(4, dimension1.height);
      assertEquals(4, dimension1.width);
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(4.0, dimension1.getWidth(), 0.01);
      assertEquals(4.0, dimension1.getHeight(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      
      Dimension dimension2 = gridLayout2_0.minimumLayoutSize(jCheckBoxMenuItem0);
      assertNotSame(dimension2, dimension1);
      assertNotSame(dimension2, dimension0);
      assertEquals(4, dimension2.height);
      assertEquals(4, dimension2.width);
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicyProvider());
      assertFalse(jCheckBoxMenuItem0.isFocusCycleRoot());
      assertTrue(jCheckBoxMenuItem0.getFocusTraversalKeysEnabled());
      assertFalse(jCheckBoxMenuItem0.getIgnoreRepaint());
      assertFalse(jCheckBoxMenuItem0.isFocusTraversalPolicySet());
      assertEquals(4.0, dimension2.getWidth(), 0.01);
      assertEquals(4.0, dimension2.getHeight(), 0.01);
      assertTrue(dimension2.equals((Object)dimension1));
      assertTrue(dimension2.equals((Object)dimension0));
      assertNotNull(dimension2);
      
      FileSystemView fileSystemView0 = MockFileSystemView.getFileSystemView();
      assertNotNull(fileSystemView0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser("JI]", fileSystemView0);
      assertNotNull(mockJFileChooser0);
      
      mockJFileChooser0.setName("JI]");
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      
      Dimension dimension3 = gridLayout2_0.minimumLayoutSize(mockJFileChooser0);
      assertNotSame(dimension3, dimension2);
      assertNotSame(dimension3, dimension1);
      assertNotSame(dimension3, dimension0);
      assertEquals(113, dimension3.height);
      assertEquals(596, dimension3.width);
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertEquals(596.0, dimension3.getWidth(), 0.01);
      assertEquals(113.0, dimension3.getHeight(), 0.01);
      assertFalse(dimension3.equals((Object)dimension2));
      assertFalse(dimension3.equals((Object)dimension1));
      assertFalse(dimension3.equals((Object)dimension0));
      assertNotNull(dimension3);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertNotNull(gridLayout2_0);
      
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      JTree jTree0 = new JTree(hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertNotNull(jTree0);
      
      Object object0 = jTree0.getTreeLock();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertNotNull(object0);
      
      Insets insets0 = jTree0.getInsets();
      assertEquals(0, insets0.right);
      assertEquals(0, insets0.bottom);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.top);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertNotNull(insets0);
      
      int int0 = jTree0.getComponentCount();
      assertEquals(1, int0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      
      CellRendererPane cellRendererPane0 = (CellRendererPane)jTree0.getComponent(0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertEquals(0.5F, cellRendererPane0.getAlignmentY(), 0.01F);
      assertFalse(cellRendererPane0.isFocusTraversalPolicySet());
      assertFalse(cellRendererPane0.getIgnoreRepaint());
      assertEquals(0, cellRendererPane0.getWidth());
      assertEquals(Component.BaselineResizeBehavior.OTHER, cellRendererPane0.getBaselineResizeBehavior());
      assertTrue(cellRendererPane0.getFocusTraversalKeysEnabled());
      assertEquals(0, cellRendererPane0.getX());
      assertEquals(0, cellRendererPane0.getHeight());
      assertEquals(0, cellRendererPane0.getY());
      assertFalse(cellRendererPane0.isOpaque());
      assertFalse(cellRendererPane0.isDoubleBuffered());
      assertFalse(cellRendererPane0.isFocusTraversalPolicyProvider());
      assertFalse(cellRendererPane0.isFocusCycleRoot());
      assertEquals(0.5F, cellRendererPane0.getAlignmentX(), 0.01F);
      assertNotNull(cellRendererPane0);
      
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jTree0);
      assertEquals(0, dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      Dimension dimension1 = gridLayout2_0.preferredLayoutSize(jTree0);
      assertNotSame(dimension1, dimension0);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertFalse(jTree0.isFocusTraversalPolicyProvider());
      assertFalse(jTree0.isFocusTraversalPolicySet());
      assertFalse(jTree0.getIgnoreRepaint());
      assertTrue(jTree0.getFocusTraversalKeysEnabled());
      assertFalse(jTree0.isFocusCycleRoot());
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(0, 3353);
      assertEquals(0, gridLayout2_0.getRows());
      assertEquals(3353, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      JList<Object> jList0 = new JList<Object>();
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertNotNull(jList0);
      
      jList0.requestFocus();
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      
      Object object0 = jList0.getTreeLock();
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertNotNull(object0);
      
      Insets insets0 = jList0.getInsets();
      assertEquals(0, insets0.top);
      assertEquals(0, insets0.right);
      assertEquals(0, insets0.left);
      assertEquals(0, insets0.bottom);
      assertTrue(jList0.getFocusTraversalKeysEnabled());
      assertFalse(jList0.getIgnoreRepaint());
      assertFalse(jList0.isFocusCycleRoot());
      assertFalse(jList0.isFocusTraversalPolicyProvider());
      assertFalse(jList0.isFocusTraversalPolicySet());
      assertNotNull(insets0);
      
      Button button0 = null;
      try {
        button0 = new Button("@z5");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertNotNull(gridLayout2_0);
      
      gridLayout2_0.setRows((-325));
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getVgap());
      assertEquals((-325), gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getColumns());
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      assertNotNull(mockJFileChooser0);
      
      boolean boolean0 = mockJFileChooser0.isFocusOwner();
      assertFalse(boolean0);
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(mockJFileChooser0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1, 1, 1, 1);
      assertEquals(1, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(1, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getHgap());
      assertNotNull(gridLayout2_0);
      
      byte[] byteArray0 = new byte[0];
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      assertNotNull(imageIcon0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      JRadioButton jRadioButton0 = new JRadioButton("J*@tU9rB`GM", imageIcon0);
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertNotNull(jRadioButton0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      GridLayout2 gridLayout2_1 = new GridLayout2((-1000), (-1000));
      assertEquals((-1000), gridLayout2_1.getRows());
      assertEquals((-1000), gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(0, gridLayout2_1.getVgap());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertNotNull(gridLayout2_1);
      
      jRadioButton0.setLayout(gridLayout2_1);
      assertNotSame(gridLayout2_1, gridLayout2_0);
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals((-1000), gridLayout2_1.getRows());
      assertEquals((-1000), gridLayout2_1.getColumns());
      assertEquals(0, gridLayout2_1.getHgap());
      assertEquals(0, gridLayout2_1.getVgap());
      assertFalse(gridLayout2_1.equals((Object)gridLayout2_0));
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      JLayeredPane jLayeredPane0 = new JLayeredPane();
      assertFalse(jLayeredPane0.isFocusCycleRoot());
      assertFalse(jLayeredPane0.isFocusTraversalPolicySet());
      assertFalse(jLayeredPane0.isFocusTraversalPolicyProvider());
      assertFalse(jLayeredPane0.getIgnoreRepaint());
      assertTrue(jLayeredPane0.getFocusTraversalKeysEnabled());
      assertNotNull(jLayeredPane0);
      
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jLayeredPane0);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertEquals(0, dimension0.height);
      assertEquals((-1), dimension0.width);
      assertEquals(1, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(1, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getHgap());
      assertFalse(jLayeredPane0.isFocusCycleRoot());
      assertFalse(jLayeredPane0.isFocusTraversalPolicySet());
      assertFalse(jLayeredPane0.isFocusTraversalPolicyProvider());
      assertFalse(jLayeredPane0.getIgnoreRepaint());
      assertTrue(jLayeredPane0.getFocusTraversalKeysEnabled());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals((-1.0), dimension0.getWidth(), 0.01);
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      assertNotNull(dimension0);
      
      gridLayout2_0.removeLayoutComponent(jLayeredPane0);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertEquals(1, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(1, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getHgap());
      assertFalse(jLayeredPane0.isFocusCycleRoot());
      assertFalse(jLayeredPane0.isFocusTraversalPolicySet());
      assertFalse(jLayeredPane0.isFocusTraversalPolicyProvider());
      assertFalse(jLayeredPane0.getIgnoreRepaint());
      assertTrue(jLayeredPane0.getFocusTraversalKeysEnabled());
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      
      JInternalFrame jInternalFrame0 = new JInternalFrame("J*@tU9rB`GM");
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(jInternalFrame0);
      
      Container container0 = jInternalFrame0.getContentPane();
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(container0.getFocusTraversalKeysEnabled());
      assertFalse(container0.isFocusTraversalPolicyProvider());
      assertFalse(container0.isFocusCycleRoot());
      assertFalse(container0.isFocusTraversalPolicySet());
      assertFalse(container0.getIgnoreRepaint());
      assertNotNull(container0);
      
      DefaultCaret defaultCaret0 = new DefaultCaret();
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertNotNull(defaultCaret0);
      
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertNotNull(mouseMotionListener0);
      
      DefaultCaret defaultCaret1 = (DefaultCaret)AWTEventMulticaster.remove(mouseMotionListener0, (MouseMotionListener) defaultCaret0);
      assertSame(defaultCaret0, defaultCaret1);
      assertSame(defaultCaret1, defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret1.width);
      assertEquals(0, defaultCaret1.y);
      assertEquals(0, defaultCaret1.x);
      assertEquals(0, defaultCaret1.height);
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getX(), 0.01);
      assertEquals(0.0, defaultCaret1.getY(), 0.01);
      assertEquals(0.0, defaultCaret1.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret1.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinY(), 0.01);
      assertTrue(defaultCaret1.isEmpty());
      assertEquals(0.0, defaultCaret1.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxX(), 0.01);
      assertNotNull(defaultCaret1);
      
      jInternalFrame0.addMouseMotionListener(defaultCaret1);
      assertSame(defaultCaret0, defaultCaret1);
      assertSame(defaultCaret1, defaultCaret0);
      assertEquals(0, defaultCaret0.height);
      assertEquals(0, defaultCaret0.x);
      assertEquals(0, defaultCaret0.width);
      assertEquals(0, defaultCaret0.y);
      assertEquals(0, defaultCaret1.width);
      assertEquals(0, defaultCaret1.y);
      assertEquals(0, defaultCaret1.x);
      assertEquals(0, defaultCaret1.height);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertEquals(0.0, defaultCaret0.getX(), 0.01);
      assertEquals(0.0, defaultCaret0.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret0.getHeight(), 0.01);
      assertTrue(defaultCaret0.isEmpty());
      assertEquals(0.0, defaultCaret0.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMinY(), 0.01);
      assertEquals(0.0, defaultCaret0.getY(), 0.01);
      assertEquals(0.0, defaultCaret0.getMaxX(), 0.01);
      assertEquals(0.0, defaultCaret0.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getX(), 0.01);
      assertEquals(0.0, defaultCaret1.getY(), 0.01);
      assertEquals(0.0, defaultCaret1.getWidth(), 0.01);
      assertEquals(0.0, defaultCaret1.getHeight(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinX(), 0.01);
      assertEquals(0.0, defaultCaret1.getCenterX(), 0.01);
      assertEquals(0.0, defaultCaret1.getMinY(), 0.01);
      assertTrue(defaultCaret1.isEmpty());
      assertEquals(0.0, defaultCaret1.getCenterY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxY(), 0.01);
      assertEquals(0.0, defaultCaret1.getMaxX(), 0.01);
      
      JPanel jPanel0 = (JPanel)jRadioButton0.add((Component) container0);
      assertSame(container0, jPanel0);
      assertSame(jPanel0, container0);
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(container0.getFocusTraversalKeysEnabled());
      assertFalse(container0.isFocusTraversalPolicyProvider());
      assertFalse(container0.isFocusCycleRoot());
      assertFalse(container0.isFocusTraversalPolicySet());
      assertFalse(container0.getIgnoreRepaint());
      assertTrue(jPanel0.getFocusTraversalKeysEnabled());
      assertFalse(jPanel0.isFocusTraversalPolicyProvider());
      assertFalse(jPanel0.isFocusCycleRoot());
      assertFalse(jPanel0.isFocusTraversalPolicySet());
      assertFalse(jPanel0.getIgnoreRepaint());
      assertNotNull(jPanel0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      jInternalFrame0.reshape((-1000), (-1000), 1, 1201);
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      
      boolean boolean0 = jRadioButton0.isFocusOwner();
      assertFalse(boolean0);
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      gridLayout2_0.layoutContainer(container0);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertSame(container0, jPanel0);
      assertEquals(1, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(1, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getHgap());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertTrue(container0.getFocusTraversalKeysEnabled());
      assertFalse(container0.isFocusTraversalPolicyProvider());
      assertFalse(container0.isFocusCycleRoot());
      assertFalse(container0.isFocusTraversalPolicySet());
      assertFalse(container0.getIgnoreRepaint());
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener1);
      assertNotSame(aWTEventMulticaster0, mouseMotionListener0);
      assertFalse(aWTEventMulticaster0.equals((Object)mouseMotionListener0));
      assertNotNull(aWTEventMulticaster0);
      
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      assertNotSame(aWTEventMulticaster0, mouseMotionListener0);
      assertFalse(aWTEventMulticaster0.equals((Object)mouseMotionListener0));
      assertNull(hierarchyBoundsListener2);
      
      jRadioButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      JPanel jPanel1 = (JPanel)jInternalFrame0.getContentPane();
      assertSame(jPanel1, container0);
      assertSame(jPanel1, jPanel0);
      assertFalse(jPanel1.isFocusTraversalPolicyProvider());
      assertFalse(jPanel1.isFocusCycleRoot());
      assertTrue(jPanel1.getFocusTraversalKeysEnabled());
      assertFalse(jPanel1.isFocusTraversalPolicySet());
      assertFalse(jPanel1.getIgnoreRepaint());
      assertTrue(jInternalFrame0.isFocusTraversalPolicySet());
      assertTrue(jInternalFrame0.getFocusTraversalKeysEnabled());
      assertFalse(jInternalFrame0.getIgnoreRepaint());
      assertFalse(jInternalFrame0.isFocusTraversalPolicyProvider());
      assertNotNull(jPanel1);
      
      Dimension dimension1 = gridLayout2_0.preferredLayoutSize(jRadioButton0);
      assertNotSame(gridLayout2_0, gridLayout2_1);
      assertNotSame(dimension1, dimension0);
      assertEquals(8, dimension1.height);
      assertEquals(8, dimension1.width);
      assertEquals(1, gridLayout2_0.getColumns());
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(1, gridLayout2_0.getVgap());
      assertEquals(1, gridLayout2_0.getHgap());
      assertFalse(jRadioButton0.isFocusTraversalPolicyProvider());
      assertFalse(jRadioButton0.isFocusTraversalPolicySet());
      assertFalse(jRadioButton0.isFocusCycleRoot());
      assertFalse(jRadioButton0.getIgnoreRepaint());
      assertFalse(jRadioButton0.getFocusTraversalKeysEnabled());
      assertEquals(8.0, dimension1.getHeight(), 0.01);
      assertEquals(8.0, dimension1.getWidth(), 0.01);
      assertFalse(gridLayout2_0.equals((Object)gridLayout2_1));
      assertFalse(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        gridLayout2_1.preferredLayoutSize(container0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertNotNull(gridLayout2_0);
      
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      assertNotNull(mockJFileChooser0);
      
      gridLayout2_0.layoutContainer(mockJFileChooser0);
      assertEquals(1, gridLayout2_0.getRows());
      assertEquals(0, gridLayout2_0.getHgap());
      assertEquals(0, gridLayout2_0.getColumns());
      assertEquals(0, gridLayout2_0.getVgap());
      assertFalse(mockJFileChooser0.getIgnoreRepaint());
      assertFalse(mockJFileChooser0.isFocusCycleRoot());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicyProvider());
      assertFalse(mockJFileChooser0.isFocusTraversalPolicySet());
      assertTrue(mockJFileChooser0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(2058, 2058);
      JPanel jPanel0 = new JPanel(gridLayout2_0, true);
      jPanel0.getAlignmentX();
      SynthMenuUI synthMenuUI0 = new SynthMenuUI();
      jPanel0.removePropertyChangeListener("J4A", (PropertyChangeListener) synthMenuUI0);
      gridLayout2_0.minimumLayoutSize(jPanel0);
      gridLayout2_0.layoutContainer(jPanel0);
      gridLayout2_0.minimumLayoutSize(jPanel0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      FlowLayout flowLayout0 = new FlowLayout(0, 0, 0);
      jSpinner_DefaultEditor0.setLayout(flowLayout0);
      Component component0 = null;
      // Undeclared exception!
      try { 
        jSpinner0.add((Component) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-552), (-552));
      Object[] objectArray0 = new Object[3];
      Container container0 = null;
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JPanel jPanel0 = new JPanel();
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jPanel0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Hashtable<String, Integer> hashtable0 = new Hashtable<String, Integer>();
      JTree jTree0 = new JTree(hashtable0);
      jTree0.getTreeLock();
      jTree0.getInsets();
      gridLayout2_0.layoutContainer(jTree0);
      gridLayout2_0.minimumLayoutSize(jTree0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      gridLayout2_0.minimumLayoutSize(jTree0);
      GridLayout2 gridLayout2_1 = new GridLayout2();
      Frame frame0 = null;
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog((Frame) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows((-2777));
      JPanel jPanel0 = new JPanel();
      gridLayout2_0.layoutContainer(jPanel0);
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jPanel0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      Panel panel0 = new Panel(gridLayout2_0);
      GridLayout2 gridLayout2_1 = new GridLayout2((-872), (-872));
      // Undeclared exception!
      try { 
        gridLayout2_1.minimumLayoutSize(panel0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-3709), (-1), (-1), (-1));
      BasicTreeUI basicTreeUI0 = new BasicTreeUI();
      basicTreeUI0.getCollapsedIcon();
      boolean boolean0 = false;
      JCheckBox jCheckBox0 = new JCheckBox((String) null, (Icon) null, false);
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jCheckBox0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), (-1));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jSpinner0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-2699), 0, (-2699), 1);
      assertEquals(0, gridLayout2_0.getColumns());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      MockFile mockFile0 = new MockFile("");
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser(mockFile0);
      mockJFileChooser0.getVetoableChangeListeners();
      GridLayout2 gridLayout2_1 = new GridLayout2(0, 553);
      gridLayout2_1.layoutContainer(mockJFileChooser0);
      gridLayout2_1.layoutContainer(mockJFileChooser0);
      Dimension dimension0 = gridLayout2_1.minimumLayoutSize(mockJFileChooser0);
      assertEquals(802, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-28), (-28));
      assertEquals(0, gridLayout2_0.getHgap());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(2058, 2058);
      JPanel jPanel0 = new JPanel(gridLayout2_0, true);
      jPanel0.getAlignmentX();
      SynthMenuUI synthMenuUI0 = new SynthMenuUI();
      jPanel0.removePropertyChangeListener("J4A", (PropertyChangeListener) synthMenuUI0);
      gridLayout2_0.minimumLayoutSize(jPanel0);
      gridLayout2_0.layoutContainer(jPanel0);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jPanel0);
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      Dimension dimension1 = gridLayout2_0.minimumLayoutSize(jSpinner0);
      assertEquals(29, dimension1.height);
      assertEquals(9, dimension1.width);
      
      Dimension dimension2 = gridLayout2_0.minimumLayoutSize(jSpinner_DefaultEditor0);
      assertFalse(dimension2.equals((Object)dimension0));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)110;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-125);
      byteArray0[3] = (byte) (-25);
      byteArray0[4] = (byte)91;
      byteArray0[5] = (byte)84;
      byteArray0[6] = (byte)0;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0, "");
      JButton jButton0 = new JButton("", imageIcon0);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jButton0);
      assertEquals(10.0, dimension0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }
}

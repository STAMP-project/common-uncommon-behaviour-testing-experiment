/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:12:38 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage(503, 1);
      assertEquals(1, complexImage1.Y());
      assertEquals(503, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.subtract(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(503, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.multiply((float) 503, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI(128, (-430), (-2382), 2627);
      assertEquals(128, rOI0.lx());
      assertEquals(2627, rOI0.ly());
      assertEquals(3058, rOI0.Y());
      assertEquals(2511, rOI0.X());
      assertEquals((-2382), rOI0.ux());
      assertEquals((-430), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(2930, (-143), (float) 2930, 255.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -143
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, 0.0F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertSame(complexImage0, complexImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Complex complex0 = complexImage1.min();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI1 = new ROI((-298), 395, 677, 0);
      assertEquals((-298), rOI1.ux());
      assertEquals(395, rOI1.ly());
      assertEquals(976, rOI1.X());
      assertEquals(396, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(677, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.X();
      assertEquals((-298), rOI1.ux());
      assertEquals(395, rOI1.ly());
      assertEquals(976, rOI1.X());
      assertEquals(396, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(677, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(976, int1);
      assertNotSame(rOI1, rOI0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      
      float float0 = (-32768.0F);
      // Undeclared exception!
      try { 
        complexImage2.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 886;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int2 = complexImage0.X();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = complexImage0.Y();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = (-1016);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(0, (-1016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1016
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.subtract((float) 1, (float) 1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ComplexImage complexImage3 = new ComplexImage(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 1441;
      int int1 = 1436;
      int int2 = (-2669);
      ROI rOI1 = new ROI((-2669), 0, 1, 0);
      assertEquals(2671, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals((-2669), rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.X();
      assertEquals(2671, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals((-2669), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(2671, int3);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.Y();
      assertEquals(2671, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals((-2669), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(1, int4);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI1.X();
      assertEquals(2671, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals((-2669), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(2671, int5);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 1436, 0.0F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1586, 0);
      assertEquals(1586, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1586, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.add(1.0F, 1.0F);
      assertEquals(1586, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(1586, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-865), (-865), (float) (-865));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(552, 2782);
      assertEquals(552, complexImage1.X());
      assertEquals(2782, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 518;
      ComplexImage complexImage1 = new ComplexImage(518, 518);
      assertEquals(518, complexImage1.Y());
      assertEquals(518, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 552;
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(552);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(552, (int)integer0);
      
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(2309, 35, 2309, 2309, (float) 2309, (-4245.0225F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-2669), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-2669), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(2671, int1);
      
      int int2 = rOI0.Y();
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-2669), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = rOI0.X();
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-2669), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(2671, int3);
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-1701);
      int int1 = 255;
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1701), 255);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.add(0.0F, 0.0F);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setReal(1, 322, 492.1772F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      int int5 = 1;
      Complex complex0 = null;
      try {
        complex0 = new Complex((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.math.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.divide((-1649.0304F), 2542.02F);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      complexImage0.multiply(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(1, 0, 1, 956, (float) 0, (float) 956);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.subtract(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, int0);
      
      int int1 = rOI0.Y();
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2671, int2);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(202, 202, 1523.1006F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = complexImage0.X();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.divide((-1.0F), (-1.0F));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(507, 507);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(552);
      assertNotNull(integer0);
      assertEquals(552, (int)integer0);
      
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 552;
      int int1 = (-2551);
      ROI rOI0 = new ROI(552, 552, (-1), (-2551));
      assertEquals(552, rOI0.lx());
      assertEquals(552, rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(554, rOI0.X());
      assertEquals((-2551), rOI0.uy());
      assertEquals(3104, rOI0.Y());
      assertNotNull(rOI0);
      
      int int2 = (-16777216);
      rOI0.setROI(0, (-1), 128, (-16777216));
      assertEquals((-16777216), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(128, rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals(129, rOI0.X());
      assertEquals(16777216, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-765), 552, (float) (-765), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = new Integer(552);
      assertEquals(552, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 0, (-2739.5073F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(549, 0);
      assertEquals(549, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.multiply(0.0F, (float) 549);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage1.set(549, 549, 0.0F, 1635.9F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 549
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage2 = new ComplexImage(2469, 0);
      assertEquals(2469, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      complexImage2.setImaginary((RealGrayImage) null);
      assertEquals(2469, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      ImageProducer imageProducer0 = complexImage2.getJavaImage();
      assertEquals(2469, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(imageProducer0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = complexImage2.multiply((-2279.17F), 3802.2F);
      assertEquals(2469, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(2469, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 549);
      assertEquals(0, complexImage0.X());
      assertEquals(549, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.add((-993.0F), (-2851.587F));
      assertEquals(0, complexImage0.X());
      assertEquals(549, complexImage0.Y());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(549, complexImage0.Y());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(549, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1057), (-1057), (-138.0F), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.divide((float) 549, 0.0F);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage2.getImag(521, 2946);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2946
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = complexImage1.X();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, int0);
      assertNotSame(complexImage1, complexImage0);
      
      int int1 = complexImage1.Y();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(complexImage1, complexImage0);
      
      int int2 = (-1016);
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, (-1016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1016
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(547, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 547
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.add(1, 1, (float) 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertNotNull(complex0);
      
      double double0 = complex0.real();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = complex0.magnitude();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(304, 2, complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI((-1269), (-1269), (-1269), 185);
      assertEquals((-1269), rOI0.uy());
      assertEquals((-1269), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1455, rOI0.Y());
      assertEquals((-1269), rOI0.lx());
      assertEquals(185, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1409, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      float float0 = 0.0F;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = (-2659);
      rOI0.setROI(1436, 0, 1436, 1170);
      assertEquals(1171, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1436, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(1436, rOI0.ux());
      assertEquals(1170, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1441, 1441, 0.0F, (float) 1441);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.get(1624, 1624);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = (-3259);
      int int1 = (-818);
      float float0 = (-1.0F);
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(int0, int1, float0, (float) int1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = 552;
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(552, realGrayImage0.X());
      assertEquals(552, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(552, realGrayImage0.X());
      assertEquals(552, realGrayImage0.Y());
      
      double double0 = 678.57522321;
      double double1 = 2.0;
      Complex complex0 = new Complex(double0, double1);
      assertEquals(678L, complex0.longValue());
      assertEquals(678.5781F, complex0.floatValue(), 0.01F);
      assertEquals((byte) (-90), complex0.byteValue());
      assertEquals(678.5751953125, complex0.real(), 0.01);
      assertEquals(678, complex0.intValue());
      assertEquals(0.0029473435259492913, complex0.arg(), 0.01);
      assertEquals(678.5781320157613, complex0.doubleValue(), 0.01);
      assertEquals(2.0, complex0.imaginary(), 0.01);
      assertEquals(678.5781320157613, complex0.magnitude(), 0.01);
      assertEquals(2.0, complex0.imag(), 0.01);
      assertEquals((short)678, complex0.shortValue());
      assertNotNull(complex0);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int1 = (-2061);
      Complex complex1 = new Complex(complex0);
      assertEquals(678L, complex0.longValue());
      assertEquals(678.5781F, complex0.floatValue(), 0.01F);
      assertEquals((byte) (-90), complex0.byteValue());
      assertEquals(678.5751953125, complex0.real(), 0.01);
      assertEquals(678, complex0.intValue());
      assertEquals(0.0029473435259492913, complex0.arg(), 0.01);
      assertEquals(678.5781320157613, complex0.doubleValue(), 0.01);
      assertEquals(2.0, complex0.imaginary(), 0.01);
      assertEquals(678.5781320157613, complex0.magnitude(), 0.01);
      assertEquals(2.0, complex0.imag(), 0.01);
      assertEquals((short)678, complex0.shortValue());
      assertEquals((byte) (-90), complex1.byteValue());
      assertEquals(678.5781F, complex1.floatValue(), 0.01F);
      assertEquals(678.5781320157613, complex1.magnitude(), 0.01);
      assertEquals(678.5751953125, complex1.real(), 0.01);
      assertEquals(678, complex1.intValue());
      assertEquals((short)678, complex1.shortValue());
      assertEquals(0.0029473435259492913, complex1.arg(), 0.01);
      assertEquals(678L, complex1.longValue());
      assertEquals(2.0, complex1.imag(), 0.01);
      assertEquals(678.5781320157613, complex1.doubleValue(), 0.01);
      assertEquals(2.0, complex1.imaginary(), 0.01);
      assertNotNull(complex1);
      assertNotEquals(double0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      complexImage0.set(int0, int1, complex1, rOI1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = (-2669);
      float float0 = (-1154.22F);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 67, 0, (-2669), (float) 67, (-1154.22F));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(67, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(1, (-1522), 2775, 2775, (-2310.2F), (float) 2775);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2671, int2);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1566, 2, (-1069), (-1069));
      assertEquals(1566, rOI0.lx());
      assertEquals(1072, rOI0.Y());
      assertEquals(2, rOI0.ly());
      assertEquals(2636, rOI0.X());
      assertEquals((-1069), rOI0.ux());
      assertEquals((-1069), rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1566, rOI0.lx());
      assertEquals(1072, rOI0.Y());
      assertEquals(2, rOI0.ly());
      assertEquals(2636, rOI0.X());
      assertEquals((-1069), rOI0.ux());
      assertEquals((-1069), rOI0.uy());
      assertEquals(2636, int0);
      
      rOI0.setROI(2, 1, (-1772), 414);
      assertEquals(414, rOI0.ly());
      assertEquals(2, rOI0.lx());
      assertEquals(1775, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(414, rOI0.Y());
      assertEquals((-1772), rOI0.ux());
      
      rOI0.setROI((-1568), 16, 1566, (-1568));
      assertEquals(1566, rOI0.lx());
      assertEquals(1585, rOI0.Y());
      assertEquals(16, rOI0.ly());
      assertEquals(3135, rOI0.X());
      assertEquals((-1568), rOI0.uy());
      assertEquals((-1568), rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(1566, rOI0.lx());
      assertEquals(1585, rOI0.Y());
      assertEquals(16, rOI0.ly());
      assertEquals(3135, rOI0.X());
      assertEquals((-1568), rOI0.uy());
      assertEquals((-1568), rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(1585, int1);
      
      int int2 = rOI0.X();
      assertEquals(1566, rOI0.lx());
      assertEquals(1585, rOI0.Y());
      assertEquals(16, rOI0.ly());
      assertEquals(3135, rOI0.X());
      assertEquals((-1568), rOI0.uy());
      assertEquals((-1568), rOI0.ux());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(3135, int2);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage2.setReal((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage2.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1371), (-4331), (-553.94F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 5509;
      int int1 = (-2296);
      // Undeclared exception!
      try { 
        complexImage0.getReal(5509, (-2296));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.X();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, int0);
      
      int int1 = 549;
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rOI0).ly();
      doReturn(0, 0).when(rOI0).ux();
      doReturn(0).when(rOI0).uy();
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI(1618, 892, 1, (-143));
      assertEquals(1036, rOI0.Y());
      assertEquals((-143), rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1618, rOI0.lx());
      assertEquals(1618, rOI0.X());
      assertEquals(892, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.divide((-1.0F), (-1.0F));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = 0;
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage1, realGrayImage0);
      
      float float0 = 1322.3533F;
      ComplexImage complexImage1 = complexImage0.subtract(1322.3533F, 0.0F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage1.setImaginary(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = 395;
      Complex complex0 = complexImage1.min();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI1 = new ROI(0, 0, 16, 395);
      assertEquals(396, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(16, rOI1.lx());
      assertEquals(17, rOI1.X());
      assertEquals(395, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.X();
      assertEquals(396, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(16, rOI1.lx());
      assertEquals(17, rOI1.X());
      assertEquals(395, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(17, int2);
      assertNotSame(rOI1, rOI0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage2 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      
      int int3 = 1;
      int int4 = (-327);
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, (float) 0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 245;
      ROI rOI0 = new ROI(552, 1495, 552, 552);
      assertEquals(1, rOI0.X());
      assertEquals(944, rOI0.Y());
      assertEquals(552, rOI0.lx());
      assertEquals(1495, rOI0.ly());
      assertEquals(552, rOI0.ux());
      assertEquals(552, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(3976, 245, 245, 2288);
      assertEquals(245, rOI0.ux());
      assertEquals(2044, rOI0.Y());
      assertEquals(245, rOI0.uy());
      assertEquals(3976, rOI0.lx());
      assertEquals(2288, rOI0.ly());
      assertEquals(3732, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(245, 552, (-2446.388F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 797
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      
      // Undeclared exception!
      try { 
        complexImage0.get(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 506, (float) 506);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      int int0 = 255;
      // Undeclared exception!
      try { 
        complexImage0.divide(255, 546, (-1.0F), (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI(2158, 1, 0, 2158);
      assertEquals(2158, rOI1.ly());
      assertEquals(2158, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(2159, rOI1.X());
      assertEquals(2158, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      rOI0.setROI(0, 1, 2177, 0);
      assertEquals(1, rOI0.ly());
      assertEquals(2177, rOI0.lx());
      assertEquals(2178, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      int int5 = rOI1.X();
      assertEquals(2158, rOI1.ly());
      assertEquals(2158, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(2159, rOI1.X());
      assertEquals(2158, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(2159, int5);
      assertNotSame(rOI1, rOI0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = new ComplexImage();
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotNull(complexImage3);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage3.real();
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNull(realGrayImage0);
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage3.multiply(complexImage1, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = 0;
      int int1 = 3223;
      int int2 = (-1);
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 552;
      int int1 = 538;
      ComplexImage complexImage0 = new ComplexImage(552, 538);
      assertEquals(538, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      Integer integer0 = new Integer(538);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals(538, (int)integer0);
      
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2671, int2);
      
      int int3 = rOI0.Y();
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      int int4 = rOI0.X();
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(2671, int4);
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2669
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.add(56, 525, 0.0F, 631.79016F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 525
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(0, 0, (float) 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(552);
      assertNotNull(integer0);
      assertEquals(552, (int)integer0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      String string0 = complexImage1.toString(rOI0);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals("1:1\nnull \n1:1\nnull \n", string0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      rOI0.setROI((-1690), 0, (-859), (-2112));
      assertEquals((-2112), rOI0.uy());
      assertEquals((-859), rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2113, rOI0.Y());
      assertEquals((-1690), rOI0.ux());
      assertEquals(832, rOI0.X());
      
      int int4 = rOI0.lx();
      assertEquals((-2112), rOI0.uy());
      assertEquals((-859), rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2113, rOI0.Y());
      assertEquals((-1690), rOI0.ux());
      assertEquals(832, rOI0.X());
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals((-859), int4);
      
      int int5 = rOI0.ux();
      assertEquals((-2112), rOI0.uy());
      assertEquals((-859), rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2113, rOI0.Y());
      assertEquals((-1690), rOI0.ux());
      assertEquals(832, rOI0.X());
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals((-1690), int5);
      
      int int6 = rOI0.ux();
      assertEquals((-2112), rOI0.uy());
      assertEquals((-859), rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2113, rOI0.Y());
      assertEquals((-1690), rOI0.ux());
      assertEquals(832, rOI0.X());
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertTrue(int6 == int5);
      assertEquals((-1690), int6);
      
      ROI rOI1 = new ROI(3223, (-859), 1, 255);
      assertEquals(1, rOI1.ux());
      assertEquals(1115, rOI1.Y());
      assertEquals(3223, rOI1.lx());
      assertEquals((-859), rOI1.uy());
      assertEquals(255, rOI1.ly());
      assertEquals(3223, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 0, 1630.48F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int1);
      assertEquals(0, int8);
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1586, 0);
      assertEquals(1586, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(1586, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI((-1), 0, (-143), 165);
      assertEquals(165, rOI0.ly());
      assertEquals((-143), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(143, rOI0.X());
      assertEquals((-1), rOI0.lx());
      assertEquals(166, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        complexImage0.set(1, 1, (-659.9758F), (-659.9758F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI(1, 1, 56, 1);
      assertEquals(56, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(56, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      complexImage0.setReal(56, 504, (float) 552, rOI0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertEquals(0, int8);
      
      ROI rOI1 = new ROI(0, 522, 0, 0);
      assertEquals(0, rOI1.lx());
      assertEquals(522, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(523, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-3659), 708, 233.20685F, (-320.4F), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI(1, 1, 56, 1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(56, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(56, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.addbuffer(3115, 1, 1, 1, (float) 56, 960.8124F);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(3115, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 956, (-1357.4464F), (float) 956);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      complexImage2.subtract(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      Complex complex0 = new Complex(1.0, 1.0);
      assertEquals(1, complex0.intValue());
      assertEquals(1.4142135623730951, complex0.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex0.doubleValue(), 0.01);
      assertEquals(1.0, complex0.imaginary(), 0.01);
      assertEquals((byte)1, complex0.byteValue());
      assertEquals(1.4142135F, complex0.floatValue(), 0.01F);
      assertEquals(1L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)1, complex0.shortValue());
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertNotNull(complex0);
      
      double double0 = complex0.real();
      assertEquals(1, complex0.intValue());
      assertEquals(1.4142135623730951, complex0.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex0.doubleValue(), 0.01);
      assertEquals(1.0, complex0.imaginary(), 0.01);
      assertEquals((byte)1, complex0.byteValue());
      assertEquals(1.4142135F, complex0.floatValue(), 0.01F);
      assertEquals(1L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)1, complex0.shortValue());
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(1, complex0.intValue());
      assertEquals(1.4142135623730951, complex0.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex0.doubleValue(), 0.01);
      assertEquals(1.0, complex0.imaginary(), 0.01);
      assertEquals((byte)1, complex0.byteValue());
      assertEquals(1.4142135F, complex0.floatValue(), 0.01F);
      assertEquals(1L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)1, complex0.shortValue());
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1, complex1.intValue());
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.4142135623730951, complex1.doubleValue(), 0.01);
      assertEquals(1.4142135623730951, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(1L, complex1.longValue());
      assertEquals(1.4142135F, complex1.floatValue(), 0.01F);
      assertEquals(1.0, complex1.imag(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.add(complex1, complex1);
      assertEquals(1, complex0.intValue());
      assertEquals(1.4142135623730951, complex0.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex0.doubleValue(), 0.01);
      assertEquals(1.0, complex0.imaginary(), 0.01);
      assertEquals((byte)1, complex0.byteValue());
      assertEquals(1.4142135F, complex0.floatValue(), 0.01F);
      assertEquals(1L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)1, complex0.shortValue());
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1, complex1.intValue());
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.4142135623730951, complex1.doubleValue(), 0.01);
      assertEquals(1.4142135623730951, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(1L, complex1.longValue());
      assertEquals(1.4142135F, complex1.floatValue(), 0.01F);
      assertEquals(1.0, complex1.imag(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(2, complex2.intValue());
      assertEquals(2.8284271247461903, complex2.magnitude(), 0.01);
      assertEquals(2.0, complex2.imag(), 0.01);
      assertEquals(2.0, complex2.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals((short)2, complex2.shortValue());
      assertEquals(2.8284271247461903, complex2.doubleValue(), 0.01);
      assertEquals(2L, complex2.longValue());
      assertEquals(2.0, complex2.real(), 0.01);
      assertEquals((byte)2, complex2.byteValue());
      assertEquals(2.828427F, complex2.floatValue(), 0.01F);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      
      ComplexImage complexImage3 = complexImage1.clear(complex2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complex0.intValue());
      assertEquals(1.4142135623730951, complex0.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex0.doubleValue(), 0.01);
      assertEquals(1.0, complex0.imaginary(), 0.01);
      assertEquals((byte)1, complex0.byteValue());
      assertEquals(1.4142135F, complex0.floatValue(), 0.01F);
      assertEquals(1L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)1, complex0.shortValue());
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1, complex1.intValue());
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.4142135623730951, complex1.doubleValue(), 0.01);
      assertEquals(1.4142135623730951, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(1L, complex1.longValue());
      assertEquals(1.4142135F, complex1.floatValue(), 0.01F);
      assertEquals(1.0, complex1.imag(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(2, complex2.intValue());
      assertEquals(2.8284271247461903, complex2.magnitude(), 0.01);
      assertEquals(2.0, complex2.imag(), 0.01);
      assertEquals(2.0, complex2.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals((short)2, complex2.shortValue());
      assertEquals(2.8284271247461903, complex2.doubleValue(), 0.01);
      assertEquals(2L, complex2.longValue());
      assertEquals(2.0, complex2.real(), 0.01);
      assertEquals((byte)2, complex2.byteValue());
      assertEquals(2.828427F, complex2.floatValue(), 0.01F);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      
      ImageProducer imageProducer0 = complexImage3.getJavaImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complex0.intValue());
      assertEquals(1.4142135623730951, complex0.magnitude(), 0.01);
      assertEquals(1.4142135623730951, complex0.doubleValue(), 0.01);
      assertEquals(1.0, complex0.imaginary(), 0.01);
      assertEquals((byte)1, complex0.byteValue());
      assertEquals(1.4142135F, complex0.floatValue(), 0.01F);
      assertEquals(1L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)1, complex0.shortValue());
      assertEquals(1.0, complex0.imag(), 0.01);
      assertEquals(1.0, complex0.real(), 0.01);
      assertEquals(1, complex1.intValue());
      assertEquals((byte)1, complex1.byteValue());
      assertEquals(1.4142135623730951, complex1.doubleValue(), 0.01);
      assertEquals(1.4142135623730951, complex1.magnitude(), 0.01);
      assertEquals(1.0, complex1.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals((short)1, complex1.shortValue());
      assertEquals(1L, complex1.longValue());
      assertEquals(1.4142135F, complex1.floatValue(), 0.01F);
      assertEquals(1.0, complex1.imag(), 0.01);
      assertEquals(1.0, complex1.real(), 0.01);
      assertEquals(2, complex2.intValue());
      assertEquals(2.8284271247461903, complex2.magnitude(), 0.01);
      assertEquals(2.0, complex2.imag(), 0.01);
      assertEquals(2.0, complex2.imaginary(), 0.01);
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals((short)2, complex2.shortValue());
      assertEquals(2.8284271247461903, complex2.doubleValue(), 0.01);
      assertEquals(2L, complex2.longValue());
      assertEquals(2.0, complex2.real(), 0.01);
      assertEquals((byte)2, complex2.byteValue());
      assertEquals(2.828427F, complex2.floatValue(), 0.01F);
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotNull(imageProducer0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage3.getImag(0, 956);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 956
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(3, 3);
      assertEquals(3, complexImage1.X());
      assertEquals(3, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      ComplexImage complexImage2 = complexImage1.addbuffer(2007, 1, (float) 2007, (float) 2007);
      assertEquals(3, complexImage1.X());
      assertEquals(3, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(2007, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      int int0 = 35;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-5056), 0, (-5056), 35, (float) (-5056), (float) (-5056));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(3, 3);
      assertEquals(3, complexImage1.X());
      assertEquals(3, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      ROI rOI1 = new ROI(3, 3, 1663, 1663);
      assertEquals(1661, rOI1.Y());
      assertEquals(1661, rOI1.X());
      assertEquals(1663, rOI1.ly());
      assertEquals(3, rOI1.ux());
      assertEquals(1663, rOI1.lx());
      assertEquals(3, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage1 = complexImage1.getMagnitudeImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ROI rOI1 = new ROI(2732, 0, 0, (-2667));
      assertEquals(0, rOI1.ly());
      assertEquals(2733, rOI1.X());
      assertEquals(2668, rOI1.Y());
      assertEquals((-2667), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(2732, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.X();
      assertEquals(0, rOI1.ly());
      assertEquals(2733, rOI1.X());
      assertEquals(2668, rOI1.Y());
      assertEquals((-2667), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(2732, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(2733, int1);
      assertNotSame(rOI1, rOI0);
      
      int int2 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      assertNotSame(rOI0, rOI1);
      
      int int3 = rOI1.X();
      assertEquals(0, rOI1.ly());
      assertEquals(2733, rOI1.X());
      assertEquals(2668, rOI1.Y());
      assertEquals((-2667), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(2732, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(2733, int3);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.min(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-3861), (-3861), (float) (-3861), (-2184.0F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI(1, 1, 56, 1);
      assertEquals(56, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(56, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = new ComplexImage();
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage3.addbuffer(0, 1, (-32768.0F), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int8 == int2);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertEquals(0, int8);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 956, (-1357.4464F), (float) 956);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      String string0 = complexImage0.toString();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertEquals("0:0\n0:0\n", string0);
      assertNotSame(complexImage0, complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      complexImage2.subtract(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      complexImage0.real = null;
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag((-1998), (-1998), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(2, 3944, (-349.3F), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      float float0 = 0.0F;
      float float1 = 32767.0F;
      int int0 = 0;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(0, 0, 415.9329F, (-2839.6152F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(2120, 2120);
      assertEquals(2120, complexImage0.X());
      assertEquals(2120, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      int int1 = 0;
      float float0 = 0.0F;
      int int2 = (-2669);
      int int3 = 1;
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int4 = rOI0.X();
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(2671, int4);
      
      int int5 = rOI0.Y();
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals(1, int5);
      
      int int6 = 4063;
      rOI0.setROI(4063, 1, 0, 0);
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(4063, rOI0.lx());
      assertEquals(4064, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI((-274), 1, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(275, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals((-274), rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.multiply(2032.9412F, 0.0F);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(549, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(549, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(584, 2782);
      assertEquals(584, complexImage0.X());
      assertEquals(2782, complexImage0.Y());
      assertNotNull(complexImage0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.diff((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      int int0 = 559;
      ComplexImage complexImage0 = new ComplexImage(552, 559);
      assertEquals(552, complexImage0.X());
      assertEquals(559, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      complexImage0.toString();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1245, 1245, (float) 1245, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.imag;
      assertNull(realGrayImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      complexImage0.setReal(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add(0.0F, 0.0F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = 0;
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage1, realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.subtract(1322.3533F, 0.0F);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = 395;
      Complex complex0 = complexImage1.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI1 = new ROI(0, 0, 16, 395);
      assertEquals(396, rOI1.Y());
      assertEquals(395, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(17, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.X();
      assertEquals(396, rOI1.Y());
      assertEquals(395, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(17, rOI1.X());
      assertEquals(16, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(17, int2);
      assertNotSame(rOI1, rOI0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage2 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.setReal(1, (-327), 1322.3533F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.min((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.imag;
      assertNull(realGrayImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag((-4324), (-799));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(552);
      assertNotNull(integer0);
      assertEquals(552, (int)integer0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(552, realGrayImage0.X());
      assertEquals(552, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage();
      complexImage2.setImag(realGrayImage0);
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.add((-993.0F), (-2851.587F));
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(549, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(0, 0, (float) 549, (-1208.4099F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      
      complexImage1.setReal(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      Complex complex0 = complexImage2.max();
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertNotNull(complex0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      
      RealGrayImage realGrayImage1 = complexImage1.getMagnitudeImage();
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(549, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertNotNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      
      RealGrayImage realGrayImage2 = complexImage2.imaginary();
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(549, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertNotNull(realGrayImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI((-151), 2041, (-1174), 0);
      assertEquals(2042, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals((-151), rOI0.lx());
      assertEquals(2041, rOI0.ly());
      assertEquals((-1174), rOI0.ux());
      assertEquals(1024, rOI0.X());
      
      rOI0.setROI(541, 541, 996, 541);
      assertEquals(541, rOI0.ux());
      assertEquals(996, rOI0.lx());
      assertEquals(456, rOI0.X());
      assertEquals(541, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(541, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-151), 1094, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        complexImage0.max((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = (-1);
      float float0 = (-1649.0304F);
      float float1 = 0.0F;
      int int1 = 1;
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2671, int2);
      
      int int3 = rOI0.Y();
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      int int4 = (-2263);
      int int5 = 0;
      rOI0.setROI((-1), (-16777216), 0, (-1));
      assertEquals(2, rOI0.X());
      assertEquals(16777216, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      
      rOI0.setROI(2671, 1, 1, 0);
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(2671, rOI0.lx());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int6 = 0;
      // Undeclared exception!
      try { 
        complexImage0.multiply(1924, (-1), (float) 1924, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2671, int2);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((-2366), 3, 2073.8F, 255.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(897, 897, 897, 897);
      assertEquals(897, rOI1.uy());
      assertEquals(897, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(897, rOI1.lx());
      assertEquals(897, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 897, (float) 897, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      int int1 = (-3095);
      int int2 = (-357);
      ROI rOI0 = new ROI((-357), 708, 708, (-357));
      assertEquals(1066, rOI0.X());
      assertEquals(708, rOI0.ly());
      assertEquals(708, rOI0.lx());
      assertEquals((-357), rOI0.uy());
      assertEquals(1066, rOI0.Y());
      assertEquals((-357), rOI0.ux());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.diff(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1, 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-2916), (-2916), 1881, 1881, (float) (-2916), (float) (-2916));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(552);
      assertNotNull(integer0);
      assertEquals(552, (int)integer0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 0, (-2739.5073F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      rOI0.setROI(506, 506, 506, 1);
      assertEquals(1, rOI0.X());
      assertEquals(506, rOI0.lx());
      assertEquals(506, rOI0.ly());
      assertEquals(506, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(506, rOI0.Y());
      
      ROI rOI1 = new ROI(506, 0, 0, 0);
      assertEquals(0, rOI1.ly());
      assertEquals(506, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(507, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI1.setROI(1, 506, 1, (-350));
      assertEquals(1, rOI1.lx());
      assertEquals(857, rOI1.Y());
      assertEquals((-350), rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(506, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(506, rOI0.lx());
      assertEquals(506, rOI0.ly());
      assertEquals(506, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(506, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(rOI0, rOI1);
      
      int int2 = rOI1.Y();
      assertEquals(1, rOI1.lx());
      assertEquals(857, rOI1.Y());
      assertEquals((-350), rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(506, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(857, int2);
      assertNotSame(rOI1, rOI0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 0);
      assertEquals(1, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.divide(649.55F, 649.55F);
      assertEquals(1, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      complexImage2.imag = null;
      assertEquals(1, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(0, 245, 0, 0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(246, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(245, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(246, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(245, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(245, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(246, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(245, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      ROI rOI1 = new ROI(0, 636, 0, 245);
      assertEquals(636, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(245, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(392, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.lx();
      assertEquals(636, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(245, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(392, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertNotSame(rOI1, rOI0);
      
      int int3 = rOI1.ux();
      assertEquals(636, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(245, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(392, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertNotSame(rOI1, rOI0);
      
      int int4 = rOI1.ux();
      assertEquals(636, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(245, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(392, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      assertNotSame(rOI1, rOI0);
      
      int int5 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(246, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(245, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      assertNotSame(rOI0, rOI1);
      
      int int6 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(246, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(245, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int3);
      assertFalse(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      assertNotSame(rOI0, rOI1);
      
      int int7 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(246, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(245, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertEquals(0, int7);
      assertNotSame(rOI0, rOI1);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 245, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0, 0, 0.0F, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = complexImage1.X();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, int0);
      assertNotSame(complexImage1, complexImage0);
      
      int int1 = complexImage1.Y();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, (-1016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1016
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      rOI0.setROI(2671, 1, 1, 0);
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2671, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(2671, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      rOI0.setROI(1, (-2263), 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(2264, rOI0.Y());
      assertEquals((-2263), rOI0.uy());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(2264, rOI0.Y());
      assertEquals((-2263), rOI0.uy());
      assertEquals(2, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      
      // Undeclared exception!
      try { 
        complexImage0.add((-1), (-1), (-1649.0304F), 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 549);
      assertEquals(549, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(549, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = complexImage1.max();
      assertEquals(549, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.imaginary();
      assertEquals(549, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(549, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = (-3056);
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-3056), (-3056));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1586, 0);
      assertEquals(0, complexImage1.Y());
      assertEquals(1586, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(1586, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI((-1204), (-143), (-1204), (-1));
      assertEquals((-1204), rOI0.ux());
      assertEquals((-1), rOI0.ly());
      assertEquals((-143), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(143, rOI0.Y());
      assertEquals((-1204), rOI0.lx());
      assertNotNull(rOI0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage2.getImag((-357), 2481, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      complexImage0.setImag(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = complexImage0.add((float) 897, (float) 897);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.divide(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(2364, 0, (float) 2364, 255.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotNull(realGrayImage1);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1510, (-5045), (-5045), 1510, (float) (-5045), (float) (-5045));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 552;
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(552, 552, 552, 552);
      assertEquals(552, rOI0.ux());
      assertEquals(552, rOI0.uy());
      assertEquals(552, rOI0.lx());
      assertEquals(552, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(552);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(552, (int)integer0);
      
      float float0 = 0.41389278F;
      // Undeclared exception!
      try { 
        complexImage0.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      float float0 = 0.0F;
      float float1 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertEquals(0, int8);
      
      rOI0.setROI(1036, 0, 0, (-8));
      assertEquals(1036, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1037, rOI0.X());
      assertEquals(9, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((-8), rOI0.uy());
      
      rOI0.setROI(0, 0, 0, (-1));
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      int int9 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
      assertFalse(int9 == int6);
      assertFalse(int9 == int4);
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertEquals(1, int9);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1586, 0);
      assertEquals(0, complexImage1.Y());
      assertEquals(1586, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(1586, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI(1586, (-3931), (-1204), (-1));
      assertEquals((-1204), rOI0.ux());
      assertEquals(1586, rOI0.lx());
      assertEquals(2791, rOI0.X());
      assertEquals((-1), rOI0.ly());
      assertEquals((-3931), rOI0.uy());
      assertEquals(3931, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(0, 1, 0.0F, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Complex complex0 = new Complex();
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      double double0 = complex1.real();
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      double double1 = complex1.magnitude();
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      complexImage0.set(2, 2, complex0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex0, complex1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = complexImage0.add((float) 897, 0.0F);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(546, 546);
      assertEquals(546, complexImage2.X());
      assertEquals(546, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      int int0 = complexImage2.X();
      assertEquals(546, complexImage2.X());
      assertEquals(546, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(546, int0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      int int1 = complexImage2.Y();
      assertEquals(546, complexImage2.X());
      assertEquals(546, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertTrue(int1 == int0);
      assertEquals(546, int1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      
      int int2 = (-1016);
      // Undeclared exception!
      try { 
        complexImage2.getImaginary(546, (-1016));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1016
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals((-2669), rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(2671, int0);
      
      rOI0.setROI(1364, (-16777216), 1364, (-5175));
      assertEquals(16772042, rOI0.Y());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(1364, rOI0.ux());
      assertEquals((-5175), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1364, rOI0.lx());
      
      rOI0.setROI(549, 549, 702, (-2669));
      assertEquals(549, rOI0.ly());
      assertEquals(154, rOI0.X());
      assertEquals((-2669), rOI0.uy());
      assertEquals(3219, rOI0.Y());
      assertEquals(549, rOI0.ux());
      assertEquals(702, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(549, rOI0.ly());
      assertEquals(154, rOI0.X());
      assertEquals((-2669), rOI0.uy());
      assertEquals(3219, rOI0.Y());
      assertEquals(549, rOI0.ux());
      assertEquals(702, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(3219, int1);
      
      int int2 = rOI0.X();
      assertEquals(549, rOI0.ly());
      assertEquals(154, rOI0.X());
      assertEquals((-2669), rOI0.uy());
      assertEquals(3219, rOI0.Y());
      assertEquals(549, rOI0.ux());
      assertEquals(702, rOI0.lx());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(154, int2);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-1500), 0, (-2930.4724F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 8;
      ComplexImage complexImage0 = new ComplexImage(8, 8);
      assertEquals(8, complexImage0.X());
      assertEquals(8, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 0;
      ComplexImage complexImage1 = new ComplexImage(0, 5266);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ComplexImage complexImage0 = new ComplexImage(2201, 2201);
      assertEquals(2201, complexImage0.Y());
      assertEquals(2201, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(2201, (-1905), (float) 2201, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1905
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertEquals(0, int7);
      
      int int8 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int8 == int7);
      assertTrue(int8 == int0);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      assertEquals(0, int8);
      
      int int9 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int9 == int6);
      assertTrue(int9 == int8);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int5);
      assertTrue(int9 == int3);
      assertTrue(int9 == int2);
      assertTrue(int9 == int1);
      assertTrue(int9 == int4);
      assertEquals(0, int9);
      
      int int10 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int10 == int2);
      assertTrue(int10 == int3);
      assertTrue(int10 == int9);
      assertTrue(int10 == int7);
      assertTrue(int10 == int0);
      assertTrue(int10 == int6);
      assertTrue(int10 == int8);
      assertTrue(int10 == int5);
      assertTrue(int10 == int4);
      assertTrue(int10 == int1);
      assertEquals(0, int10);
      
      int int11 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int11 == int9);
      assertTrue(int11 == int4);
      assertTrue(int11 == int7);
      assertTrue(int11 == int0);
      assertTrue(int11 == int10);
      assertTrue(int11 == int1);
      assertTrue(int11 == int5);
      assertTrue(int11 == int2);
      assertTrue(int11 == int3);
      assertTrue(int11 == int6);
      assertTrue(int11 == int8);
      assertEquals(0, int11);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((float) 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI(1, 1, 56, 1);
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(56, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(56, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI0.setROI(255, 1, 1, 1);
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(255, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(255, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(255, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      double double0 = complex0.real();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = complex0.magnitude();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      complexImage1.set(1, (-1), complex0, rOI0);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(255, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(255, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage2.add((-3441.6443F), (float) 1);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      
      // Undeclared exception!
      try { 
        complexImage3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 1, (-1.0F));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.subtract(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = complexImage0.X();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = 549;
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(rOI0).ly();
      doReturn(549, 0).when(rOI0).ux();
      doReturn(0).when(rOI0).uy();
      Complex complex0 = complexImage0.max(rOI0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(549, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertEquals(2671, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      complexImage1.setImaginary(realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(2671, rOI0.X());
      assertEquals((-2669), rOI0.ux());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2671, int2);
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary((-1458), (-2111), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2111
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI(533, 0, 533, 537);
      assertEquals(533, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(538, rOI0.Y());
      assertEquals(533, rOI0.lx());
      assertEquals(537, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(0, 549, (float) 533, (-2851.587F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 549
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 549);
      assertEquals(549, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(549, 549, 11, 1);
      assertEquals(549, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(539, rOI0.X());
      assertEquals(549, rOI0.ly());
      assertEquals(11, rOI0.ux());
      assertEquals(549, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(549, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(539, rOI0.X());
      assertEquals(549, rOI0.ly());
      assertEquals(11, rOI0.ux());
      assertEquals(549, rOI0.lx());
      assertEquals(539, int0);
      
      int int1 = rOI0.Y();
      assertEquals(549, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(539, rOI0.X());
      assertEquals(549, rOI0.ly());
      assertEquals(11, rOI0.ux());
      assertEquals(549, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(549, int1);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(686, 525, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 697
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 549);
      assertEquals(549, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.multiply((-712.0F), 32767.0F);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(549, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      rOI0.setROI((-668), 1518, 185, 1503);
      assertEquals(185, rOI0.lx());
      assertEquals((-668), rOI0.ux());
      assertEquals(1503, rOI0.uy());
      assertEquals(854, rOI0.X());
      assertEquals(16, rOI0.Y());
      assertEquals(1518, rOI0.ly());
      
      rOI0.setROI(0, 255, 0, 255);
      assertEquals(0, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int6 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertEquals(1, int6);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.X();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, int0);
      
      int int1 = 549;
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(rOI0).ly();
      doReturn(549, 0).when(rOI0).ux();
      doReturn(0).when(rOI0).uy();
      Complex complex0 = complexImage0.max(rOI0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(549, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(255, 255, (float) 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 255;
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, (-3659), (-1), (-1));
      assertEquals(0, rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals((-3659), rOI0.uy());
      assertEquals(2, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals(3659, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 549;
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      int int1 = 543;
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(549, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.setImaginary(543, 534, (float) (-143), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 543
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.divide((float) 549, 0.0F);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ROI rOI0 = new ROI(504, 127, (-1), 537);
      assertEquals(537, rOI0.ly());
      assertEquals(411, rOI0.Y());
      assertEquals(504, rOI0.lx());
      assertEquals(127, rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(506, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage2.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      complexImage1.setImaginary((RealGrayImage) null);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex(678.57522321, 678.57522321);
      assertEquals((byte) (-65), complex0.byteValue());
      assertEquals(959.6502292502201, complex0.magnitude(), 0.01);
      assertEquals(959.6502292502201, complex0.doubleValue(), 0.01);
      assertEquals(678.5751953125, complex0.imag(), 0.01);
      assertEquals(959, complex0.intValue());
      assertEquals(678.5751953125, complex0.imaginary(), 0.01);
      assertEquals(959.6502F, complex0.floatValue(), 0.01F);
      assertEquals(678.5751953125, complex0.real(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)959, complex0.shortValue());
      assertEquals(959L, complex0.longValue());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals((byte) (-65), complex0.byteValue());
      assertEquals(959.6502292502201, complex0.magnitude(), 0.01);
      assertEquals(959.6502292502201, complex0.doubleValue(), 0.01);
      assertEquals(678.5751953125, complex0.imag(), 0.01);
      assertEquals(959, complex0.intValue());
      assertEquals(678.5751953125, complex0.imaginary(), 0.01);
      assertEquals(959.6502F, complex0.floatValue(), 0.01F);
      assertEquals(678.5751953125, complex0.real(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)959, complex0.shortValue());
      assertEquals(959L, complex0.longValue());
      assertEquals(678.5751953125, complex1.imag(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(959.6502292502201, complex1.magnitude(), 0.01);
      assertEquals(959.6502292502201, complex1.doubleValue(), 0.01);
      assertEquals(959.6502F, complex1.floatValue(), 0.01F);
      assertEquals(678.5751953125, complex1.imaginary(), 0.01);
      assertEquals((short)959, complex1.shortValue());
      assertEquals(959, complex1.intValue());
      assertEquals(678.5751953125, complex1.real(), 0.01);
      assertEquals((byte) (-65), complex1.byteValue());
      assertEquals(959L, complex1.longValue());
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertEquals((byte) (-65), complex0.byteValue());
      assertEquals(959.6502292502201, complex0.magnitude(), 0.01);
      assertEquals(959.6502292502201, complex0.doubleValue(), 0.01);
      assertEquals(678.5751953125, complex0.imag(), 0.01);
      assertEquals(959, complex0.intValue());
      assertEquals(678.5751953125, complex0.imaginary(), 0.01);
      assertEquals(959.6502F, complex0.floatValue(), 0.01F);
      assertEquals(678.5751953125, complex0.real(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)959, complex0.shortValue());
      assertEquals(959L, complex0.longValue());
      assertEquals(678.5751953125, complex1.imag(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(959.6502292502201, complex1.magnitude(), 0.01);
      assertEquals(959.6502292502201, complex1.doubleValue(), 0.01);
      assertEquals(959.6502F, complex1.floatValue(), 0.01F);
      assertEquals(678.5751953125, complex1.imaginary(), 0.01);
      assertEquals((short)959, complex1.shortValue());
      assertEquals(959, complex1.intValue());
      assertEquals(678.5751953125, complex1.real(), 0.01);
      assertEquals((byte) (-65), complex1.byteValue());
      assertEquals(959L, complex1.longValue());
      assertEquals(678.5751953125, complex2.imag(), 0.01);
      assertEquals(959.6502292502201, complex2.magnitude(), 0.01);
      assertEquals(959.6502292502201, complex2.doubleValue(), 0.01);
      assertEquals(959, complex2.intValue());
      assertEquals((byte) (-65), complex2.byteValue());
      assertEquals(959L, complex2.longValue());
      assertEquals(678.5751953125, complex2.real(), 0.01);
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      assertEquals((short)959, complex2.shortValue());
      assertEquals(678.5751953125, complex2.imaginary(), 0.01);
      assertEquals(959.6502F, complex2.floatValue(), 0.01F);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      // Undeclared exception!
      try { 
        complexImage1.set(708, 1409, complex2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 1094, (float) (-151), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 550;
      ComplexImage complexImage1 = new ComplexImage(7, 550);
      assertEquals(7, complexImage1.X());
      assertEquals(550, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 708;
      int int1 = (-1);
      ROI rOI0 = new ROI((-1), (-3095), (-1), (-1069));
      assertEquals((-1), rOI0.lx());
      assertEquals((-3095), rOI0.uy());
      assertEquals(2027, rOI0.Y());
      assertEquals((-1069), rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(0.0F, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = 304;
      Complex complex0 = new Complex(304, 304);
      assertEquals(429, complex0.intValue());
      assertEquals(429.92093F, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)429, complex0.shortValue());
      assertEquals(429.9209229614209, complex0.magnitude(), 0.01);
      assertEquals(429.9209229614209, complex0.doubleValue(), 0.01);
      assertEquals(304.0, complex0.imaginary(), 0.01);
      assertEquals((byte) (-83), complex0.byteValue());
      assertEquals(304.0, complex0.imag(), 0.01);
      assertEquals(429L, complex0.longValue());
      assertEquals(304.0, complex0.real(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(429, complex0.intValue());
      assertEquals(429.92093F, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)429, complex0.shortValue());
      assertEquals(429.9209229614209, complex0.magnitude(), 0.01);
      assertEquals(429.9209229614209, complex0.doubleValue(), 0.01);
      assertEquals(304.0, complex0.imaginary(), 0.01);
      assertEquals((byte) (-83), complex0.byteValue());
      assertEquals(304.0, complex0.imag(), 0.01);
      assertEquals(429L, complex0.longValue());
      assertEquals(304.0, complex0.real(), 0.01);
      assertEquals((byte) (-83), complex1.byteValue());
      assertEquals(429.9209229614209, complex1.magnitude(), 0.01);
      assertEquals(304.0, complex1.imag(), 0.01);
      assertEquals(429.9209229614209, complex1.doubleValue(), 0.01);
      assertEquals(429, complex1.intValue());
      assertEquals(304.0, complex1.imaginary(), 0.01);
      assertEquals(429.92093F, complex1.floatValue(), 0.01F);
      assertEquals(304.0, complex1.real(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(429L, complex1.longValue());
      assertEquals((short)429, complex1.shortValue());
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.sub(complex1, complex1);
      assertEquals(429, complex0.intValue());
      assertEquals(429.92093F, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short)429, complex0.shortValue());
      assertEquals(429.9209229614209, complex0.magnitude(), 0.01);
      assertEquals(429.9209229614209, complex0.doubleValue(), 0.01);
      assertEquals(304.0, complex0.imaginary(), 0.01);
      assertEquals((byte) (-83), complex0.byteValue());
      assertEquals(304.0, complex0.imag(), 0.01);
      assertEquals(429L, complex0.longValue());
      assertEquals(304.0, complex0.real(), 0.01);
      assertEquals((byte) (-83), complex1.byteValue());
      assertEquals(429.9209229614209, complex1.magnitude(), 0.01);
      assertEquals(304.0, complex1.imag(), 0.01);
      assertEquals(429.9209229614209, complex1.doubleValue(), 0.01);
      assertEquals(429, complex1.intValue());
      assertEquals(304.0, complex1.imaginary(), 0.01);
      assertEquals(429.92093F, complex1.floatValue(), 0.01F);
      assertEquals(304.0, complex1.real(), 0.01);
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertEquals(429L, complex1.longValue());
      assertEquals((short)429, complex1.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(304, 304, complex0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = 602;
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(602, 602, (float) 602, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(897, 897, 897, 897);
      assertEquals(897, rOI1.ly());
      assertEquals(897, rOI1.lx());
      assertEquals(897, rOI1.ux());
      assertEquals(897, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = complexImage0.add((float) 897, (float) 897);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.divide(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      rOI0.setROI(506, 506, 506, 1);
      assertEquals(506, rOI0.ux());
      assertEquals(506, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(506, rOI0.lx());
      assertEquals(506, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(506, 0, 0, 0);
      assertEquals(506, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(507, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI0.X();
      assertEquals(506, rOI0.ux());
      assertEquals(506, rOI0.Y());
      assertEquals(1, rOI0.uy());
      assertEquals(506, rOI0.lx());
      assertEquals(506, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertNotSame(rOI0, rOI1);
      
      int int2 = rOI1.Y();
      assertEquals(506, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(507, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1070, 0, (float) 506, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 395;
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertNotNull(complex0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.diff(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(549, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ComplexImage complexImage3 = complexImage1.divide((float) 549, 0.0F);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.X());
      assertEquals(549, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      
      ComplexImage complexImage4 = complexImage3.multiply((-1291.0062F), (float) 549);
      assertEquals(549, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.X());
      assertEquals(549, complexImage3.Y());
      assertEquals(549, complexImage4.Y());
      assertEquals(0, complexImage4.X());
      assertNotNull(complexImage4);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage4);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage4, complexImage2);
      assertSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage1);
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(515, 515);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 515
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 508;
      int int1 = 530;
      int int2 = 1;
      float float0 = (-1143.1F);
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(530, 2583, (float) 2583);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      int int0 = 2122;
      int int1 = 1907;
      ComplexImage complexImage0 = new ComplexImage(2122, 1907);
      assertEquals(1907, complexImage0.Y());
      assertEquals(2122, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      complexImage0.clear();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      ComplexImage complexImage1 = new ComplexImage(1, 1);
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = 1;
      float float0 = (-4503.79F);
      // Undeclared exception!
      try { 
        complexImage1.setImaginary(1, 1, (-4503.79F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      float float0 = (-659.9758F);
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.imag();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNull(realGrayImage1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(0, 549);
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(549, complexImage1.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.setReal(0, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 1358;
      ComplexImage complexImage0 = new ComplexImage(1358, 1358);
      assertEquals(1358, complexImage0.Y());
      assertEquals(1358, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag;
      assertNull(realGrayImage0);
      
      ComplexImage complexImage1 = new ComplexImage(1586, 0);
      assertEquals(0, complexImage1.Y());
      assertEquals(1586, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(1586, complexImage1.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI((-1204), (-143), (-1204), (-1));
      assertEquals((-1), rOI0.ly());
      assertEquals((-1204), rOI0.ux());
      assertEquals((-143), rOI0.uy());
      assertEquals((-1204), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(143, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      complexImage0.real = realGrayImage0;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, complexImage0.real.min(), 0.01F);
      assertEquals((-32768.0F), complexImage0.real.max(), 0.01F);
      assertEquals(0.0, complexImage0.real.sqrSum(), 0.01);
      assertEquals(0, complexImage0.real.Y());
      assertEquals(0.0F, complexImage0.real.absSum(), 0.01F);
      assertEquals(0, complexImage0.real.X());
      assertEquals(0.0F, complexImage0.real.addSum(), 0.01F);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.get((-827), (-1268));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1268
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.X();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, int0);
      
      int int1 = 2;
      ROI rOI0 = new ROI(1, 2, 0, (-3489));
      assertEquals(0, rOI0.ux());
      assertEquals((-3489), rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertEquals(2, rOI0.X());
      assertEquals(3492, rOI0.Y());
      assertNotNull(rOI0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.diff(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage2.get(2, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 1, (-1.0F));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      double double0 = complex1.magnitude();
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.set((-1594), 1, complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.Y());
      assertEquals(552, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertNotNull(complex0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int1 = new Integer(0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = 1;
      ROI rOI0 = new ROI((-3659), (-357), (-775), 1);
      assertEquals(1, rOI0.ly());
      assertEquals(2885, rOI0.X());
      assertEquals((-357), rOI0.uy());
      assertEquals(359, rOI0.Y());
      assertEquals((-775), rOI0.lx());
      assertEquals((-3659), rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(32767.0F, (-32768.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -357
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = 24;
      ROI rOI0 = new ROI(24, 24, 24, 24);
      assertEquals(24, rOI0.uy());
      assertEquals(24, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(24, rOI0.ly());
      assertEquals(24, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = 2923;
      rOI0.setROI(2923, 2923, 2923, 2923);
      assertEquals(2923, rOI0.uy());
      assertEquals(2923, rOI0.ux());
      assertEquals(2923, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2923, rOI0.lx());
      
      int int2 = (-3659);
      int int3 = (-1);
      rOI0.setROI(24, 24, (-3659), (-1));
      assertEquals(3684, rOI0.X());
      assertEquals((-3659), rOI0.ux());
      assertEquals(24, rOI0.ly());
      assertEquals(24, rOI0.lx());
      assertEquals(26, rOI0.Y());
      assertEquals((-1), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.divide((ComplexImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(0, 0);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.setImag(0, 0, 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-151), 1094, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      assertEquals(552, complexImage0.X());
      assertEquals(552, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 2782;
      int int1 = (-619);
      ROI rOI0 = new ROI((-1512), (-1512), (-899), (-619));
      assertEquals((-1512), rOI0.ux());
      assertEquals((-899), rOI0.lx());
      assertEquals((-1512), rOI0.uy());
      assertEquals(894, rOI0.Y());
      assertEquals(614, rOI0.X());
      assertEquals((-619), rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI((-619), 549, 2782, (-619));
      assertEquals(1169, rOI0.Y());
      assertEquals(2782, rOI0.lx());
      assertEquals((-619), rOI0.uy());
      assertEquals((-619), rOI0.ux());
      assertEquals(549, rOI0.ly());
      assertEquals(3402, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 552, 1265.6141F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.add((-221.9637F), (-221.9637F));
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      double double0 = complex1.real();
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      double double1 = complex1.magnitude();
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.clear(complex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(549, 0);
      ComplexImage complexImage1 = complexImage0.add((-1271.5742F), (-2851.587F));
      assertEquals(0, complexImage0.Y());
      
      complexImage1.getMagnitudeImage();
      RealGrayImage realGrayImage0 = complexImage1.imaginary();
      assertEquals(549, complexImage1.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(549, realGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.min();
      // Undeclared exception!
      try { 
        complexImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage0.real;
      complexImage0.setImag((RealGrayImage) null);
      complexImage0.real();
      // Undeclared exception!
      try { 
        complexImage0.setReal(708, 708, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ux();
      ROI rOI1 = new ROI((-2669), 0, 1, 0);
      rOI1.X();
      rOI1.Y();
      rOI1.X();
      // Undeclared exception!
      try { 
        complexImage1.getReal((-2469), 0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      ROI rOI0 = new ROI(0, 245, 0, 0);
      int int1 = 0;
      int int2 = 0;
      rOI0.setROI(0, 245, 0, 0);
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, 0, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.min();
      int int0 = (-9);
      // Undeclared exception!
      try { 
        complexImage1.setReal((-9), 0, (float) (-9));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.phaseImage();
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      float float0 = 1322.3533F;
      ComplexImage complexImage1 = complexImage0.subtract(1322.3533F, 0.0F);
      complexImage1.setImaginary(realGrayImage0);
      ROI rOI0 = new ROI();
      complexImage1.min();
      rOI0.X();
      ComplexImage complexImage2 = new ComplexImage();
      int int0 = 18;
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      int int0 = 552;
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      ROI rOI0 = new ROI();
      rOI0.X();
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      // Undeclared exception!
      try { 
        complexImage1.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.multiply((float) 255, (float) 255);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-2669), 0, 1, 0);
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.getImag((-358), (-1001), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      int int1 = (-3095);
      int int2 = (-357);
      ROI rOI0 = new ROI((-357), 708, 708, (-1069));
      // Undeclared exception!
      try { 
        complexImage0.divide(0.0F, (float) (-3095), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 552;
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.X();
      ROI rOI1 = new ROI(1, 1, 56, 1);
      ComplexImage complexImage1 = complexImage0.copy(rOI0);
      // Undeclared exception!
      try { 
        complexImage1.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(552, 552);
      ROI rOI0 = new ROI();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        complexImage0.setReal(385, 2941, (float) 385, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2941
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI(908, 908, 908, 908);
      // Undeclared exception!
      try { 
        complexImage0.divide((ComplexImage) null, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }
}

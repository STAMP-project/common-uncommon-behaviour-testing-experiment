/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:08:49 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.HeadlessException;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import java.awt.image.MemoryImageSource;
import java.util.Hashtable;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.ROI;
import jigl.image.types.RealColorImage;
import jigl.image.types.RealGrayImage;
import jigl.internal.DummyObserver;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealColorImage_ESTest extends RealColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI((-549), (-549), (-549), (-549));
      assertEquals((-549), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-549), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-549), rOI0.ux());
      assertEquals((-549), rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.get(2, 5, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1;
      int int1 = 8;
      RealColorImage realColorImage0 = new RealColorImage(1, 8);
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(8, (-192), (Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      RealColorImage realColorImage2 = realColorImage1.multiply(realColorImage0);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage2.X());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float float0 = Float.min(1124.379F, (-968.06F));
      assertEquals((-968.06F), float0, 0.01F);
      
      int int0 = 0;
      int int1 = 13;
      ROI rOI0 = new ROI(0, 0, 13, 1500);
      assertEquals(0, rOI0.ux());
      assertEquals(1500, rOI0.ly());
      assertEquals(13, rOI0.lx());
      assertEquals(14, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(1501, rOI0.Y());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1124.379F;
      int int2 = 2499;
      // Undeclared exception!
      try { 
        realColorImage0.max(13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1;
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Float float0 = new Float((-904.65415090712));
      assertEquals((-904.6542F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-779.607206));
      assertEquals((-779.6072F), (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      float float2 = (-1249.0F);
      RealColorImage realColorImage2 = realColorImage0.subtract(0.0F, (-1249.0F), (-756.1F), rOI1);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(rOI1, rOI0);
      assertSame(realColorImage2, realColorImage1);
      assertSame(realColorImage2, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(realColorImage2);
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get(0, (-1511));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      
      int int0 = (-1);
      ROI rOI0 = new ROI(2051, 2051, 2051, (-1));
      assertEquals(1, rOI0.X());
      assertEquals(2051, rOI0.ux());
      assertEquals(2051, rOI0.ly());
      assertEquals((-1), rOI0.uy());
      assertEquals(2053, rOI0.Y());
      assertEquals(2051, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 3163.0F;
      float float0 = 0.0F;
      int int0 = (-203);
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-203), (-203), floatArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage2 = new RealColorImage(8, 3);
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(3, realColorImage2.Y());
      assertEquals(8, realColorImage2.X());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      RealColorImage realColorImage3 = realColorImage0.add(255.0F, 32767.0F, (float) 8, rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertSame(realColorImage3, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(8, realColorImage3.Y());
      assertEquals(8, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3555.9F);
      floatArray0[1] = 2339.0F;
      floatArray0[2] = (-2082.7676F);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(4, (-957), 4, 4);
      assertEquals(4, rOI0.lx());
      assertEquals(4, rOI0.ly());
      assertEquals(962, rOI0.Y());
      assertEquals(4, rOI0.ux());
      assertEquals((-957), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.ux();
      assertEquals(4, rOI0.lx());
      assertEquals(4, rOI0.ly());
      assertEquals(962, rOI0.Y());
      assertEquals(4, rOI0.ux());
      assertEquals((-957), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(4, int0);
      
      int int1 = rOI0.lx();
      assertEquals(4, rOI0.lx());
      assertEquals(4, rOI0.ly());
      assertEquals(962, rOI0.Y());
      assertEquals(4, rOI0.ux());
      assertEquals((-957), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(4, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(4, rOI0.lx());
      assertEquals(4, rOI0.ly());
      assertEquals(962, rOI0.Y());
      assertEquals(4, rOI0.ux());
      assertEquals((-957), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(4, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 4, 4, (-2108));
      assertEquals(4, rOI1.lx());
      assertEquals(4, rOI1.ly());
      assertEquals(5, rOI1.X());
      assertEquals(2113, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(4, rOI0.lx());
      assertEquals(4, rOI0.ly());
      assertEquals(962, rOI0.Y());
      assertEquals(4, rOI0.ux());
      assertEquals((-957), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals((-957), int3);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(4, rOI1.lx());
      assertEquals(4, rOI1.ly());
      assertEquals(5, rOI1.X());
      assertEquals(2113, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(4, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(4, rOI1.lx());
      assertEquals(4, rOI1.ly());
      assertEquals(5, rOI1.X());
      assertEquals(2113, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = 975;
      int int1 = (-1667);
      int int2 = 4;
      rOI0.setROI(975, 975, (-1667), 4);
      assertEquals(2643, rOI0.X());
      assertEquals(975, rOI0.lx());
      assertEquals(975, rOI0.ly());
      assertEquals(4, rOI0.uy());
      assertEquals(972, rOI0.Y());
      assertEquals((-1667), rOI0.ux());
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1451);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1451, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      realColorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3555.9F);
      floatArray0[1] = 2339.0F;
      floatArray0[2] = (-2082.7676F);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      int int5 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      
      int int8 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int8);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertTrue(int8 == int2);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int4);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 8;
      int int1 = (-1456);
      // Undeclared exception!
      try { 
        realColorImage0.plane((-1456));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1456
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[6];
      Float float0 = new Float(1761.325F);
      assertEquals(1761.325F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(787.0F);
      assertEquals(787.0F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertEquals(787.0F, float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float float3 = float1.floatValue();
      assertEquals(787.0F, float3, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals(float3, float2, 0.01F);
      
      floatArray0[1] = (Float) 787.0F;
      Float float4 = Float.valueOf(1026.1815F);
      assertEquals(1026.1815F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      Float float5 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotNull(float5);
      
      Float float6 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      
      Float float7 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float7, 0.01F);
      assertEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotNull(float7);
      
      floatArray0[2] = float7;
      Float float8 = new Float((-32768.0F));
      assertEquals((-32768.0F), (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float7, 0.01F);
      assertNotNull(float8);
      
      floatArray0[3] = float8;
      Float float9 = new Float((-690.6414F));
      assertEquals((-690.6414F), (float)float9, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotNull(float9);
      
      float float10 = float9.floatValue();
      assertEquals((-690.6414F), float10, 0.01F);
      assertNotEquals(float10, float3, 0.01F);
      assertNotEquals(float10, float2, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      
      Float float11 = Float.valueOf((-690.6414F));
      assertEquals((-690.6414F), (float)float11, 0.01F);
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertNotNull(float11);
      
      float float12 = float11.floatValue();
      assertEquals((-690.6414F), float12, 0.01F);
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertEquals(float12, float10, 0.01F);
      assertNotEquals(float12, float2, 0.01F);
      assertNotEquals(float12, float3, 0.01F);
      
      float float13 = float9.floatValue();
      assertEquals((-690.6414F), float13, 0.01F);
      assertNotEquals(float13, float2, 0.01F);
      assertEquals(float13, float12, 0.01F);
      assertNotEquals(float13, float3, 0.01F);
      assertEquals(float13, float10, 0.01F);
      assertEquals((float)float9, (float)float10, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertEquals((float)float9, (float)float12, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertEquals((float)float9, (float)float11, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      
      float float14 = float9.floatValue();
      assertEquals((-690.6414F), float14, 0.01F);
      assertEquals(float14, float13, 0.01F);
      assertNotEquals(float14, float3, 0.01F);
      assertNotEquals(float14, float2, 0.01F);
      assertEquals(float14, float10, 0.01F);
      assertEquals(float14, float12, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertEquals((float)float9, (float)float11, 0.01F);
      assertEquals((float)float9, (float)float10, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertEquals((float)float9, (float)float12, 0.01F);
      assertEquals((float)float9, (float)float13, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      
      float float15 = float11.floatValue();
      assertEquals((-690.6414F), float15, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertEquals((float)float11, (float)float13, 0.01F);
      assertEquals((float)float11, (float)float12, 0.01F);
      assertEquals((float)float11, (float)float14, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertEquals(float15, float13, 0.01F);
      assertNotEquals(float15, float3, 0.01F);
      assertNotEquals(float15, float2, 0.01F);
      assertEquals(float15, float10, 0.01F);
      assertEquals(float15, float14, 0.01F);
      assertEquals(float15, float12, 0.01F);
      
      floatArray0[4] = (Float) (-690.6414F);
      Float float16 = new Float((-690.6414F));
      assertEquals((-690.6414F), (float)float16, 0.01F);
      assertNotEquals((float)float16, (float)float2, 0.01F);
      assertEquals((float)float16, (float)float12, 0.01F);
      assertNotEquals((float)float16, (float)float0, 0.01F);
      assertNotEquals((float)float16, (float)float4, 0.01F);
      assertNotEquals((float)float16, (float)float8, 0.01F);
      assertNotEquals((float)float16, (float)float7, 0.01F);
      assertEquals((float)float16, (float)float9, 0.01F);
      assertNotEquals((float)float16, (float)float6, 0.01F);
      assertEquals((float)float16, (float)float10, 0.01F);
      assertEquals((float)float16, (float)float14, 0.01F);
      assertNotEquals((float)float16, (float)float3, 0.01F);
      assertNotEquals((float)float16, (float)float5, 0.01F);
      assertEquals((float)float16, (float)float11, 0.01F);
      assertEquals((float)float16, (float)float13, 0.01F);
      assertEquals((float)float16, (float)float15, 0.01F);
      assertNotEquals((float)float16, (float)float1, 0.01F);
      assertNotNull(float16);
      
      floatArray0[5] = float16;
      // Undeclared exception!
      try { 
        realColorImage0.set(1488, 8, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = null;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(700, 700, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      
      rOI1.setROI(0, 0, 0, (-2268));
      assertNotSame(rOI1, rOI0);
      assertEquals((-2268), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(2269, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      float[] floatArray0 = realColorImage1.addSum();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realColorImage1.toString(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2268
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.divide(735, (-669), floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2320, 2320);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2320, realColorImage0.Y());
      assertEquals(2320, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) 2320;
      floatArray0[1] = (float) 3;
      floatArray0[2] = (float) 3;
      floatArray0[3] = (float) 2320;
      floatArray0[4] = 0.0F;
      floatArray0[5] = (float) 3;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(3, 3, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2516, 2516);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2516, realColorImage0.X());
      assertEquals(2516, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      realColorImage0.clear();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 1473;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1502);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1502;
      floatArray0[2] = (float) (-1018);
      RealColorImage realColorImage1 = realColorImage0.addbuffer(1502, 0, 0, 0, floatArray0);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1502, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertArrayEquals(new float[] {0.0F, 1502.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1502, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 1502.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string1 = realColorImage0.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals("0:1502\n0:1502\n0:1502\n", string1);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage1.colorModel = colorModel0;
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1502, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      
      Float float0 = realColorImage1.minComponent();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1502, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(32767.0F, (float)float0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(float0);
      assertArrayEquals(new float[] {0.0F, 1502.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.add(realColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(4, 4, (-572), (-572));
      assertEquals(4, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals((-572), rOI0.ux());
      assertEquals(577, rOI0.X());
      assertEquals((-572), rOI0.uy());
      assertEquals(577, rOI0.Y());
      
      rOI0.setROI(1479, 1479, (-1), 1477);
      assertEquals(3, rOI0.Y());
      assertEquals(1481, rOI0.X());
      assertEquals(1479, rOI0.lx());
      assertEquals((-1), rOI0.ux());
      assertEquals(1479, rOI0.ly());
      assertEquals(1477, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(imageProducer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      
      realColorImage1.byteSize(rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      ImageProducer imageProducer1 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(imageProducer1, imageProducer0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertNotNull(imageProducer1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      
      int int3 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      Float float0 = realColorImage2.maxComponent();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0.0F, (float)float0, 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(float0);
      
      int int4 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int int5 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract(0, (-1836), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      Float float0 = realColorImage0.maxComponent();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotNull(float0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI1.setROI(0, 1423, 8, 0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1424, rOI1.Y());
      assertEquals(8, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(9, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(1423, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = 1.4E-45F;
      floatArray0[1] = (float) 1423;
      floatArray0[2] = (float) 1423;
      floatArray0[3] = (float) 1423;
      floatArray0[4] = (float) 0;
      RealColorImage realColorImage2 = realColorImage1.addbuffer(0, 16, floatArray0);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(16, realColorImage2.Y());
      assertEquals(9, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      assertArrayEquals(new float[] {1.4E-45F, 1423.0F, 1423.0F, 1423.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      floatArray0[5] = (float) 1423;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage1.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      RealColorImage realColorImage2 = realColorImage1.copy(rOI0);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, realColorImage2.Y());
      assertEquals(1, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      Float float0 = Float.valueOf((-1494.284F));
      assertEquals((-1494.284F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-1494.284F), float1, 0.01F);
      
      RealColorImage realColorImage3 = realColorImage0.multiply((-1494.284F), (-1494.284F), 730.4954F, rOI0);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage3.X());
      assertEquals(1, realColorImage3.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      
      RealColorImage realColorImage4 = realColorImage1.multiply(realColorImage3);
      assertSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage4);
      assertSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage4);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage4, realColorImage2);
      assertSame(realColorImage4, realColorImage0);
      assertSame(realColorImage4, realColorImage3);
      assertSame(realColorImage4, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage3.X());
      assertEquals(1, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertEquals(1, realColorImage4.X());
      assertEquals(1, realColorImage4.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage4.equals((Object)realColorImage2));
      assertNotNull(realColorImage4);
      
      float[] floatArray0 = realColorImage0.absSum();
      assertSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      float[] floatArray1 = realColorImage0.addSum();
      assertSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, floatArray1.length);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      realColorImage1.byteSize(rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      ROI rOI1 = new ROI(2, 0, 0, 2);
      assertEquals(3, rOI1.X());
      assertEquals(3, rOI1.Y());
      assertEquals(2, rOI1.lx());
      assertEquals(2, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(3, rOI1.X());
      assertEquals(3, rOI1.Y());
      assertEquals(2, rOI1.lx());
      assertEquals(2, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      RealColorImage realColorImage2 = realColorImage0.multiply(0, (float) 0, rOI0);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(rOI0, rOI1);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(8, realColorImage2.X());
      assertEquals(8, realColorImage2.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotNull(realColorImage2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = new Integer(0);
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      // Undeclared exception!
      try { 
        realColorImage1.clip(2523, 2526, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 4);
      assertEquals(4, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float[] floatArray0 = new Float[3];
      Float float0 = new Float((-949.2803));
      assertEquals((-949.2803F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-949.2803F), float1, 0.01F);
      
      floatArray0[0] = (Float) (-949.2803F);
      Float float2 = new Float(255.0);
      assertEquals(255.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      floatArray0[1] = float2;
      Float float3 = new Float((float) 1);
      assertEquals(1.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[2] = float3;
      RealColorImage realColorImage1 = realColorImage0.clear(floatArray0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(4, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(4, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(3, floatArray0.length);
      assertNotNull(realColorImage1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = 1;
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = 255;
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int4 = new Integer(int0);
      assertEquals(1, int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      int int5 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int5);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      
      int int6 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int6);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertNotNull(string0);
      
      float float0 = 1668.932F;
      float float1 = 3379.753F;
      RealColorImage realColorImage3 = realColorImage1.add(float0, float1, (float) int3);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertSame(realColorImage3, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage3.Y());
      assertEquals(1, realColorImage3.X());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(int3 == int6);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotEquals(float0, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      
      realColorImage0.clip(int2, int0);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int0 == int6);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertTrue(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertTrue(int2 == int6);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int5);
      assertFalse(int2 == int4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 937;
      RealColorImage realColorImage0 = new RealColorImage(937, 937);
      assertEquals(937, realColorImage0.X());
      assertEquals(937, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.copy();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(937, realColorImage0.X());
      assertEquals(937, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(937, realColorImage1.X());
      assertEquals(937, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      int int1 = 0;
      int int2 = (-2108);
      // Undeclared exception!
      try { 
        realColorImage1.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1483, 1468);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1468, realColorImage0.Y());
      assertEquals(1483, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.Y();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1468, realColorImage0.Y());
      assertEquals(1483, realColorImage0.X());
      assertEquals(1468, int0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      float[] floatArray0 = null;
      ROI rOI0 = null;
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(1497, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1497
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-1538.0203F);
      floatArray0[1] = (-4735.52F);
      float float0 = (-968.06F);
      // Undeclared exception!
      try { 
        realColorImage0.min(1502);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1502
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1502);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertNotNull(imageProducer0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1417;
      floatArray0[2] = (float) 1417;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 1502;
      floatArray0[5] = (float) 1417;
      floatArray0[6] = (float) 0;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(1417, 0, floatArray0);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(1417, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(7, floatArray0.length);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertArrayEquals(new float[] {0.0F, 1417.0F, 1417.0F, 0.0F, 1502.0F, 1417.0F, 0.0F}, floatArray0, 0.01F);
      
      double[] doubleArray0 = realColorImage0.sqrSum();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(3, doubleArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = realColorImage0.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertEquals("0:1502\n0:1502\n0:1502\n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1502);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(imageProducer0);
      
      double[] doubleArray0 = realColorImage0.sqrSum();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = realColorImage0.toString();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals("0:1502\n0:1502\n0:1502\n", string0);
      assertNotNull(string0);
      
      float float0 = realColorImage0.min(0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(32767.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      int int1 = 2;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertNotNull(integer0);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      RealColorImage realColorImage2 = realColorImage1.divide(realColorImage0);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertNotNull(realColorImage2);
      
      // Undeclared exception!
      try { 
        realColorImage2.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[2];
      // Undeclared exception!
      try { 
        realColorImage0.divide(2535, 2535, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.CMY;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.CMY, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI((-549), (-549), (-549), (-549));
      assertEquals((-549), rOI0.ux());
      assertEquals((-549), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals((-549), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-549), rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((RealColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (-3555.9F);
      floatArray0[1] = 2339.0F;
      floatArray0[2] = (-2082.7676F);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int3);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      
      int int5 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      
      int int7 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int7);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      RealColorImage realColorImage2 = realColorImage0.copy();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage2.Y());
      assertEquals(8, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      RealGrayImage realGrayImage0 = realColorImage1.plane(0);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(8, realGrayImage0.Y());
      assertEquals(8, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract(1645, (-455.4F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1645
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ROI rOI1 = new ROI(0, 0, (int) integer0, (-2108));
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int2);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int4);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      int int5 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int5);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int4));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int6);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int3));
      assertTrue(integer0.equals((Object)int5));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int4));
      assertTrue(integer0.equals((Object)int2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 0, (-1213.4F), (-23.7902F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.Y();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, int0);
      
      int int1 = 8;
      int int2 = 1474;
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      Float[] floatArray1 = new Float[4];
      floatArray1[0] = (Float) 0.0F;
      floatArray1[1] = (Float) 0.0F;
      floatArray1[2] = (Float) 0.0F;
      // Undeclared exception!
      try { 
        realColorImage0.add(1471, 1467, floatArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1467
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 0.0F;
      RealColorImage realColorImage2 = realColorImage1.add(floatArray0);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.Y());
      assertEquals(4, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realColorImage2.multiply(0, (-1882), 0.0F, 0.0F, 743.757F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1882
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      RealColorImage realColorImage2 = realColorImage0.copy();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      RealColorImage realColorImage3 = realColorImage1.copy();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage3.Y());
      assertEquals(1, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      
      String string0 = realColorImage1.toString();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertNotNull(string0);
      
      RealColorImage realColorImage4 = realColorImage3.divide((float) 1, (float) 0, 0.0F);
      assertNotSame(realColorImage0, realColorImage4);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage4);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage4);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage4, realColorImage1);
      assertSame(realColorImage4, realColorImage3);
      assertNotSame(realColorImage4, realColorImage2);
      assertNotSame(realColorImage4, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage3.Y());
      assertEquals(1, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage4.Y());
      assertEquals(1, realColorImage4.X());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage4.equals((Object)realColorImage1));
      assertFalse(realColorImage4.equals((Object)realColorImage2));
      assertFalse(realColorImage4.equals((Object)realColorImage0));
      assertNotNull(realColorImage4);
      
      Float[] floatArray0 = new Float[0];
      // Undeclared exception!
      try { 
        realColorImage0.set(1, 2, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0.0F, 0.0F, 0.0F, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      RealColorImage realColorImage0 = new RealColorImage(0, 8);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((float) 7, (float) 7, (float) 8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 1;
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      Float float0 = new Float((-698.7850747));
      assertEquals((-698.7851F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-698.7851F), float1, 0.01F);
      
      Float float2 = new Float((-698.7851F));
      assertEquals((-698.7851F), (float)float2, 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(240, 781, 240, 781, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-6377), 739.909F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -6377
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 2535);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2535, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ROI rOI1 = new ROI(0, 0, (int) integer0, (-2108));
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int2);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int3);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int4);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int2));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int3));
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      
      realColorImage1.byteSize(rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 8;
      floatArray0[3] = (float) 8;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 0;
      floatArray0[7] = (float) 0;
      floatArray0[8] = (float) 0;
      RealColorImage realColorImage2 = realColorImage0.divide(floatArray0, rOI0);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(8, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(9, floatArray0.length);
      assertNotNull(realColorImage2);
      assertArrayEquals(new float[] {0.0F, 8.0F, 0.0F, 8.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float) 0, (float) 0, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 16);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      floatArray0[1] = (float) 16;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = (float) 2;
      floatArray0[6] = (float) 16;
      RealColorImage realColorImage1 = realColorImage0.addbuffer(2, 16, floatArray0);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(2, realColorImage1.X());
      assertEquals(16, realColorImage1.Y());
      assertEquals(7, floatArray0.length);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertArrayEquals(new float[] {2.0F, 16.0F, 0.0F, 0.0F, 0.0F, 2.0F, 16.0F}, floatArray0, 0.01F);
      
      int int0 = (-3964);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      Float float0 = realColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      
      int int7 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int7);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      
      int int8 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int8);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int2);
      
      RealColorImage realColorImage3 = new RealColorImage(1, 0);
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage3.X());
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertNotNull(realColorImage3);
      
      RealColorImage realColorImage4 = realColorImage1.divide(realColorImage2, rOI0, rOI0);
      assertNotSame(realColorImage4, realColorImage3);
      assertSame(realColorImage4, realColorImage0);
      assertNotSame(realColorImage4, realColorImage2);
      assertSame(realColorImage4, realColorImage1);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage4);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage4);
      assertNotSame(rOI0, rOI1);
      assertNotSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage4);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(1, realColorImage4.Y());
      assertEquals(1, realColorImage4.X());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertFalse(realColorImage4.equals((Object)realColorImage3));
      assertFalse(realColorImage4.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(realColorImage2.equals((Object)realColorImage3));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage4);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 851;
      RealColorImage realColorImage0 = new RealColorImage(851, 1499);
      assertEquals(1499, realColorImage0.Y());
      assertEquals(851, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-809), 1499, 0.0F, (-1.0F), (float) 1499, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1499
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(imageProducer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      realColorImage1.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      realColorImage1.byteSize(rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[4];
      ROI rOI1 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int0 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      assertFalse(rOI0.equals((Object)rOI1));
      
      realColorImage1.byteSize();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      
      rOI1.setROI(0, 0, 1487, 0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1487, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      int int2 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(1487, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1487, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      String string0 = realColorImage0.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertNotNull(string0);
      
      RealColorImage realColorImage3 = realColorImage0.diff(realColorImage2);
      assertSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage3.X());
      assertEquals(0, realColorImage3.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotNull(realColorImage3);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(426, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 2535);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(2535, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.subtract(1897.642F, 1897.642F, (float) 0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(2535, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(2535, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      int int0 = (-1511);
      Float float0 = new Float(23.47591809);
      assertEquals(23.475918F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(23.47591809);
      assertEquals(23.475918F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      DummyObserver dummyObserver0 = new DummyObserver();
      assertNotNull(dummyObserver0);
      
      // Undeclared exception!
      try { 
        realColorImage1.get((-2018), (-1067));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI1.setROI(0, 1487, 1423, 0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1424, rOI1.X());
      assertEquals(1488, rOI1.Y());
      assertEquals(1487, rOI1.ly());
      assertEquals(1423, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 8);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      int int5 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      
      int int8 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int8);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int2);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int1);
      assertTrue(int8 == int7);
      
      // Undeclared exception!
      try { 
        realColorImage1.divide(realColorImage0, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2108
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      
      RealColorImage realColorImage2 = realColorImage0.copy();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage2.Y());
      assertEquals(1, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      RealColorImage realColorImage3 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage3.X());
      assertEquals(1, realColorImage3.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotNull(realColorImage3);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertNotNull(string0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 1;
      RealColorImage realColorImage4 = realColorImage0.multiply(floatArray0);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage0, realColorImage4);
      assertSame(realColorImage4, realColorImage1);
      assertSame(realColorImage4, realColorImage0);
      assertNotSame(realColorImage4, realColorImage3);
      assertNotSame(realColorImage4, realColorImage2);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage4.X());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertEquals(1, realColorImage4.Y());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage4.equals((Object)realColorImage3));
      assertFalse(realColorImage4.equals((Object)realColorImage2));
      assertNotNull(realColorImage4);
      assertArrayEquals(new float[] {0.0F, 0.0F, 1.0F}, floatArray0, 0.01F);
      
      RealColorImage realColorImage5 = realColorImage3.divide((float) 1, 2073.0F, 0.0F);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage0, realColorImage5);
      assertSame(realColorImage0, realColorImage4);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage5);
      assertSame(realColorImage1, realColorImage4);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage5, realColorImage4);
      assertNotSame(realColorImage5, realColorImage2);
      assertNotSame(realColorImage5, realColorImage0);
      assertNotSame(realColorImage5, realColorImage1);
      assertSame(realColorImage5, realColorImage3);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage4);
      assertSame(realColorImage3, realColorImage5);
      assertNotSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage5.Y());
      assertEquals(1, realColorImage5.X());
      assertEquals(ColorModel.RGB, realColorImage5.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage3.X());
      assertEquals(1, realColorImage3.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertFalse(realColorImage5.equals((Object)realColorImage4));
      assertFalse(realColorImage5.equals((Object)realColorImage2));
      assertFalse(realColorImage5.equals((Object)realColorImage0));
      assertFalse(realColorImage5.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage4));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotNull(realColorImage5);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 8);
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = 9;
      ROI rOI1 = new ROI(0, 1500, 0, 9);
      assertEquals(1, rOI1.X());
      assertEquals(1500, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(9, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(1492, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1500;
      ROI rOI2 = new ROI();
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertNotNull(rOI2);
      
      int int4 = 448;
      // Undeclared exception!
      try { 
        realColorImage0.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(1423, 1423, 1423, 1423);
      assertEquals(1423, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1423, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1423, rOI0.uy());
      assertEquals(1423, rOI0.ux());
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1423;
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 2398;
      floatArray0[1] = (float) 4983;
      floatArray0[2] = (float) 0;
      floatArray0[3] = 32767.0F;
      // Undeclared exception!
      realColorImage0.addbuffer(0, 4983, 4983, 4983, floatArray0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float float0 = Float.min(1124.379F, (-968.06F));
      assertEquals((-968.06F), float0, 0.01F);
      
      int int0 = 0;
      int int1 = 13;
      ROI rOI0 = new ROI(0, 0, 13, 1500);
      assertEquals(1500, rOI0.ly());
      assertEquals(1501, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(14, rOI0.X());
      assertEquals(13, rOI0.lx());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = 1124.379F;
      int int2 = 2499;
      // Undeclared exception!
      try { 
        realColorImage0.max(2498);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2498
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 2555;
      // Undeclared exception!
      try { 
        realColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      float[] floatArray0 = new float[2];
      float float0 = 0.0F;
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      RealColorImage realColorImage2 = realColorImage1.add(0, 0.0F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertNotNull(realColorImage2);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 8;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      RealColorImage realColorImage0 = new RealColorImage(0, 8);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int2 = 4;
      String string0 = realColorImage0.toString();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals("0:8\n0:8\n0:8\n", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        realColorImage0.min(4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer((-609), (-1), 1705, 8, (float[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      
      int int8 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int8);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertTrue(int8 == int7);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(128, 128, 1.4E-45F, (float) 128, (float) 128, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1463, 1463);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1463, realColorImage0.Y());
      assertEquals(1463, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      int int5 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      
      int int8 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int8);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(1463, (-887), (float) (-887), 14.873F, 14.873F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2995
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1502);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      double[] doubleArray0 = realColorImage0.sqrSum();
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = realColorImage0.toString();
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals("0:1502\n0:1502\n0:1502\n", string0);
      assertNotNull(string0);
      
      Float[] floatArray0 = new Float[8];
      Float float0 = new Float(309.87332F);
      assertEquals(309.87332F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(309.87332F, float1, 0.01F);
      
      floatArray0[0] = (Float) 309.87332F;
      Float float2 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotNull(float3);
      
      Float float4 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      Float float5 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float5, 0.01F);
      assertEquals((float)float5, (float)float3, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      Float float6 = Float.valueOf((-456.838F));
      assertEquals((-456.838F), (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotNull(float6);
      
      Float float7 = Float.valueOf(3.4028235E38F);
      assertEquals(3.4028235E38F, (float)float7, 0.01F);
      assertNotEquals((float)float7, (float)float4, 0.01F);
      assertNotEquals((float)float7, (float)float0, 0.01F);
      assertNotEquals((float)float7, (float)float5, 0.01F);
      assertNotEquals((float)float7, (float)float6, 0.01F);
      assertNotEquals((float)float7, (float)float2, 0.01F);
      assertNotEquals((float)float7, (float)float3, 0.01F);
      assertNotEquals((float)float7, (float)float1, 0.01F);
      assertNotNull(float7);
      
      Float float8 = Float.valueOf(3.4028235E38F);
      assertEquals(3.4028235E38F, (float)float8, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertNotNull(float8);
      
      floatArray0[1] = float8;
      Float float9 = new Float((-690.6414F));
      assertEquals((-690.6414F), (float)float9, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotNull(float9);
      
      float float10 = float9.floatValue();
      assertEquals((-690.6414F), float10, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals(float10, float1, 0.01F);
      
      Float float11 = Float.valueOf((-690.6414F));
      assertEquals((-690.6414F), (float)float11, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertNotNull(float11);
      
      float float12 = float11.floatValue();
      assertEquals((-690.6414F), float12, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertEquals(float12, float10, 0.01F);
      assertNotEquals(float12, float1, 0.01F);
      
      float float13 = float9.floatValue();
      assertEquals((-690.6414F), float13, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertEquals((float)float9, (float)float10, 0.01F);
      assertEquals((float)float9, (float)float12, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertEquals((float)float9, (float)float11, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals(float13, float1, 0.01F);
      assertEquals(float13, float10, 0.01F);
      assertEquals(float13, float12, 0.01F);
      
      float float14 = float9.floatValue();
      assertEquals((-690.6414F), float14, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertEquals((float)float9, (float)float11, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertEquals((float)float9, (float)float13, 0.01F);
      assertEquals((float)float9, (float)float10, 0.01F);
      assertEquals((float)float9, (float)float12, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertEquals(float14, float13, 0.01F);
      assertNotEquals(float14, float1, 0.01F);
      assertEquals(float14, float12, 0.01F);
      assertEquals(float14, float10, 0.01F);
      
      float float15 = float11.floatValue();
      assertEquals((-690.6414F), float15, 0.01F);
      assertEquals((float)float11, (float)float9, 0.01F);
      assertEquals((float)float11, (float)float10, 0.01F);
      assertNotEquals((float)float11, (float)float7, 0.01F);
      assertNotEquals((float)float11, (float)float0, 0.01F);
      assertEquals((float)float11, (float)float13, 0.01F);
      assertNotEquals((float)float11, (float)float5, 0.01F);
      assertEquals((float)float11, (float)float12, 0.01F);
      assertNotEquals((float)float11, (float)float8, 0.01F);
      assertNotEquals((float)float11, (float)float2, 0.01F);
      assertNotEquals((float)float11, (float)float1, 0.01F);
      assertNotEquals((float)float11, (float)float6, 0.01F);
      assertEquals((float)float11, (float)float14, 0.01F);
      assertNotEquals((float)float11, (float)float3, 0.01F);
      assertNotEquals((float)float11, (float)float4, 0.01F);
      assertEquals(float15, float12, 0.01F);
      assertEquals(float15, float14, 0.01F);
      assertEquals(float15, float10, 0.01F);
      assertEquals(float15, float13, 0.01F);
      assertNotEquals(float15, float1, 0.01F);
      
      floatArray0[2] = (Float) (-690.6414F);
      Float float16 = new Float((-219.3905848163));
      assertEquals((-219.39058F), (float)float16, 0.01F);
      assertNotEquals((float)float16, (float)float4, 0.01F);
      assertNotEquals((float)float16, (float)float14, 0.01F);
      assertNotEquals((float)float16, (float)float7, 0.01F);
      assertNotEquals((float)float16, (float)float6, 0.01F);
      assertNotEquals((float)float16, (float)float11, 0.01F);
      assertNotEquals((float)float16, (float)float3, 0.01F);
      assertNotEquals((float)float16, (float)float2, 0.01F);
      assertNotEquals((float)float16, (float)float1, 0.01F);
      assertNotEquals((float)float16, (float)float13, 0.01F);
      assertNotEquals((float)float16, (float)float8, 0.01F);
      assertNotEquals((float)float16, (float)float0, 0.01F);
      assertNotEquals((float)float16, (float)float9, 0.01F);
      assertNotEquals((float)float16, (float)float10, 0.01F);
      assertNotEquals((float)float16, (float)float5, 0.01F);
      assertNotEquals((float)float16, (float)float12, 0.01F);
      assertNotEquals((float)float16, (float)float15, 0.01F);
      assertNotNull(float16);
      
      floatArray0[3] = float16;
      Float float17 = new Float(0.0F);
      assertEquals(0.0F, (float)float17, 0.01F);
      assertNotEquals((float)float17, (float)float16, 0.01F);
      assertNotEquals((float)float17, (float)float10, 0.01F);
      assertNotEquals((float)float17, (float)float9, 0.01F);
      assertEquals((float)float17, (float)float5, 0.01F);
      assertNotEquals((float)float17, (float)float0, 0.01F);
      assertNotEquals((float)float17, (float)float11, 0.01F);
      assertNotEquals((float)float17, (float)float15, 0.01F);
      assertNotEquals((float)float17, (float)float1, 0.01F);
      assertNotEquals((float)float17, (float)float6, 0.01F);
      assertNotEquals((float)float17, (float)float14, 0.01F);
      assertNotEquals((float)float17, (float)float7, 0.01F);
      assertNotEquals((float)float17, (float)float13, 0.01F);
      assertEquals((float)float17, (float)float2, 0.01F);
      assertEquals((float)float17, (float)float3, 0.01F);
      assertNotEquals((float)float17, (float)float8, 0.01F);
      assertEquals((float)float17, (float)float4, 0.01F);
      assertNotEquals((float)float17, (float)float12, 0.01F);
      assertNotNull(float17);
      
      float float18 = float17.floatValue();
      assertEquals(0.0F, float18, 0.01F);
      assertNotEquals((float)float17, (float)float16, 0.01F);
      assertNotEquals((float)float17, (float)float10, 0.01F);
      assertNotEquals((float)float17, (float)float9, 0.01F);
      assertEquals((float)float17, (float)float5, 0.01F);
      assertNotEquals((float)float17, (float)float0, 0.01F);
      assertNotEquals((float)float17, (float)float11, 0.01F);
      assertNotEquals((float)float17, (float)float15, 0.01F);
      assertNotEquals((float)float17, (float)float1, 0.01F);
      assertNotEquals((float)float17, (float)float6, 0.01F);
      assertNotEquals((float)float17, (float)float14, 0.01F);
      assertNotEquals((float)float17, (float)float7, 0.01F);
      assertNotEquals((float)float17, (float)float13, 0.01F);
      assertEquals((float)float17, (float)float2, 0.01F);
      assertEquals((float)float17, (float)float3, 0.01F);
      assertNotEquals((float)float17, (float)float8, 0.01F);
      assertEquals((float)float17, (float)float4, 0.01F);
      assertNotEquals((float)float17, (float)float12, 0.01F);
      assertNotEquals(float18, float12, 0.01F);
      assertNotEquals(float18, float15, 0.01F);
      assertNotEquals(float18, float10, 0.01F);
      assertNotEquals(float18, float14, 0.01F);
      assertNotEquals(float18, float1, 0.01F);
      assertNotEquals(float18, float13, 0.01F);
      
      floatArray0[4] = (Float) 0.0F;
      Float float19 = new Float((-690.6414F));
      assertEquals((-690.6414F), (float)float19, 0.01F);
      assertNotEquals((float)float19, (float)float3, 0.01F);
      assertEquals((float)float19, (float)float13, 0.01F);
      assertEquals((float)float19, (float)float14, 0.01F);
      assertNotEquals((float)float19, (float)float2, 0.01F);
      assertNotEquals((float)float19, (float)float8, 0.01F);
      assertNotEquals((float)float19, (float)float6, 0.01F);
      assertNotEquals((float)float19, (float)float0, 0.01F);
      assertEquals((float)float19, (float)float12, 0.01F);
      assertNotEquals((float)float19, (float)float7, 0.01F);
      assertEquals((float)float19, (float)float9, 0.01F);
      assertEquals((float)float19, (float)float10, 0.01F);
      assertEquals((float)float19, (float)float15, 0.01F);
      assertNotEquals((float)float19, (float)float16, 0.01F);
      assertNotEquals((float)float19, (float)float18, 0.01F);
      assertNotEquals((float)float19, (float)float4, 0.01F);
      assertNotEquals((float)float19, (float)float5, 0.01F);
      assertEquals((float)float19, (float)float11, 0.01F);
      assertNotEquals((float)float19, (float)float17, 0.01F);
      assertNotEquals((float)float19, (float)float1, 0.01F);
      assertNotNull(float19);
      
      floatArray0[5] = float19;
      Float float20 = new Float((-690.6414F));
      assertEquals((-690.6414F), (float)float20, 0.01F);
      assertNotEquals((float)float20, (float)float4, 0.01F);
      assertEquals((float)float20, (float)float11, 0.01F);
      assertNotEquals((float)float20, (float)float18, 0.01F);
      assertEquals((float)float20, (float)float14, 0.01F);
      assertNotEquals((float)float20, (float)float2, 0.01F);
      assertNotEquals((float)float20, (float)float6, 0.01F);
      assertNotEquals((float)float20, (float)float3, 0.01F);
      assertEquals((float)float20, (float)float15, 0.01F);
      assertNotEquals((float)float20, (float)float17, 0.01F);
      assertNotEquals((float)float20, (float)float1, 0.01F);
      assertNotEquals((float)float20, (float)float5, 0.01F);
      assertNotEquals((float)float20, (float)float0, 0.01F);
      assertEquals((float)float20, (float)float12, 0.01F);
      assertNotEquals((float)float20, (float)float16, 0.01F);
      assertEquals((float)float20, (float)float13, 0.01F);
      assertEquals((float)float20, (float)float19, 0.01F);
      assertNotEquals((float)float20, (float)float8, 0.01F);
      assertEquals((float)float20, (float)float9, 0.01F);
      assertEquals((float)float20, (float)float10, 0.01F);
      assertNotEquals((float)float20, (float)float7, 0.01F);
      assertNotNull(float20);
      
      floatArray0[6] = float20;
      Float float21 = new Float((float) 1);
      assertEquals(1.0F, (float)float21, 0.01F);
      assertNotEquals((float)float21, (float)float12, 0.01F);
      assertNotEquals((float)float21, (float)float1, 0.01F);
      assertNotEquals((float)float21, (float)float19, 0.01F);
      assertNotEquals((float)float21, (float)float0, 0.01F);
      assertNotEquals((float)float21, (float)float13, 0.01F);
      assertNotEquals((float)float21, (float)float3, 0.01F);
      assertNotEquals((float)float21, (float)float5, 0.01F);
      assertNotEquals((float)float21, (float)float9, 0.01F);
      assertNotEquals((float)float21, (float)float16, 0.01F);
      assertNotEquals((float)float21, (float)float6, 0.01F);
      assertNotEquals((float)float21, (float)float8, 0.01F);
      assertNotEquals((float)float21, (float)float10, 0.01F);
      assertNotEquals((float)float21, (float)float11, 0.01F);
      assertNotEquals((float)float21, (float)float17, 0.01F);
      assertNotEquals((float)float21, (float)float7, 0.01F);
      assertNotEquals((float)float21, (float)float4, 0.01F);
      assertNotEquals((float)float21, (float)float14, 0.01F);
      assertNotEquals((float)float21, (float)float18, 0.01F);
      assertNotEquals((float)float21, (float)float15, 0.01F);
      assertNotEquals((float)float21, (float)float20, 0.01F);
      assertNotEquals((float)float21, (float)float2, 0.01F);
      assertNotNull(float21);
      
      floatArray0[7] = float21;
      // Undeclared exception!
      try { 
        realColorImage0.set(1497, 1, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1497
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 3338;
      RealColorImage realColorImage0 = new RealColorImage(3338, 3338);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(2888, 0);
      assertEquals(2888, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 2888;
      floatArray0[2] = (float) 1152;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) (-1018);
      floatArray0[5] = (float) 1152;
      floatArray0[6] = (float) 2888;
      floatArray0[7] = (float) 2888;
      floatArray0[8] = (float) 2888;
      // Undeclared exception!
      realColorImage0.addbuffer(0, 2888, (-1018), 1152, floatArray0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) 0;
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.X();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      int int0 = 0;
      RealGrayImage realGrayImage0 = null;
      realColorImage1.setPlane(0, (RealGrayImage) null);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      
      realColorImage1.setPlane(0, (RealGrayImage) null);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      
      // Undeclared exception!
      try { 
        realColorImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.colorModel = colorModel0;
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      
      int int0 = (-1);
      int int1 = realColorImage0.X();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = 0;
      Float[] floatArray0 = new Float[1];
      Float float0 = new Float((float) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      // Undeclared exception!
      try { 
        realColorImage0.add(0, 128, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1502);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = (-1018);
      int int1 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1502;
      floatArray0[2] = (float) (-1018);
      RealColorImage realColorImage1 = realColorImage0.addbuffer(1502, 0, 0, 0, floatArray0);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage1.Y());
      assertEquals(1502, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertArrayEquals(new float[] {0.0F, 1502.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage1.Y());
      assertEquals(1502, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 1502.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string1 = realColorImage0.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertEquals("0:1502\n0:1502\n0:1502\n", string1);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ColorModel colorModel0 = ColorModel.RGB;
      realColorImage1.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(1502, realColorImage0.Y());
      assertEquals(0, realColorImage1.Y());
      assertEquals(1502, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      
      float float0 = 0.0F;
      float float1 = (-1843.6849F);
      // Undeclared exception!
      try { 
        realColorImage1.multiply(0, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[4];
      rOI0.setROI(0, 0, 1423, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(1423, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1424, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = (-32);
      int int1 = (-2976);
      int[] intArray0 = new int[2];
      intArray0[1] = (-2976);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      MemoryImageSource memoryImageSource0 = new MemoryImageSource((-2976), (-2976), intArray0, (-2976), (-2976), hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(2, intArray0.length);
      assertNotNull(memoryImageSource0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn((-32)).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage(image0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(2555, 2398, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(2029.752F, 2029.752F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int int0 = 1;
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = (-35);
      int int4 = (-2108);
      RealColorImage realColorImage2 = realColorImage1.multiply(realColorImage0, rOI0, rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertNotNull(realColorImage2);
      
      int int5 = (-1285);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(2, (-1285), (-1285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type -1285
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float float0 = Float.min((-4735.52F), (-968.06F));
      assertEquals((-4735.52F), float0, 0.01F);
      
      ROI rOI0 = new ROI(0, 0, 16, 1500);
      assertEquals(1500, rOI0.ly());
      assertEquals(17, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1501, rOI0.Y());
      assertEquals(16, rOI0.lx());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-4735.52F);
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(887, (-1394.6F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 887
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[1];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(2555, 2398, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 735;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 735;
      floatArray0[1] = (float) 735;
      floatArray0[2] = (float) 735;
      int int1 = (-1987);
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage1.get(16, (-1987));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.clip((-590), (-590), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = 1326.2F;
      floatArray0[1] = 70.90585F;
      floatArray0[2] = 2777.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 797.076F;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-3196), (-3196), (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 826;
      int int1 = (-1336);
      int int2 = 1491;
      int int3 = (-1564);
      ROI rOI0 = new ROI(1491, 1491, (-1564), 5135);
      assertEquals(3645, rOI0.Y());
      assertEquals((-1564), rOI0.ux());
      assertEquals(3056, rOI0.X());
      assertEquals(1491, rOI0.uy());
      assertEquals(5135, rOI0.ly());
      assertEquals(1491, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      realColorImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 16);
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      rOI0.setROI(1, (-16777216), 1473, 1473);
      assertEquals(16778690, rOI0.Y());
      assertEquals(1473, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(1473, rOI0.ly());
      
      int int1 = new Integer(1);
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      ColorModel colorModel0 = ColorModel.HSV;
      realColorImage1.colorModel = colorModel0;
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.HSV, realColorImage1.getColorModel());
      
      int int2 = rOI0.lx();
      assertEquals(16778690, rOI0.Y());
      assertEquals(1473, rOI0.lx());
      assertEquals(1473, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(1473, rOI0.ly());
      assertEquals(1473, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(imageProducer0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      
      String string0 = realColorImage1.toString();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.HSV, realColorImage1.getColorModel());
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1;
      floatArray0[1] = (float) (-800);
      floatArray0[2] = (float) 128;
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      Float float0 = realColorImage1.minComponent();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(6, 6, 32767.0F, (float) 6, (-2013.57F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) (-1018);
      RealColorImage realColorImage1 = realColorImage0.addbuffer(0, 0, 0, 0, floatArray0);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 0.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string1 = realColorImage0.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals("0:0\n0:0\n0:0\n", string1);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      int int4 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      RealColorImage realColorImage2 = null;
      try {
        realColorImage2 = new RealColorImage((-140), 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ImageProducer imageProducer0 = realColorImage1.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertNotNull(imageProducer0);
      
      double[] doubleArray0 = realColorImage0.sqrSum();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(3, doubleArray0.length);
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int int0 = 1;
      RealColorImage realColorImage0 = new RealColorImage(1, 8);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(8, (float) 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int1 = 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2976);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      MemoryImageSource memoryImageSource0 = new MemoryImageSource((-2976), (-2976), intArray0, (-2976), (-2976), hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(2, intArray0.length);
      assertNotNull(memoryImageSource0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(memoryImageSource0).when(image0).getSource();
      doReturn(32).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealColorImage realColorImage0 = new RealColorImage(image0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(32, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(2, intArray0.length);
      assertNotNull(realColorImage0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      String string0 = realColorImage0.toString();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(32, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals("32:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n32:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n32:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-2976), 1447, (float) 1447, 1.4E-45F, (-1133.7F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1447
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      
      int int7 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int7);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      
      ROI rOI2 = new ROI(0, 0, (-454), 2);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.lx());
      assertEquals(3, rOI2.Y());
      assertEquals((-454), rOI2.ux());
      assertEquals(2, rOI2.ly());
      assertEquals(455, rOI2.X());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertNotNull(rOI2);
      
      int int8 = rOI2.lx();
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.lx());
      assertEquals(3, rOI2.Y());
      assertEquals((-454), rOI2.ux());
      assertEquals(2, rOI2.ly());
      assertEquals(455, rOI2.X());
      assertEquals(0, int8);
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int3);
      assertTrue(int8 == int0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 0, (float) 128, (float) (-454), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get(0, (-91), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(2109, rOI1.Y());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(1, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      
      realColorImage0.clip(0, (-3650), rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(rOI0, rOI1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(rOI0.equals((Object)rOI1));
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      RealColorImage realColorImage2 = realColorImage0.multiply(0, 255.0F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(0, realColorImage2.X());
      assertEquals(0, realColorImage2.Y());
      assertNotNull(realColorImage2);
      
      RealColorImage realColorImage3 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(0, realColorImage3.Y());
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertNotNull(realColorImage3);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage3);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertNotNull(imageProducer0);
      
      double[] doubleArray0 = realColorImage1.sqrSum();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, doubleArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertNotNull(doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      String string0 = realColorImage1.toString();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage0, realColorImage3);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage3);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage3));
      assertFalse(realColorImage1.equals((Object)realColorImage3));
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 2120;
      RealColorImage realColorImage0 = new RealColorImage(2120, 2120);
      assertEquals(2120, realColorImage0.Y());
      assertEquals(2120, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int1 = 16;
      int int2 = 179;
      int int3 = (-325);
      ROI rOI0 = new ROI(2120, 179, 179, (-325));
      assertEquals(505, rOI0.Y());
      assertEquals(179, rOI0.ly());
      assertEquals((-325), rOI0.uy());
      assertEquals(1942, rOI0.X());
      assertEquals(179, rOI0.ux());
      assertEquals(2120, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.max(16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      String string0 = realColorImage1.toString();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals("8:8\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n8:8\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n8:8\n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertNotNull(string0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 2;
      realColorImage1.subtract(3, 2, floatArray0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(4, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int5 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, int5);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int6 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, int6);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, int7);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI(0, 0, 0, (-2108));
      assertEquals(2109, rOI2.Y());
      assertEquals((-2108), rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertNotNull(rOI2);
      
      int int8 = rOI2.lx();
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(2109, rOI2.Y());
      assertEquals((-2108), rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, int8);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      
      int int9 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, int9);
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int8);
      assertTrue(int9 == int3);
      assertTrue(int9 == int2);
      assertTrue(int9 == int6);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertTrue(int9 == int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      
      int int10 = rOI2.ly();
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(2109, rOI2.Y());
      assertEquals((-2108), rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, int10);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int10 == int8);
      assertTrue(int10 == int4);
      assertTrue(int10 == int6);
      assertTrue(int10 == int1);
      assertTrue(int10 == int9);
      assertTrue(int10 == int5);
      assertTrue(int10 == int2);
      assertTrue(int10 == int0);
      assertTrue(int10 == int7);
      assertTrue(int10 == int3);
      
      int int11 = rOI2.ux();
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(2109, rOI2.Y());
      assertEquals((-2108), rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, int11);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int11 == int2);
      assertTrue(int11 == int3);
      assertTrue(int11 == int10);
      assertTrue(int11 == int5);
      assertTrue(int11 == int7);
      assertTrue(int11 == int0);
      assertTrue(int11 == int9);
      assertTrue(int11 == int6);
      assertTrue(int11 == int4);
      assertTrue(int11 == int1);
      assertTrue(int11 == int8);
      
      int int12 = rOI2.ux();
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(2109, rOI2.Y());
      assertEquals((-2108), rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(0, int12);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int12 == int8);
      assertTrue(int12 == int4);
      assertTrue(int12 == int11);
      assertTrue(int12 == int6);
      assertTrue(int12 == int2);
      assertTrue(int12 == int3);
      assertTrue(int12 == int9);
      assertTrue(int12 == int1);
      assertTrue(int12 == int7);
      assertTrue(int12 == int0);
      assertTrue(int12 == int10);
      assertTrue(int12 == int5);
      
      int int13 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI1, rOI2);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, int13);
      assertTrue(int13 == int0);
      assertTrue(int13 == int10);
      assertTrue(int13 == int8);
      assertTrue(int13 == int9);
      assertTrue(int13 == int11);
      assertTrue(int13 == int1);
      assertTrue(int13 == int5);
      assertTrue(int13 == int7);
      assertTrue(int13 == int12);
      assertTrue(int13 == int4);
      assertTrue(int13 == int2);
      assertTrue(int13 == int6);
      assertTrue(int13 == int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI1.equals((Object)rOI2));
      
      // Undeclared exception!
      try { 
        realColorImage0.min(rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2108
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 8;
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Float[] floatArray0 = new Float[0];
      // Undeclared exception!
      try { 
        realColorImage0.set(8, 8, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ColorModel colorModel0 = ColorModel.HSV;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.HSV, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      rOI0.setROI(4, 4, (-572), (-572));
      assertEquals(577, rOI0.X());
      assertEquals((-572), rOI0.uy());
      assertEquals(577, rOI0.Y());
      assertEquals((-572), rOI0.ux());
      assertEquals(4, rOI0.ly());
      assertEquals(4, rOI0.lx());
      
      // Undeclared exception!
      try { 
        realColorImage0.min(1407);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1407
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ColorModel colorModel0 = ColorModel.HSV;
      realColorImage1.setColorModel(colorModel0);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.HSV, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = null;
      try {
        realColorImage1 = new RealColorImage(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 1456;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 1456;
      floatArray0[1] = (float) 1456;
      floatArray0[2] = (float) 1456;
      int int1 = 2555;
      int int2 = 1460;
      ROI rOI0 = new ROI(1456, 2555, 1460, 1456);
      assertEquals(5, rOI0.X());
      assertEquals(1460, rOI0.lx());
      assertEquals(1100, rOI0.Y());
      assertEquals(1456, rOI0.uy());
      assertEquals(1456, rOI0.ux());
      assertEquals(2555, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(1456, 1456, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      Float float0 = new Float((double) 1473);
      assertEquals(1473.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals(1473.0F, float1, 0.01F);
      
      // Undeclared exception!
      try { 
        realColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(123, 123, 0, 1454);
      assertEquals(123, rOI0.uy());
      assertEquals(1454, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(124, rOI0.X());
      assertEquals(123, rOI0.lx());
      assertEquals(1332, rOI0.Y());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1454;
      // Undeclared exception!
      try { 
        realColorImage0.divide(floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 8;
      floatArray0[1] = (float) 4;
      floatArray0[2] = (float) 8;
      floatArray0[3] = (float) 8;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(136, 8.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 136
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-91), 2, (float) (-669), (float) (-669), 2517.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(3351.5F, 1.4E-45F, 3.4028235E38F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI(2533, 2533, 2533, 2533);
      assertEquals(2533, rOI0.ly());
      assertEquals(2533, rOI0.lx());
      assertEquals(2533, rOI0.ux());
      assertEquals(2533, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 735;
      floatArray0[1] = (float) 735;
      floatArray0[2] = (float) 735;
      // Undeclared exception!
      try { 
        realColorImage0.divide(735, 16, floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(imageProducer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.divide(8, (-1608), 281.4F, 0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1608
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        realColorImage0.get((-669), (-91), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 16);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(16, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      RealColorImage realColorImage1 = new RealColorImage(16, 0);
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(16, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage1.multiply(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 2555, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(1047, (float) 1047);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1047
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 735;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) int0;
      float float0 = 2570.2583F;
      float float1 = 0.0F;
      float float2 = Float.min(float1, float0);
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float0, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = (-2260);
      int int2 = 1;
      Float[] floatArray1 = new Float[1];
      floatArray1[0] = (Float) floatArray0[1];
      // Undeclared exception!
      try { 
        realColorImage0.set(int1, int2, floatArray1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 1476;
      RealColorImage realColorImage0 = new RealColorImage(1476, 1476);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1476, realColorImage0.Y());
      assertEquals(1476, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2976);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      MemoryImageSource memoryImageSource0 = new MemoryImageSource((-2976), (-2976), intArray0, (-2976), (-2976), hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(2, intArray0.length);
      assertNotNull(memoryImageSource0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(memoryImageSource0).when(image0).getSource();
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealColorImage realColorImage0 = new RealColorImage(image0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(2, intArray0.length);
      assertNotNull(realColorImage0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      float float0 = 1897.642F;
      RealColorImage realColorImage1 = realColorImage0.subtract(3374.538F, 1405.91F, 0.0F);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(2, intArray0.length);
      assertNotNull(realColorImage1);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      Float float1 = new Float((double) 1405.91F);
      assertEquals(1405.91F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      float float2 = Float.max(0.0F, 0.0F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      
      Float float3 = new Float((double) 1405.91F);
      assertEquals(1405.91F, (float)float3, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotNull(float3);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = 16;
      Float[] floatArray0 = new Float[7];
      floatArray0[0] = float3;
      Float float4 = new Float(0.0);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      floatArray0[1] = float4;
      floatArray0[2] = float1;
      floatArray0[3] = float1;
      floatArray0[4] = float3;
      floatArray0[5] = float1;
      Float float5 = new Float(32767.0F);
      assertEquals(32767.0F, (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotNull(float5);
      
      floatArray0[6] = float5;
      // Undeclared exception!
      try { 
        realColorImage0.set(16, (-1511), floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1511
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[4];
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage1.add((-2948), 1502, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1502
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      float float0 = 0.0F;
      float float1 = (-440.7F);
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      float float2 = 3.4028235E38F;
      float float3 = 570.0F;
      // Undeclared exception!
      try { 
        realColorImage0.subtract(3.4028235E38F, 570.0F, 570.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = 1473;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(1473, 1284, (float) 1284, (-1.0F), (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((RealColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      RealColorImage realColorImage0 = new RealColorImage(0, 8);
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float) 0, (float) 0, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage2.Y());
      assertEquals(1, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals("1:1\n0.0 \n1:1\n0.0 \n1:1\n0.0 \n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract(0, (-1836), (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2398, 2398, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      
      int int6 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int0);
      
      int int7 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals((-2108), rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      
      int int8 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int8);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int8 == int7);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int0);
      assertTrue(int8 == int6);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(128, 2, 0.0F, (float) 2, 112.141F, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2106
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      realColorImage1.byteSize(rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      RealColorImage realColorImage2 = realColorImage1.subtract(0, (float) 0, rOI0);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(8, realColorImage2.X());
      assertEquals(8, realColorImage2.Y());
      assertNotNull(realColorImage2);
      
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 8;
      // Undeclared exception!
      try { 
        realColorImage1.divide(floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float float0 = 0.0F;
      int int0 = (-2813);
      int int1 = 509;
      float[] floatArray0 = new float[8];
      floatArray0[0] = 0.0F;
      floatArray0[1] = (float) (-2813);
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      floatArray0[6] = 0.0F;
      floatArray0[7] = 0.0F;
      ROI rOI0 = new ROI((-112), (-112), 16, 16);
      assertEquals((-112), rOI0.ux());
      assertEquals((-112), rOI0.uy());
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.ly());
      assertEquals(129, rOI0.X());
      assertEquals(129, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1476, 509, floatArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      int int0 = (-609);
      // Undeclared exception!
      try { 
        realColorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      float[] floatArray0 = new float[4];
      ROI rOI1 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int0 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      assertFalse(rOI0.equals((Object)rOI1));
      
      realColorImage1.byteSize();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      
      int int1 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage2.Y());
      assertEquals(0, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      int int2 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      String string0 = realColorImage0.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage2);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        realColorImage0.subtract(426, 0, floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((-1083), (-1083));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int0 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      assertFalse(rOI0.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1789, 1789);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1789, realColorImage0.X());
      assertEquals(1789, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = 128;
      int int1 = 128;
      Float[] floatArray0 = realColorImage0.get(128, 128);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1789, realColorImage0.X());
      assertEquals(1789, realColorImage0.Y());
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      DummyObserver.dummy = dummyObserver0;
      Float[] floatArray1 = new Float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int2 = 0;
      int int3 = (-1054);
      int int4 = (-1);
      rOI0.setROI(128, (-1054), (-1), 1458);
      assertEquals((-1054), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(1458, rOI0.ly());
      assertEquals(128, rOI0.lx());
      assertEquals(2513, rOI0.Y());
      assertEquals(130, rOI0.X());
      
      int int5 = 1228;
      rOI0.setROI(0, 128, 1458, 1228);
      assertEquals(128, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1458, rOI0.lx());
      assertEquals(1459, rOI0.X());
      assertEquals(1228, rOI0.ly());
      assertEquals(1101, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realColorImage0.set(128, 1458, floatArray1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 1502);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = (-1018);
      int int1 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 1502;
      floatArray0[2] = (float) (-1018);
      RealColorImage realColorImage1 = realColorImage0.addbuffer(1502, 0, 0, 0, floatArray0);
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1502, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      assertArrayEquals(new float[] {0.0F, 1502.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string0 = realColorImage1.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage0);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1502, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(string0);
      assertArrayEquals(new float[] {0.0F, 1502.0F, (-1018.0F)}, floatArray0, 0.01F);
      
      String string1 = realColorImage0.toString();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(1502, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals("0:1502\n0:1502\n0:1502\n", string1);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract((float) (-1018), 0.0F, (-1843.6849F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 16);
      assertEquals(0, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.HLS;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(0, realColorImage0.X());
      assertEquals(16, realColorImage0.Y());
      assertEquals(ColorModel.HLS, realColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((float) 0, (float) 0, (float) 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 0;
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      Float float0 = realColorImage0.maxComponent();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotNull(float0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int1 = 1487;
      rOI1.setROI(0, 0, 0, 1487);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1487, rOI1.ly());
      assertEquals(1488, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(1487, rOI1.ly());
      assertEquals(1488, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      rOI1.setROI((-3968), 0, (-3968), (-3968));
      assertNotSame(rOI1, rOI0);
      assertEquals(3969, rOI1.Y());
      assertEquals((-3968), rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals((-3968), rOI1.uy());
      assertEquals((-3968), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply((-1), 796.0675F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 303.507F;
      floatArray0[1] = (-0.8870814F);
      DummyObserver.dummy = null;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = (-2158.639F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1417.24F);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = (-639);
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.multiply(realColorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      realColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.YIQ, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = (-1110.4501F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-26.49F);
      floatArray0[3] = 2455.525F;
      floatArray0[4] = (-658.3F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = 3234.88F;
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      float float0 = (-4162.5146F);
      float float1 = 0.0F;
      // Undeclared exception!
      try { 
        realColorImage0.add((-4162.5146F), 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-2976);
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      MemoryImageSource memoryImageSource0 = new MemoryImageSource((-2976), (-2976), intArray0, (-2976), (-2976), hashtable0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(2, intArray0.length);
      assertNotNull(memoryImageSource0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      int int0 = 0;
      Image image0 = mock(Image.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(image0).getHeight(any(java.awt.image.ImageObserver.class));
      doReturn(memoryImageSource0).when(image0).getSource();
      doReturn(0).when(image0).getWidth(any(java.awt.image.ImageObserver.class));
      RealColorImage realColorImage0 = new RealColorImage(image0);
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(2, intArray0.length);
      assertNotNull(realColorImage0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      String string0 = realColorImage0.toString();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertEquals(2, intArray0.length);
      assertNotNull(string0);
      assertArrayEquals(new int[] {0, (-2976)}, intArray0);
      
      int int1 = 1048;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-2976), 0, (float) 1048, (float) 0, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float[] floatArray0 = new float[7];
      floatArray0[0] = 303.507F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 1.4E-45F;
      floatArray0[4] = (-2158.639F);
      floatArray0[5] = 0.0F;
      floatArray0[6] = (-1417.24F);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = (-643);
      int int1 = (-593);
      // Undeclared exception!
      try { 
        realColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float float0 = (-494.501F);
      float float1 = (-1372.191F);
      Float[] floatArray0 = new Float[4];
      Float float2 = new Float(255.0);
      assertEquals(255.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      floatArray0[0] = float2;
      Float float3 = new Float((float) floatArray0[0]);
      assertEquals(255.0F, (float)float3, 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotNull(float3);
      
      floatArray0[1] = float3;
      Float float4 = Float.valueOf((-1469.43F));
      assertEquals((-1469.43F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotNull(float4);
      
      Float float5 = Float.valueOf((-1469.43F));
      assertEquals((-1469.43F), (float)float5, 0.01F);
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertEquals((float)float5, (float)float4, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotNull(float5);
      
      floatArray0[2] = float5;
      Float float6 = new Float(3150.43080005);
      assertEquals(3150.431F, (float)float6, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotNull(float6);
      
      floatArray0[3] = float6;
      // Undeclared exception!
      try { 
        realColorImage0.clear(floatArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 2514);
      assertEquals(2514, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.subtract(1897.642F, 1897.642F, (float) 0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(2514, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(2514, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(23.47591809);
      assertEquals(23.475918F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      floatArray0[0] = float0;
      Float float1 = new Float(23.47591809);
      assertEquals(23.475918F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      floatArray0[1] = float1;
      ROI rOI0 = new ROI((-1663), (-1663), 0, 1484);
      assertEquals(1484, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-1663), rOI0.uy());
      assertEquals(1664, rOI0.X());
      assertEquals((-1663), rOI0.ux());
      assertEquals(3148, rOI0.Y());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals((-2108), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI1.setROI(1475, 1475, 1475, 626);
      assertNotSame(rOI1, rOI0);
      assertEquals(850, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1475, rOI1.ux());
      assertEquals(626, rOI1.uy());
      assertEquals(1475, rOI1.ly());
      assertEquals(1475, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(850, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1475, rOI1.ux());
      assertEquals(626, rOI1.uy());
      assertEquals(1475, rOI1.ly());
      assertEquals(1475, rOI1.lx());
      assertEquals(1475, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.Y());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(16, 1485, (float) 0, 1.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1485
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-16777216), (float) (-16777216), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.X();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[1];
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(0, realColorImage1.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      DummyObserver dummyObserver0 = DummyObserver.dummy;
      assertNotNull(dummyObserver0);
      
      DummyObserver.dummy = dummyObserver0;
      // Undeclared exception!
      try { 
        realColorImage0.multiply(0, 0, (float) 0, (float) 0, (-32768.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 0.0F;
      floatArray0[3] = 0.0F;
      floatArray0[4] = (float) 0;
      RealColorImage realColorImage2 = realColorImage1.add(floatArray0);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.Y());
      assertEquals(5, floatArray0.length);
      assertNotNull(realColorImage2);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      realColorImage2.multiply(0, 0, 0.0F, 0.0F, 743.757F, rOI0);
      assertSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage2, realColorImage0);
      assertSame(realColorImage2, realColorImage1);
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, realColorImage2.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.Y());
      assertEquals(5, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.addbuffer(1, (-1), (float[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = 2555;
      float[] floatArray0 = new float[1];
      int int1 = 0;
      // Undeclared exception!
      try { 
        realColorImage0.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = new RealColorImage(realColorImage0);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      Float float0 = realColorImage0.maxComponent();
      assertNotSame(realColorImage0, realColorImage1);
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.Y());
      assertEquals((-32768.0F), (float)float0, 0.01F);
      assertFalse(realColorImage0.equals((Object)realColorImage1));
      assertNotNull(float0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      rOI1.setROI(0, 0, 0, 1487);
      assertNotSame(rOI1, rOI0);
      assertEquals(1488, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(1487, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(1488, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(1487, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, int0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realColorImage1.subtract(0, 0, (float) 1487, (-1.0F), (float) 1487, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.Y());
      assertEquals(0, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      RealColorImage realColorImage1 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(0, realColorImage1.X());
      assertEquals(0, realColorImage1.Y());
      assertFalse(realColorImage1.equals((Object)realColorImage0));
      assertNotNull(realColorImage1);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(7, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      realColorImage1.byteSize(rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(imageProducer0);
      
      ColorModel colorModel0 = realColorImage0.getColorModel();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorModel0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1496, 1481);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1481, realColorImage0.Y());
      assertEquals(1496, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      int int0 = realColorImage0.X();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1481, realColorImage0.Y());
      assertEquals(1496, realColorImage0.X());
      assertEquals(1496, int0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI((-1311), (-1311), 989, 826);
      assertEquals(2301, rOI0.X());
      assertEquals(826, rOI0.ly());
      assertEquals((-1311), rOI0.ux());
      assertEquals((-1311), rOI0.uy());
      assertEquals(2138, rOI0.Y());
      assertEquals(989, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI((-2846), 0, 989, (-2846));
      assertEquals(3836, rOI0.X());
      assertEquals((-2846), rOI0.uy());
      assertEquals((-2846), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(989, rOI0.lx());
      assertEquals(2847, rOI0.Y());
      
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        realColorImage0.add(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide((-639), 23, (float) (-1), (float) (-639), (float) (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      
      realColorImage1.byteSize(rOI0);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.X());
      assertEquals(8, realColorImage1.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ImageProducer imageProducer0 = realColorImage0.getJavaImage();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertNotNull(imageProducer0);
      
      // Undeclared exception!
      try { 
        realColorImage1.add(1475, (-1619.6323F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1475
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      // Undeclared exception!
      try { 
        realColorImage0.add((-3), (-3), (Float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      RealColorImage realColorImage2 = realColorImage1.copy(rOI0);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage2);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      Float float0 = Float.valueOf((-1494.284F));
      assertEquals((-1494.284F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = float0.floatValue();
      assertEquals((-1494.284F), float1, 0.01F);
      
      RealColorImage realColorImage3 = realColorImage0.multiply((-1494.284F), 1665.0F, 730.4954F, rOI0);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage3, realColorImage1);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realColorImage3.Y());
      assertEquals(1, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertNotNull(realColorImage3);
      
      RealColorImage realColorImage4 = realColorImage1.multiply(realColorImage3);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage4);
      assertSame(realColorImage0, realColorImage3);
      assertSame(realColorImage1, realColorImage4);
      assertSame(realColorImage1, realColorImage0);
      assertSame(realColorImage1, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage3, realColorImage1);
      assertSame(realColorImage3, realColorImage4);
      assertNotSame(realColorImage3, realColorImage2);
      assertSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage4, realColorImage2);
      assertSame(realColorImage4, realColorImage3);
      assertSame(realColorImage4, realColorImage0);
      assertSame(realColorImage4, realColorImage1);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, realColorImage3.Y());
      assertEquals(1, realColorImage3.X());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(1, realColorImage4.Y());
      assertEquals(1, realColorImage4.X());
      assertEquals(ColorModel.RGB, realColorImage4.getColorModel());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(realColorImage3.equals((Object)realColorImage2));
      assertFalse(realColorImage4.equals((Object)realColorImage2));
      assertNotNull(realColorImage4);
      
      float[] floatArray0 = realColorImage0.absSum();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage0, realColorImage4);
      assertSame(realColorImage0, realColorImage3);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage0.X());
      assertEquals(1, realColorImage0.Y());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      ROI rOI1 = new ROI(0, 0, 0, (-2108));
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(2109, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals((-2108), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      realColorImage0.byteSize();
      assertSame(realColorImage0, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      
      int int4 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int4);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      
      RealColorImage realColorImage2 = realColorImage1.copy();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage2, realColorImage0);
      assertNotSame(realColorImage2, realColorImage1);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(1, realColorImage2.X());
      assertEquals(1, realColorImage2.Y());
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertNotNull(realColorImage2);
      
      int int5 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int5);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      
      int int6 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      
      rOI1.setROI(0, 0, 0, (-2268));
      assertNotSame(rOI1, rOI0);
      assertEquals(2269, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals((-2268), rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      float[] floatArray0 = realColorImage1.addSum();
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(1, realColorImage0.Y());
      assertEquals(1, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(1, realColorImage1.Y());
      assertEquals(1, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(3, floatArray0.length);
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertNotNull(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      
      // Undeclared exception!
      try { 
        realColorImage1.toString(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2268
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      RealColorImage realColorImage1 = realColorImage0.clear();
      assertSame(realColorImage0, realColorImage1);
      assertSame(realColorImage1, realColorImage0);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertNotNull(realColorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      RealColorImage realColorImage2 = new RealColorImage(realColorImage1);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(8, realColorImage2.X());
      assertEquals(8, realColorImage2.Y());
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertNotNull(realColorImage2);
      
      RealColorImage realColorImage3 = realColorImage2.add(0, 3.4028235E38F, rOI0);
      assertNotSame(realColorImage0, realColorImage2);
      assertSame(realColorImage0, realColorImage1);
      assertNotSame(realColorImage0, realColorImage3);
      assertNotSame(realColorImage1, realColorImage2);
      assertSame(realColorImage1, realColorImage0);
      assertNotSame(realColorImage1, realColorImage3);
      assertNotSame(rOI0, rOI1);
      assertSame(realColorImage2, realColorImage3);
      assertNotSame(realColorImage2, realColorImage1);
      assertNotSame(realColorImage2, realColorImage0);
      assertSame(realColorImage3, realColorImage2);
      assertNotSame(realColorImage3, realColorImage0);
      assertNotSame(realColorImage3, realColorImage1);
      assertEquals(8, realColorImage0.Y());
      assertEquals(8, realColorImage0.X());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, realColorImage1.getColorModel());
      assertEquals(8, realColorImage1.Y());
      assertEquals(8, realColorImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(ColorModel.RGB, realColorImage2.getColorModel());
      assertEquals(8, realColorImage2.X());
      assertEquals(8, realColorImage2.Y());
      assertEquals(ColorModel.RGB, realColorImage3.getColorModel());
      assertEquals(8, realColorImage3.Y());
      assertEquals(8, realColorImage3.X());
      assertFalse(realColorImage0.equals((Object)realColorImage2));
      assertFalse(realColorImage1.equals((Object)realColorImage2));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(realColorImage2.equals((Object)realColorImage1));
      assertFalse(realColorImage2.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage0));
      assertFalse(realColorImage3.equals((Object)realColorImage1));
      assertNotNull(realColorImage3);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertNotNull(realColorImage0);
      
      float float0 = 1897.642F;
      // Undeclared exception!
      try { 
        realColorImage0.subtract(1897.642F, 1897.642F, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(8, 8);
      assertEquals(ColorModel.RGB, realColorImage0.getColorModel());
      assertEquals(8, realColorImage0.X());
      assertEquals(8, realColorImage0.Y());
      assertNotNull(realColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        realColorImage0.divide(8, (-982), (float) 8, 3.4028235E38F, 1.4E-45F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -982
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 2535);
      realColorImage0.subtract(1897.642F, 1405.91F, (float) 0);
      int int0 = (-1511);
      int int1 = 290;
      Float[] floatArray0 = new Float[2];
      Float float0 = new Float(23.47591809);
      float float1 = 1072.808F;
      Float.max(1072.808F, 1405.91F);
      floatArray0[0] = float0;
      Float float2 = new Float(23.47591809);
      floatArray0[1] = float2;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.set((-1511), 290, floatArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1511
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.divide(1, (float) (-91));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.ly();
      RealColorImage realColorImage0 = new RealColorImage(0, 8);
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 8;
      ROI rOI1 = new ROI();
      rOI1.ux();
      rOI1.lx();
      rOI1.ux();
      ROI rOI2 = new ROI(0, 0, 0, (-2108));
      rOI2.lx();
      rOI1.uy();
      rOI2.ly();
      rOI2.ux();
      rOI2.ux();
      rOI1.lx();
      // Undeclared exception!
      try { 
        realColorImage0.subtract(floatArray0, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2108
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      Float.min((-4735.52F), (-968.06F));
      ROI rOI0 = new ROI(0, 0, 16, 1500);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (-4735.52F);
      rOI0.setROI((-400), 2789, 582, 1);
      // Undeclared exception!
      try { 
        realColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      Float float0 = new Float((-698.7850747));
      float0.floatValue();
      Float float1 = new Float((-698.7851F));
      ROI rOI0 = new ROI();
      rOI0.lx();
      rOI0.ux();
      int int0 = new Integer(0);
      rOI0.lx();
      // Undeclared exception!
      try { 
        realColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Float float0 = new Float((double) 1473);
      Float.isFinite(1473);
      Float.sum(1284, 0.0F);
      Float.min(0.0F, (-1400.3F));
      float0.floatValue();
      RealColorImage realColorImage0 = new RealColorImage(1284, 5);
      ROI rOI0 = new ROI((-738), (-738), (-1), 867);
      // Undeclared exception!
      try { 
        realColorImage0.divide((-1378.13F), (-1.0F), (float) 1284, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -738
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.multiply(2398, 128, (float[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.subtract((-3232), (-3232), (float) (-3232), (float) (-3232), (float) (-3232), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(0, 0);
      // Undeclared exception!
      try { 
        realColorImage0.subtract(2674, 0, 833.0F, (-1.0F), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage(1, 8);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      ROI rOI1 = new ROI(0, 1500, 0, 9);
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 1500;
      ROI rOI2 = new ROI();
      // Undeclared exception!
      try { 
        realColorImage0.add(realColorImage0, rOI2, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      RealColorImage realColorImage0 = new RealColorImage();
      assertEquals(0, realColorImage0.X());
      assertEquals(0, realColorImage0.Y());
      
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      RealColorImage realColorImage1 = new RealColorImage(189, 189);
      String string0 = realColorImage1.toString(rOI1);
      assertEquals("189:189\nnull \n189:189\nnull \n189:189\nnull \n", string0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      RealColorImage realColorImage0 = null;
      try {
        realColorImage0 = new RealColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealColorImage", e);
      }
  }
}

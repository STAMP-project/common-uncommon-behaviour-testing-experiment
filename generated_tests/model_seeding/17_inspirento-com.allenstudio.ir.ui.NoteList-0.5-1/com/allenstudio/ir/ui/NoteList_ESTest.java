/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:12:10 GMT 2019
 */

package com.allenstudio.ir.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.allenstudio.ir.core.plugins.CommonNote;
import com.allenstudio.ir.event.NoteListEventListener;
import com.allenstudio.ir.ui.NoteList;
import com.allenstudio.ir.ui.NoteListCell;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagLayout;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.Rectangle;
import javax.swing.JLayeredPane;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.border.BevelBorder;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NoteList_ESTest extends NoteList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.select(3, true);
      int int0 = noteList0.getSelectedIndex();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.setFrameFromDiagonal(3110.4329, (-2614.4262211366213), 3110.4329, 3110.4329);
      int int0 = noteList0.getScrollableBlockIncrement(defaultCaret0, 5726, 102);
      assertEquals(5726, int0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      BevelBorder bevelBorder0 = new BevelBorder(1704);
      Rectangle rectangle0 = bevelBorder0.getInteriorRectangle((Component) noteList0, 1220, (-25), 0, (-25));
      int int0 = noteList0.getScrollableBlockIncrement(rectangle0, 1823, (-1015));
      assertEquals((-29), int0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeAll();
      noteList0.getPreferredScrollableViewportSize();
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      // Undeclared exception!
      try { 
        noteList0.getScrollableBlockIncrement((Rectangle) null, (-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.NoteList", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      // Undeclared exception!
      try { 
        noteList0.addCell((NoteListCell) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteListCell0.add((Component) noteList0);
      // Undeclared exception!
      try { 
        noteList0.addCell(noteListCell0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // adding container's parent to itself
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteList0.addCell(noteListCell0);
      assertEquals(5, noteListCell0.getIndexInList());
      assertEquals(6, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      int int0 = noteList0.getCellCount();
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      int int0 = noteList0.getSelectedIndex();
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      NoteListEventListener noteListEventListener0 = mock(NoteListEventListener.class, new ViolatedAssumptionAnswer());
      noteList0.addNoteListEventListener(noteListEventListener0);
      JScrollPane jScrollPane0 = new JScrollPane();
      JViewport jViewport0 = jScrollPane0.getViewport();
      Point point0 = jViewport0.getViewPosition();
      // Undeclared exception!
      try { 
        noteList0.fireCursorExit((Object) null, point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Object object0 = noteList0.getTreeLock();
      noteList0.fireCursorExit(object0, (Point) null);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Point point0 = new Point();
      NoteList noteList0 = new NoteList();
      noteList0.fireCursorEnter(point0, point0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      NoteListEventListener noteListEventListener0 = mock(NoteListEventListener.class, new ViolatedAssumptionAnswer());
      noteList0.addNoteListEventListener(noteListEventListener0);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      noteList0.fireDoubleClick(integer0, (Point) null);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.fireDoubleClick((Object) null, (Point) null);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      GridBagLayout gridBagLayout0 = new GridBagLayout();
      Point point0 = gridBagLayout0.getLayoutOrigin();
      NoteListEventListener noteListEventListener0 = mock(NoteListEventListener.class, new ViolatedAssumptionAnswer());
      noteList0.addNoteListEventListener(noteListEventListener0);
      // Undeclared exception!
      try { 
        noteList0.fireRightClick((Object) null, point0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Point point0 = new Point();
      NoteList noteList0 = new NoteList();
      noteList0.fireRightClick(point0, point0);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      NoteListEventListener noteListEventListener0 = mock(NoteListEventListener.class, new ViolatedAssumptionAnswer());
      noteList0.addNoteListEventListener(noteListEventListener0);
      // Undeclared exception!
      try { 
        noteList0.fireLeftClick((Object) null, (Point) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.fireLeftClick((Object) null, (Point) null);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      // Undeclared exception!
      try { 
        noteList0.select((-1), true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // No such child: -1
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      NoteListEventListener noteListEventListener0 = mock(NoteListEventListener.class, new ViolatedAssumptionAnswer());
      NoteListEventListener noteListEventListener1 = mock(NoteListEventListener.class, new ViolatedAssumptionAnswer());
      noteList0.addNoteListEventListener(noteListEventListener1);
      noteList0.addNoteListEventListener(noteListEventListener0);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      JScrollPane jScrollPane0 = new JScrollPane(noteList0);
      boolean boolean0 = noteList0.getScrollableTracksViewportHeight();
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeAll();
      boolean boolean0 = noteList0.getScrollableTracksViewportHeight();
      assertTrue(boolean0);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      boolean boolean0 = noteList0.getScrollableTracksViewportHeight();
      assertFalse(boolean0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Rectangle rectangle0 = new Rectangle();
      int int0 = noteList0.getScrollableBlockIncrement(rectangle0, 0, 12);
      assertEquals(0, int0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      noteList0.getScrollableUnitIncrement(defaultCaret0, 0, 0);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeAll();
      int int0 = noteList0.getScrollableUnitIncrement((Rectangle) null, 3739, 3739);
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, int0);
      assertEquals(0, noteList0.getSelectedIndex());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.select(0, true);
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      boolean boolean0 = noteList0.getScrollableTracksViewportWidth();
      assertEquals(5, noteList0.getCellCount());
      assertEquals(0, noteList0.getSelectedIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        NoteList.main((String[]) null);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      noteList0.removeListEventListener();
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NoteList noteList0 = new NoteList();
      Dimension dimension0 = noteList0.getPreferredScrollableViewportSize();
      assertEquals(0, noteList0.getSelectedIndex());
      assertEquals(5, noteList0.getCellCount());
      assertEquals(387, dimension0.width);
  }
}

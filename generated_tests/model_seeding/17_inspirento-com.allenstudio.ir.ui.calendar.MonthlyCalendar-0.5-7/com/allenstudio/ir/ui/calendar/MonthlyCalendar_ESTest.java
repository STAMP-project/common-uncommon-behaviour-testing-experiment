/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:07:37 GMT 2019
 */

package com.allenstudio.ir.ui.calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.allenstudio.ir.ui.calendar.IMonthlyCalendarModel;
import com.allenstudio.ir.ui.calendar.MonthlyCalendar;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.SystemColor;
import java.awt.event.MouseEvent;
import java.util.Calendar;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.border.LineBorder;
import javax.swing.plaf.metal.MetalTreeUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonthlyCalendar_ESTest extends MonthlyCalendar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setYearMonth(2156, 1);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2156, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2156, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2156,MONTH=0,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      
      Calendar calendar1 = monthlyCalendar0.getSelectedDate();
      assertNotSame(calendar1, calendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertEquals(1, calendar1.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar1.getFirstDayOfWeek());
      assertTrue(calendar1.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertNotNull(calendar1);
      assertTrue(calendar1.equals((Object)calendar0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setMonth(1);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setYear(1970);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(1970, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      MetalTreeUI metalTreeUI0 = new MetalTreeUI();
      assertNotNull(metalTreeUI0);
      
      Dimension dimension0 = metalTreeUI0.getMaximumSize(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      
      monthlyCalendar0.setCellDimension(dimension0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      
      boolean boolean0 = monthlyCalendar0.getMouseListeningEnabled();
      assertFalse(boolean0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYearMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMarked(2014, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2013
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendarModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseReleased((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mousePressed((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseMoved((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseExited((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseEntered((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseDragged((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseClicked((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        MonthlyCalendar.paintSymbol((Graphics) null, monthlyCalendar0.MARKED_FONT, monthlyCalendar0.DEFAULT_HIGHLIGHT_FG, monthlyCalendar0.DEFAULT_HIGHLIGHT_FG, "", 1, 3, 412, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      //  // Unstable assertion: assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      //  // Unstable assertion: assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusCycleRoot());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(2014, monthlyCalendar0.getYear());
      //  // Unstable assertion: assertEquals(31, monthlyCalendar0.getSelectedDay());
      //  // Unstable assertion: assertEquals(2, monthlyCalendar0.getMonth());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.getIgnoreRepaint());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      //  // Unstable assertion: assertNotNull(monthlyCalendar0);
      
      Calendar calendar0 = Calendar.getInstance();
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1573070809877,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=310,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=6,SECOND=49,MILLISECOND=877,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertNotNull(calendar0);
      
      monthlyCalendar0.setYearMonth(calendar0);
      //  // Unstable assertion: assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      //  // Unstable assertion: assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      //  // Unstable assertion: assertEquals(11, monthlyCalendar0.getMonth());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusCycleRoot());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals(31, monthlyCalendar0.getSelectedDay());
      //  // Unstable assertion: assertEquals(2019, monthlyCalendar0.getYear());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.getIgnoreRepaint());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=305,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=6,SECOND=49,MILLISECOND=877,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setYearMonth(2014, 12);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(12, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      
      monthlyCalendar0.setMouseListeningEnabled(true);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setYearMonth(1943, 1943);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(11, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2104, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(11, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(30, monthlyCalendar0.getSelectedDay());
      assertEquals(2104, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2104,MONTH=10,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=30,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setYear(2016);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2016, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(29, monthlyCalendar0.getSelectedDay());
      assertEquals(2016, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2016,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=29,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertNotNull(monthlyCalendar0);
      
      IMonthlyCalendarModel iMonthlyCalendarModel0 = monthlyCalendar0.getModel();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, iMonthlyCalendarModel0.getSelectedDate());
      assertNotNull(iMonthlyCalendarModel0);
      
      iMonthlyCalendarModel0.setSelectedDate(20);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(20, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(20, iMonthlyCalendarModel0.getSelectedDate());
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(20, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=20,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
      
      // Undeclared exception!
      try { 
        MonthlyCalendar.paintSymbol(debugGraphics0, monthlyCalendar0.NORMAL_FONT, monthlyCalendar0.DEFAULT_HIGHLIGHT_BG, monthlyCalendar0.DEFAULT_HEADER_BG, (String) null, 20, 20, 18, 20);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setHeaderComponent((JComponent) null);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      
      MonthlyCalendar monthlyCalendar1 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar1.getMouseListeningEnabled());
      assertFalse(monthlyCalendar1.isFocusCycleRoot());
      assertTrue(monthlyCalendar1.getWeekStartOnSunday());
      assertTrue(monthlyCalendar1.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar1.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar1.getMonth());
      assertFalse(monthlyCalendar1.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar1.getSelectedDay());
      assertFalse(monthlyCalendar1.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar1.getYear());
      assertNotNull(monthlyCalendar1);
      assertFalse(monthlyCalendar1.equals((Object)monthlyCalendar0));
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setHeaderComponent(monthlyCalendar1);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected static method org.evosuite.runtime.mock.javax.swing.MockJComponent.getPreferredSize()Ljava/awt/Dimension;
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setCellDimension((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      monthlyCalendar0.setYearMonth(calendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1393618881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth(27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth((-1482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYear(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year must be later than 1970!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setYear(3485);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(3485, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      
      monthlyCalendar0.setYear(3485);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(3485, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setMouseListeningEnabled(true);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setWeekStartOnSunday(true);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      Color color0 = monthlyCalendar0.getHeaderBackground();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(255, color0.getAlpha());
      assertEquals(223, color0.getBlue());
      assertEquals((-8743201), color0.getRGB());
      assertEquals(122, color0.getRed());
      assertEquals(150, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      
      int int0 = monthlyCalendar0.getSelectedDay();
      assertEquals(31, int0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      
      Dimension dimension0 = monthlyCalendar0.getMaximumSize();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(32767, dimension0.height);
      assertEquals(32767, dimension0.width);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(32767.0, dimension0.getWidth(), 0.01);
      assertEquals(32767.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      
      monthlyCalendar0.setPreferredSize(dimension0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(32767, dimension0.height);
      assertEquals(32767, dimension0.width);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(32767.0, dimension0.getWidth(), 0.01);
      assertEquals(32767.0, dimension0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      
      int int0 = monthlyCalendar0.getMonth();
      assertEquals(2, int0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      
      IMonthlyCalendarModel iMonthlyCalendarModel0 = monthlyCalendar0.getModel();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(31, iMonthlyCalendarModel0.getSelectedDate());
      assertNotNull(iMonthlyCalendarModel0);
      
      monthlyCalendar0.setModel(iMonthlyCalendarModel0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(31, iMonthlyCalendarModel0.getSelectedDate());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      
      boolean boolean0 = monthlyCalendar0.getWeekStartOnSunday();
      assertTrue(boolean0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      int int0 = monthlyCalendar0.getYear();
      assertEquals(2014, int0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setHighlightForeground(monthlyCalendar0.DEFAULT_DATE_BG);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setHighlightBackground(monthlyCalendar0.DEFAULT_HEADER_FG);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.setDateForeground(monthlyCalendar0.DEFAULT_DATE_BG);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      
      SystemColor systemColor0 = SystemColor.activeCaption;
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(128, systemColor0.getBlue());
      assertNotNull(systemColor0);
      
      monthlyCalendar0.setHeaderForeground(systemColor0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals((-16777088), systemColor0.getRGB());
      assertEquals(0, systemColor0.getRed());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(0, systemColor0.getGreen());
      assertEquals(128, systemColor0.getBlue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      
      Dimension dimension0 = monthlyCalendar0.getCellDimension();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(27, dimension0.width);
      assertEquals(20, dimension0.height);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(20.0, dimension0.getHeight(), 0.01);
      assertEquals(27.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      
      monthlyCalendar0.resetHighlight();
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getDateForeground();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(0, color0.getGreen());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setMarked(1, true);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHeaderFont(monthlyCalendar0.MARKED_FONT);
      monthlyCalendar0.getHeaderFont();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.dateSelected();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getDateBackground();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getHeaderComponent();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      monthlyCalendar0.setHeaderBackground(systemColor0);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setDateBackground(monthlyCalendar0.DEFAULT_DATE_FG);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getHeaderFont();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHeaderForeground();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(228, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      LineBorder lineBorder0 = new LineBorder(monthlyCalendar0.DEFAULT_HIGHLIGHT_BG, 27);
      monthlyCalendar0.setBorder(lineBorder0);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getMouseListeningEnabled();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHighlightBackground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals((-16755485), color0.getRGB());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHighlightForeground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(255, color0.getRed());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }
}

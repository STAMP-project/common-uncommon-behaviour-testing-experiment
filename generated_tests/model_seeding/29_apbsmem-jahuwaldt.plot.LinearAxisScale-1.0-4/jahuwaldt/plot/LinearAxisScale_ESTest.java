/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 14:22:32 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.AxisLimitData;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.TickMarkData;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinearAxisScale_ESTest extends LinearAxisScale_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-157.827542), 200.0);
      assertNotNull(axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      PlotDatum plotDatum0 = new PlotDatum(2227.865701869, (-900.71211), true);
      assertEquals(2227.865701869, plotDatum0.x, 0.01);
      assertEquals((-900.71211), plotDatum0.y, 0.01);
      assertNotNull(plotDatum0);
      assertEquals(0.0, plotDatum0.getYError(), 0.01);
      assertEquals((-900.71211), plotDatum0.getY(), 0.01);
      assertTrue(plotDatum0.connected());
      assertEquals(2227.865701869, plotDatum0.getX(), 0.01);
      assertFalse(plotDatum0.hasErrorBar());
      
      plotDatum0.setYError((-1.0));
      assertEquals(2227.865701869, plotDatum0.x, 0.01);
      assertEquals((-900.71211), plotDatum0.y, 0.01);
      assertEquals((-1.0), plotDatum0.getYError(), 0.01);
      assertTrue(plotDatum0.hasErrorBar());
      assertEquals((-900.71211), plotDatum0.getY(), 0.01);
      assertTrue(plotDatum0.connected());
      assertEquals(2227.865701869, plotDatum0.getX(), 0.01);
      
      linearAxisScale0.adjustForErrorBars(plotDatum0, 2227.865701869, (-1.9999990000000004E259), axisLimitData0);
      assertEquals(2227.865701869, plotDatum0.x, 0.01);
      assertEquals((-900.71211), plotDatum0.y, 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), plotDatum0.getYError(), 0.01);
      assertTrue(plotDatum0.hasErrorBar());
      assertEquals((-900.71211), plotDatum0.getY(), 0.01);
      assertTrue(plotDatum0.connected());
      assertEquals(2227.865701869, plotDatum0.getX(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(1855.0023164183, (-1508.4593), (-1508.4593), (-1508.4593), 1855.0023164183);
      assertNotNull(tickMarkData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(496.1144468788783, 1.0, 496.1144468788783, (-295.004532), (-295.004532));
      assertNotNull(tickMarkData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks(0.0, 0.0, 0.0, 0.0, 0.0);
      assertNotNull(tickMarkData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 0.001);
      assertNotNull(axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 0.0);
      assertNotNull(axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(0.0, 1.0E-6);
      assertNotNull(axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      double double0 = linearAxisScale0.func(0.0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      double double0 = linearAxisScale0.func((-2002.9106283577));
      assertEquals((-2002.9106283577), double0, 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      // Undeclared exception!
      linearAxisScale0.calcTickMarks((-1.0), (-1.0), (-2272.9112833381705), (-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.calcTickMarks((-295.004532), (-295.004532), 1.0, 1.0, 1.0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = new AxisLimitData();
      assertNotNull(axisLimitData0);
      
      // Undeclared exception!
      try { 
        linearAxisScale0.adjustForErrorBars((PlotDatum) null, 0.0, 5.0, axisLimitData0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.LinearAxisScale", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      double double0 = linearAxisScale0.lowerBounds();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      double double0 = linearAxisScale0.func(1.0E-6);
      assertEquals(1.0E-6, double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      double double0 = linearAxisScale0.upperBounds();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1988.0), (-815.03887));
      assertNotNull(axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-1110.045615), (-924.6342));
      assertNotNull(axisLimitData0);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      assertNotNull(linearAxisScale0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
      
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(599.7382, 2064.84867494496);
      assertNotNull(axisLimitData0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits(1676.356007, 2279.2);
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      AxisLimitData axisLimitData0 = linearAxisScale0.findGoodLimits((-765.1862277949293), (-765.1862277949293));
      assertNotNull(axisLimitData0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      linearAxisScale0.findGoodLimits(1.0E-6, 0.0);
      assertEquals(1.0, linearAxisScale0.upperBounds(), 0.01);
      assertEquals((-1.0), linearAxisScale0.lowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      TickMarkData tickMarkData0 = linearAxisScale0.calcTickMarks((-295.004532), 1.0, (-295.004532), (-295.004532), (-295.004532));
      assertNotNull(tickMarkData0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:33:22 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.CircleSymbol;
import jahuwaldt.plot.DiamondSymbol;
import jahuwaldt.plot.TabLSymbol;
import jahuwaldt.plot.TabUpSymbol;
import jahuwaldt.plot.ThinRect2Symbol;
import java.awt.Color;
import javax.swing.DebugGraphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotSymbol_ESTest extends PlotSymbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DiamondSymbol diamondSymbol0 = new DiamondSymbol();
      assertEquals(8, diamondSymbol0.getSize());
      
      diamondSymbol0.setSize(0);
      int int0 = diamondSymbol0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TabUpSymbol tabUpSymbol0 = new TabUpSymbol();
      Color color0 = Color.lightGray;
      tabUpSymbol0.setFillColor(color0);
      tabUpSymbol0.getFillColor();
      assertEquals(8, tabUpSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      Color color0 = new Color((-7));
      thinRect2Symbol0.setBorderColor(color0);
      thinRect2Symbol0.getBorderColor();
      assertEquals(8, thinRect2Symbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TabUpSymbol tabUpSymbol0 = new TabUpSymbol();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        tabUpSymbol0.draw(debugGraphics0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      tabLSymbol0.getFillColor();
      assertEquals(8, tabLSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CircleSymbol circleSymbol0 = new CircleSymbol();
      circleSymbol0.getBorderColor();
      assertEquals(8, circleSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CircleSymbol circleSymbol0 = new CircleSymbol();
      int int0 = circleSymbol0.getSize();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CircleSymbol circleSymbol0 = new CircleSymbol();
      circleSymbol0.setBorderColor((Color) null);
      circleSymbol0.getBorderColor();
      assertEquals(8, circleSymbol0.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CircleSymbol circleSymbol0 = new CircleSymbol();
      CircleSymbol circleSymbol1 = (CircleSymbol)circleSymbol0.clone();
      assertEquals(8, circleSymbol1.getSize());
      assertNotSame(circleSymbol1, circleSymbol0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CircleSymbol circleSymbol0 = new CircleSymbol();
      circleSymbol0.setSize((-307));
      int int0 = circleSymbol0.getSize();
      assertEquals((-307), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      Color color0 = new Color(0);
      tabLSymbol0.setFillColor(color0);
      tabLSymbol0.getFillColor();
      assertEquals(8, tabLSymbol0.getSize());
  }
}

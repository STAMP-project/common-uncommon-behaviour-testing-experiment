/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 17:31:23 GMT 2019
 */

package src;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import src.Fiefdoms;
import src.Intruders;
import src.Knight;
import src.Player;
import src.Vassals;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fiefdoms_ESTest extends Fiefdoms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNull(knight0.getName());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", string0);
      assertNotNull(string0);
      
      boolean boolean0 = knight0.isFiefdomMine("Ile-De-France");
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNull(knight0.getName());
      assertFalse(boolean0);
      
      knight0.setTotalMoney(1591);
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(1591, knight0.getTotalMoney());
      assertNull(knight0.getName());
      
      knight0.setName("Ile-De-France");
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(1591, knight0.getTotalMoney());
      
      ArrayList<String> arrayList1 = knight0.getConversation();
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(1591, knight0.getTotalMoney());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList1.contains(string0));
      assertNotNull(arrayList1);
      
      ArrayList<String> arrayList2 = knight0.conversation;
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertSame(arrayList2, arrayList1);
      assertFalse(arrayList2.contains(string0));
      assertNotNull(arrayList2);
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList2, "Ile-De-France", "Ile-De-France", 1591, true, arrayList2);
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(1591, knight0.getTotalMoney());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("Ile-De-France", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Ile-De-France", fiefdoms1.getOwner());
      assertEquals(1591, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList2.contains(string0));
      assertNotNull(fiefdoms1);
      
      fiefdoms0.setMuslim((-4062), true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setMagyar(1591, false);
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(1591, knight0.getTotalMoney());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("Ile-De-France", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Ile-De-France", fiefdoms1.getOwner());
      assertEquals(1591, fiefdoms1.getValue());
      assertSame(arrayList2, arrayList1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList2.contains(string0));
      
      fiefdoms0.setLoyalVassals(3, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<Intruders> arrayList3 = fiefdoms1.getViking();
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(1591, knight0.getTotalMoney());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("Ile-De-France", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Ile-De-France", fiefdoms1.getOwner());
      assertEquals(1591, fiefdoms1.getValue());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertSame(arrayList2, arrayList1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList2.contains(string0));
      assertNotNull(arrayList3);
      
      int int0 = fiefdoms1.getValue();
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(1591, knight0.getTotalMoney());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("Ile-De-France", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("Ile-De-France", fiefdoms1.getOwner());
      assertEquals(1591, fiefdoms1.getValue());
      assertSame(arrayList2, arrayList1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(1591, int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList2.contains(string0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Ile-De-France", string0);
      assertNotNull(string0);
      
      knight0.setTotalMoney(112);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      
      knight0.setScore(112);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      
      String string1 = knight0.getName();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNull(string1);
      
      knight0.addMercenaries(112);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "i)\"", (String) null, 745, false, arrayList0);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(745, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("i)\"", fiefdoms0.getName());
      assertFalse(arrayList0.contains("i)\""));
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(745, true);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(745, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("i)\"", fiefdoms0.getName());
      assertFalse(arrayList0.contains("i)\""));
      
      ArrayList<Player> arrayList1 = fiefdoms0.getVassalsList();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(745, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("i)\"", fiefdoms0.getName());
      assertFalse(arrayList0.contains("i)\""));
      assertNull(arrayList1);
      
      fiefdoms0.setLoyalVassals(1197, true);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(745, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("i)\"", fiefdoms0.getName());
      assertFalse(arrayList0.contains("i)\""));
      
      fiefdoms0.setRebelliousVassals(1197, true);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(745, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("i)\"", fiefdoms0.getName());
      assertFalse(arrayList0.contains("i)\""));
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(745, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("i)\"", fiefdoms0.getName());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList2, arrayList0);
      assertFalse(arrayList0.contains("i)\""));
      assertFalse(arrayList2.contains("i)\""));
      assertNotNull(arrayList2);
      
      fiefdoms0.setLoyalVassals(1197, true);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertEquals(112, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(745, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("i)\"", fiefdoms0.getName());
      assertSame(arrayList0, arrayList2);
      assertFalse(arrayList0.contains("i)\""));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = new ArrayList<Intruders>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList1.add((Intruders) null);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
      
      fiefdoms0.setKingdom(true);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(string0);
      
      boolean boolean1 = fiefdoms0.isKingdom();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotSame(arrayList2, arrayList1);
      assertFalse(arrayList2.equals((Object)arrayList1));
      assertNotNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      int int0 = fiefdoms0.getValue();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((ArrayList<Intruders>) null);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      int int0 = (-1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        fiefdoms0.setMagyar((-1), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lLM>D=mA\u0002xdU");
      assertFalse(boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.selectioncolor = null;
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(byteArray0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotSame(arrayList2, arrayList1);
      assertSame(arrayList2, arrayList0);
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertNotNull(arrayList2);
      
      fiefdoms0.setLoyalVassals(1018, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Player> arrayList3 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Player> arrayList1 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror("");
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setRebelliousVassals(2, true);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setMagyar(0, true);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setPeasants((-2099));
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.buyFiefdomCastles(0);
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setMuslim(0, true);
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNotNull(knight0);
      
      knight0.setName("magyar");
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("magyar", knight0.getName());
      
      ArrayList<Player> arrayList0 = knight0.getAllies();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("magyar", knight0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setVassalsList(arrayList0);
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("magyar", knight0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setMuslim(2, true);
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      boolean boolean0 = fiefdoms0.isKingdom();
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(boolean0);
      
      fiefdoms0.buyPersonalCastles(2);
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setOwner("");
      assertEquals((-2099), fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(arrayList0);
      
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(0, false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "DrkBT!v", "king", 0, true, (ArrayList<String>) null);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("king", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DrkBT!v", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      fiefdoms1.shaderColor = floatArray0;
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("king", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DrkBT!v", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      
      fiefdoms1.buyPersonalCastles(926);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("king", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DrkBT!v", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      byte[] byteArray0 = fiefdoms1.getSelectioncolor();
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("king", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DrkBT!v", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      boolean boolean0 = fiefdoms1.isKingdom();
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("king", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("DrkBT!v", fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertTrue(boolean0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNotNull(knight0);
      
      String string0 = knight0.getName();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertNull(string0);
      
      ArrayList<String> arrayList0 = knight0.getVotes();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, "viking", 0, false, arrayList0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("viking", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.contains("viking"));
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("viking", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList0.contains("viking"));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim(552, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("");
      assertNull(fiefdoms0.getConqueror());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setOwner("");
      assertNull(fiefdoms0.getConqueror());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      assertNotNull(knight0);
      
      knight0.setName("x?Rj2");
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("x?Rj2", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      
      ArrayList<String> arrayList0 = knight0.getConversation();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("x?Rj2", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("x?Rj2"));
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = knight0.conversation;
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList1.contains("x?Rj2"));
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "x?Rj2", ">V-c*S7", (-3452), true, arrayList1);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("x?Rj2", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim((-3452), true);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("x?Rj2", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
      
      fiefdoms0.setMagyar((-3452), true);
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("x?Rj2", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setValue((-1));
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.loyalVassals;
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      String string0 = fiefdoms1.getConqueror();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(string0);
      
      int int0 = fiefdoms1.getFiefdomCastles();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList1 = fiefdoms1.getLoyalVassals();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      
      int int1 = fiefdoms1.getFiefdomCastles();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(int1 == int0);
      
      ArrayList<String> arrayList2 = fiefdoms1.getInvaderType();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(arrayList2);
      
      float[] floatArray0 = new float[8];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      floatArray0[3] = (float) 0;
      floatArray0[4] = (float) 0;
      floatArray0[5] = 0.0F;
      floatArray0[6] = (float) 0;
      floatArray0[7] = (float) 0;
      fiefdoms0.shaderColor = floatArray0;
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms2);
      
      int int2 = fiefdoms2.getValue();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertEquals(0, int2);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = fiefdoms2.getValue();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertEquals(0, int3);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      ArrayList<Player> arrayList3 = fiefdoms2.getVassalsList();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(arrayList3);
      
      fiefdoms2.setVassalsList((ArrayList<Player>) null);
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      
      fiefdoms1.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms2.setKingdom(false);
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertNotNull(arrayList4);
      
      fiefdoms0.setMuslim(arrayList4);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      
      ArrayList<Vassals> arrayList5 = fiefdoms2.getLoyalVassals();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(arrayList5, arrayList0);
      assertNotSame(arrayList5, arrayList1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertTrue(arrayList5.equals((Object)arrayList1));
      assertTrue(arrayList5.equals((Object)arrayList0));
      assertNotNull(arrayList5);
      
      int int4 = fiefdoms2.getFiefdomCastles();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertEquals(0, int4);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      ArrayList<String> arrayList6 = fiefdoms2.getInvaderType();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(arrayList6);
      
      ArrayList<String> arrayList7 = fiefdoms2.getNeighbors();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(arrayList7);
      
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      
      fiefdoms0.loyalVassals = arrayList0;
      assertEquals(0, fiefdoms0.loyalVassals.size());
      assertTrue(fiefdoms0.loyalVassals.isEmpty());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      float[] floatArray1 = fiefdoms0.getShaderColor();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertSame(floatArray1, floatArray0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(8, floatArray1.length);
      
      int int5 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertEquals(0, int5);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      
      ArrayList<Intruders> arrayList8 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList8.isEmpty());
      assertEquals(0, arrayList8.size());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertSame(arrayList8, arrayList4);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertNotNull(arrayList8);
      
      String string1 = fiefdoms2.getName();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(string1);
      
      ArrayList<String> arrayList9 = fiefdoms2.getNeighbors();
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertNull(arrayList9);
      
      fiefdoms2.setValue(213);
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(213, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      int int0 = 3274;
      fiefdoms0.setValue(3274);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3274, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertNotNull(knight0);
      
      String string0 = "";
      fiefdoms0.setMuslim(3274, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3274, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNotNull(intruders0);
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3274, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      // Undeclared exception!
      try { 
        knight0.setFiefdoms("", true);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class src.Map
         //
         verifyException("src.Knight", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals((-1929), true);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setConqueror((String) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setRebelliousVassals(0, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList1);
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(1, int0);
      
      fiefdoms0.setPeasants(0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setValue((-1925));
      assertEquals((-1925), fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertEquals((-1925), fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = new ArrayList<Intruders>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean0 = arrayList1.add((Intruders) null);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(boolean0);
      
      fiefdoms0.setMuslim(arrayList1);
      assertEquals((-1925), fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      fiefdoms0.setKingdom(true);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1925), fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      String string0 = fiefdoms0.getConqueror();
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1925), fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(string0);
      
      ArrayList<Vassals> arrayList2 = new ArrayList<Vassals>();
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      fiefdoms0.setLoyalVassals(arrayList2);
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1925), fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      
      boolean boolean1 = fiefdoms0.isKingdom();
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1925), fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants(2275);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(2275, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "", "", (-1681), true, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals((-1681), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains(""));
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles((-1681));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals((-1681), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1681), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains(""));
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      ArrayList<Intruders> arrayList1 = fiefdoms1.getViking();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNotNull(fiefdoms2);
      
      fiefdoms2.setMuslim(2868, true);
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      
      ArrayList<Vassals> arrayList2 = fiefdoms2.getLoyalVassals();
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNotNull(arrayList2);
      
      fiefdoms0.loyalVassals = arrayList2;
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals((-1681), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1681), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.isKingdom());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(0, fiefdoms0.loyalVassals.size());
      assertTrue(fiefdoms0.loyalVassals.isEmpty());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals((-1681), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1681), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertFalse(arrayList0.contains(""));
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
      
      fiefdoms0.setRebelliousVassals((-1681), true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals((-1681), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1681), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(arrayList0.contains(""));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(20, false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals((ArrayList<Vassals>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals(4, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      // Undeclared exception!
      try { 
        fiefdoms0.setLoyalVassals(4, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setOwner("You are allowed to take up to ");
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setPersonalCastles(false);
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      fiefdoms0.setViking(2827, false);
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList2);
      
      ArrayList<String> arrayList3 = fiefdoms0.getNeighbors();
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList3);
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-1), int0);
      
      ArrayList<Player> arrayList4 = fiefdoms0.getVassalsList();
      assertEquals("You are allowed to take up to ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList4);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(2069, false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "u??q", "", 3, true, (ArrayList<String>) null);
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(3, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("u??q", fiefdoms1.getName());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setPersonalCastles(true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setConqueror("");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNotNull(intruders0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setRebelliousVassals(arrayList1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(intruders0));
      
      boolean boolean1 = arrayList0.add(intruders0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMagyar(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      fiefdoms0.setConqueror("");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      ArrayList<Vassals> arrayList2 = new ArrayList<Vassals>();
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertNotNull(arrayList2);
      
      fiefdoms0.setRebelliousVassals(arrayList2);
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNotSame(arrayList2, arrayList1);
      assertTrue(arrayList2.equals((Object)arrayList1));
      
      fiefdoms0.setMuslim(0, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      Knight knight0 = new Knight();
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", string0);
      assertNotNull(string0);
      
      int int0 = knight0.getTotalMoney();
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, int0);
      
      knight0.setDead(true);
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertTrue(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertTrue(knight0.getDead());
      assertEquals("", knight0.getOrder());
      
      String string1 = knight0.getLocation();
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertTrue(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertTrue(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", string1);
      assertNotNull(string1);
      
      String string2 = knight0.getName();
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertTrue(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertTrue(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertNull(string2);
      
      knight0.addMercenaries(0);
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertTrue(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertTrue(knight0.getDead());
      assertEquals("", knight0.getOrder());
      
      ArrayList<String> arrayList3 = knight0.conversation;
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(arrayList3.contains(""));
      assertNotNull(arrayList3);
      
      fiefdoms0.setNeighbors(arrayList3);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertTrue(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertTrue(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(arrayList3.contains(""));
      
      int int1 = fiefdoms0.getPersonalCastles();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      fiefdoms0.setInvaderType(arrayList3);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertTrue(knight0.isDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertTrue(knight0.getDead());
      assertEquals("", knight0.getOrder());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertFalse(arrayList3.contains(""));
      
      fiefdoms0.setFiefdomCastles(1);
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.remove((Object) "");
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(boolean0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int0 = fiefdoms0.getPeasants();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, int0);
      
      int int1 = fiefdoms0.getPeasants();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "TgRd3#^YcMqFZa", (String) null, 1707, true, (ArrayList<String>) null);
      assertNull(fiefdoms0.getOwner());
      assertEquals(1707, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("TgRd3#^YcMqFZa", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(1707, true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(1707, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("TgRd3#^YcMqFZa", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      UnaryOperator<Intruders> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Intruders intruders0 = unaryOperator0.apply((Intruders) null);
      assertNull(intruders0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      ArrayList arrayList1 = (ArrayList)arrayList0.clone();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setViking(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setPersonalCastles(0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setFiefdomCastles(false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      
      Intruders intruders1 = new Intruders((String) null, "there are ");
      assertNull(intruders1.getRank());
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getType());
      assertNotNull(intruders1);
      
      boolean boolean2 = arrayList3.add(intruders1);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList3.isEmpty());
      assertEquals(1, arrayList3.size());
      assertNull(intruders1.getRank());
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getType());
      assertSame(arrayList3, arrayList0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(arrayList3.contains(intruders1));
      
      fiefdoms0.setMagyar(arrayList3);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList3.isEmpty());
      assertEquals(1, arrayList3.size());
      assertSame(arrayList3, arrayList0);
      assertTrue(arrayList3.contains(intruders1));
      
      fiefdoms0.setMuslim(2328, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMagyar();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList4.isEmpty());
      assertEquals(1, arrayList4.size());
      assertSame(arrayList4, arrayList3);
      assertSame(arrayList4, arrayList0);
      assertTrue(arrayList4.contains(intruders1));
      assertNotNull(arrayList4);
      
      ArrayList<Player> arrayList5 = fiefdoms0.getVassalsList();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList5);
      
      fiefdoms0.setOwner("");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      fiefdoms0.setMagyar(2328, true);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, int0);
      
      fiefdoms0.setOwner("there are ");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("there are ", fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      // Undeclared exception!
      try { 
        fiefdoms0.setMuslim((-2688), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror("");
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-945.1F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1177.19F);
      floatArray0[3] = 2432.0F;
      floatArray0[4] = 0.0F;
      fiefdoms0.setShaderColor(floatArray0);
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertArrayEquals(new float[] {(-945.1F), 0.0F, (-1177.19F), 2432.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      
      fiefdoms0.setViking(arrayList1);
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      fiefdoms0.setMuslim(arrayList1);
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, int0);
      
      fiefdoms0.setKingdom(true);
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      int int0 = fiefdoms0.getPeasants();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertEquals(0, int0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      int int1 = fiefdoms1.getPersonalCastles();
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(1777, true);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror("src.Retainers");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setFiefdomCastles(false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setOwner("src.Vassals");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      
      String string0 = fiefdoms0.getName();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(string0);
      
      fiefdoms0.setLoyalVassals((int) (byte) (-65), false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "viking", "src.Intruders", (-2348), true, (ArrayList<String>) null);
      assertNull(fiefdoms1.getConqueror());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("src.Intruders", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertEquals((-2348), fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      fiefdoms0.buyPersonalCastles(1372);
      assertEquals(1372, fiefdoms0.getPersonalCastles());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertEquals(1372, fiefdoms0.getPersonalCastles());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("src.Retainers", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.ensureCapacity(1);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "There are ", "There are ", (-1), false, arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("There are ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("There are ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getValue());
      assertFalse(arrayList0.contains("There are "));
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((ArrayList<Intruders>) null);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("There are ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("There are ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getValue());
      assertFalse(arrayList0.contains("There are "));
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("There are ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("There are ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(arrayList0.contains("There are "));
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      fiefdoms0.setViking(2353, false);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("There are ", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("There are ", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getValue());
      assertFalse(arrayList0.contains("There are "));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles(1);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertNotNull(knight0);
      
      knight0.setName("x?Rj2");
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      
      ArrayList<String> arrayList0 = knight0.getConversation();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("x?Rj2"));
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = knight0.conversation;
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList1.contains("x?Rj2"));
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "x?Rj2", ">V-c*S7", (-3452), true, arrayList1);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim((-3452), true);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
      
      Spliterator<String> spliterator0 = arrayList0.spliterator();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertSame(arrayList0, arrayList1);
      assertFalse(arrayList0.contains("x?Rj2"));
      assertNotNull(spliterator0);
      
      fiefdoms0.setMagyar((-3452), true);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertEquals(0, int0);
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
      
      fiefdoms0.setMuslim(0, false);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals("x?Rj2", knight0.getName());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(">V-c*S7", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-3452), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("x?Rj2", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.contains("x?Rj2"));
      assertFalse(arrayList1.contains("x?Rj2"));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles((-15));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (-1957.4495F);
      floatArray0[1] = (-4506.5F);
      fiefdoms0.setViking(2, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      
      floatArray0[2] = 1.0F;
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setPersonalCastles(1972);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1972, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setPersonalCastles(true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1973, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1973, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      fiefdoms0.setShaderColor(floatArray0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1973, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertArrayEquals(new float[] {(-1957.4495F), (-4506.5F), 1.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      
      fiefdoms0.setPeasants(631);
      assertNull(fiefdoms0.getName());
      assertEquals(1973, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(631, fiefdoms0.getPeasants());
      
      float[] floatArray1 = fiefdoms0.getShaderColor();
      assertNull(fiefdoms0.getName());
      assertEquals(1973, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(631, fiefdoms0.getPeasants());
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-1957.4495F), (-4506.5F), 1.0F, 0.0F, 0.0F}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(5, floatArray1.length);
      
      fiefdoms0.setLoyalVassals(631, true);
      assertNull(fiefdoms0.getName());
      assertEquals(1973, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(631, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setVassalsList((ArrayList<Player>) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      int int0 = 1640;
      fiefdoms0.setMagyar(1640, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.retainAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("{XM");
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("{XM", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("{XM", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "{XM", (String) null, 1338, false, (ArrayList<String>) null);
      assertNull(fiefdoms1.getOwner());
      assertEquals(1338, fiefdoms1.getValue());
      assertEquals("{XM", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      fiefdoms0.setMagyar(1633, false);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("{XM", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      fiefdoms1.setRebelliousVassals(1338, true);
      assertNull(fiefdoms1.getOwner());
      assertEquals(1338, fiefdoms1.getValue());
      assertEquals("{XM", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(2819, false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setLoyalVassals(2819, false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMuslim(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      byte[] byteArray0 = new byte[0];
      fiefdoms0.selectioncolor = byteArray0;
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "duke");
      assertFalse(boolean0);
      
      fiefdoms0.setMuslim(2790, false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setLoyalVassals(2819, false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setKingdom(true);
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      String string0 = fiefdoms0.getConqueror();
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(string0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertSame(byteArray1, byteArray0);
      assertArrayEquals(new byte[] {}, byteArray1);
      assertNotNull(byteArray1);
      assertEquals(0, byteArray1.length);
      
      String string1 = fiefdoms0.getConqueror();
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(string1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(arrayList2);
      
      ArrayList<Player> arrayList3 = new ArrayList<Player>();
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
      
      fiefdoms0.setVassalsList(arrayList3);
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      
      fiefdoms0.setLoyalVassals(2387, false);
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setRebelliousVassals((-2406), false);
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, (String) null, (String) null, 2924, true, (ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2924, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2924, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setPersonalCastles(2924);
      assertEquals(2924, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2924, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      String string0 = fiefdoms0.getName();
      assertEquals(2924, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2924, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(string0);
      
      Knight knight0 = new Knight();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNotNull(knight0);
      
      String string1 = knight0.getLocation();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", string1);
      assertNotNull(string1);
      
      boolean boolean0 = knight0.isFiefdomMine("Ile-De-France");
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(boolean0);
      
      knight0.setTotalMoney(1591);
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(1591, knight0.getTotalMoney());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      
      ArrayList<Vassals> arrayList0 = knight0.getMovingVassals();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(1591, knight0.getTotalMoney());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(2924, false);
      assertEquals(2924, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2924, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setMuslim(2147483645, false);
      assertEquals(2924, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2924, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertEquals(2924, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(2924, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(2924, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      fiefdoms1.setViking(2505, true);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Intruders> arrayList0 = fiefdoms1.getMagyar();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(arrayList0);
      
      int int0 = fiefdoms1.getFiefdomCastles();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      int int1 = fiefdoms1.getFiefdomCastles();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(int1 == int0);
      
      fiefdoms1.setViking(0, false);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add("n9eho]~>$p_");
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "$VN|2,YW%4f", "src.Mercenaries", 0, true, arrayList0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      assertNotNull(fiefdoms0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-80);
      byteArray0[2] = (byte)73;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-80), (byte)73}, byteArray0);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      assertEquals(3, byteArray0.length);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      fiefdoms0.setFiefdomCastles(0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      
      boolean boolean2 = arrayList0.add("n9eho]~>$p_");
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      
      fiefdoms0.setFiefdomCastles(false);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      assertNotNull(arrayList1);
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      assertNotNull(arrayList2);
      
      ArrayList<String> arrayList3 = fiefdoms0.getInvaderType();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(arrayList3.isEmpty());
      assertEquals(2, arrayList3.size());
      assertSame(arrayList0, arrayList3);
      assertSame(arrayList3, arrayList0);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      assertTrue(arrayList3.contains("n9eho]~>$p_"));
      assertFalse(arrayList3.contains("src.Mercenaries"));
      assertNotNull(arrayList3);
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertSame(arrayList0, arrayList3);
      assertEquals(0, int0);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertSame(byteArray1, byteArray0);
      assertSame(arrayList0, arrayList3);
      assertArrayEquals(new byte[] {(byte) (-102), (byte) (-80), (byte)73}, byteArray1);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
      assertNotNull(byteArray1);
      assertEquals(3, byteArray1.length);
      
      int int1 = fiefdoms0.getPersonalCastles();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("src.Mercenaries", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("$VN|2,YW%4f", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertSame(arrayList0, arrayList3);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(arrayList0.contains("src.Mercenaries"));
      assertTrue(arrayList0.contains("n9eho]~>$p_"));
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles(431);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, int0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(arrayList1);
      
      Fiefdoms fiefdoms2 = new Fiefdoms((ArrayList<String>) null, "hzX\"0I", "viking", 1024, true, (ArrayList<String>) null);
      assertEquals(1024, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals("hzX\"0I", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertTrue(fiefdoms2.isKingdom());
      assertEquals("viking", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNotNull(fiefdoms2);
      
      ArrayList<Vassals> arrayList2 = fiefdoms2.getLoyalVassals();
      assertEquals(1024, fiefdoms2.getValue());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals("hzX\"0I", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertTrue(fiefdoms2.isKingdom());
      assertEquals("viking", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNotNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking(902, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "x?rj2", "x?rj2", 2, false, (ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("x?rj2", fiefdoms0.getName());
      assertEquals("x?rj2", fiefdoms0.getOwner());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("x?rj2", fiefdoms0.getName());
      assertEquals("x?rj2", fiefdoms0.getOwner());
      assertEquals(2, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "gC6+$GwVQblJ1r=Bx,");
      assertFalse(boolean0);
      
      fiefdoms0.setOwner("DFn!g11sNbN*-5dRZ}");
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setPersonalCastles((-427));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-427), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-427), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) (-427);
      floatArray0[1] = (float) (-427);
      floatArray0[2] = (float) (-427);
      fiefdoms0.setShaderColor(floatArray0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-427), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertArrayEquals(new float[] {(-427.0F), (-427.0F), (-427.0F)}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      fiefdoms0.setName("DFn!g11sNbN*-5dRZ}");
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-427), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-427), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-427), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setPersonalCastles(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList2);
      
      fiefdoms0.setMagyar(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Player> arrayList3 = new ArrayList<Player>();
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
      
      Stream<Player> stream0 = arrayList3.stream();
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(stream0);
      
      fiefdoms0.setVassalsList(arrayList3);
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setRebelliousVassals((-427), false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      float[] floatArray1 = fiefdoms0.getShaderColor();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertSame(floatArray1, floatArray0);
      assertArrayEquals(new float[] {(-427.0F), (-427.0F), (-427.0F)}, floatArray1, 0.01F);
      assertNotNull(floatArray1);
      assertEquals(3, floatArray1.length);
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(string0);
      
      float[] floatArray2 = fiefdoms0.getShaderColor();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertSame(floatArray2, floatArray0);
      assertSame(floatArray2, floatArray1);
      assertArrayEquals(new float[] {(-427.0F), (-427.0F), (-427.0F)}, floatArray2, 0.01F);
      assertNotNull(floatArray2);
      assertEquals(3, floatArray2.length);
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertNotSame(arrayList4, arrayList0);
      assertTrue(arrayList4.equals((Object)arrayList0));
      assertNotNull(arrayList4);
      
      ArrayList<Player> arrayList5 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-428), fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("DFn!g11sNbN*-5dRZ}", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertSame(arrayList5, arrayList3);
      assertNotNull(arrayList5);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(5019, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, int0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(5019, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setMuslim(0, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      int int1 = fiefdoms0.getValue();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals((ArrayList<Vassals>) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      fiefdoms0.setConqueror("Invalid fiefdom");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid fiefdom", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setLoyalVassals((-1471), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid fiefdom", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setMuslim((-1471), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid fiefdom", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid fiefdom", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList1);
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid fiefdom", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid fiefdom", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      fiefdoms0.setLoyalVassals((-1530), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid fiefdom", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setName("");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setFiefdomCastles(false);
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.buyFiefdomCastles((-2753));
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(string0);
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = knight0.conversation;
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(""));
      assertNotNull(arrayList1);
      
      fiefdoms0.setInvaderType(arrayList1);
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertFalse(arrayList1.contains(""));
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList0);
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, int0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)96;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertArrayEquals(new byte[] {(byte)96, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      fiefdoms0.setMuslim(2401, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setMagyar(2336, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      int int1 = fiefdoms0.getPersonalCastles();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      fiefdoms0.setMuslim(339, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      int int2 = fiefdoms0.getValue();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Knight knight0 = new Knight();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals("Ile-De-France", string0);
      assertNotNull(string0);
      
      knight0.setTotalMoney(112);
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(112, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      
      knight0.setScore(112);
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(112, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      
      String string1 = knight0.getName();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(112, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertNull(string1);
      
      knight0.addMercenaries(112);
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(112, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(112, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList0.contains(string0));
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "9rQ3", "", 0, false, arrayList0);
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(112, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("9rQ3", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(arrayList0.contains("9rQ3"));
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(112, knight0.getTotalMoney());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(112, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getwound());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("9rQ3", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertSame(arrayList0, arrayList1);
      assertSame(arrayList1, arrayList0);
      assertFalse(arrayList0.contains("9rQ3"));
      assertFalse(arrayList1.contains("9rQ3"));
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(5, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setConqueror("-pq9)gp>flrc*'k#rs");
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("-pq9)gp>flrc*'k#rs", fiefdoms0.getConqueror());
      
      fiefdoms0.setViking((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("-pq9)gp>flrc*'k#rs", fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("-pq9)gp>flrc*'k#rs", fiefdoms0.getConqueror());
      assertNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("-pq9)gp>flrc*'k#rs", fiefdoms0.getConqueror());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNotNull(knight0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setName("?Y");
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList0);
      
      String string0 = fiefdoms0.getOwner();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(string0);
      
      String string1 = fiefdoms0.getName();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("?Y", string1);
      assertNotNull(string1);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, int0);
      
      int int1 = fiefdoms0.getPersonalCastles();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      String string2 = fiefdoms0.getOwner();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(string2);
      
      fiefdoms0.setViking((-85872092), true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setMagyar(2, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      String string3 = fiefdoms1.getName();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(string3);
      
      int int2 = fiefdoms1.getValue();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      ArrayList<Vassals> arrayList2 = fiefdoms1.getRebelliousVassals();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(arrayList2, arrayList1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertNotNull(arrayList2);
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNotNull(fiefdoms2);
      
      fiefdoms1.buyPersonalCastles(0);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      
      String string4 = fiefdoms1.getOwner();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertNull(string4);
      
      int int3 = fiefdoms1.getFiefdomCastles();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      
      ArrayList<String> arrayList3 = fiefdoms1.getInvaderType();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertNull(arrayList3);
      
      Fiefdoms fiefdoms3 = new Fiefdoms();
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getName());
      assertNull(fiefdoms3.getConqueror());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertNotNull(fiefdoms3);
      
      ArrayList<Intruders> arrayList4 = fiefdoms1.getMagyar();
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms3);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms3));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertNotNull(arrayList4);
      
      ArrayList<Intruders> arrayList5 = fiefdoms3.getMuslim();
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getName());
      assertNull(fiefdoms3.getConqueror());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(arrayList5, arrayList4);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertTrue(arrayList5.equals((Object)arrayList4));
      assertNotNull(arrayList5);
      
      String string5 = fiefdoms3.getName();
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getName());
      assertNull(fiefdoms3.getConqueror());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertNull(string5);
      
      int int4 = fiefdoms3.getPeasants();
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getName());
      assertNull(fiefdoms3.getConqueror());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertEquals(0, int4);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      
      fiefdoms1.setPeasants(1);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(1, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms3);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms3));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      
      ArrayList<Intruders> arrayList6 = fiefdoms3.getViking();
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getName());
      assertNull(fiefdoms3.getConqueror());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertEquals(0, arrayList6.size());
      assertTrue(arrayList6.isEmpty());
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(arrayList6, arrayList4);
      assertNotSame(arrayList6, arrayList5);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertTrue(arrayList6.equals((Object)arrayList5));
      assertTrue(arrayList6.equals((Object)arrayList4));
      assertNotNull(arrayList6);
      
      fiefdoms0.setMagyar(arrayList4);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("?Y", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(1, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms0, fiefdoms3);
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(arrayList4, arrayList6);
      assertNotSame(arrayList4, arrayList5);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms3);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList4.equals((Object)arrayList6));
      assertTrue(arrayList4.equals((Object)arrayList5));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms3));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      
      byte[] byteArray0 = fiefdoms3.getSelectioncolor();
      assertEquals(0, fiefdoms3.getPeasants());
      assertEquals(0, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getName());
      assertNull(fiefdoms3.getConqueror());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertFalse(fiefdoms3.isKingdom());
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      fiefdoms1.setViking(0, false);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(1, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms3);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms3));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, (String) null, (String) null, (-2097), true, (ArrayList<String>) null);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals((-2097), fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking(4062, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setMagyar((-1), false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      intruders0.setType("%");
      assertNull(intruders0.getRank());
      assertEquals("%", intruders0.getType());
      assertNull(intruders0.getLocation());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      String string1 = fiefdoms1.getName();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(string1);
      
      String string2 = fiefdoms1.getOwner();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(string2);
      
      fiefdoms1.setName((String) null);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setOwner((String) null);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setName("");
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Knight knight0 = new Knight("f|", "7~DE2L%9", ".!Y9jnU");
      assertEquals("f|", knight0.getName());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("7~DE2L%9", knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(".!Y9jnU", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertEquals("f|", knight0.getName());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("7~DE2L%9", knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(".!Y9jnU", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(""));
      assertNotNull(arrayList0);
      
      fiefdoms1.setInvaderType(arrayList0);
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("f|", knight0.getName());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("7~DE2L%9", knight0.getRank());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(".!Y9jnU", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList0.contains(""));
      
      String string3 = fiefdoms1.getName();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals("", string3);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(string3);
      
      ArrayList<Intruders> arrayList1 = fiefdoms1.getViking();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList1.contains(intruders0));
      assertNotNull(arrayList1);
      
      int int0 = fiefdoms1.getFiefdomCastles();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      int int1 = fiefdoms1.getFiefdomCastles();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<String> arrayList2 = fiefdoms1.getInvaderType();
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertSame(arrayList2, arrayList0);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList2.contains(".!Y9jnU"));
      assertNotNull(arrayList2);
      
      ArrayList<String> arrayList3 = fiefdoms1.getInvaderType();
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertSame(arrayList3, arrayList0);
      assertSame(arrayList3, arrayList2);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(arrayList3.contains(".!Y9jnU"));
      assertNotNull(arrayList3);
      
      byte[] byteArray0 = fiefdoms1.getSelectioncolor();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayList<Player> arrayList4 = fiefdoms1.getVassalsList();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(arrayList4);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "3#_q", "3#_q", 1317, false, (ArrayList<String>) null);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("3#_q", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      fiefdoms0.setConqueror("3#_q");
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("3#_q", fiefdoms0.getOwner());
      
      fiefdoms0.buyPersonalCastles(1317);
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("3#_q", fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("muslim");
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setMagyar(1317, false);
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getRebelliousVassals();
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotSame(arrayList2, arrayList0);
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertNotNull(arrayList2);
      
      ArrayList<String> arrayList3 = fiefdoms0.getInvaderType();
      assertEquals(1317, fiefdoms0.getValue());
      assertEquals("muslim", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("3#_q", fiefdoms0.getConqueror());
      assertEquals(1317, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("3#_q", fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList3);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "muslim", "muslim", (-3282), true, (ArrayList<String>) null);
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("muslim", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("muslim", fiefdoms1.getName());
      assertEquals((-3282), fiefdoms1.getValue());
      assertTrue(fiefdoms1.isKingdom());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      fiefdoms0.buyFiefdomCastles(3825);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("]8n");
      assertNull(fiefdoms0.getConqueror());
      assertEquals("]8n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setOwner("]8n");
      assertNull(fiefdoms0.getConqueror());
      assertEquals("]8n", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((Vassals) null);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = arrayList0.add((Vassals) null);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      arrayList0.ensureCapacity(2);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, int0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 2;
      fiefdoms0.setShaderColor(floatArray0);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertArrayEquals(new float[] {0.0F, 0.0F, 2.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      
      int int1 = fiefdoms0.getPersonalCastles();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMagyar();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getRebelliousVassals();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(2, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      
      fiefdoms0.buyFiefdomCastles(1042);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPersonalCastles(4013);
      assertEquals(4013, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertEquals(4013, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(floatArray0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      
      fiefdoms0.setViking(arrayList1);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList1, arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotNull(arrayList2);
      
      fiefdoms0.setRebelliousVassals(arrayList2);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      
      fiefdoms0.buyPersonalCastles((-1664));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-1), false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList0);
      
      fiefdoms0.setPersonalCastles(1345);
      assertEquals(1345, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertEquals(1345, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.buyFiefdomCastles(2337);
      assertEquals(1345, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setFiefdomCastles(false);
      assertEquals(1345, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setLoyalVassals(0, true);
      assertEquals(1345, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setVassalsList(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((-1), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals((-1), false);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((ArrayList<Intruders>) null);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "VH_P", "VH_P", (-3692), true, (ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders("knight", "knight");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNotNull(intruders0);
      
      intruders0.setType("VH_P");
      assertNull(intruders0.getRank());
      assertEquals("VH_P", intruders0.getType());
      assertNull(intruders0.getLocation());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(intruders0.getRank());
      assertEquals("VH_P", intruders0.getType());
      assertNull(intruders0.getLocation());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMagyar(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)84;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      assertArrayEquals(new byte[] {(byte)85, (byte)64, (byte)84}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.loyalVassals;
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setLoyalVassals(arrayList1);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      fiefdoms0.setMuslim((-3692), true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("sE0QRhN;'|Y|0$85Zu");
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("sE0QRhN;'|Y|0$85Zu", fiefdoms0.getOwner());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setFiefdomCastles(true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("sE0QRhN;'|Y|0$85Zu", fiefdoms0.getOwner());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setOwner("src.Vassals");
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      String string0 = fiefdoms0.getName();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals("VH_P", string0);
      assertNotNull(string0);
      
      fiefdoms0.buyFiefdomCastles(3038);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      String string1 = fiefdoms0.getOwner();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals("src.Vassals", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      fiefdoms0.setPeasants(3038);
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(3038, fiefdoms0.getPeasants());
      
      fiefdoms0.setPersonalCastles(3038);
      assertEquals((-3692), fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("VH_P", fiefdoms0.getName());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertEquals(3038, fiefdoms0.getPeasants());
      assertEquals(3038, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim(267, false);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[0];
      fiefdoms0.setShaderColor(floatArray0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      fiefdoms0.setLoyalVassals((-1), true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      fiefdoms0.buyPersonalCastles((-16));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      
      String string0 = fiefdoms1.getOwner();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(string0);
      
      ArrayList<String> arrayList1 = fiefdoms1.getInvaderType();
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(arrayList1);
      
      Knight knight0 = new Knight();
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertNotNull(knight0);
      
      knight0.setName("QjZA#lWSG");
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals("QjZA#lWSG", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      
      String string1 = knight0.getName();
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals("QjZA#lWSG", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("QjZA#lWSG", string1);
      assertNotNull(string1);
      
      ArrayList<String> arrayList2 = knight0.getConversation();
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals("QjZA#lWSG", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertFalse(arrayList2.contains(string1));
      assertNotNull(arrayList2);
      
      Fiefdoms fiefdoms2 = new Fiefdoms((ArrayList<String>) null, "?", "?", (-16), false, arrayList2);
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals("QjZA#lWSG", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals("?", fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals("?", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals((-16), fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(arrayList2.contains(string1));
      assertNotNull(fiefdoms2);
      
      fiefdoms2.setMuslim((-16), false);
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals("QjZA#lWSG", knight0.getName());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getScore());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals("?", fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getPeasants());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals("?", fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals((-16), fiefdoms2.getValue());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(arrayList2.contains(string1));
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(true);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setConqueror((String) null);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setRebelliousVassals(0, false);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(arrayList1);
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(1, int0);
      
      fiefdoms0.setPeasants(0);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setLoyalVassals(1, false);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror("");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setRebelliousVassals(2, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.buyFiefdomCastles(2);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setFiefdomCastles(true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setLoyalVassals((-1119), true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(1, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((ArrayList<Intruders>) null);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      // Undeclared exception!
      try { 
        fiefdoms0.setViking(1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "magyar", "magyar", 0, false, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("magyar", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("magyar", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.contains("magyar"));
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("+B9");
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("+B9", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("magyar", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.contains("magyar"));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror("Please input the number of vassals you \nyou desire to take with you:");
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      byte[] byteArray0 = new byte[0];
      fiefdoms0.setSelectioncolor(byteArray0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      float[] floatArray0 = new float[6];
      floatArray0[0] = 863.09296F;
      floatArray0[1] = (-1619.1215F);
      floatArray0[2] = (-1940.3531F);
      floatArray0[3] = 0.0F;
      floatArray0[4] = 0.0F;
      floatArray0[5] = 0.0F;
      fiefdoms0.setShaderColor(floatArray0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertArrayEquals(new float[] {863.09296F, (-1619.1215F), (-1940.3531F), 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(6, floatArray0.length);
      
      fiefdoms0.setFiefdomCastles(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      Intruders intruders0 = new Intruders("Please input the number of vassals you \nyou desire to take with you:", "Please input the number of vassals you \nyou desire to take with you:");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      intruders0.setLocation("Please input the number of vassals you \nyou desire to take with you:");
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertTrue(boolean0);
      assertTrue(arrayList0.contains(intruders0));
      
      arrayList0.add(0, (Intruders) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setFiefdomCastles(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-2), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-2), fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayList0.ensureCapacity(1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(byteArray0);
      assertEquals(3, byteArray0.length);
      
      fiefdoms0.setViking(2353, false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals((-1), false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(236, true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      fiefdoms1.setMagyar(3599, false);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      fiefdoms1.setMuslim(2868, true);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      ArrayList<Vassals> arrayList2 = fiefdoms1.getLoyalVassals();
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(arrayList2);
      
      fiefdoms0.setMuslim((-1681), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "5)");
      assertFalse(boolean0);
      
      fiefdoms0.setMagyar(2483, true);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setViking(778, false);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";fu");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      fiefdoms0.setMagyar(778, false);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setRebelliousVassals(2481, true);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setLoyalVassals(2481, false);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNotNull(fiefdoms1);
      
      ArrayList<Vassals> arrayList1 = new ArrayList<Vassals>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNotNull(arrayList1);
      
      fiefdoms1.setConqueror("aI6a");
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals("aI6a", fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertNotNull(fiefdoms2);
      
      fiefdoms1.buyPersonalCastles(3);
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals("aI6a", fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      
      String string0 = fiefdoms1.getOwner();
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertEquals("aI6a", fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertNull(string0);
      
      fiefdoms2.setOwner((String) null);
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
  }
}

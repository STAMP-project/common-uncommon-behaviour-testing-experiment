/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 13:45:18 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      
      GrayImage grayImage0 = colorImage0.plane(2);
      assertNotNull(grayImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(2, interpolatedColorImage0.X());
      
      Integer[] integerArray0 = interpolatedColorImage0.get(0, 0);
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(2, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        colorImage0.max(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 1632;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1632, interpolatedColorImage0.X());
      assertEquals(1632, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      interpolatedColorImage0.minComponent();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      rOI1.setROI(1, 255, 1, 1);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(255, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(255, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(255, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(255, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(255, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.toString(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(2269, 2269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 1654;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 313, (-2935), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1347, 1670, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1347
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 1630, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(12, 0);
      assertNotNull(colorImage0);
      assertEquals(12, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(12, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 12;
      intArray0[3] = (-2);
      intArray0[3] = 0;
      intArray0[5] = 12;
      intArray0[6] = 0;
      intArray0[7] = 12;
      intArray0[8] = 12;
      long[] longArray0 = colorImage0.sqrSum();
      assertEquals(3, longArray0.length);
      assertNotNull(longArray0);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(12, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1486, 1486);
      assertNotNull(colorImage0);
      assertEquals(1486, colorImage0.X());
      assertEquals(1486, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(1651, 1, 1658, 1658);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1651, rOI1.ux());
      assertEquals(1658, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(1658, rOI1.ly());
      assertEquals(8, rOI1.X());
      assertEquals(1658, rOI1.Y());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1658, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(1651, rOI1.ux());
      assertEquals(1658, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(1658, rOI1.ly());
      assertEquals(8, rOI1.X());
      assertEquals(1658, rOI1.Y());
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1651;
      intArray0[1] = 1658;
      intArray0[2] = 1;
      int int2 = rOI0.Y();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, int2);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      colorImage0.add(1, 0, 1666, 1, 0, rOI0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(rOI0, rOI1);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(1486, colorImage0.X());
      assertEquals(1486, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1802, 1802, 1802, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int int0 = (-1091);
      // Undeclared exception!
      try { 
        colorImage0.add((-1091), (-1091));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1091
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1644, 788);
      assertNotNull(interpolatedColorImage0);
      assertEquals(788, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1644, interpolatedColorImage0.X());
      
      int int0 = 1648;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      rOI1.setROI(1648, 1629, 489, 489);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1629, rOI1.ly());
      assertEquals(489, rOI1.uy());
      assertEquals(489, rOI1.ux());
      assertEquals(1648, rOI1.lx());
      assertEquals(1141, rOI1.Y());
      assertEquals(1160, rOI1.X());
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1141, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1629, rOI1.ly());
      assertEquals(489, rOI1.uy());
      assertEquals(489, rOI1.ux());
      assertEquals(1648, rOI1.lx());
      assertEquals(1141, rOI1.Y());
      assertEquals(1160, rOI1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-101), 1648, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -101
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1632, interpolatedColorImage0.X());
      assertEquals(1632, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      interpolatedColorImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, (-1109), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-1537), (-1537), (-1537), (-1537), 1406);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1632, 1632);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1632, colorImage0.Y());
      assertEquals(1632, colorImage0.X());
      
      ROI rOI0 = new ROI(1661, 1661, 2069, 2069);
      assertNotNull(rOI0);
      assertEquals(2069, rOI0.ly());
      assertEquals(2069, rOI0.lx());
      assertEquals(1661, rOI0.ux());
      assertEquals(1661, rOI0.uy());
      assertEquals(409, rOI0.X());
      assertEquals(409, rOI0.Y());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(2963, 788, 2963, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1661
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[3] = 11;
      intArray0[4] = 11;
      intArray0[5] = 11;
      intArray0[6] = 11;
      intArray0[7] = 11;
      intArray0[8] = 11;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      
      // Undeclared exception!
      try { 
        colorImage0.add(11, 11, intArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 3);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(3, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      jigl.image.Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertSame(interpolatedColorImage0, image0);
      assertNotNull(image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, image0.X());
      assertEquals(3, image0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.subtract(3, 3584, 0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage0, image0);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, image0);
      assertNotNull(interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(3, interpolatedColorImage1.Y());
      assertEquals(3, interpolatedColorImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(5, (-3683), 3584, 1);
      assertEquals((-3683), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(3584, rOI0.lx());
      assertEquals(3685, rOI0.Y());
      assertEquals(5, rOI0.ux());
      assertEquals(3580, rOI0.X());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      rOI1.setROI(3, 1367, 3, 3);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1365, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(3, rOI1.uy());
      assertEquals(1367, rOI1.ly());
      assertEquals(3, rOI1.ux());
      assertEquals(3, rOI1.lx());
      
      rOI1.setROI((-6), 3, 3584, (-6));
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-6), rOI1.ux());
      assertEquals((-6), rOI1.uy());
      assertEquals(3584, rOI1.lx());
      assertEquals(10, rOI1.Y());
      assertEquals(3591, rOI1.X());
      assertEquals(3, rOI1.ly());
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(10, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-6), rOI1.ux());
      assertEquals((-6), rOI1.uy());
      assertEquals(3584, rOI1.lx());
      assertEquals(10, rOI1.Y());
      assertEquals(3591, rOI1.X());
      assertEquals(3, rOI1.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-477), (-477), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1654, interpolatedColorImage0.Y());
      assertEquals(1654, interpolatedColorImage0.X());
      
      // Undeclared exception!
      interpolatedColorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = 1646;
      int int2 = 1041;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.X();
      assertEquals(1, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int4 = 1662;
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(1, 1041, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1638, 1638);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1638, interpolatedColorImage0.X());
      assertEquals(1638, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      intArray0[1] = 1174;
      // Undeclared exception!
      interpolatedColorImage0.addbuffer(1174, 1638, 1169, (-1), intArray0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      
      int int1 = new Integer((-2935));
      assertEquals((-2935), int1);
      assertFalse(int1 == int0);
      
      rOI1.setROI(3036, (-2935), 32767, 1);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(32767, rOI1.lx());
      assertEquals(2937, rOI1.Y());
      assertEquals(3036, rOI1.ux());
      assertEquals(1, rOI1.ly());
      assertEquals((-2935), rOI1.uy());
      assertEquals(29732, rOI1.X());
      
      rOI1.setROI(100, (-2935), (-2935), (-2935));
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(100, rOI1.lx());
      assertEquals((-2935), rOI1.ux());
      assertEquals((-2935), rOI1.uy());
      assertEquals(3036, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals((-2935), rOI1.ly());
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(100, rOI1.lx());
      assertEquals((-2935), rOI1.ux());
      assertEquals((-2935), rOI1.uy());
      assertEquals(3036, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals((-2935), rOI1.ly());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(32767, 11);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(11, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(32767, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 2, (-2935), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2935
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = 522;
      ColorModel colorModel0 = ColorModel.RGB;
      colorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int1 = 5;
      int int2 = 187;
      int[] intArray0 = new int[4];
      intArray0[0] = 5;
      // Undeclared exception!
      try { 
        colorImage0.multiply((-519), 187, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(colorImage0, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = colorImage0.multiply((ColorImage) interpolatedColorImage0);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage(Integer.MIN_VALUE, Integer.MIN_VALUE);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int1 = (-1440);
      // Undeclared exception!
      try { 
        colorImage0.InitFromImage((Image) null, 1184, 1650, 2658, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = (-2666);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-2666), (-2666));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2666
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = 522;
      ColorModel colorModel0 = ColorModel.RGB;
      colorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage0.byteSize((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(6, 6, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(11, 11);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(11, colorImage0.Y());
      assertEquals(11, colorImage0.X());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(11, colorImage0.Y());
      assertEquals(11, colorImage0.X());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[2] = (-2);
      intArray0[3] = 11;
      intArray0[5] = 11;
      intArray0[6] = 11;
      intArray0[5] = 11;
      intArray0[8] = 65;
      ColorImage colorImage1 = colorImage0.addbuffer(11, 11, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 11, (-2), 11, 0, 11, 11, 0, 65}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(11, colorImage0.Y());
      assertEquals(11, colorImage0.X());
      assertEquals(11, colorImage1.Y());
      assertEquals(11, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      String string0 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(11, colorImage0.Y());
      assertEquals(11, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(colorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(0, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1203, 1661, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1203
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer0);
      assertNotNull(integer0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-200);
      intArray0[1] = (-1722);
      intArray0[2] = 235;
      intArray0[3] = 1909;
      intArray0[4] = (-16777216);
      intArray0[5] = (-16777216);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-1220), 1, integerArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ColorImage colorImage1 = colorImage0.copy();
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      colorImage1.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      
      colorImage0.clip(0, 0);
      assertNotSame(colorImage0, colorImage1);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int1 = colorImage1.Y();
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(0, int1);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertTrue(int1 == int0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int3 = 1;
      ColorImage colorImage2 = colorImage0.copy();
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage2, colorImage0);
      assertNotSame(colorImage2, colorImage1);
      assertNotNull(colorImage2);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(0, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      
      GrayImage[] grayImageArray0 = new GrayImage[1];
      int[] intArray0 = new int[3];
      intArray0[0] = (-1814);
      intArray0[1] = (-1814);
      intArray0[2] = (-1814);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, (-1814), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(0, 0, intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int0 = (-1091);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        colorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage2 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(6, (-1869));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      int int0 = 1910;
      int int1 = 32767;
      ColorImage colorImage0 = new ColorImage(1910, 32767);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(6, 6, 6, 6, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 3);
      assertNotNull(interpolatedColorImage0);
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(3, int0);
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer(12);
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      
      int int2 = integer1.intValue();
      assertEquals(12, int2);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      int int3 = integer2.intValue();
      assertEquals(300, int3);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      float float0 = integer2.floatValue();
      assertEquals(300.0F, float0, 0.01F);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertTrue(integer2.equals((Object)int3));
      
      int int4 = ((Integer)300).intValue();
      assertEquals(300, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      
      Integer integer3 = Integer.valueOf(32767);
      assertEquals(32767, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)int4));
      assertFalse(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      Integer integer4 = Integer.valueOf(32767);
      assertEquals(32767, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int4));
      
      byte byte0 = integer3.byteValue();
      assertEquals((byte) (-1), byte0);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)int4));
      assertFalse(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      float float1 = integer4.floatValue();
      assertEquals(32767.0F, float1, 0.01F);
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int4));
      assertNotEquals(float1, float0, 0.01F);
      
      Integer integer5 = Integer.valueOf(255);
      assertEquals(255, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)int3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int4));
      
      byte byte1 = integer3.byteValue();
      assertEquals((byte) (-1), byte1);
      assertTrue(byte1 == byte0);
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer5));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)int4));
      assertFalse(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(300, 1646, integerArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1646
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-1220), 1, integerArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3, 3);
      assertNotNull(colorImage0);
      assertEquals(3, colorImage0.X());
      assertEquals(3, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int0 = colorImage0.X();
      assertEquals(3, int0);
      assertEquals(3, colorImage0.X());
      assertEquals(3, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = (-1587);
      // Undeclared exception!
      try { 
        colorImage0.multiply(3, (-1587));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 1632;
      ColorImage colorImage0 = new ColorImage(1632, 1632);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1632, colorImage0.Y());
      assertEquals(1632, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(1, 2122, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      String string0 = colorImage0.toString();
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      
      String string1 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string1);
      assertNotNull(string1);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = 3824;
      int int2 = 0;
      int int3 = 3;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage1.add(0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min((-2265));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2265
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ROI rOI0 = null;
      int int0 = 1;
      int int1 = 7;
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int int2 = 1095;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1095, 1647);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1647, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1095, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-3551);
      intArray0[1] = (-3551);
      intArray0[2] = 1;
      intArray0[3] = 1;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1, 12, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply((-2935), 4, 4071, (-170), (-170));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = 1654;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(Integer.MIN_VALUE, Integer.MIN_VALUE, 1654, 3, 1633);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 3);
      assertNotNull(interpolatedColorImage0);
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(3, int0);
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      ColorImage colorImage0 = interpolatedColorImage0.copy(rOI0);
      assertNotNull(colorImage0);
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, colorImage0.X());
      assertEquals(1, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer1 = new Integer(12);
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      
      float float0 = integer2.floatValue();
      assertEquals(300.0F, float0, 0.01F);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      
      int int2 = ((Integer)1).intValue();
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      Integer integer3 = Integer.valueOf(32767);
      assertEquals(32767, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer2));
      
      Integer integer4 = Integer.valueOf(32767);
      assertEquals(32767, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      
      byte byte0 = integer3.byteValue();
      assertEquals((byte) (-1), byte0);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertTrue(integer3.equals((Object)integer4));
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer2));
      
      float float1 = integer4.floatValue();
      assertEquals(32767.0F, float1, 0.01F);
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertNotEquals(float1, float0, 0.01F);
      
      Integer integer5 = Integer.valueOf(255);
      assertEquals(255, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer1));
      
      int int3 = 1646;
      // Undeclared exception!
      try { 
        colorImage0.multiply((-503), 1646, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -503
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[1];
      intArray0[0] = 12;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(12, 12, 12, 12, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.max(4415, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4415
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2);
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(0, 2441, 0, 0, 1659, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2442
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertNotNull(interpolatedColorImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer[] integerArray0 = interpolatedColorImage0.max();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(2, 2, 12, 2, 466, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2714, 1);
      assertNotNull(interpolatedColorImage0);
      assertEquals(2714, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1653, (-3336), 1203, (-3336), (-3336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3336
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(Integer.MIN_VALUE, (-1273), (-32768), (-16777216), (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(11, 11);
      assertNotNull(colorImage0);
      assertEquals(11, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(11, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[2] = (-2);
      intArray0[3] = 11;
      intArray0[5] = 11;
      intArray0[6] = 11;
      intArray0[5] = 11;
      intArray0[8] = 65;
      ColorImage colorImage1 = colorImage0.addbuffer(11, 11, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 11, (-2), 11, 0, 11, 11, 0, 65}, intArray0);
      assertEquals(11, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(11, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(11, colorImage1.X());
      
      String string0 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(11, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(colorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      GrayImage[] grayImageArray0 = new GrayImage[6];
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(1, 1658, 1658, 128);
      assertEquals(1531, rOI0.Y());
      assertEquals(128, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(1658, rOI0.X());
      assertEquals(1658, rOI0.lx());
      assertEquals(1658, rOI0.ly());
      
      ColorModel colorModel0 = colorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorModel0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 313, (-2935), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      rOI1.setROI(572, 4, 1, (-1858));
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(572, rOI1.lx());
      assertEquals(4, rOI1.ly());
      assertEquals(1863, rOI1.Y());
      assertEquals((-1858), rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(572, rOI1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max((-341), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -341
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 1907, 2);
      assertNotNull(image0);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1661;
      intArray0[2] = 1643;
      intArray0[3] = 1115;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[14];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(1805);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1805
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.plane((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 7);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1654, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      interpolatedColorImage0.clear();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        colorImage0.min(1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = 1654;
      int int1 = (-185);
      int int2 = (-32768);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-32768), 1633, 3, (-994), 1661);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(431, 1650);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1650, interpolatedColorImage0.Y());
      assertEquals(431, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorImage colorImage1 = interpolatedColorImage0.addbuffer(0, 0, 0, 1650, intArray0);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1650, interpolatedColorImage0.Y());
      assertEquals(431, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(8, 0, 0, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1625, 1625, 1625, 1625, 1625, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.add((-1091), (-1091));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1091
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1649, 1649, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1654, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1654, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1654, 1654, (int[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 16;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 86);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(86, interpolatedColorImage0.Y());
      assertEquals(16, interpolatedColorImage0.X());
      
      int int1 = 3;
      int[] intArray0 = null;
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedColorImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(86, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.LINEAR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      
      Integer integer0 = interpolatedColorImage0.minComponent();
      assertNull(integer0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(86, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.LINEAR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(3, 86, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      GrayImage[] grayImageArray0 = new GrayImage[0];
      interpolatedColorImage0.planes = grayImageArray0;
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff((ColorImage) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 1632;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1632, interpolatedColorImage0.Y());
      assertEquals(1632, interpolatedColorImage0.X());
      
      int int1 = 2069;
      ROI rOI0 = null;
      int[] intArray0 = new int[4];
      intArray0[2] = 3330;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      GrayImage grayImage0 = colorImage0.plane(2);
      assertNotNull(grayImage0);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      
      ColorImage colorImage1 = colorImage0.add((-1929), 1, 2, rOI1);
      assertSame(colorImage0, colorImage1);
      assertNotSame(rOI1, rOI0);
      assertSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(2, colorImage1.Y());
      assertEquals(2, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      ColorImage colorImage2 = colorImage1.copy(rOI0);
      assertSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI1, rOI0);
      assertNotSame(colorImage1, colorImage2);
      assertSame(colorImage1, colorImage0);
      assertNotSame(colorImage2, colorImage0);
      assertNotSame(colorImage2, colorImage1);
      assertNotNull(colorImage2);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(2, colorImage1.Y());
      assertEquals(2, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(1, colorImage2.Y());
      assertEquals(1, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      
      int int2 = colorImage0.Y();
      assertSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage2);
      assertEquals(2, int2);
      assertFalse(colorImage0.equals((Object)colorImage2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-1722), (-1722), (-1722), (-1722), (-1722));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int int0 = 1625;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(5, 5);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(5, colorImage0.Y());
      assertEquals(5, colorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      ColorImage colorImage1 = colorImage0.copy(rOI1);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(rOI1, rOI0);
      assertNotSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(5, colorImage0.Y());
      assertEquals(5, colorImage0.X());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, colorImage1.Y());
      assertEquals(1, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertEquals((-30000), (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      int int2 = integer0.intValue();
      assertEquals((-30000), int2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      
      float float0 = integer1.floatValue();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      
      String string0 = colorImage1.toString(rOI0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI1, rOI0);
      assertNotSame(colorImage1, colorImage0);
      assertEquals("1:1\nnull \n1:1\nnull \n1:1\nnull \n", string0);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(5, colorImage0.Y());
      assertEquals(5, colorImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, colorImage1.Y());
      assertEquals(1, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      ColorModel colorModel0 = ColorModel.HSV;
      colorImage1.setColorModel(colorModel0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(rOI1, rOI0);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(5, colorImage0.Y());
      assertEquals(5, colorImage0.X());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, colorImage1.Y());
      assertEquals(1, colorImage1.X());
      assertEquals(ColorModel.HSV, colorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.max(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1654, interpolatedColorImage0.Y());
      assertEquals(1654, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1406, 1654, 2, 1663, 1663);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1654
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int int0 = (-952);
      int int1 = 3;
      int int2 = 1650;
      // Undeclared exception!
      try { 
        colorImage0.divide((-952), (-952), 3, 3, 1650);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertEquals(100, (int)integer0);
      assertNotNull(integer0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(3, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = 1352;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(16, 1352, 16, 1352, 16, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1654, interpolatedColorImage0.X());
      assertEquals(1654, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide((-2512), (-2512), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1625, 1625, (int[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1632, interpolatedColorImage0.Y());
      assertEquals(1632, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(2069, 1632, 2069, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(32, 5, 5, 5);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(28, rOI1.X());
      assertEquals(5, rOI1.ly());
      assertEquals(32, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(5, rOI1.uy());
      assertEquals(5, rOI1.ux());
      
      int int1 = rOI0.Y();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, int1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1, 5, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(0, interpolatedColorImage2.Y());
      
      InterpolatedColorImage interpolatedColorImage3 = (InterpolatedColorImage)interpolatedColorImage1.divide(3, 5, 147);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage3);
      assertSame(interpolatedColorImage1, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage0);
      assertSame(interpolatedColorImage3, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage2);
      assertNotNull(interpolatedColorImage3);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage2));
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage3.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage3.getColorModel());
      assertEquals(0, interpolatedColorImage3.X());
      assertEquals(0, interpolatedColorImage3.Y());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-71);
      intArray0[1] = (-71);
      intArray0[2] = (-71);
      intArray0[3] = 1666;
      intArray0[4] = (-71);
      int int0 = 1664;
      intArray0[5] = 1664;
      intArray0[6] = (-71);
      intArray0[7] = (-71);
      intArray0[8] = (-71);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-71), (-71), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      GrayImage[] grayImageArray0 = new GrayImage[0];
      interpolatedColorImage0.planes = grayImageArray0;
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(301, (-1679), (-1679), 301, (-1679), (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2);
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-2);
      intArray1[1] = 0;
      intArray1[2] = (-801);
      intArray1[3] = 1907;
      intArray1[4] = (-2);
      intArray1[5] = 0;
      intArray1[6] = (-2);
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.divide(intArray1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(intArray1, intArray0);
      assertEquals(7, intArray1.length);
      assertNotNull(interpolatedColorImage1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertArrayEquals(new int[] {(-2), 0, (-801), 1907, (-2), 0, (-2)}, intArray1);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 1654, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 0;
      int int1 = 11;
      ColorImage colorImage0 = new ColorImage(0, 11);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Integer[] integerArray0 = colorImage0.max();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      intArray0[3] = 0;
      intArray0[4] = 11;
      String string0 = colorImage0.toString();
      assertEquals("0:11\n0:11\n0:11\n", string0);
      assertNotNull(string0);
      assertEquals(0, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 1;
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      String string1 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:11\n0:11\n0:11\n", string1);
      assertNotNull(string1);
      assertTrue(string1.equals((Object)string0));
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(0, colorImage0.X());
      assertEquals(11, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int2 = 3824;
      int int3 = 0;
      int int4 = 3;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage1.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 7;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(7, 7);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(7, interpolatedColorImage0.X());
      assertEquals(7, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(7, interpolatedColorImage0.X());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(7, interpolatedColorImage1.Y());
      assertEquals(7, interpolatedColorImage1.X());
      
      int int1 = (-1222);
      int int2 = 1654;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide((-1222), 1654);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1222
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-32768), (-32768), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = (-1220);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1642;
      intArray0[2] = 1642;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer((-1220), 1642, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      String string0 = colorImage0.toString();
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      intArray0[5] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-28);
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      
      String string1 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string1);
      assertNotNull(string1);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      GrayImage grayImage0 = colorImage0.plane(0);
      assertNotSame(colorImage0, colorImage1);
      assertNotNull(grayImage0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.Y());
      
      int int1 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 1907, 2);
      assertNotNull(image0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage2 = new ColorImage(image0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = 0;
      GrayImage grayImage0 = colorImage0.plane(0);
      assertNotNull(grayImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(2, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(2, grayImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(2, interpolatedColorImage0.X());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[6];
      intArray0[0] = (-3988);
      intArray0[1] = 1634;
      intArray0[2] = (-425);
      intArray0[3] = 255;
      intArray0[4] = 1999;
      intArray0[5] = 2928;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((-1451), (-1451));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      Integer integer0 = Integer.valueOf((-1179));
      assertEquals((-1179), (int)integer0);
      assertNotNull(integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1179), (-1179), (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1179
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 1654;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1654, interpolatedColorImage0.X());
      assertEquals(1654, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = null;
      // Undeclared exception!
      interpolatedColorImage0.min();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, (-2338));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int int0 = 0;
      int int1 = 162;
      ColorImage colorImage0 = new ColorImage(0, 162);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(162, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      ColorModel colorModel0 = ColorModel.YIQ;
      colorImage0.setColorModel(colorModel0);
      assertEquals(0, colorImage0.X());
      assertEquals(162, colorImage0.Y());
      assertEquals(ColorModel.YIQ, colorImage0.getColorModel());
      
      int int3 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(255, 860);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 255
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1654, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1654, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1638, 1624, (int[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ColorImage colorImage1 = null;
      try {
        colorImage1 = new ColorImage(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = 1492;
      ColorImage colorImage0 = new ColorImage(1492, 1492);
      assertNotNull(colorImage0);
      assertEquals(1492, colorImage0.X());
      assertEquals(1492, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      String string0 = colorImage0.toString(rOI1);
      assertNotSame(rOI1, rOI0);
      assertEquals("1492:1492\nnull \n1492:1492\nnull \n1492:1492\nnull \n", string0);
      assertNotNull(string0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1492, colorImage0.X());
      assertEquals(1492, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      ColorImage colorImage1 = new ColorImage(colorImage0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int int0 = 2;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(2, 2, (-16777216), 2, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1632, interpolatedColorImage0.Y());
      assertEquals(1632, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = null;
      ROI rOI1 = new ROI(1632, 1632, 1632, 1632);
      assertNotNull(rOI1);
      assertEquals(1632, rOI1.uy());
      assertEquals(1632, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1632, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1632, rOI1.lx());
      
      Integer integer0 = new Integer(1632);
      assertEquals(1632, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = 1;
      ROI rOI2 = new ROI(1, 1, 1, (int) integer0);
      assertNotNull(rOI2);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(1, rOI2.ux());
      assertEquals(1, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1632, rOI2.Y());
      assertEquals(1632, rOI2.ly());
      assertEquals(1, rOI2.lx());
      
      int int1 = rOI2.Y();
      assertNotSame(rOI2, rOI1);
      assertEquals(1632, int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int1 == int0);
      assertEquals(1, rOI2.ux());
      assertEquals(1, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1632, rOI2.Y());
      assertEquals(1632, rOI2.ly());
      assertEquals(1, rOI2.lx());
      
      int int2 = rOI2.Y();
      assertNotSame(rOI2, rOI1);
      assertEquals(1632, int2);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, rOI2.ux());
      assertEquals(1, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1632, rOI2.Y());
      assertEquals(1632, rOI2.ly());
      assertEquals(1, rOI2.lx());
      
      int int3 = (-2009);
      int int4 = (-3551);
      int int5 = 7;
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2, 2);
      assertNotNull(interpolatedColorImage0);
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(2, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorModel colorModel0 = interpolatedColorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorModel0);
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(2, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = 1;
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      rOI1.setROI(1, 1, 1, 1);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, (-1)}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      String string0 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int int0 = 3824;
      int int1 = 3;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage0.divide(3824, 0, 0, 3, 3824, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(2360, 2360, 2360, 2360, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2);
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 65;
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 65}, intArray0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      String string0 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(colorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      GrayImage grayImage0 = colorImage0.plane(2);
      assertNotNull(grayImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      Integer integer0 = interpolatedColorImage0.minComponent();
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ColorImage colorImage0 = new ColorImage(1625, 1625);
      assertNotNull(colorImage0);
      assertEquals(1625, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1625, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.get(1625, 1953);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1953
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int2 = 6;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(6, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, (-1)}, intArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      
      ColorImage colorImage2 = colorImage1.addbuffer(5498, 0, 0, 0, intArray0);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage2);
      assertNotSame(colorImage1, colorImage0);
      assertNotSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage2);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, (-1)}, intArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage2.Y());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(5498, colorImage2.X());
      
      String string0 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage2));
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int int1 = 3824;
      int int2 = 0;
      int int3 = 3;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = rOI0.X();
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int5 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(colorImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1642, 1642);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1642, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1642, interpolatedColorImage0.Y());
      
      Integer[] integerArray0 = new Integer[1];
      Integer integer0 = new Integer((-487));
      assertEquals((-487), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = integer0.intValue();
      assertEquals((-487), int0);
      
      Integer integer1 = Integer.getInteger("[0F^CW", integer0);
      assertEquals((-487), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      
      int int1 = integer1.intValue();
      assertEquals((-487), int1);
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(int1 == int0);
      
      float float0 = integer1.floatValue();
      assertEquals((-487.0F), float0, 0.01F);
      assertTrue(integer0.equals((Object)int1));
      assertTrue(integer0.equals((Object)int0));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      
      integerArray0[0] = (Integer) (-487);
      // Undeclared exception!
      interpolatedColorImage0.clear(integerArray0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      
      ColorImage colorImage1 = colorImage0.clear();
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(2, colorImage1.Y());
      assertEquals(2, colorImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      String string0 = colorImage0.toString(rOI1);
      assertSame(colorImage0, colorImage1);
      assertNotSame(rOI1, rOI0);
      assertEquals("2:2\n0 \n2:2\n0 \n2:2\n0 \n", string0);
      assertNotNull(string0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      
      GrayImage grayImage0 = colorImage0.plane(2);
      assertNotNull(grayImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(2, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      ColorImage colorImage1 = colorImage0.copy();
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(2, colorImage1.Y());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      ColorImage colorImage2 = colorImage0.subtract(2, 0, rOI1);
      assertSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(rOI1, rOI0);
      assertNotSame(colorImage2, colorImage1);
      assertSame(colorImage2, colorImage0);
      assertNotNull(colorImage2);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(2, colorImage2.Y());
      assertEquals(2, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1, 0, 1, rOI0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      interpolatedColorImage0.colorModel = colorModel0;
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(3, 3, intArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI((-1898), (-1898), (-1014), (-784));
      assertNotNull(rOI0);
      assertEquals((-1014), rOI0.lx());
      assertEquals((-1898), rOI0.uy());
      assertEquals((-1898), rOI0.ux());
      assertEquals((-784), rOI0.ly());
      assertEquals(885, rOI0.X());
      assertEquals(1115, rOI0.Y());
      
      int int0 = rOI0.Y();
      assertEquals(1115, int0);
      assertEquals((-1014), rOI0.lx());
      assertEquals((-1898), rOI0.uy());
      assertEquals((-1898), rOI0.ux());
      assertEquals((-784), rOI0.ly());
      assertEquals(885, rOI0.X());
      assertEquals(1115, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1625, 1075, (-1898), (-1440), (-784), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -823
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      
      rOI1.setROI(572, 4, 1, (-1858));
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(4, rOI1.ly());
      assertEquals(1863, rOI1.Y());
      assertEquals((-1858), rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(572, rOI1.X());
      assertEquals(572, rOI1.lx());
      
      rOI1.setROI(128, 0, 3376, 100);
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(128, rOI1.ux());
      assertEquals(100, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(3249, rOI1.X());
      assertEquals(101, rOI1.Y());
      assertEquals(3376, rOI1.lx());
      
      rOI0.setROI(3376, 1174, 0, 905);
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(3377, rOI0.X());
      assertEquals(3376, rOI0.lx());
      assertEquals(905, rOI0.uy());
      assertEquals(1174, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(270, rOI0.Y());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(101, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(128, rOI1.ux());
      assertEquals(100, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(3249, rOI1.X());
      assertEquals(101, rOI1.Y());
      assertEquals(3376, rOI1.lx());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1174, 1174, 0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1632, interpolatedColorImage0.Y());
      assertEquals(1632, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1632, 1632, 2069, 1632, 2069, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int[] intArray0 = new int[0];
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, (-16777216), 522, 0, 1411, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = (-807);
      int int2 = (-1440);
      ROI rOI1 = new ROI((-807), (-1440), 1, (-807));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals((-807), rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals((-807), rOI1.ux());
      assertEquals(809, rOI1.X());
      assertEquals((-1440), rOI1.uy());
      assertEquals(634, rOI1.Y());
      
      int int3 = 1834;
      int int4 = 3049;
      int int5 = 1641;
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      int int6 = rOI2.X();
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, int6);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      
      ROI rOI3 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI3);
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertEquals(1, rOI3.uy());
      assertEquals(1, rOI3.X());
      assertEquals(1, rOI3.Y());
      assertEquals(1, rOI3.lx());
      assertEquals(1, rOI3.ly());
      assertEquals(1, rOI3.ux());
      
      int int7 = rOI3.Y();
      assertNotSame(rOI3, rOI0);
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertEquals(1, int7);
      assertFalse(rOI3.equals((Object)rOI0));
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertTrue(int7 == int6);
      assertFalse(int7 == int4);
      assertTrue(int7 == int0);
      assertEquals(1, rOI3.uy());
      assertEquals(1, rOI3.X());
      assertEquals(1, rOI3.Y());
      assertEquals(1, rOI3.lx());
      assertEquals(1, rOI3.ly());
      assertEquals(1, rOI3.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.add(3, (-1346), 16, rOI3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      int int0 = 1632;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1632, interpolatedColorImage0.Y());
      assertEquals(1632, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = null;
      int[] intArray0 = new int[8];
      intArray0[0] = 1337;
      intArray0[1] = 1632;
      intArray0[2] = 1337;
      intArray0[3] = 1337;
      intArray0[4] = 530;
      intArray0[5] = 1337;
      intArray0[6] = 1;
      intArray0[7] = 530;
      // Undeclared exception!
      interpolatedColorImage0.addbuffer(530, 1337, intArray0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = (-2);
      intArray0[3] = (-2);
      intArray0[3] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      int int1 = 65;
      intArray0[8] = 65;
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 65}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      String string0 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        colorImage1.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      String string0 = colorImage0.toString();
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      intArray0[5] = 0;
      intArray0[6] = 0;
      ColorImage colorImage1 = colorImage0.addbuffer(1650, 0, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(10, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(1650, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      
      String string1 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string1);
      assertNotNull(string1);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage1.divide(3052, (-16777216), 12, 0, (-488), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.max(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2);
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        colorImage0.add((-16777216), 1906, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1906
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI(3, 3, 3, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.uy());
      assertEquals(3, rOI1.ux());
      assertEquals(3, rOI1.lx());
      assertEquals(3, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(3, rOI1.Y());
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((ColorImage) interpolatedColorImage0, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.add(1648, 2701, (-16777216), 5577, 1648, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 1644, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-141), (-141), intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int int0 = (-630);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-630), (-630), (-630));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(2867, 2867, 1347);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.max(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1632, interpolatedColorImage0.Y());
      assertEquals(1632, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(1632, 1632, 255, 1632);
      assertEquals(1632, rOI0.uy());
      assertEquals(1378, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1632, rOI0.ly());
      assertEquals(1632, rOI0.lx());
      assertEquals(255, rOI0.ux());
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1632, rOI0.uy());
      assertEquals(1378, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1632, rOI0.ly());
      assertEquals(1632, rOI0.lx());
      assertEquals(255, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(2069, 1632, 2069, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1632
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1486, 1486);
      assertNotNull(colorImage0);
      assertEquals(1486, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1486, colorImage0.Y());
      
      ColorImage colorImage1 = new ColorImage();
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      GrayImage grayImage0 = colorImage1.plane(0);
      assertNotSame(colorImage1, colorImage0);
      assertNull(grayImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      GrayImage grayImage1 = colorImage1.plane(0);
      assertNotSame(colorImage1, colorImage0);
      assertNull(grayImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      GrayImage grayImage2 = colorImage1.plane(0);
      assertNotSame(colorImage1, colorImage0);
      assertNull(grayImage2);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      GrayImage grayImage3 = colorImage1.plane(0);
      assertNotSame(colorImage1, colorImage0);
      assertNull(grayImage3);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(colorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int int0 = 1654;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1654, interpolatedColorImage0.X());
      assertEquals(1654, interpolatedColorImage0.Y());
      
      ROI rOI0 = null;
      // Undeclared exception!
      interpolatedColorImage0.maxComponent();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(3805, 3805);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3805
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 3);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      ColorModel colorModel0 = ColorModel.RGB;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(3, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.X());
      assertEquals(3, interpolatedColorImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(3, 255, 0, 0);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(256, rOI1.Y());
      assertEquals(255, rOI1.ly());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(256, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(256, rOI1.Y());
      assertEquals(255, rOI1.ly());
      assertEquals(4, rOI1.X());
      assertEquals(3, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(6, 11, 0, 1659, 3, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      Integer integer0 = colorImage0.maxComponent();
      assertNull(integer0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      Integer[] integerArray0 = colorImage0.max();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(9, intArray0.length);
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, (-1)}, intArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      
      String string0 = colorImage0.toString();
      assertNotSame(colorImage0, colorImage1);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      
      int int0 = 3824;
      int int1 = 3;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage0.divide(3824, 0, 0, 3, 3824, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int2 = 1;
      ROI rOI1 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      int int3 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1, rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      assertNotNull(image0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      
      ColorImage colorImage0 = new ColorImage(image0);
      assertNotNull(colorImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      
      GrayImage grayImage0 = colorImage0.plane(2);
      assertNotNull(grayImage0);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI((-2935), 1, (-1017), (-16777216));
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.ly());
      assertEquals((-1017), rOI1.lx());
      assertEquals((-16777216), rOI1.uy());
      assertEquals(1919, rOI1.X());
      assertEquals((-2935), rOI1.ux());
      assertEquals(16777218, rOI1.Y());
      
      int int1 = rOI0.Y();
      assertNotSame(rOI0, rOI1);
      assertEquals(1, int1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ColorImage colorImage1 = colorImage0.subtract(1, 1, 1, rOI0);
      assertSame(colorImage0, colorImage1);
      assertNotSame(rOI0, rOI1);
      assertSame(colorImage1, colorImage0);
      assertNotNull(colorImage1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(2, colorImage1.Y());
      assertEquals(2, colorImage1.X());
      
      Integer integer0 = colorImage1.maxComponent();
      assertSame(colorImage0, colorImage1);
      assertNotSame(rOI0, rOI1);
      assertSame(colorImage1, colorImage0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0.5F, image0.getAccelerationPriority(), 0.01F);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(2, colorImage1.Y());
      assertEquals(2, colorImage1.X());
      
      // Undeclared exception!
      try { 
        colorImage0.get(1, (-764));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -764
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 550;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 550;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 550, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertNotNull(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.add(1693, 1693, 163);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.max(163);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 163
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1645, (-74), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 3);
      assertNotNull(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, interpolatedColorImage0.X());
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, interpolatedColorImage0.X());
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(3, int0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3, interpolatedColorImage0.Y());
      assertEquals(3, interpolatedColorImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer(12);
      assertEquals(12, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger(":+8rIp.b^Fl@", 12);
      assertEquals(12, (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int1));
      assertTrue(integer2.equals((Object)integer1));
      
      int int2 = integer1.intValue();
      assertEquals(12, int2);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer2));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      assertEquals(300, (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      
      int int3 = integer3.intValue();
      assertEquals(300, int3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      float float0 = integer3.floatValue();
      assertEquals(300.0F, float0, 0.01F);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)int3));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int2));
      assertFalse(integer3.equals((Object)integer0));
      
      int int4 = ((Integer)300).intValue();
      assertEquals(300, int4);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      Integer integer4 = Integer.valueOf(32767);
      assertEquals(32767, (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int3));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int4));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      
      Integer integer5 = Integer.valueOf(32767);
      assertEquals(32767, (int)integer5);
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer1));
      
      byte byte0 = integer4.byteValue();
      assertEquals((byte) (-1), byte0);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)int3));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int4));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer5));
      
      float float1 = integer5.floatValue();
      assertEquals(32767.0F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertTrue(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int3));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int4));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer1));
      
      Integer integer6 = Integer.valueOf(255);
      assertEquals(255, (int)integer6);
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int3));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int4));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer3));
      
      byte byte1 = integer4.byteValue();
      assertEquals((byte) (-1), byte1);
      assertTrue(byte1 == byte0);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer6));
      assertFalse(integer4.equals((Object)int3));
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int4));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer1));
      assertTrue(integer4.equals((Object)integer5));
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      int int5 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      ROI rOI2 = new ROI(1, 1, 1, 1);
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(1, rOI2.lx());
      assertEquals(1, rOI2.ly());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.ux());
      assertEquals(1, rOI2.uy());
      
      int int6 = rOI2.Y();
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(1, int6);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertEquals(1, rOI2.lx());
      assertEquals(1, rOI2.ly());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.ux());
      assertEquals(1, rOI2.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1, 1879, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      GrayImage[] grayImageArray0 = new GrayImage[0];
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 1654;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
      assertNotNull(interpolatedColorImage0);
      assertEquals(1654, interpolatedColorImage0.Y());
      assertEquals(1654, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      ROI rOI0 = null;
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((int[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1654, 1654);
          ROI rOI0 = new ROI();
          rOI0.X();
          ROI rOI1 = new ROI(1228, 1643, 1115, (-1392));
          rOI1.Y();
          // Undeclared exception!
          interpolatedColorImage0.toString();
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(16, 1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      ColorImage colorImage0 = new ColorImage(image0);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1, 1, 1, 1);
      rOI1.Y();
      ColorImage colorImage1 = interpolatedColorImage0.add(2, 2, rOI1);
      assertEquals(2, colorImage1.X());
      assertEquals(2, colorImage0.Y());
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      int[] intArray0 = new int[9];
      intArray0[0] = (-477);
      intArray0[1] = 1347;
      intArray0[2] = 1347;
      intArray0[3] = 1347;
      intArray0[4] = (-477);
      intArray0[5] = 7;
      intArray0[6] = 1347;
      intArray0[7] = 7;
      intArray0[8] = (-477);
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide((-477), 7, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[6];
      intArray0[0] = 6;
      intArray0[1] = 1309;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(6, 6, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      int int0 = (-1);
      ColorModel colorModel0 = ColorModel.HLS;
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1, 1, 1, 1);
      rOI1.Y();
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 11);
      colorImage0.maxComponent();
      int[] intArray0 = new int[10];
      intArray0[0] = 0;
      ColorImage colorImage1 = new ColorImage();
      colorImage0.plane(0);
      // Undeclared exception!
      try { 
        colorImage0.plane(2567);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2567
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      ColorImage colorImage0 = new ColorImage(image0);
      ROI rOI0 = new ROI();
      rOI0.X();
      colorImage0.max(1, rOI0);
      // Undeclared exception!
      try { 
        colorImage0.subtract(2, (-1311), (-1311), 2, 2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1311
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      int int0 = 1632;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1632, 1632);
      int int1 = 2069;
      ROI rOI0 = new ROI();
      rOI0.Y();
      // Undeclared exception!
      interpolatedColorImage0.max();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 3);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(3, 3, 292, 3, 1644);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(16, 16);
      int[] intArray0 = new int[3];
      intArray0[0] = 16;
      intArray0[1] = 1661;
      intArray0[2] = 16;
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int int0 = 0;
      colorImage0.plane(0);
      colorImage0.plane(0);
      colorImage0.plane(0);
      colorImage0.plane(0);
      ColorImage colorImage1 = null;
      try {
        colorImage1 = new ColorImage(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.Y();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2714, 1);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(301, (-1679), (-1679), 301, (-1679), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      Image image0 = bufferedImage0.getScaledInstance(2, 2, 2);
      ColorImage colorImage0 = new ColorImage(image0);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.multiply(1645, (-1318), 1645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      rOI0.X();
      int int0 = (-807);
      int int1 = (-1440);
      ROI rOI1 = new ROI((-807), (-1440), 1, (-807));
      int int2 = 1834;
      int int3 = 3049;
      int int4 = 1641;
      int int5 = 3;
      int int6 = (-1346);
      int int7 = 16;
      ROI rOI2 = new ROI();
      rOI2.X();
      rOI0.setROI(3, (-1346), (-807), (-1440));
      int int8 = 15;
      ROI rOI3 = new ROI();
      rOI3.Y();
      // Undeclared exception!
      try { 
        colorImage0.diff((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      int int0 = 1802;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(6, 6);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      int[] intArray0 = null;
      ROI rOI0 = new ROI();
      rOI0.X();
      ROI rOI1 = new ROI(1, 1, 1, 1);
      int int0 = 3;
      int int1 = 6;
      int int2 = 3503;
      int int3 = (-1);
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = Integer.valueOf((-1856));
      integerArray0[0] = integer0;
      try { 
        Integer.parseInt("PzYJ*");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"PzYJ*\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      colorImage0.maxComponent();
      int[] intArray0 = new int[9];
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 65;
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, intArray0);
      ColorImage colorImage2 = colorImage1.addbuffer(5498, 0, 0, 0, intArray0);
      colorImage0.toString();
      ColorImage colorImage3 = colorImage2.subtract(intArray0);
      assertEquals(0, colorImage1.Y());
      assertEquals(5498, colorImage3.X());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ROI rOI0 = new ROI();
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(1640, 1211, 1640);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3, 3);
      Integer[] integerArray0 = interpolatedColorImage0.min();
      interpolatedColorImage0.Y();
      ROI rOI0 = new ROI();
      rOI0.X();
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      Integer integer1 = new Integer(12);
      Integer.toUnsignedString(1655);
      Integer.getInteger("jigl.image.types.ColorImage");
      integer1.intValue();
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      integer2.intValue();
      integer2.floatValue();
      ((Integer)300).intValue();
      Integer integer3 = Integer.valueOf(32767);
      Integer integer4 = Integer.valueOf(32767);
      integer3.byteValue();
      integer4.floatValue();
      interpolatedColorImage0.clear(integerArray0);
      Integer.valueOf(255);
      integer3.byteValue();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(300, 1646, integerArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1646
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }
}

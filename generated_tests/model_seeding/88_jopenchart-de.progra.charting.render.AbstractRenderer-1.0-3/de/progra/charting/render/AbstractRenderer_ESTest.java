/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 13:55:54 GMT 2019
 */

package de.progra.charting.render;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.CoordSystem;
import de.progra.charting.DefaultChart;
import de.progra.charting.Legend;
import de.progra.charting.Title;
import de.progra.charting.model.ChartDataModel;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.EditableChartDataModel;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.text.DecimalFormat;
import java.util.NoSuchElementException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JSpinner;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractRenderer_ESTest extends AbstractRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
          DefaultChart defaultChart0 = new DefaultChart(editableChartDataModel0, "", 470);
          Title title0 = defaultChart0.getTitle();
          Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
          // Undeclared exception!
          try { 
            title0.render(graphics2D0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.BufferedImage.<init>(BufferedImage.java:318)
             // de.progra.charting.render.AbstractRenderer.render(AbstractRenderer.java:82)
             // sun.reflect.GeneratedMethodAccessor151.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart((ChartDataModel) null, "", 443);
      Rectangle rectangle0 = defaultChart0.getBounds();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Legend legend0 = new Legend();
      Rectangle rectangle0 = new Rectangle();
      legend0.setBounds(rectangle0);
      Rectangle rectangle1 = legend0.getBounds();
      assertEquals(0, rectangle1.width);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0, "?[ti{oeB~mf(#");
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0, decimalFormat0, true, true, true);
      // Undeclared exception!
      try { 
        coordSystem0.setBounds((Rectangle) null);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      DecimalFormat decimalFormat0 = jSpinner_NumberEditor0.getFormat();
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0, decimalFormat0, true, true, true);
      coordSystem0.setFont((Font) null);
      // Undeclared exception!
      try { 
        coordSystem0.setBounds((Rectangle) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null font passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      Legend legend0 = new Legend();
      // Undeclared exception!
      try { 
        legend0.render(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Legend", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Title title0 = new Title();
      // Undeclared exception!
      try { 
        title0.paintDefault((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Legend legend0 = new Legend();
      Rectangle rectangle0 = legend0.getBounds();
      assertEquals(1.0737418235E9, rectangle0.getCenterY(), 0.01);
      assertEquals(1.0737418235E9, rectangle0.getCenterX(), 0.01);
  }
}

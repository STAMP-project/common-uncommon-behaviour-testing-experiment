/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:53:22 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.image.ImageProducer;
import jigl.image.ROI;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RealGrayImage_ESTest extends RealGrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      int int0 = 732;
      float[] floatArray0 = new float[0];
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage(732, 412, floatArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.addbuffer(0, 0, 0.0F);
      realGrayImage0.median(0);
      ROI rOI0 = new ROI();
      rOI0.setROI((-16777216), 1083, 2210, 503);
      rOI0.setROI(2210, 0, 0, 445);
      // Undeclared exception!
      try { 
        realGrayImage0.divide(0, 0, 1723.4028F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      int int0 = 412;
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      Float float0 = new Float(0.0F);
      float0.floatValue();
      Float float1 = new Float((-429.25F));
      Float float2 = new Float(0.587);
      Float float3 = Float.valueOf(3892.6F);
      float3.floatValue();
      Float float4 = new Float(1.0F);
      float0.floatValue();
      Float float5 = new Float((double) 0.0F);
      float2.floatValue();
      Float float6 = new Float((-399.7843F));
      // Undeclared exception!
      realGrayImage0.clear(float6);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float[] floatArray0 = new float[1];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.divide((-2120.3389F));
      RealGrayImage realGrayImage2 = realGrayImage1.divide(realGrayImage1);
      realGrayImage2.byteSize();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 316);
      realGrayImage0.addbuffer(476, 1, 0, 476, (float) 316);
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI(5076, 5076, 5076, 5076);
      rOI0.uy();
      rOI0.ux();
      Integer integer0 = new Integer(5076);
      rOI0.ly();
      rOI0.ux();
      realGrayImage0.getJavaImage();
      realGrayImage0.X();
      realGrayImage0.divide(1.0F);
      // Undeclared exception!
      try { 
        realGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5076
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      int int0 = 412;
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      int int1 = (-2266);
      ROI rOI0 = new ROI(16, (-2266), (-2266), 1);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 1);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((-3130.3691F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1292.963F);
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.median(0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 920);
      ROI rOI0 = new ROI();
      realGrayImage0.copy();
      rOI0.X();
      rOI0.Y();
      rOI0.setROI(1, 255, 255, 920);
      rOI0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-2628.6257F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.divide((float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int int0 = 412;
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      realGrayImage0.addbuffer(403, 410, 2937, (-1451), 316.0F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = (-172);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((-172), (-172));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = null;
      RealGrayImage realGrayImage1 = null;
      try {
        realGrayImage1 = new RealGrayImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      rOI0.setROI(412, 412, 412, 412);
      rOI0.uy();
      rOI0.setROI(1, 1, 1, 412);
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 412
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int int0 = 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 316);
      int int1 = (-16777216);
      ROI rOI0 = new ROI();
      realGrayImage0.toString(rOI0);
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(316, (-16777216), (-1706), 63, (-3802.819F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.absSum();
      realGrayImage0.toString();
      ROI rOI0 = new ROI();
      realGrayImage0.getJavaImage();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 5076, (-3018), 491, (float) 5076);
      // Undeclared exception!
      try { 
        realGrayImage1.multiply(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(553, 553);
      // Undeclared exception!
      try { 
        realGrayImage0.get(553, 2883);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2883
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1292.963F);
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.getJavaImage();
      ROI rOI0 = new ROI(5076, 5076, 5076, 5076);
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5076
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      ROI rOI0 = new ROI(3308, 255, 224, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(0, 3308, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3308
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.X();
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage2.copy(rOI0);
      RealGrayImage realGrayImage3 = realGrayImage2.addbuffer(1, 412, (-718.0F));
      // Undeclared exception!
      try { 
        realGrayImage3.divide(2363, 1, 2527.413F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2363
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 2400;
      RealGrayImage realGrayImage0 = new RealGrayImage(2400, 2400);
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2400);
      realGrayImage0.multiply((-1302.5394F));
      realGrayImage0.clear();
      ROI rOI0 = new ROI(2, 2400, 2, 73);
      rOI0.setROI(2, 0, 10, 12);
      rOI0.setROI(13, 9, 9, 0);
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-1787), 13, (float) 2400, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1778
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      float[] floatArray0 = new float[5];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.copy();
      int int0 = 3308;
      int int1 = 475;
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(0, (-1148), 0, 0, (float) 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      int int0 = 3308;
      // Undeclared exception!
      realGrayImage0.addbuffer(2374, 851, (-346.555F));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(16, 16);
      realGrayImage0.toString();
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((float) 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(500, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.multiply((float) 500);
      RealGrayImage realGrayImage2 = realGrayImage1.clear();
      realGrayImage2.clear();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      Float float0 = new Float(0.0F);
      float0.floatValue();
      ROI rOI0 = new ROI(274, (-2756), 409, 2580);
      rOI0.ux();
      rOI0.lx();
      ROI rOI1 = new ROI();
      rOI1.uy();
      rOI0.ux();
      rOI0.uy();
      rOI1.setROI(409, 1, 449, 483);
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2756
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      RealGrayImage realGrayImage2 = realGrayImage1.clear();
      RealGrayImage realGrayImage3 = realGrayImage1.divide(realGrayImage2);
      RealGrayImage realGrayImage4 = new RealGrayImage(realGrayImage1);
      realGrayImage4.copy();
      realGrayImage2.subtract(realGrayImage4);
      realGrayImage3.subtract(0.0F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      ROI rOI0 = new ROI(2115, 2115, 944, 944);
      realGrayImage0.getJavaImage();
      rOI0.setROI((-213), 479, 479, (-901));
      rOI0.lx();
      Integer integer0 = new Integer(2115);
      rOI0.ux();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      Float float0 = new Float((float) 944);
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(2115, 479, (float) 479, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -422
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 0.0F);
      realGrayImage0.median(21);
      realGrayImage0.copy();
      ROI rOI0 = new ROI();
      RealGrayImage realGrayImage2 = realGrayImage1.clear();
      // Undeclared exception!
      try { 
        realGrayImage2.subtract(21, 0, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 920);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(920, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      rOI0.setROI(1, 255, 255, 920);
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(666, rOI0.Y());
      assertEquals(255, rOI0.uy());
      assertEquals(920, rOI0.ly());
      
      int int2 = rOI0.X();
      assertEquals(255, rOI0.lx());
      assertEquals(255, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(666, rOI0.Y());
      assertEquals(255, rOI0.uy());
      assertEquals(920, rOI0.ly());
      assertEquals(255, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        realGrayImage0.divide((-2628.6257F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.absSum();
      float float0 = new Float(0.0F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      ROI rOI0 = new ROI(2115, 2115, 2115, 2115);
      realGrayImage0.getJavaImage();
      rOI0.setROI(2115, 2115, 479, 479);
      // Undeclared exception!
      try { 
        realGrayImage0.add((-3355), (-1737), (-2592.2854F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1258
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.uy();
      int int0 = (-16777216);
      rOI0.setROI(0, 0, (-16777216), (-16777216));
      rOI0.setROI(1, 1, 1, 0);
      int int1 = 2927;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 2927);
      int int2 = (-16777216);
      realGrayImage0.toString();
      int int3 = (-9);
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(430, 430);
      Float float0 = new Float((float) 430);
      float0.floatValue();
      Float float1 = new Float((float) 430);
      // Undeclared exception!
      try { 
        realGrayImage0.divide((float) 479);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      float[][] floatArray0 = new float[8][7];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 658.0406F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = 658.0406F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 658.0406F;
      floatArray2[3] = 658.0406F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 1.0F;
      floatArray2[6] = 0.0F;
      floatArray2[7] = 658.0406F;
      floatArray2[8] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = 1.0F;
      floatArray3[1] = 658.0406F;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 1.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 2195.04F;
      floatArray4[1] = 1.0F;
      floatArray4[2] = 658.0406F;
      floatArray4[3] = 658.0406F;
      floatArray4[4] = 0.0F;
      floatArray4[5] = 1.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[6];
      floatArray5[0] = 2195.04F;
      floatArray5[1] = 441.22852F;
      floatArray5[2] = 1.0F;
      floatArray5[3] = 1.0F;
      floatArray5[4] = 1.0F;
      floatArray5[5] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = 2195.04F;
      floatArray6[1] = 658.0406F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray6[4] = 1.0F;
      floatArray6[5] = 2195.04F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[7];
      floatArray7[0] = 441.22852F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = 658.0406F;
      floatArray7[3] = (-1456.3772F);
      floatArray7[4] = 658.0406F;
      floatArray7[5] = 1.0F;
      floatArray7[6] = 1.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = (-1456.3772F);
      floatArray8[1] = 0.0F;
      floatArray8[2] = 658.0406F;
      floatArray8[3] = 441.22852F;
      floatArray8[4] = 0.0F;
      floatArray8[5] = 441.22852F;
      floatArray8[6] = 0.0F;
      floatArray0[7] = floatArray8;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      rOI0.uy();
      ROI rOI1 = new ROI(0, 412, 0, 0);
      rOI0.ux();
      rOI1.lx();
      ROI rOI2 = new ROI();
      rOI2.uy();
      rOI2.ux();
      rOI2.uy();
      rOI0.ly();
      // Undeclared exception!
      try { 
        realGrayImage0.min(rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(500, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 322, 8, (-2575), 32767.0F);
      realGrayImage0.median(0);
      ROI rOI0 = new ROI((-1), 322, 330, 330);
      // Undeclared exception!
      try { 
        realGrayImage1.clip((-2172), 330, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 322
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      int int0 = 2115;
      int int1 = 944;
      ROI rOI0 = new ROI(2115, 2115, 944, 944);
      realGrayImage0.getJavaImage();
      rOI0.setROI(2115, 944, 479, (-213));
      int int2 = 983;
      // Undeclared exception!
      try { 
        realGrayImage0.add((-3355), (-1737), (-2592.2854F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1950
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1292.963F);
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(500, 0, floatArray0);
      realGrayImage0.addbuffer(0, 322, 8, (-2575), 32767.0F);
      realGrayImage0.median(0);
      RealGrayImage realGrayImage1 = new RealGrayImage(0, 0, (float[]) null);
      RealGrayImage realGrayImage2 = realGrayImage1.divide((-2120.3389F));
      // Undeclared exception!
      try { 
        realGrayImage2.add(8, 500, (-1.0F), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(854, 1282);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((RealGrayImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      assertNotNull(realGrayImage0);
      assertEquals(412, realGrayImage0.Y());
      assertEquals(412, realGrayImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      rOI0.setROI(1, 1, 1, 0);
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(412, realGrayImage0.Y());
      assertEquals(412, realGrayImage0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, realGrayImage1.X());
      assertEquals(2, realGrayImage1.Y());
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int3 = realGrayImage0.Y();
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(412, realGrayImage0.Y());
      assertEquals(412, realGrayImage0.X());
      assertEquals(412, int3);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(1, 860, (float) 412, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 860
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.copy();
      realGrayImage0.getJavaImage();
      realGrayImage0.addbuffer(0, 1592, 255.0F);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(0, 0, (-3245.3687F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      int int0 = 397;
      ROI rOI1 = new ROI(1, 397, 1, 419);
      rOI1.ux();
      rOI1.lx();
      rOI0.uy();
      rOI1.ux();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, (float[]) null);
      RealGrayImage realGrayImage1 = realGrayImage0.divide((-2120.3389F));
      // Undeclared exception!
      try { 
        realGrayImage1.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 397
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 0.0F);
      realGrayImage1.getJavaImage();
      int int1 = 0;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage1.subtract(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(16, 16);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply((float) 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      // Undeclared exception!
      try { 
        realGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1976, 0);
      realGrayImage0.getJavaImage();
      // Undeclared exception!
      try { 
        realGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      realGrayImage0.multiply((-1302.5394F));
      RealGrayImage realGrayImage1 = realGrayImage0.clear();
      realGrayImage1.clear();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2400);
      realGrayImage0.getJavaImage();
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 491, 1267, 0, 3638.509F);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(realGrayImage1, (ROI) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      Float float0 = new Float(0.0F);
      float0.floatValue();
      Float float1 = new Float((-429.25F));
      Float float2 = new Float(0.587);
      Float float3 = Float.valueOf(3892.6F);
      float3.floatValue();
      Float float4 = new Float(1.0F);
      float0.floatValue();
      Float float5 = new Float((double) 0.0F);
      float2.floatValue();
      Float float6 = new Float((-399.7843F));
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      rOI0.uy();
      ROI rOI1 = new ROI(5076, 5076, 5076, 5076);
      rOI1.ux();
      rOI1.lx();
      rOI1.uy();
      rOI1.ux();
      rOI1.uy();
      rOI1.ly();
      rOI1.ux();
      rOI1.ux();
      rOI1.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      int int0 = 854;
      RealGrayImage realGrayImage0 = new RealGrayImage(854, 1282);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.setROI((-1939), 854, 854, 1282);
      rOI0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((RealGrayImage) null, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1939
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[1] = (float) 1;
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 1);
      realGrayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      realGrayImage0.absSum();
      Float float0 = new Float(530.3644F);
      float0.floatValue();
      float0.floatValue();
      Float float1 = new Float((double) 530.3644F);
      float1.floatValue();
      ((Float)530.3644F).floatValue();
      Float float2 = new Float((-4656.37));
      Float float3 = new Float(0.0F);
      float3.floatValue();
      Float float4 = new Float((-777.014F));
      float4.floatValue();
      RealGrayImage realGrayImage1 = realGrayImage0.clear((Float) (-777.014F));
      realGrayImage1.absSum();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2400);
      RealGrayImage realGrayImage1 = realGrayImage0.multiply((-1302.5394F));
      RealGrayImage realGrayImage2 = realGrayImage1.divide(realGrayImage0);
      RealGrayImage realGrayImage3 = new RealGrayImage(realGrayImage1);
      realGrayImage2.copy();
      realGrayImage1.subtract(realGrayImage3);
      RealGrayImage realGrayImage4 = null;
      try {
        realGrayImage4 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 412;
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.ly();
      rOI0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.divide((float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      RealGrayImage realGrayImage2 = realGrayImage1.copy(rOI0);
      realGrayImage2.addbuffer(1, 412, (-718.0F));
      // Undeclared exception!
      try { 
        realGrayImage2.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      ROI rOI0 = new ROI(5076, 5076, 5076, 5076);
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5076
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(3308, 3308, (-3245.3687F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3308
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      int int0 = 854;
      RealGrayImage realGrayImage0 = new RealGrayImage(854, 1282);
      RealGrayImage realGrayImage1 = null;
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract((RealGrayImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(430, 430);
      Float float0 = new Float((float) 430);
      ROI rOI0 = new ROI(479, 430, 479, 0);
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      // Undeclared exception!
      try { 
        realGrayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 479
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(311, 0, 311, 0, 316.0F);
      realGrayImage1.median(311);
      realGrayImage0.toString();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(1346.5566F, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.X();
      RealGrayImage realGrayImage1 = realGrayImage0.copy(rOI0);
      realGrayImage1.copy(rOI0);
      RealGrayImage realGrayImage2 = null;
      try {
        realGrayImage2 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(1, 316);
      realGrayImage0.addbuffer(476, 1, 0, 476, (float) 316);
      // Undeclared exception!
      try { 
        realGrayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      Float float0 = new Float(0.0F);
      float0.floatValue();
      Float.max(1.0F, 412);
      float0.floatValue();
      // Undeclared exception!
      try { 
        realGrayImage0.set(412, 483, (Float) 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 483
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      int int0 = 412;
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      Float float0 = new Float(0.0F);
      float0.floatValue();
      Float float1 = new Float((-429.25F));
      Float float2 = new Float((double) 412);
      Float float3 = Float.valueOf(3892.6F);
      float3.floatValue();
      Float float4 = new Float(1.0F);
      float0.floatValue();
      Float float5 = new Float((double) 0.0F);
      float2.floatValue();
      Float float6 = new Float((-399.7843F));
      // Undeclared exception!
      realGrayImage0.clear(float6);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      float[][] floatArray0 = new float[1][3];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1292.963F);
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      realGrayImage0.addbuffer(0, 0, 0, 1306, 1.0F);
      realGrayImage0.median(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(0, (-1286));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2400);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = realGrayImage0.multiply((-1302.5394F));
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(2400, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.clear();
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(2400, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      
      realGrayImage2.clear();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 0.0F);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(imageProducer0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      realGrayImage0.median(0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      float float0 = 1723.4028F;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI((-16777216), 1083, 2210, 503);
      assertEquals(581, rOI0.Y());
      assertEquals(2210, rOI0.lx());
      assertEquals(16779427, rOI0.X());
      assertEquals(503, rOI0.uy());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(1083, rOI0.ly());
      
      rOI0.setROI(2210, 0, 0, 445);
      assertEquals(2210, rOI0.lx());
      assertEquals(2211, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(445, rOI0.ly());
      assertEquals(446, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage1.divide(realGrayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0, floatArray0.length);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, float0, 0.01F);
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, floatArray0.length);
      assertNotNull(string0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals("0:0\n", string0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray0.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      int int0 = 0;
      rOI0.setROI(86, (-3018), 0, 5076);
      assertEquals(8095, rOI0.Y());
      assertEquals((-3018), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(5076, rOI0.ly());
      assertEquals(86, rOI0.lx());
      assertEquals(87, rOI0.X());
      
      // Undeclared exception!
      try { 
        realGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3018
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      float[][] floatArray0 = new float[1][9];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      float float0 = 778.0F;
      floatArray1[1] = 778.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 3039.48F;
      floatArray1[5] = (-200.0F);
      floatArray1[6] = (-1.0F);
      floatArray0[0] = floatArray1;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 430;
      RealGrayImage realGrayImage0 = new RealGrayImage(430, 430);
      assertNotNull(realGrayImage0);
      assertEquals(430, realGrayImage0.Y());
      assertEquals(430, realGrayImage0.X());
      
      // Undeclared exception!
      realGrayImage0.clear();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      int int0 = 0;
      int int1 = 2400;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2400);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.multiply((-1302.5394F));
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(2400, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      int int2 = 51;
      int int3 = (-16777216);
      float float0 = (-1.0F);
      realGrayImage1.addbuffer(int2, int1, int3, int0, float0);
      RealGrayImage realGrayImage2 = realGrayImage0.clear();
      realGrayImage2.clear();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      Float float0 = new Float((float) 479);
      assertNotNull(float0);
      assertEquals(479.0F, (float)float0, 0.01F);
      
      float float1 = float0.floatValue();
      assertEquals(479.0F, float1, 0.01F);
      
      Float float2 = new Float(2426.2495F);
      assertNotNull(float2);
      assertEquals(2426.2495F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.divide(479.0F);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage0.copy();
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotNull(realGrayImage2);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage3 = realGrayImage2.addbuffer(0, 0, (-3306.4927F));
      assertSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage0, realGrayImage3);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotNull(realGrayImage3);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      
      ROI rOI0 = new ROI(479, 479, 1425, 479);
      assertNotNull(rOI0);
      assertEquals(947, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1425, rOI0.lx());
      assertEquals(479, rOI0.ly());
      assertEquals(479, rOI0.uy());
      assertEquals(479, rOI0.ux());
      
      // Undeclared exception!
      try { 
        realGrayImage2.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 479
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int int0 = 0;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(0, 5681, (float[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      float[] floatArray0 = new float[1];
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(imageProducer0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      float float0 = realGrayImage0.absSum();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(500, 0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(500, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 322, 8, (-2575), 32767.0F);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(500, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(322, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      realGrayImage0.median(0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(500, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage1.clip((-2172), 327, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 1934.9F;
      floatArray0[2] = (-1292.963F);
      floatArray0[3] = (-1292.963F);
      floatArray0[4] = (-1292.963F);
      floatArray0[5] = (-1292.963F);
      floatArray0[6] = (-1292.963F);
      floatArray0[7] = (-1292.963F);
      floatArray0[8] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1934.9F, (-1292.963F), (-1292.963F), (-1292.963F), (-1292.963F), (-1292.963F), (-1292.963F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      realGrayImage0.median(1);
      assertEquals(9, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 1934.9F, (-1292.963F), (-1292.963F), (-1292.963F), (-1292.963F), (-1292.963F), (-1292.963F), 0.0F}, floatArray0, 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      float[][] floatArray0 = new float[9][6];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1068.2046F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-1068.2046F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = (-1068.2046F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = (-1068.2046F);
      floatArray3[3] = (-1068.2046F);
      floatArray3[4] = 1.0F;
      floatArray3[5] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 1.0F;
      floatArray4[1] = (-1068.2046F);
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-1068.2046F);
      floatArray4[4] = 1250.0294F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[4];
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = (-1068.2046F);
      floatArray5[1] = 1.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = 1250.0294F;
      floatArray6[1] = (-1068.2046F);
      floatArray6[2] = (-1068.2046F);
      floatArray6[3] = 1250.0294F;
      floatArray6[4] = 1250.0294F;
      floatArray6[5] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[9];
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray2));
      
      floatArray7[0] = 0.0F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = (-1280.0059F);
      floatArray7[3] = 1.0F;
      floatArray7[4] = 1.0F;
      floatArray7[5] = (-1068.2046F);
      floatArray7[6] = 0.0F;
      floatArray7[7] = 2821.4739F;
      floatArray7[8] = 0.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[1];
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray2));
      
      floatArray8[0] = 2821.4739F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[8];
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray5));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray8));
      
      floatArray9[0] = (-1068.2046F);
      floatArray9[1] = 0.0F;
      floatArray9[2] = 0.0F;
      floatArray9[3] = 0.0F;
      floatArray9[4] = 1250.0294F;
      floatArray9[5] = (-1280.0059F);
      floatArray9[6] = 0.0F;
      floatArray9[7] = 0.0F;
      floatArray0[8] = floatArray9;
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1292.963F);
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1292.963F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      int int1 = 1310;
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1292.963F), 0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      realGrayImage1.addbuffer(434, 1310, (-1292.963F));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = 0.0F;
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      realGrayImage0.median(0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float[][] floatArray0 = new float[0][5];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      int int0 = 2115;
      int int1 = 944;
      ROI rOI0 = new ROI(2115, 2115, 944, 944);
      assertNotNull(rOI0);
      assertEquals(944, rOI0.uy());
      assertEquals(944, rOI0.ux());
      assertEquals(2115, rOI0.ly());
      assertEquals(2115, rOI0.lx());
      assertEquals(1172, rOI0.Y());
      assertEquals(1172, rOI0.X());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray0.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      int int2 = 2297;
      rOI0.setROI(944, 2115, 983, 2297);
      assertEquals(944, rOI0.ux());
      assertEquals(983, rOI0.lx());
      assertEquals(40, rOI0.X());
      assertEquals(183, rOI0.Y());
      assertEquals(2115, rOI0.uy());
      assertEquals(2297, rOI0.ly());
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2115
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(16, 16, 7, 7, (float) 7);
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage1.X());
      assertEquals(16, realGrayImage1.Y());
      assertEquals(1792.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(7.0F, realGrayImage1.min(), 0.01F);
      assertEquals(7.0F, realGrayImage1.max(), 0.01F);
      assertEquals(12544.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1792.0F, realGrayImage1.addSum(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotNull(string0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals("0:0\n", string0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotNull(imageProducer0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      int int0 = realGrayImage0.Y();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, int0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      double double0 = realGrayImage0.sqrSum();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, double0, 0.01);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(82, 0);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(82, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ROI rOI0 = new ROI((-1650), (-523), 82, (-1650));
      assertNotNull(rOI0);
      assertEquals((-523), rOI0.ly());
      assertEquals((-1650), rOI0.uy());
      assertEquals(1733, rOI0.X());
      assertEquals((-1650), rOI0.ux());
      assertEquals(1128, rOI0.Y());
      assertEquals(82, rOI0.lx());
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(82, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(82, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage0.addbuffer(0, 1, 232, 443, (float) 232);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(82, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(1, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.multiply(realGrayImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1650
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 412;
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      assertNotNull(realGrayImage0);
      assertEquals(412, realGrayImage0.Y());
      assertEquals(412, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, 8, 47, (float) 8);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(412, realGrayImage0.Y());
      assertEquals(412, realGrayImage0.X());
      assertEquals(8.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(64.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(8.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(8.0F, realGrayImage1.max(), 0.01F);
      assertEquals(8.0F, realGrayImage1.min(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      realGrayImage0.median(8);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 7626;
      RealGrayImage realGrayImage0 = new RealGrayImage(7626, 430);
      assertNotNull(realGrayImage0);
      assertEquals(430, realGrayImage0.Y());
      assertEquals(7626, realGrayImage0.X());
      
      // Undeclared exception!
      realGrayImage0.addbuffer(7626, 2366, 430, 2495, (float) 430);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      assertNotNull(realGrayImage0);
      assertEquals(412, realGrayImage0.X());
      assertEquals(412, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(475, 412, 412, (-1));
      assertNotNull(rOI0);
      assertEquals(412, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(412, rOI0.ly());
      assertEquals(64, rOI0.X());
      assertEquals(475, rOI0.lx());
      assertEquals(414, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertEquals(0, floatArray0.length);
      assertNotNull(imageProducer0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.copy();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      String string0 = realGrayImage0.toString();
      assertEquals(0, floatArray0.length);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotNull(string0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals("0:0\n", string0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 2400);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      float[] floatArray0 = new float[0];
      realGrayImage0.median(464);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(2400, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      assertNotNull(realGrayImage0);
      assertEquals(412, realGrayImage0.X());
      assertEquals(412, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      ROI rOI1 = new ROI(5076, 5076, 5076, 5076);
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int4 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      
      int int5 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      
      int int6 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int6);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      
      int int7 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int7 == int2);
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      
      int int8 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int8);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int8 == int4);
      assertTrue(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertTrue(int8 == int7);
      assertFalse(int8 == int0);
      assertTrue(int8 == int6);
      assertFalse(int8 == int1);
      
      int int9 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int9);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int9 == int7);
      assertFalse(int9 == int2);
      assertTrue(int9 == int5);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertTrue(int9 == int4);
      assertTrue(int9 == int6);
      assertTrue(int9 == int8);
      assertFalse(int9 == int3);
      
      int int10 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int10);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int10 == int2);
      assertTrue(int10 == int8);
      assertTrue(int10 == int7);
      assertTrue(int10 == int6);
      assertFalse(int10 == int0);
      assertTrue(int10 == int5);
      assertFalse(int10 == int1);
      assertFalse(int10 == int3);
      assertTrue(int10 == int9);
      assertTrue(int10 == int4);
      
      rOI0.setROI(5076, 5076, (-2326), 5076);
      assertNotSame(rOI0, rOI1);
      assertEquals(7403, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(5076, rOI0.uy());
      assertEquals((-2326), rOI0.ux());
      assertEquals(5076, rOI0.ly());
      assertEquals(5076, rOI0.lx());
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int11 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(7403, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(5076, rOI0.uy());
      assertEquals((-2326), rOI0.ux());
      assertEquals(5076, rOI0.ly());
      assertEquals(5076, rOI0.lx());
      assertEquals(5076, int11);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int11 == int8);
      assertFalse(int11 == int0);
      assertFalse(int11 == int3);
      assertTrue(int11 == int9);
      assertFalse(int11 == int1);
      assertTrue(int11 == int6);
      assertTrue(int11 == int7);
      assertTrue(int11 == int5);
      assertTrue(int11 == int10);
      assertTrue(int11 == int4);
      assertFalse(int11 == int2);
      
      int int12 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(5076, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(5076, rOI1.uy());
      assertEquals(5076, rOI1.lx());
      assertEquals(5076, rOI1.ly());
      assertEquals(5076, int12);
      assertFalse(int12 == int1);
      assertTrue(int12 == int11);
      assertTrue(int12 == int8);
      assertTrue(int12 == int5);
      assertFalse(int12 == int0);
      assertTrue(int12 == int7);
      assertTrue(int12 == int10);
      assertTrue(int12 == int6);
      assertFalse(int12 == int2);
      assertTrue(int12 == int4);
      assertFalse(int12 == int3);
      assertTrue(int12 == int9);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        realGrayImage0.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5076
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(412, 412);
      assertNotNull(realGrayImage0);
      assertEquals(412, realGrayImage0.X());
      assertEquals(412, realGrayImage0.Y());
      
      ROI rOI0 = new ROI(412, (-2391), 1, 412);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.ux());
      assertEquals(412, rOI0.X());
      assertEquals(412, rOI0.lx());
      assertEquals((-2391), rOI0.uy());
      assertEquals(412, rOI0.ly());
      assertEquals(2804, rOI0.Y());
      
      // Undeclared exception!
      try { 
        realGrayImage0.addbuffer(2506, (-2835), (float) (-2835));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage1.copy();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(imageProducer0);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage3);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage4 = realGrayImage3.divide((-2120.3389F));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage5 = realGrayImage4.copy();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage5);
      assertSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotNull(realGrayImage5);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage6 = realGrayImage4.clear();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage6);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage5);
      assertSame(realGrayImage4, realGrayImage3);
      assertSame(realGrayImage4, realGrayImage6);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertSame(realGrayImage6, realGrayImage4);
      assertSame(realGrayImage6, realGrayImage3);
      assertNotSame(realGrayImage6, realGrayImage1);
      assertNotSame(realGrayImage6, realGrayImage0);
      assertNotSame(realGrayImage6, realGrayImage5);
      assertNotSame(realGrayImage6, realGrayImage2);
      assertNotNull(realGrayImage6);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0F, realGrayImage6.absSum(), 0.01F);
      assertEquals(0, realGrayImage6.Y());
      assertEquals(32767.0F, realGrayImage6.min(), 0.01F);
      assertEquals(0.0, realGrayImage6.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage6.max(), 0.01F);
      assertEquals(0.0F, realGrayImage6.addSum(), 0.01F);
      assertEquals(0, realGrayImage6.X());
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage5));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage6.equals((Object)realGrayImage1));
      assertFalse(realGrayImage6.equals((Object)realGrayImage0));
      assertFalse(realGrayImage6.equals((Object)realGrayImage5));
      assertFalse(realGrayImage6.equals((Object)realGrayImage2));
      
      RealGrayImage realGrayImage7 = realGrayImage5.divide(realGrayImage4);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage3, realGrayImage5);
      assertSame(realGrayImage3, realGrayImage4);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage6);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage7);
      assertNotSame(realGrayImage4, realGrayImage5);
      assertNotSame(realGrayImage4, realGrayImage7);
      assertSame(realGrayImage4, realGrayImage3);
      assertSame(realGrayImage4, realGrayImage6);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertSame(realGrayImage5, realGrayImage7);
      assertNotSame(realGrayImage5, realGrayImage3);
      assertNotSame(realGrayImage5, realGrayImage2);
      assertNotSame(realGrayImage5, realGrayImage4);
      assertNotSame(realGrayImage5, realGrayImage1);
      assertNotSame(realGrayImage5, realGrayImage6);
      assertNotSame(realGrayImage5, realGrayImage0);
      assertNotSame(realGrayImage7, realGrayImage6);
      assertNotSame(realGrayImage7, realGrayImage1);
      assertNotSame(realGrayImage7, realGrayImage0);
      assertNotSame(realGrayImage7, realGrayImage2);
      assertNotSame(realGrayImage7, realGrayImage4);
      assertSame(realGrayImage7, realGrayImage5);
      assertNotSame(realGrayImage7, realGrayImage3);
      assertNotNull(realGrayImage7);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0, realGrayImage3.X());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0, realGrayImage5.Y());
      assertEquals(0, realGrayImage5.X());
      assertEquals(0.0F, realGrayImage5.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage5.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage5.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage5.max(), 0.01F);
      assertEquals(0.0, realGrayImage5.sqrSum(), 0.01);
      assertEquals(0, realGrayImage7.X());
      assertEquals(0, realGrayImage7.Y());
      assertEquals(0.0F, realGrayImage7.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage7.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage7.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage7.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage7.max(), 0.01F);
      assertFalse(realGrayImage3.equals((Object)realGrayImage5));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage5));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage3));
      assertFalse(realGrayImage5.equals((Object)realGrayImage2));
      assertFalse(realGrayImage5.equals((Object)realGrayImage4));
      assertFalse(realGrayImage5.equals((Object)realGrayImage1));
      assertFalse(realGrayImage5.equals((Object)realGrayImage6));
      assertFalse(realGrayImage5.equals((Object)realGrayImage0));
      assertFalse(realGrayImage7.equals((Object)realGrayImage6));
      assertFalse(realGrayImage7.equals((Object)realGrayImage1));
      assertFalse(realGrayImage7.equals((Object)realGrayImage0));
      assertFalse(realGrayImage7.equals((Object)realGrayImage2));
      assertFalse(realGrayImage7.equals((Object)realGrayImage4));
      assertFalse(realGrayImage7.equals((Object)realGrayImage3));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      float[] floatArray0 = new float[1];
      floatArray0[0] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage1);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(imageProducer0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage2);
      assertEquals(0, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage3 = realGrayImage2.divide((-2120.3389F));
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotNull(realGrayImage3);
      assertEquals(0, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage4 = realGrayImage3.copy();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertNotNull(realGrayImage4);
      assertEquals(0, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
      
      float float0 = realGrayImage4.absSum();
      assertEquals(1, floatArray0.length);
      assertArrayEquals(new float[] {0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage2, realGrayImage4);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage3);
      assertNotSame(realGrayImage3, realGrayImage4);
      assertSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage3);
      assertNotSame(realGrayImage4, realGrayImage0);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertNotSame(realGrayImage4, realGrayImage1);
      assertEquals(0, realGrayImage2.X());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0, realGrayImage4.X());
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(realGrayImage2.equals((Object)realGrayImage4));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage0));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertFalse(realGrayImage4.equals((Object)realGrayImage1));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      float[][] floatArray0 = new float[0][3];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      float float0 = realGrayImage0.absSum();
      assertEquals(0, floatArray0.length);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, float0, 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int4);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      ROI rOI1 = new ROI(0, 0, 1, 0);
      assertNotNull(rOI1);
      assertEquals(2, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int5 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(2, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      
      int int6 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int6);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int6 == int0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      
      int int7 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(2, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, int7);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      
      int int8 = new Integer(0);
      assertEquals(0, int8);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertFalse(int8 == int2);
      assertTrue(int8 == int7);
      assertTrue(int8 == int6);
      assertTrue(int8 == int4);
      assertFalse(int8 == int1);
      
      int int9 = 923;
      rOI1.setROI(923, 0, 1, (-1));
      assertNotSame(rOI1, rOI0);
      assertEquals(923, rOI1.lx());
      assertEquals(2, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(923, rOI1.X());
      assertEquals((-1), rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int10 = rOI0.lx();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int10);
      assertFalse(int10 == int2);
      assertTrue(int10 == int3);
      assertFalse(int10 == int1);
      assertTrue(int10 == int7);
      assertFalse(int10 == int0);
      assertTrue(int10 == int6);
      assertTrue(int10 == int5);
      assertTrue(int10 == int8);
      assertFalse(int10 == int9);
      assertTrue(int10 == int4);
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int11 = new Integer(1);
      assertEquals(1, int11);
      assertFalse(int11 == int6);
      assertFalse(int11 == int7);
      assertFalse(int11 == int9);
      assertTrue(int11 == int1);
      assertFalse(int11 == int3);
      assertTrue(int11 == int2);
      assertFalse(int11 == int10);
      assertFalse(int11 == int8);
      assertTrue(int11 == int0);
      assertFalse(int11 == int4);
      assertFalse(int11 == int5);
      
      int int12 = rOI0.ux();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int12);
      assertFalse(int12 == int9);
      assertFalse(int12 == int0);
      assertTrue(int12 == int3);
      assertFalse(int12 == int1);
      assertTrue(int12 == int6);
      assertTrue(int12 == int10);
      assertTrue(int12 == int7);
      assertFalse(int12 == int2);
      assertFalse(int12 == int11);
      assertTrue(int12 == int4);
      assertTrue(int12 == int5);
      assertTrue(int12 == int8);
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int13 = rOI0.uy();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int13);
      assertFalse(int13 == int0);
      assertTrue(int13 == int10);
      assertFalse(int13 == int11);
      assertFalse(int13 == int9);
      assertTrue(int13 == int7);
      assertTrue(int13 == int3);
      assertFalse(int13 == int1);
      assertTrue(int13 == int12);
      assertTrue(int13 == int8);
      assertTrue(int13 == int5);
      assertTrue(int13 == int4);
      assertFalse(int13 == int2);
      assertTrue(int13 == int6);
      assertFalse(rOI0.equals((Object)rOI1));
      
      int int14 = rOI0.ly();
      assertNotSame(rOI0, rOI1);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, int14);
      assertFalse(rOI0.equals((Object)rOI1));
      assertTrue(int14 == int6);
      assertTrue(int14 == int10);
      assertFalse(int14 == int2);
      assertFalse(int14 == int9);
      assertTrue(int14 == int8);
      assertTrue(int14 == int13);
      assertFalse(int14 == int1);
      assertTrue(int14 == int3);
      assertTrue(int14 == int5);
      assertTrue(int14 == int7);
      assertTrue(int14 == int12);
      assertFalse(int14 == int0);
      assertFalse(int14 == int11);
      assertTrue(int14 == int4);
      
      int int15 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(923, rOI1.lx());
      assertEquals(2, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(923, rOI1.X());
      assertEquals((-1), rOI1.uy());
      assertEquals(1, rOI1.ux());
      assertEquals(1, int15);
      assertTrue(int15 == int2);
      assertFalse(int15 == int4);
      assertFalse(int15 == int13);
      assertFalse(int15 == int7);
      assertTrue(int15 == int0);
      assertTrue(int15 == int11);
      assertFalse(int15 == int3);
      assertFalse(int15 == int5);
      assertFalse(int15 == int8);
      assertFalse(int15 == int14);
      assertFalse(int15 == int9);
      assertFalse(int15 == int6);
      assertFalse(int15 == int12);
      assertFalse(int15 == int10);
      assertTrue(int15 == int1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      float float1 = new Float((float) 0);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
      
      // Undeclared exception!
      try { 
        realGrayImage0.subtract(0, (-1), (float) 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (-1292.963F);
      floatArray0[2] = (float) 0;
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0, floatArray0);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1292.963F), 0.0F}, floatArray0, 0.01F);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 1310, (float) 1310);
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1292.963F), 0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1310, realGrayImage1.Y());
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      int int0 = realGrayImage0.Y();
      assertEquals(3, floatArray0.length);
      assertArrayEquals(new float[] {0.0F, (-1292.963F), 0.0F}, floatArray0, 0.01F);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, int0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      float[][] floatArray0 = new float[12][3];
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 0);
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertNotNull(realGrayImage1);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      RealGrayImage realGrayImage2 = realGrayImage0.multiply(1.0F);
      assertSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertNotNull(realGrayImage2);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      
      RealGrayImage realGrayImage3 = realGrayImage0.clear();
      assertSame(realGrayImage0, realGrayImage2);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage3);
      assertSame(realGrayImage3, realGrayImage2);
      assertSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotNull(realGrayImage3);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:20:24 GMT 2019
 */

package net.virtualinfinity.atrobots.arena;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.virtualinfinity.atrobots.arena.Explosion;
import net.virtualinfinity.atrobots.arena.LinearDamageFunction;
import net.virtualinfinity.atrobots.arena.Position;
import net.virtualinfinity.atrobots.arena.TangibleArenaObject;
import net.virtualinfinity.atrobots.arenaobjects.DamageInflicter;
import net.virtualinfinity.atrobots.hardware.mines.Mine;
import net.virtualinfinity.atrobots.measures.Vector;
import net.virtualinfinity.atrobots.robot.Robot;
import net.virtualinfinity.atrobots.robot.RobotScoreKeeper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExplosionFunction_ESTest extends ExplosionFunction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Position position0 = mock(Position.class, new ViolatedAssumptionAnswer());
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 0.0, 3092.19);
      double double0 = linearDamageFunction0.getRadius();
      assertEquals(3092.19, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Vector vector0 = Vector.createCartesian(719.401985107, 719.401985107);
      Position position0 = new Position(vector0);
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 0.0, 719.401985107);
      Explosion explosion0 = new Explosion(vector0, (-231.85723797313));
      double double0 = linearDamageFunction0.getDamageAmount(explosion0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Vector vector0 = Vector.createCartesian(719.401985107, 719.401985107);
      Position position0 = new Position(vector0);
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 0.0, 719.401985107);
      Vector vector1 = linearDamageFunction0.getCenter();
      assertSame(vector1, vector0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Position position0 = mock(Position.class, new ViolatedAssumptionAnswer());
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 0.0, 3092.19);
      RobotScoreKeeper robotScoreKeeper0 = new RobotScoreKeeper();
      Robot robot0 = new Robot("S|7n{`7ND+t89eA", 1640, robotScoreKeeper0);
      // Undeclared exception!
      try { 
        linearDamageFunction0.inflictDamage((DamageInflicter) null, robot0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Position position0 = mock(Position.class, new ViolatedAssumptionAnswer());
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, (-11.869700750728738), (-11.869700750728738));
      Mine mine0 = new Mine((DamageInflicter) null);
      // Undeclared exception!
      try { 
        linearDamageFunction0.getDamageAmount(mine0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.Position", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction((Position) null, 2.714057435535045, 2.714057435535045);
      // Undeclared exception!
      try { 
        linearDamageFunction0.getCenter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.virtualinfinity.atrobots.arena.LinearDamageFunction", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Position position0 = mock(Position.class, new ViolatedAssumptionAnswer());
      doReturn(3122.694939601).when(position0).getX();
      doReturn(3122.694939601).when(position0).getY();
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, (-11.869700750728738), (-11.869700750728738));
      Position position1 = Position.random(0.04, 0.04, 0.04, 0.04);
      TangibleArenaObject tangibleArenaObject0 = mock(TangibleArenaObject.class, new ViolatedAssumptionAnswer());
      doReturn(position1).when(tangibleArenaObject0).getPosition();
      linearDamageFunction0.inflictDamage((DamageInflicter) null, tangibleArenaObject0);
      assertEquals((-11.869700750728738), linearDamageFunction0.getRadius(), 0.01);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Position position0 = mock(Position.class, new ViolatedAssumptionAnswer());
      doReturn(817742.9445186411).when(position0).getX();
      doReturn(817742.9445186411).when(position0).getY();
      LinearDamageFunction linearDamageFunction0 = new LinearDamageFunction(position0, 0.0, 817742.9445186411);
      Position position1 = Position.random(0.0, 0.0, 817742.9445186411, 0.0);
      TangibleArenaObject tangibleArenaObject0 = mock(TangibleArenaObject.class, new ViolatedAssumptionAnswer());
      doReturn(position1).when(tangibleArenaObject0).getPosition();
      linearDamageFunction0.inflictDamage((DamageInflicter) null, tangibleArenaObject0);
      assertEquals(817742.9445186411, linearDamageFunction0.getRadius(), 0.01);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 14:35:26 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.ImageKernel;
import jigl.image.types.InterpolatedGrayImage;
import jigl.image.types.KernelType;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      binaryImage0.count();
      Byte byte0 = Byte.valueOf((byte) (-70));
      binaryImage0.set(0, 0, byte0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.max();
      binaryImage0.toString();
      BinaryImage binaryImage1 = binaryImage0.shift((-1363), (-1));
      binaryImage0.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      byte[][] byteArray0 = new byte[0][9];
      BinaryImage binaryImage1 = new BinaryImage(byteArray0);
      // Undeclared exception!
      try { 
        binaryImage0.union(binaryImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-1238), 1429, (byte[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(2137, 2137);
      // Undeclared exception!
      binaryImage1.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.max();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-118);
      byteArray0[1] = (byte) (-34);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(10, 10, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.Y();
      Byte byte0 = new Byte((byte) (-114));
      Byte byte1 = Byte.valueOf((byte)35);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 0, byte1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[][] byteArray0 = new byte[3][1];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      KernelType kernelType0 = KernelType.UNSHARP;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageKernel0.multiply((-1634.5F));
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.toString();
      BinaryImage binaryImage1 = new BinaryImage();
      binaryImage0.min();
      binaryImage0.difference(binaryImage1);
      binaryImage1.max();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-82);
      byteArray0[1] = (byte) (-65);
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      assertArrayEquals(new byte[] {(byte) (-82), (byte) (-65)}, byteArray0);
      
      ComplexImage complexImage0 = new ComplexImage(32767, 1122);
      assertEquals(1122, complexImage0.Y());
      assertEquals(32767, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertEquals(1122, complexImage0.Y());
      assertEquals(32767, complexImage0.X());
      assertEquals(1122, realGrayImage0.Y());
      assertEquals(32767, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      ImageKernel imageKernel0 = new ImageKernel(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(16, (-1694));
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      String string0 = binaryImage1.toString();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(string0);
      
      BinaryImage binaryImage2 = binaryImage0.shift(16, 16);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = new BinaryImage(16, 16);
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertNotNull(binaryImage3);
      
      BinaryImage binaryImage4 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.X());
      assertEquals(0, binaryImage4.count());
      assertEquals(0, binaryImage4.Y());
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertNotNull(binaryImage4);
      
      BinaryImage binaryImage5 = binaryImage3.intersection(binaryImage2);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(16, binaryImage5.Y());
      assertEquals(16, binaryImage5.X());
      assertEquals(0, binaryImage5.count());
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertNotNull(binaryImage5);
      
      Byte byte0 = binaryImage5.min();
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(16, binaryImage5.Y());
      assertEquals(16, binaryImage5.X());
      assertEquals(0, binaryImage5.count());
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      int int0 = binaryImage5.X();
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage2, binaryImage5);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, binaryImage4);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage4);
      assertSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage0);
      assertSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(16, binaryImage5.Y());
      assertEquals(16, binaryImage5.X());
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      Byte byte0 = new Byte((byte) (-35));
      assertNotNull(byte0);
      assertEquals((byte) (-35), (byte)byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-35), 1333, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[][] byteArray0 = new byte[2][6];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-47);
      byteArray1[1] = (byte) (-47);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[13];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-106);
      byteArray2[1] = (byte)0;
      byteArray2[2] = (byte) (-47);
      byteArray2[3] = (byte) (-47);
      byteArray2[4] = (byte) (-106);
      byteArray2[5] = (byte) (-106);
      byteArray2[6] = (byte) (-47);
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1, 1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      Byte byte0 = binaryImage0.min();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, binaryImage0.X());
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      Image image0 = binaryImage0.copy();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotNull(image0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotNull(imageProducer0);
      
      BinaryImage binaryImage1 = binaryImage0.union((BinaryImage) null);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertNotNull(binaryImage1);
      
      byte byte0 = (byte) (-84);
      Byte byte1 = Byte.valueOf((byte) (-84));
      assertNotNull(byte1);
      assertEquals((byte) (-84), (byte)byte1);
      
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(byteArray0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(16, 16);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage1.union(binaryImage0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(16, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(16, binaryImage2.Y());
      assertNotNull(binaryImage2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      Byte byte0 = Byte.valueOf((byte) (-74));
      assertNotNull(byte0);
      assertEquals((byte) (-74), (byte)byte0);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      int int0 = binaryImage1.X();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, int0);
      
      Byte byte0 = new Byte((byte)115);
      assertNotNull(byte0);
      assertEquals((byte)115, (byte)byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte)115, byte1);
      
      ROI rOI0 = new ROI(3773, 0, 3773, 3773);
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ux();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(3773, int1);
      
      int int2 = rOI0.lx();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3773, int2);
      
      int int3 = rOI0.uy();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(3773, int4);
      
      int int5 = rOI0.ux();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(3773, int5);
      
      int int6 = rOI0.lx();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int6 == int5);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertEquals(3773, int6);
      
      int int7 = rOI0.ux();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertEquals(3773, int7);
      
      int int8 = rOI0.lx();
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int3);
      assertTrue(int8 == int6);
      assertEquals(3773, int8);
      
      // Undeclared exception!
      try { 
        binaryImage0.set(0, 0, (Byte) (byte)115, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(imageProducer0);
      
      Byte[][] byteArray0 = binaryImage1.getData();
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(1, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(1, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(imageProducer0);
      
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage((InterpolatedGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-121);
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte) (-21);
      byteArray0[3] = (byte)63;
      byteArray0[4] = (byte)34;
      byteArray0[5] = (byte) (-25);
      byteArray0[6] = (byte)34;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(16, 16, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      // Undeclared exception!
      try { 
        binaryImage1.get(2046, 2021);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
      
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      ROI rOI0 = new ROI(3773, 0, 3773, 3773);
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertEquals(3773, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(3773, int1);
      
      int int2 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(3773, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(3773, int4);
      
      int int5 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertEquals(3773, int5);
      
      int int6 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertEquals(3773, int6);
      
      int int7 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(3773, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(3773, rOI0.ly());
      assertEquals(3773, rOI0.lx());
      assertEquals(3774, rOI0.Y());
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertFalse(int7 == int2);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertEquals(3773, int7);
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      KernelType kernelType0 = KernelType.LAPLACIAN_8;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(72.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(16.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals((-8.0F), imageKernel0.min(), 0.01F);
      assertEquals(1.0F, imageKernel0.max(), 0.01F);
      assertNotNull(imageKernel0);
      
      RealGrayImage realGrayImage0 = imageKernel0.multiply((float) (byte)0);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(realGrayImage0, imageKernel0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(3, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0F, imageKernel0.max(), 0.01F);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      String string0 = binaryImage0.toString();
      assertSame(imageKernel0, realGrayImage0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0F, imageKernel0.max(), 0.01F);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertNotNull(string0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(2681, 3773);
      assertSame(imageKernel0, realGrayImage0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0F, imageKernel0.max(), 0.01F);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(3, binaryImage1.Y());
      assertEquals(3, binaryImage1.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
      
      byte[][] byteArray1 = new byte[5][1];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      Image image0 = binaryImage0.copy(rOI0);
      assertSame(imageKernel0, realGrayImage0);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
      assertEquals(0.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(3, imageKernel0.X());
      assertEquals(3, imageKernel0.Y());
      assertEquals(0.0F, imageKernel0.min(), 0.01F);
      assertEquals(0.0F, imageKernel0.max(), 0.01F);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.Y());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, image0.X());
      assertEquals(1, image0.Y());
      assertNotNull(image0);
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte)0, byte1);
      
      Byte byte2 = Byte.valueOf((byte)7);
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte)7, (byte)byte2);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(16, 16);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      Byte byte0 = new Byte((byte)1);
      assertNotNull(byte0);
      assertEquals((byte)1, (byte)byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte)1, byte1);
      
      Byte byte2 = new Byte((byte) (-114));
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertNotNull(byte2);
      assertEquals((byte) (-114), (byte)byte2);
      
      byte byte3 = byte2.byteValue();
      assertFalse(byte2.equals((Object)byte0));
      assertFalse(byte2.equals((Object)byte1));
      assertFalse(byte3 == byte1);
      assertEquals((byte) (-114), byte3);
      
      byte byte4 = ((Byte)(byte) (-114)).byteValue();
      assertTrue(byte4 == byte3);
      assertFalse(byte4 == byte1);
      assertEquals((byte) (-114), byte4);
      
      binaryImage1.set((int) (byte)9, 5, byte0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(1, binaryImage1.count());
      assertEquals(16, binaryImage1.X());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertFalse(byte0.equals((Object)byte3));
      assertTrue(byte0.equals((Object)byte1));
      assertFalse(byte0.equals((Object)byte2));
      assertFalse(byte0.equals((Object)byte4));
      
      BinaryImage binaryImage2 = new BinaryImage();
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotNull(binaryImage2);
      
      int int0 = binaryImage2.Y();
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertEquals(0, int0);
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertEquals(16, binaryImage0.X());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertNotNull(imageProducer0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(16, (-1694));
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage1.X());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.shift(16, 16);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = new BinaryImage(16, 16);
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertNotNull(binaryImage3);
      
      BinaryImage binaryImage4 = binaryImage3.shift((-6), (-6));
      assertSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage0);
      assertSame(binaryImage4, binaryImage3);
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(16, binaryImage4.Y());
      assertEquals(16, binaryImage4.X());
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertNotNull(binaryImage4);
      
      BinaryImage binaryImage5 = binaryImage0.shift(128, (-1484));
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage1);
      assertSame(binaryImage5, binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals(0, binaryImage5.count());
      assertEquals(16, binaryImage5.Y());
      assertEquals(16, binaryImage5.X());
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertNotNull(binaryImage5);
      
      BinaryImage binaryImage6 = binaryImage2.difference(binaryImage3);
      assertNotSame(binaryImage0, binaryImage3);
      assertSame(binaryImage0, binaryImage6);
      assertSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage4);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage5);
      assertSame(binaryImage2, binaryImage6);
      assertNotSame(binaryImage3, binaryImage5);
      assertSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage6);
      assertNotSame(binaryImage6, binaryImage4);
      assertSame(binaryImage6, binaryImage0);
      assertNotSame(binaryImage6, binaryImage3);
      assertSame(binaryImage6, binaryImage1);
      assertSame(binaryImage6, binaryImage2);
      assertSame(binaryImage6, binaryImage5);
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals(16, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage2.Y());
      assertEquals(16, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(16, binaryImage3.Y());
      assertEquals(16, binaryImage3.X());
      assertEquals(16, binaryImage6.X());
      assertEquals(16, binaryImage6.Y());
      assertEquals(0, binaryImage6.count());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage3.equals((Object)binaryImage5));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage4));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      assertNotNull(binaryImage6);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0, (byte[]) null);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(binaryImage0);
      
      String string0 = binaryImage0.toString();
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertNotNull(string0);
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = binaryImage0.intersection(binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotNull(binaryImage2);
      
      Byte byte0 = binaryImage2.min();
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.shift(16, 16);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(16, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = new BinaryImage(1736, 16);
      assertEquals(1736, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(16, binaryImage2.Y());
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotNull(binaryImage2);
      
      BinaryImage binaryImage3 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.Y());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertNotNull(binaryImage3);
      
      BinaryImage binaryImage4 = new BinaryImage(1531, 2210);
      assertEquals(2210, binaryImage4.Y());
      assertEquals(1531, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertNotNull(binaryImage4);
      
      // Undeclared exception!
      try { 
        binaryImage4.intersection(binaryImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotNull(binaryImage1);
      
      int int0 = 3057;
      BinaryImage binaryImage2 = binaryImage1.shift(3057, 3057);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotNull(binaryImage2);
      
      int int1 = 0;
      byte byte0 = (byte)50;
      Byte byte1 = new Byte((byte)115);
      assertFalse(byte1.equals((Object)byte0));
      assertNotNull(byte1);
      assertEquals((byte)115, (byte)byte1);
      
      byte byte2 = byte1.byteValue();
      assertFalse(byte1.equals((Object)byte0));
      assertFalse(byte2 == byte0);
      assertEquals((byte)115, byte2);
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) (byte)115);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      int int0 = binaryImage0.count();
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNSHARP;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(9.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(29.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(5.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(3, imageKernel0.X());
      assertEquals(1.0F, imageKernel0.addSum(), 0.01F);
      assertNotNull(imageKernel0);
      
      BinaryImage binaryImage0 = new BinaryImage(imageKernel0);
      assertEquals(9.0F, imageKernel0.absSum(), 0.01F);
      assertEquals(29.0, imageKernel0.sqrSum(), 0.01);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
      assertEquals(5.0F, imageKernel0.max(), 0.01F);
      assertEquals(3, imageKernel0.Y());
      assertEquals(3, imageKernel0.X());
      assertEquals(1.0F, imageKernel0.addSum(), 0.01F);
      assertEquals(1, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(3, binaryImage0.X());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(3, binaryImage0.Y());
      assertNotNull(binaryImage0);
      
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)1;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1128, 1, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = null;
      try {
        binaryImage1 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(16, 16);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.X());
      assertEquals(0, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertNotNull(binaryImage0);
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.X());
      assertEquals(256, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(256, binaryImage1.count());
      assertEquals(16, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertNotNull(binaryImage1);
      
      BinaryImage binaryImage2 = new BinaryImage(16, 2555);
      assertEquals(16, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2555, binaryImage2.Y());
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotNull(binaryImage2);
      
      Image image0 = binaryImage2.copy();
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage0);
      assertEquals(16, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(2555, binaryImage2.Y());
      assertEquals(2555, image0.Y());
      assertEquals(16, image0.X());
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertNotNull(image0);
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(16, binaryImage0.X());
      assertEquals(256, binaryImage0.count());
      assertEquals(16, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(256, binaryImage1.count());
      assertEquals(16, binaryImage1.Y());
      assertEquals(16, binaryImage1.X());
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)image0));
      assertNotNull(imageProducer0);
      
      Byte byte0 = Byte.valueOf((byte) (-121));
      assertNotNull(byte0);
      assertEquals((byte) (-121), (byte)byte0);
      
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:44:11 GMT 2019
 */

package com.allenstudio.ir.ui.calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.allenstudio.ir.ui.calendar.IMonthlyCalendarModel;
import com.allenstudio.ir.ui.calendar.MonthlyCalendar;
import com.allenstudio.ir.ui.calendar.MonthlyCalendarModel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.util.Calendar;
import java.util.SimpleTimeZone;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JTextField;
import javax.swing.border.MatteBorder;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonthlyCalendar_ESTest extends MonthlyCalendar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(1856, 1);
      assertEquals(1856, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(1856, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1856,MONTH=0,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYearMonth(768, 31);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertEquals(7, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(770, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Calendar calendar1 = monthlyCalendar0.getSelectedDate();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertEquals(7, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(770, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(1, calendar1.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=770,MONTH=6,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar1.toString());
      assertTrue(calendar1.isLenient());
      assertEquals(1, calendar1.getFirstDayOfWeek());
      assertTrue(calendar1.equals((Object)calendar0));
      assertNotNull(calendar1);
      assertNotSame(calendar1, calendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setWeekStartOnSunday(false);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(768, 31);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(770, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(7, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMonth(12);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(12, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYear(1970);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(1970, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      boolean boolean0 = monthlyCalendar0.getMouseListeningEnabled();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(boolean0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      MonthlyCalendarModel monthlyCalendarModel0 = new MonthlyCalendarModel();
      assertEquals(0, monthlyCalendarModel0.getSelectedDate());
      assertNotNull(monthlyCalendarModel0);
      
      monthlyCalendarModel0.setSelectedDate((-1491));
      assertEquals((-1491), monthlyCalendarModel0.getSelectedDate());
      
      monthlyCalendar0.setModel(monthlyCalendarModel0);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals((-1491), monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals((-1491), monthlyCalendarModel0.getSelectedDate());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      IMonthlyCalendarModel iMonthlyCalendarModel0 = monthlyCalendar0.getModel();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals((-1491), monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals((-1491), iMonthlyCalendarModel0.getSelectedDate());
      assertNotNull(iMonthlyCalendarModel0);
      assertSame(iMonthlyCalendarModel0, monthlyCalendarModel0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      assertNotNull(metalSplitPaneUI0);
      
      Dimension dimension0 = metalSplitPaneUI0.getMaximumSize(monthlyCalendar0);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      monthlyCalendar0.setCellDimension(dimension0);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      Dimension dimension1 = monthlyCalendar0.getCellDimension();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotNull(dimension1);
      assertNotSame(dimension1, dimension0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(0, dimension1.width);
      assertEquals(0, dimension1.height);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYearMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "lUI^JX6w4>#aGg_s");
      assertEquals("java.util.SimpleTimeZone[id=lUI^JX6w4>#aGg_s,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("lUI^JX6w4>#aGg_s", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.set(0, (-2641));
      assertEquals("java.util.SimpleTimeZone[id=lUI^JX6w4>#aGg_s,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("lUI^JX6w4>#aGg_s", simpleTimeZone0.getID());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=lUI^JX6w4>#aGg_s,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=-2641,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMarked(4386, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4385
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendarModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseReleased((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mousePressed((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseMoved((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseExited((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseEntered((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseDragged((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseClicked((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        MonthlyCalendar.paintSymbol((Graphics) null, monthlyCalendar0.MARKED_FONT, monthlyCalendar0.DEFAULT_HEADER_BG, monthlyCalendar0.DEFAULT_DATE_BG, "", (-1313), 8, 20, 1029);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      //  // Unstable assertion: assertEquals(2, monthlyCalendar0.getMonth());
      //  // Unstable assertion: assertEquals(2014, monthlyCalendar0.getYear());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.getIgnoreRepaint());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(31, monthlyCalendar0.getSelectedDay());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusCycleRoot());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertNotNull(monthlyCalendar0);
      //  // Unstable assertion: assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      //  // Unstable assertion: assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Calendar calendar0 = Calendar.getInstance();
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=1573058604405,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=310,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=43,SECOND=24,MILLISECOND=405,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertNotNull(calendar0);
      
      monthlyCalendar0.setYearMonth(calendar0);
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.getIgnoreRepaint());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      //  // Unstable assertion: assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      //  // Unstable assertion: assertEquals(11, monthlyCalendar0.getMonth());
      //  // Unstable assertion: assertEquals(2019, monthlyCalendar0.getYear());
      //  // Unstable assertion: assertEquals(31, monthlyCalendar0.getSelectedDay());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusCycleRoot());
      //  // Unstable assertion: assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      //  // Unstable assertion: assertEquals("java.util.GregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2019,MONTH=10,WEEK_OF_YEAR=44,WEEK_OF_MONTH=1,DAY_OF_MONTH=6,DAY_OF_YEAR=305,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=4,HOUR_OF_DAY=16,MINUTE=43,SECOND=24,MILLISECOND=405,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      //  // Unstable assertion: assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setMonth(11);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(11, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      monthlyCalendar0.setYearMonth(calendar0);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=14,DAY_OF_YEAR=32,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(1856, 1);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(1856, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(1856, 1);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(1856, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYear(3314);
      assertEquals(3314, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(3314, (-1900));
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(3155, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(8, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(27, 20);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(8, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(28, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(8, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(28, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=28,MONTH=7,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYearMonth(27, (-1270));
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(80, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(29, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(80, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=80,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=29,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      JTextField jTextField0 = new JTextField("dAw8Vu((#wMb)B&m#V4", 27);
      assertFalse(jTextField0.isFocusTraversalPolicySet());
      assertFalse(jTextField0.isFocusCycleRoot());
      assertFalse(jTextField0.isFocusTraversalPolicyProvider());
      assertFalse(jTextField0.getIgnoreRepaint());
      assertTrue(jTextField0.getFocusTraversalKeysEnabled());
      assertNotNull(jTextField0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setHeaderComponent(jTextField0);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected static method org.evosuite.runtime.mock.javax.swing.MockJComponent.getPreferredSize()Ljava/awt/Dimension;
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setHeaderComponent((JComponent) null);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setCellDimension((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=28,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertNotNull(calendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(calendar0);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(28, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1393618881320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=28,DAY_OF_YEAR=59,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth(27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth((-2301));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYear(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year must be later than 1970!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setMouseListeningEnabled(true);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Color color0 = monthlyCalendar0.getHeaderBackground();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(255, color0.getAlpha());
      assertEquals(223, color0.getBlue());
      assertEquals((-8743201), color0.getRGB());
      assertEquals(150, color0.getGreen());
      assertEquals(122, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      int int0 = monthlyCalendar0.getSelectedDay();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, int0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      int int0 = monthlyCalendar0.getMonth();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2, int0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      IMonthlyCalendarModel iMonthlyCalendarModel0 = monthlyCalendar0.getModel();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, iMonthlyCalendarModel0.getSelectedDate());
      assertNotNull(iMonthlyCalendarModel0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      boolean boolean0 = monthlyCalendar0.getWeekStartOnSunday();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(boolean0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      int int0 = monthlyCalendar0.getYear();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, int0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setHighlightForeground(monthlyCalendar0.DEFAULT_DATE_BG);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setHighlightBackground(monthlyCalendar0.DEFAULT_HEADER_BG);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setDateForeground(monthlyCalendar0.DEFAULT_HEADER_BG);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setHeaderForeground((Color) null);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Color color0 = monthlyCalendar0.getHeaderForeground();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertNull(color0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Dimension dimension0 = monthlyCalendar0.getCellDimension();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(27.0, dimension0.getWidth(), 0.01);
      assertEquals(20.0, dimension0.getHeight(), 0.01);
      assertNotNull(dimension0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, dimension0.height);
      assertEquals(27, dimension0.width);
      
      monthlyCalendar0.setPreferredSize(dimension0);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(27.0, dimension0.getWidth(), 0.01);
      assertEquals(20.0, dimension0.getHeight(), 0.01);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, dimension0.height);
      assertEquals(27, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.resetHighlight();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Color color0 = monthlyCalendar0.getDateForeground();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(0, color0.getRed());
      assertEquals(0, color0.getGreen());
      assertEquals((-16777216), color0.getRGB());
      assertEquals(1, color0.getTransparency());
      assertEquals(0, color0.getBlue());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMarked(11, true);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setHeaderFont(monthlyCalendar0.NORMAL_FONT);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.dateSelected();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Color color0 = monthlyCalendar0.getDateBackground();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(255, color0.getGreen());
      assertEquals(255, color0.getBlue());
      assertEquals(255, color0.getRed());
      assertEquals(1, color0.getTransparency());
      assertEquals((-1), color0.getRGB());
      assertEquals(255, color0.getAlpha());
      assertNotNull(color0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      JComponent jComponent0 = monthlyCalendar0.getHeaderComponent();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNull(jComponent0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setHeaderBackground((Color) null);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setDateBackground(monthlyCalendar0.DEFAULT_HEADER_FG);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getHeaderFont();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHeaderForeground();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(216, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      ImageIcon imageIcon0 = new ImageIcon();
      MatteBorder matteBorder0 = new MatteBorder(imageIcon0);
      monthlyCalendar0.setBorder(matteBorder0);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getMouseListeningEnabled();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHighlightBackground();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(84, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHighlightForeground();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals((-1), color0.getRGB());
  }
}

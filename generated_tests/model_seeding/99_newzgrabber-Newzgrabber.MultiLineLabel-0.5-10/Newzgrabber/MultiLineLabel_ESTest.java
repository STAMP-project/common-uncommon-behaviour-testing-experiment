/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 13:20:43 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.MultiLineLabel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.Hashtable;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiLineLabel_ESTest extends MultiLineLabel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", 2);
      Font font0 = Font.decode("#+AYSEu3*/");
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", 0, 2, 2);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", 1);
      Font font0 = Font.decode("#+AYSEu3*/");
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("ERROR: ", (-466), (-22));
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("!0B_");
      multiLineLabel0.num_lines = (-1254);
      multiLineLabel0.paint((Graphics) null);
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      multiLineLabel0.paint((Graphics) null);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Font font0 = new Font("\n", (-2404), (-2404));
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("!p Ue55 ");
      multiLineLabel0.setFont(font0);
      BufferedImage bufferedImage0 = new BufferedImage(14, 2, 1);
      Graphics graphics0 = bufferedImage0.getGraphics();
      multiLineLabel0.paint(graphics0);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 3);
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      multiLineLabel0.setFont(font0);
      multiLineLabel0.setLabel("7d)zeHZeC'Cnl");
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(3, multiLineLabel0.getAlignment());
      assertEquals(110, dimension0.width);
      assertEquals(35, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      multiLineLabel0.setAlignment(1);
      assertEquals(1, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("CAPCEL");
      Font font0 = new Font("CAPCEL", 0, 0);
      multiLineLabel0.setFont(font0);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", 1);
      multiLineLabel0.newLabel("");
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(1, multiLineLabel0.getAlignment());
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      Element element0 = defaultStyledDocument0.getCharacterElement(0);
      LabelView labelView0 = new LabelView(element0);
      Font font0 = labelView0.getFont();
      multiLineLabel0.setFont(font0);
      multiLineLabel0.measure();
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", 1);
      Font font0 = Font.decode("#+AYSEu3*/");
      multiLineLabel0.setFont(font0);
      multiLineLabel0.addNotify();
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(1, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 0, (-3063));
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals((-6126), dimension0.height);
      assertEquals(0, dimension0.width);
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", (-7459), (-7459));
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals((-14918), dimension0.height);
      assertEquals((-14918), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 3);
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      multiLineLabel0.setFont(font0);
      multiLineLabel0.setLabel("7d)zeHZeC'Cnl");
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(90, dimension0.width);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(3, multiLineLabel0.getAlignment());
      assertEquals(15, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("(\"FM},%", 0, 0);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(0, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("DF'i4S:#Tp77n)-", (-1042));
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals((-1042), multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/");
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, int0);
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("fn.N{M7v\"", 3891, (-1596), 3891);
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals((-1596), int0);
      assertEquals(3891, multiLineLabel0.getMarginWidth());
      assertEquals(3891, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Current Directory:");
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, int0);
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("user.dir", 10);
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(10, int0);
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("4V]hx>M;");
      // Undeclared exception!
      try { 
        multiLineLabel0.setFont((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("+# c~ieW", 2);
      int[] intArray0 = new int[0];
      multiLineLabel0.line_widths = intArray0;
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 3);
      // Undeclared exception!
      try { 
        multiLineLabel0.newLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/");
      // Undeclared exception!
      try { 
        multiLineLabel0.measure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, 3, 3, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, 1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, 1248);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.StringTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("OK", 10);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", 2);
      Font font0 = Font.decode("#+AYSEu3*/");
      multiLineLabel0.setFont(font0);
      multiLineLabel0.setLabel("#+AYSEu3*/");
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(2, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("iX~nb#/M M6[L0'W|", 0);
      multiLineLabel0.setAlignment(0);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 44, 0);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(0, dimension0.height);
      assertEquals(88, dimension0.width);
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("c2zu(380]!Zu#7x<H", (-1036), (-1), (-1));
      int int0 = multiLineLabel0.getAlignment();
      assertEquals((-1036), multiLineLabel0.getMarginWidth());
      assertEquals((-1), multiLineLabel0.getMarginHeight());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 44, 0);
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, int0);
      assertEquals(44, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("#+AYSEu3*/", 2);
      // Undeclared exception!
      try { 
        multiLineLabel0.setLabel("#+AYSEu3*/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 44, 0);
      multiLineLabel0.setMarginWidth(3108);
      assertEquals(3108, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South");
      // Undeclared exception!
      try { 
        multiLineLabel0.addNotify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("ERROR: ", (-903), 3);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(3, multiLineLabel0.getMarginHeight());
      assertEquals((-903), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      Color color0 = Color.ORANGE;
      multiLineLabel0.setForeground(color0);
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("E");
      multiLineLabel0.setMarginHeight(300);
      assertEquals(300, multiLineLabel0.getMarginHeight());
  }
}

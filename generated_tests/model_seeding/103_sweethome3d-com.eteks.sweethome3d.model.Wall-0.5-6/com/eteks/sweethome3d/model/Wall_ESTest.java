/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:54:45 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      Integer integer0 = new Integer(0);
      Integer.valueOf(0);
      Integer.toUnsignedString(0);
      wall0.setThickness(0);
      Wall wall1 = new Wall((-3972.0F), (-1.0F), 8192, 416.103F, 1151.4089F, 524.90924F);
      wall0.setWallAtStart(wall1);
      wall0.getYArcCircleCenter();
      wall0.containsWallEndAt(0.0F, (-2520.0845F), 0.01F);
      wall1.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.intersectsRectangle(1086.9F, (-1260.0372F), 2.0F, (-1.0F));
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, 0.0F, (-1.0F), 0.0F, 0.0F);
      Float float0 = new Float((-1933.4511733));
      float0.floatValue();
      Float float1 = new Float((-1933.4512F));
      float1.floatValue();
      Float float2 = new Float(0.0F);
      float2.floatValue();
      wall0.setHeightAtEnd((Float) 0.0F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-254.305F), 0.01F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.intersectsRectangle((-1.0F), 417.103F, 417.103F, 2.0F);
      Integer integer0 = new Integer((-114));
      Integer.getInteger("", (-114));
      Integer.remainderUnsigned((-114), 1983);
      wall0.setLeftSideColor(integer0);
      wall0.getXStart();
      wall0.move(0.01F, 417.103F);
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.intersectsRectangle(2.0F, (-254.305F), (-114), (-254.305F));
      Wall.clone((List<Wall>) linkedList0);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(2.0F, (-447.79715F), 0.0F, (-1513.14F), 0.0F, 3531.1978F);
      wall0.setYStart(1520.3976F);
      Float float0 = wall0.getHeight();
      Float.valueOf(1520.3976F);
      wall0.setHeight(float0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList1);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getHeight();
      wall0.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall0.containsWallEndAt((-455.66F), (-455.66F), 0.0F);
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = wall0.getWallAtStart();
      linkedList0.add(wall1);
      Wall.clone((List<Wall>) linkedList0);
      List<Wall> list0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 1.0F, 2.0F, 2.0F, 0.01F);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = new Float(1173.738F);
      Float.min(1768.6844F, 1768.6844F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getHeight();
      Float.compare(591.7584F, (-2830.9F));
      Float float1 = new Float(0.0F);
      Float float2 = wall0.getHeightAtEnd();
      wall0.setArcExtent(float2);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall((-1175.2448F), (-1175.2448F), (-1.0F), (-254.0F), 0.01F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.containsPoint(4706.654F, 4706.654F, (-1.0F));
      wall0.setPattern((TextureImage) null);
      Integer integer0 = new Integer((-114));
      Float.compare(161.798F, (-1.0F));
      Float.floatToIntBits((-3126.651F));
      wall0.setArcExtent((Float) (-3126.651F));
      wall0.getLevel();
      wall0.getThickness();
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getXArcCircleCenter();
      wall0.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1172.343F));
      wall0.getWallAtEnd();
      wall0.setHeightAtEnd(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      Level level1 = level0.clone();
      level1.getElevation();
      level1.getHeight();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level1.clone();
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      wall0.containsPoint((-2217.8682F), 0.0F, (-3924.0F));
      wall0.containsWallEndAt(0.0F, 0.01F, 0.0F);
      wall0.getLeftSideShininess();
      level1.clone();
      level1.setName("~s`z");
      wall0.intersectsRectangle((-3924.0F), 0.0F, 2695.0F, 2695.0F);
      wall0.getLeftSideColor();
      wall0.isAtLevel(level0);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F));
      wall0.setThickness(9.3F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      Wall wall2 = new Wall(2341.982F, (-1175.456F), (-1175.456F), 2341.982F, 2341.982F);
      wall1.getPoints();
      wall2.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      wall0.setThickness(9.3F);
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = wall1.getHeight();
      wall1.setHeight(float0);
      wall1.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      wall0.setWallAtEnd(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getPoints();
      Wall wall2 = new Wall(1768.6844F, 125.3507F, 1152.4089F, 125.3507F, 1.0F);
      Integer integer0 = new Integer(87);
      wall2.setLeftSideColor(integer0);
      wall2.getLength();
      wall2.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 1.7872992F, 1.7872992F, 1.7872992F, 1.7872992F);
      Integer.valueOf(0);
      Integer.valueOf(1);
      Level level0 = new Level("", 1519.544F, 1.7872992F, 3216.0F);
      wall0.setLevel(level0);
      wall0.containsPoint((-1.0F), 1.0F, (-1.0F));
      wall0.containsWallEndAt(1.0F, 0.0F, 0.0F);
      Level level1 = level0.clone();
      Float float0 = new Float((-2520.0845F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.isAtLevel(level1);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall((-98.0F), (-1155.4463F), 1521.3313F, (-1155.4463F), (-1.0F), (-98.0F));
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall(3224.8F, 3224.8F, 3224.8F, 3385.65F, 0.0F, 1.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      wall0.getLeftSideColor();
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      Level level1 = level0.clone();
      level1.getElevation();
      wall0.containsWallEndAt(0.0F, 0.0F, 2695.0F);
      wall0.getPoints();
      wall0.containsPoint(0.0F, 2695.0F, 0.0F);
      wall0.getPoints();
      Wall wall1 = wall0.clone();
      wall1.setXStart(2695.0F);
      wall1.getYEnd();
      wall1.setLeftSideColor((Integer) null);
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = new Float(1768.6844F);
      Float float1 = Float.valueOf(1768.6844F);
      wall0.setHeight(float1);
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("21z\"k9-=?[f)2+?", temporaryURLContent0, 1.0F, 1173.738F, true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      wall0.getLeftSideColor();
      wall0.setLeftSideColor((Integer) null);
      Level level0 = new Level("pHvKJ$k_w", 0.0F, (-10.1826F), (-10.1826F));
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      wall0.getHeight();
      Float float0 = Float.valueOf(1768.6844F);
      Float.min(1768.6844F, 1152.4089F);
      Float.sum(2.0F, 2462.3F);
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      wall1.getArcExtent();
      float float1 = 2.0F;
      Float.isFinite((-1.0F));
      wall1.containsWallStartAt(2.0F, 2.0F, 2462.3F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(" doesn't contain texture ", (PropertyChangeListener) null);
      wall1.setLeftSideShininess(1152.4089F);
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, (String) null, wall0, "TX.FzAcz~M^9oq\"v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getHeight();
      Float.valueOf(0.0F);
      Float.compare(1.0F, 1.0F);
      Float.compare(0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent((Float) null);
      wall0.getPoints();
      wall0.getYArcCircleCenter();
      wall0.containsWallEndAt(1.0F, (-719.376F), 0);
      wall0.getPoints();
      wall0.containsPoint(0, (-1.0F), 0.0F);
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      wall1.getHeight();
      Float float1 = Float.valueOf(1768.6844F);
      wall1.setHeight(float1);
      wall1.setXStart(0.0F);
      Integer.valueOf((-1));
      Integer integer0 = Integer.valueOf((-1));
      Integer.compare(3087, 2203);
      wall1.setLeftSideColor(integer0);
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall((-707.197F), 1152.4089F, 2341.982F, (-1175.456F), 2.0F, 2341.982F);
      wall0.setThickness((-1175.456F));
      Wall wall1 = new Wall(2341.982F, 33.0F, (-544.727F), (-15.0F), (-707.197F), (-3136.83F));
      wall0.getHeight();
      wall0.setWallAtStart(wall1);
      wall1.getYArcCircleCenter();
      wall1.containsWallEndAt((-3136.83F), (-0.37783998F), (-544.727F));
      wall1.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getPoints();
      Wall wall2 = new Wall((-1.0F), 1957.7F, 4135.6533F, 1152.4089F, 33.0F);
      wall1.getPoints();
      Float float0 = new Float(1.0F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("l", 2694.3594F, 0.0F, 2694.3594F);
      Level level1 = level0.clone();
      level0.setFloorThickness(2694.3594F);
      level1.clone();
      wall0.setLevel(level1);
      Float float0 = new Float((-1.0F));
      wall0.setArcExtent(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getLevel();
      Float float0 = new Float(1687.317F);
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("X_START", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      PropertyChangeListener propertyChangeListener1 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListener1);
      wall0.addPropertyChangeListener(propertyChangeListenerProxy1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F));
      Float float0 = new Float(0.0F);
      wall1.setHeight(float0);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtStart(wall0);
      Float float1 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.containsWallEndAt(0.0F, (-3922.3682F), 539.4762F);
      wall1.getLevel();
      wall0.clone();
      wall0.getWallAtStart();
      wall1.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-254.305F), 0.01F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      Integer integer0 = new Integer((-114));
      Integer.remainderUnsigned((-114), 1983);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.containsWallEndAt(0.0F, (-1.0F), (-906.24457F));
      wall0.getPoints();
      wall0.containsPoint(2695.0F, (-1.0F), (-114));
      wall0.getPoints();
      Wall wall1 = new Wall(417.103F, 1363, 1363, 1983, (-114), (-1.0F));
      wall1.setXStart(3224.9001F);
      wall0.getYEnd();
      Wall wall2 = new Wall((-3750.672F), (-478.8F), (-478.8F), (-906.24457F), (-1128.8105F));
      wall2.setLeftSideColor(integer0);
      Wall.Property.values();
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      wall0.setThickness(9.3F);
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      wall1.getHeight();
      Float float0 = Float.valueOf(1768.6844F);
      wall1.setHeight(float0);
      wall1.setWallAtStart(wall0);
      wall0.setXStart(2.0F);
      Wall wall2 = new Wall(298, (-2814.65F), 9.3F, 9.3F, 1152.4089F, (-996.818F));
      wall2.setWallAtStart(wall1);
      wall0.getYArcCircleCenter();
      wall2.containsWallEndAt(1173.738F, (-576.54F), 1174.6174F);
      wall1.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.containsPoint(1238.6F, 1163.5132F, (-253.305F));
      wall0.setXStart(4695.761F);
      Wall.clone((List<Wall>) linkedList0);
      wall0.getLevel();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1173.738F, (-1175.456F), 1173.738F, 1173.738F, 1173.738F);
      Float float0 = new Float(1173.738F);
      Float float1 = Float.valueOf(1173.738F);
      Float.compare(1173.738F, (-1175.456F));
      Float.compare(4094.001F, (-1175.456F));
      Float float2 = new Float(1.0E-6);
      wall0.setArcExtent(float1);
      wall0.getPoints();
      wall0.getRightSideColor();
      wall0.setLeftSideColor((Integer) null);
      wall0.getXStart();
      Float float3 = new Float((-2511.713));
      wall0.setHeight(float0);
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-254.305F), 0.01F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      wall0.setYStart((-1.0F));
      wall0.setPattern((TextureImage) null);
      Integer integer0 = new Integer((-114));
      Integer.remainderUnsigned((-114), 1983);
      wall0.setLeftSideColor(integer0);
      wall0.getXStart();
      wall0.move(4706.654F, 417.103F);
      wall0.setWallAtEnd((Wall) null);
      Level level0 = new Level("", (-254.305F), (-462.3F), (-1323.1176F));
      level0.setVisible(false);
      wall0.setLevel(level0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      Float float1 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F));
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(1);
      wall0.setLeftSideColor(integer0);
      wall0.getYArcCircleCenter();
      wall0.containsWallStartAt((-2520.0845F), (-2520.0845F), 1);
      wall0.getPoints();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setXStart(2642.9F);
      wall0.setPattern((TextureImage) null);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getHeight();
      wall0.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall0.containsWallEndAt((-455.66F), (-455.66F), 0.0F);
      Float float0 = new Float(2.0F);
      Wall wall1 = wall0.getWallAtStart();
      wall1.setArcExtent((Float) null);
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-298.42172F), 0.01F);
      wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      wall0.getXStart();
      wall0.move(4706.654F, 417.103F);
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.Property.values();
      Random.setNextRandom((-1100));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.containsWallEndAt((-1.0F), 0.0F, 1920.6138F);
      wall1.setLeftSideShininess((-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.getPoints();
      Float float0 = new Float(1895.0F);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1173.738F, (-1175.456F), 1173.738F, 1173.738F, 1173.738F);
      wall0.setRightSideShininess(1173.738F);
      wall0.containsPoint(0.1F, 0.1F, 1056.591F);
      Wall wall1 = wall0.clone();
      wall1.getPoints();
      wall0.getPoints();
      wall1.getRightSideTexture();
      Wall wall2 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      wall2.getHeight();
      Float float0 = Float.valueOf(1768.6844F);
      wall2.setHeight(float0);
      wall2.setLeftSideTexture((HomeTexture) null);
      wall1.setYEnd(3411.0916F);
      wall0.setArcExtent((Float) null);
      wall1.getLevel();
      wall1.getThickness();
      wall1.getRightSideShininess();
      Wall.Property.values();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(1520.3976F, 1520.3976F, 1520.3976F, 1.0F, 1520.3976F);
      wall0.containsWallStartAt(1520.3976F, (-3277.4558F), 0.0F);
      wall0.containsPoint((-3277.4558F), 1520.3976F, 106.93F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      UnaryOperator<Wall> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.compose((Function<? super Object, ? extends String>) function0);
      linkedList0.add(wall0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Wall> function2 = (Function<Object, Wall>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Wall> function3 = unaryOperator2.andThen((Function<? super Object, ? extends Wall>) function2);
      Function.identity();
      unaryOperator0.compose((Function<? super Wall, ? extends Wall>) function3);
      unaryOperator0.andThen((Function<? super Wall, ? extends String>) function1);
      linkedList0.replaceAll(unaryOperator0);
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.isTrapezoidal();
      wall0.setYEnd(1.0F);
      wall0.getLeftSideTexture();
      wall0.setXEnd((-3277.4558F));
      Integer integer0 = Integer.valueOf(3372);
      wall0.setLeftSideColor(integer0);
      wall0.getXStart();
      wall0.setThickness((-3277.4558F));
      wall0.getPattern();
      wall0.containsWallStartAt((-3277.4558F), 0.0F, 2591.8054F);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F));
      wall0.setYStart((-659.4F));
      wall0.getPoints();
      Float float0 = Float.valueOf(1.0F);
      wall0.setHeight(float0);
      wall0.setRightSideShininess((-659.4F));
      wall0.containsPoint(316.789F, (-659.4F), (-659.4F));
      wall0.getPoints();
      wall0.getPoints();
      wall0.setYEnd(0.0F);
      Float.compare((-1030.8F), (-1030.8F));
      Float.compare((-1030.8F), 0);
      Float.compare(3302.1443F, (-755.245F));
      wall0.setArcExtent((Float) (-755.245F));
      wall0.getLevel();
      wall0.getThickness();
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getXArcCircleCenter();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      Float float0 = new Float((-1172.343F));
      Float float1 = Float.valueOf((-1172.343F));
      wall0.setArcExtent(float1);
      wall0.setArcExtent(float1);
      Float float2 = new Float((-1172.343F));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-254.305F), 0.01F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      wall0.setPattern((TextureImage) null);
      Integer integer0 = new Integer((-114));
      Integer.remainderUnsigned((-114), 1983);
      wall0.setLeftSideColor(integer0);
      wall0.getXStart();
      wall0.move(4706.654F, 417.103F);
      wall0.setWallAtEnd((Wall) null);
      Level level0 = new Level("", (-254.305F), (-462.3F), (-1323.1176F));
      wall0.setLevel(level0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1173.738F, (-1175.456F), 1152.4089F, (-2640.304F), 1173.738F);
      wall0.getHeight();
      Float.valueOf((-2640.304F));
      Float.compare(1173.738F, 1.0F);
      Float.compare(4094.001F, 1152.4089F);
      Float float0 = new Float((double) 4094.001F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.containsPoint(1173.738F, (-1175.456F), 1152.4089F);
      wall0.containsWallEndAt((-1175.456F), (-1175.456F), 4094.001F);
      wall0.getPoints();
      wall0.containsPoint((-2640.304F), (-1684.0404F), 1173.738F);
      wall0.setXStart(4094.001F);
      String string0 = "k0I&PPgf+QlC\\9F>r7";
      try { 
        Integer.valueOf("k0I&PPgf+QlC9F>r7", 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k0I&PPgf+QlC9F>r7\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Float.valueOf(1768.6844F);
      wall0.getLevel();
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getXArcCircleCenter();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall((-1174.9233F), (-1174.9233F), 1152.4089F, (-1174.9233F), (-2520.084F), 0.1F);
      Float float0 = wall0.getHeight();
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall((-707.197F), 1152.4089F, 2341.982F, (-1175.456F), 2.0F, 2341.982F);
      wall0.setThickness((-1175.456F));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Wall wall1 = new Wall(2341.982F, 33.0F, (-544.727F), (-15.0F), (-707.197F), (-3136.83F));
      wall1.setXEnd(4.6500244F);
      Float float0 = wall0.getHeight();
      wall0.setWallAtStart(wall1);
      wall1.getYArcCircleCenter();
      wall1.containsWallEndAt((-3136.83F), (-0.37783998F), (-544.727F));
      wall1.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setArcExtent(float0);
      wall0.getPoints();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      wall0.setThickness(9.3F);
      Wall wall1 = new Wall(1173.738F, 1679.8986F, 1152.4089F, (-928.69415F), (-928.69415F), (-1.0F));
      wall0.setWallAtStart(wall1);
      wall1.getYArcCircleCenter();
      wall1.containsWallEndAt(1545.9213F, 0.0F, 1152.4089F);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      Wall wall2 = new Wall(1277.7152F, 1545.9213F, 0.1F, (-1.0F), (-2659.8923F));
      wall0.getPoints();
      wall2.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall((-707.197F), 1152.4089F, 2341.982F, (-1175.456F), 2.0F, 2341.982F);
      wall0.setThickness((-1175.456F));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Wall wall1 = new Wall(2341.982F, 33.0F, (-544.727F), (-15.0F), (-707.197F), (-3136.83F));
      Float float0 = wall0.getHeight();
      wall0.setWallAtStart(wall1);
      wall1.getYArcCircleCenter();
      wall1.containsWallEndAt((-3136.83F), (-0.37783998F), (-544.727F));
      wall1.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setArcExtent(float0);
      wall0.getPoints();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F));
      wall0.getHeight();
      Float float0 = Float.valueOf((-1175.456F));
      Float.compare((-1175.456F), (-1175.456F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.containsPoint(0, 0, (-1215.869F));
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 251.9196F, (-651.329F), 2.0F, 251.9196F, (-651.329F));
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      Wall wall1 = new Wall(251.9196F, (-1.0F), (-1.0F), 0.0F, 0.0F);
      wall0.setWallAtStart(wall1);
      wall0.setLeftSideShininess(1419.6073F);
      wall1.setWallAtStart(wall0);
      Float float1 = new Float((-1.07442F));
      wall0.getPattern();
      Float.valueOf((-1.07442F));
      wall0.containsWallEndAt(4077.0986F, 0.0F, (-1.07442F));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      Float float0 = new Float((-1172.343F));
      Float float1 = Float.valueOf((-1172.343F));
      wall0.setArcExtent(float1);
      wall0.setArcExtent(float1);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getPoints();
      Wall wall1 = wall0.getWallAtEnd();
      wall1.getPattern();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall((-1702.6F), (-2814.65F), 707.343F, 848.647F, (-916.44F), (-298.42172F));
      wall0.getHeight();
      Float.valueOf((-2640.304F));
      Float.compare((-916.44F), 1172.9995F);
      Integer integer0 = new Integer((-1));
      Float float0 = new Float((-3940.7212F));
      Float float1 = new Float((double) (-2814.65F));
      wall0.setArcExtent(float1);
      // Undeclared exception!
      wall0.containsWallEndAt((-2771.1F), (-2771.1F), (-749.0777F));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1173.738F, (-1175.456F), 1152.4089F, (-2640.304F), 1173.738F);
      Float float0 = wall0.getHeight();
      Float float1 = Float.valueOf((-2640.304F));
      Float.compare(1173.738F, 1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.containsPoint((-2929.0F), (-784.607F), 1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.setHeightAtEnd(float1);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = wall0.getHeight();
      Float.valueOf(1768.6844F);
      Float.compare(1173.738F, 1173.738F);
      Float.compare(1152.4089F, (-1405.201F));
      Float.compare(1.0F, 1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.containsPoint(1173.738F, 61.122F, 1.0F);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(1);
      wall0.containsWallStartAt(0, 2054.207F, (-1799.404F));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1520.3976F, 1520.3976F, 1520.3976F);
      wall0.setYStart(0.0F);
      wall0.setRightSideShininess(877.68445F);
      wall0.containsPoint(1.0F, (-646.2594F), 0.0F);
      wall0.getPoints();
      wall0.getPoints();
      wall0.setYEnd((-2051.5627F));
      Float.compare(316.789F, 0.0F);
      Float.compare(258.708F, (-1.0F));
      Float.compare(0.0F, (-2051.5627F));
      Float float0 = new Float((-277.97));
      wall0.setArcExtent(float0);
      wall0.getLevel();
      wall0.getThickness();
      wall0.getRightSideShininess();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      Float float0 = new Float((-1172.343F));
      Float.valueOf((-1172.343F));
      Float.compare((-1172.343F), (-1172.343F));
      Float.sum(0, (-3263.323F));
      Float.sum((-3263.323F), (-1.0F));
      Float float1 = new Float(1305.85F);
      wall0.setHeightAtEnd(float1);
      wall0.setHeightAtEnd(float1);
      wall0.isTrapezoidal();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getPoints();
      wall0.containsWallEndAt(1305.85F, (-3263.323F), (-3263.323F));
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = wall0.getHeight();
      Float float1 = Float.valueOf(1768.6844F);
      wall0.setHeight(float1);
      wall0.setArcExtent(float0);
      Float.floatToIntBits((-3126.651F));
      wall0.setArcExtent((Float) (-3126.651F));
      wall0.getLeftSideTexture();
      Wall wall1 = new Wall((-1.0F), 1173.738F, 1174.6174F, 1.0F, 1152.4089F);
      wall1.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall1.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.getPoints();
      Wall wall2 = wall1.getWallAtEnd();
      wall2.getPattern();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      Wall wall1 = new Wall((-1175.456F), 1152.4089F, 0.01F, 1152.4089F, (-1175.456F), 0.01F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.getPoints();
      Float float0 = new Float((-300.7F));
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      wall0.setThickness(9.3F);
      Wall wall1 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F), 1173.738F, 1152.4089F);
      wall1.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      Wall wall2 = new Wall(1152.4089F, (-11.52356F), 1152.4089F, (-11.52356F), (-11.52356F));
      wall1.getPoints();
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F);
      wall0.getHeight();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Float.valueOf(1768.6844F);
      Wall wall1 = wall0.clone();
      wall1.getThickness();
      wall1.getYStart();
      wall1.getXArcCircleCenter();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 1.7872992F, 1.7872992F, 1.7872992F, 1.7872992F);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(0);
      Integer.toUnsignedString(0);
      wall0.setLeftSideColor(integer0);
      wall0.getYArcCircleCenter();
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      Level level1 = level0.clone();
      level1.getElevation();
      level1.getHeight();
      Level level2 = level1.clone();
      wall0.intersectsRectangle((-2421.749F), 1.7872992F, (-2520.0845F), 2612.385F);
      wall0.getLeftSideColor();
      wall0.isAtLevel(level2);
      wall0.setPattern((TextureImage) null);
      wall0.getStartPointToEndPointDistance();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall.Property.values();
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F), 0.0F, 0.0F);
      Integer integer0 = Integer.valueOf(0);
      Integer.valueOf(0);
      Integer.toUnsignedString(0);
      wall0.setThickness(0);
      Wall wall1 = new Wall((-3972.0F), (-1.0F), 8192, 416.103F, 1170.3385F, 524.90924F);
      wall0.setWallAtStart(wall1);
      wall0.getYArcCircleCenter();
      wall0.containsWallEndAt(0.0F, (-2520.0845F), (-2520.0845F));
      wall1.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall2 = wall1.getWallAtEnd();
      Integer integer1 = Integer.getInteger("", integer0);
      wall2.setLeftSideColor(integer1);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1173.738F, (-1175.456F), 1152.4089F, (-2640.304F), 1173.738F);
      wall0.getHeight();
      Float.valueOf((-2640.304F));
      Float.compare(1173.738F, 1.0F);
      Integer integer0 = new Integer(1);
      Float float0 = new Float((double) 4094.001F);
      Float.valueOf((-3654.0F));
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      Level level1 = level0.clone();
      level1.getElevation();
      level1.getHeight();
      wall0.setLevel(level1);
      Float float1 = new Float(1.0001);
      wall0.setArcExtent(float1);
      wall0.getLevel();
      Wall wall1 = wall0.clone();
      wall0.getThickness();
      wall1.getPoints();
      wall1.containsPoint((-2640.304F), (-3510.37F), 1);
      wall1.getYStart();
      wall0.getXArcCircleCenter();
      Wall.Property.values();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-762.1955F), 1.0F, 722.2299F, (-762.1955F), (-1.0F), (-1.0F));
      wall0.setLeftSideShininess(0.0F);
      wall0.setYEnd(722.2299F);
      Wall wall1 = wall0.clone();
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      wall1.setPattern(textureImage0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float.compare(722.2299F, 1520.3976F);
      Float.compare((-762.1955F), (-1188.6226F));
      Float.valueOf(0.1F);
      Float.valueOf(0.1F);
      Float float0 = Float.valueOf(0.01F);
      wall0.setArcExtent(float0);
      wall1.getLevel();
      wall0.getThickness();
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall1.getXArcCircleCenter();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall((-1227.8F), (-1227.8F), (-2651.2292F), (-2651.2292F), (-1.0F));
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall((-1611.272F), (-1611.272F), (-884.0F), (-884.0F), 2524.7F, (-884.0F));
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      float float0 = (-762.1955F);
      float float1 = 1.0F;
      Wall wall0 = new Wall((-762.1955F), 1.0F, 722.2299F, (-762.1955F), 1.0F, 1.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.setYEnd(722.2299F);
      Wall wall1 = wall0.clone();
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      wall1.setPattern(textureImage0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add((Wall) null);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = wall0.getHeight();
      Float.valueOf(1768.6844F);
      Float.compare(1173.738F, 1173.738F);
      Float.compare(1.0F, 1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.containsPoint(1173.738F, 61.122F, 1.0F);
      wall0.getXArcCircleCenter();
      wall0.setRightSideShininess(0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      linkedList1.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
      Float float0 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-455.66F), (-1172.343F), 0.1F, 0.01F);
      wall0.getLeftSideTexture();
      Wall wall1 = wall0.clone();
      wall1.setRightSideTexture((HomeTexture) null);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall1.setPattern((TextureImage) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      float float0 = (-1684.984F);
      float float1 = 0.1F;
      Wall wall0 = new Wall((-1684.984F), 0.0F, 0.0F, (-1684.984F), (-1684.984F), 0.1F);
      float float2 = 3342.105F;
      wall0.setThickness(3342.105F);
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, (-2640.304F), 1174.6174F);
      Float float0 = wall0.getHeight();
      Float.compare(1174.6174F, (-1175.456F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall((-762.1955F), 1.0F, 722.2299F, (-762.1955F), (-1.0F), (-1.0F));
      wall0.setLeftSideShininess(0.0F);
      wall0.setYEnd(722.2299F);
      Wall wall1 = wall0.clone();
      TextureImage textureImage0 = mock(TextureImage.class, new ViolatedAssumptionAnswer());
      wall1.setPattern(textureImage0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall2 = new Wall(2.0F, (-447.79715F), 0.0F, (-1513.14F), 0.0F, 3531.1978F);
      Float float0 = wall2.getHeight();
      Float.valueOf(1520.3976F);
      wall2.setHeight(float0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      linkedList1.add(wall0);
      Wall.clone((List<Wall>) linkedList1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, (PropertyChangeListener) null);
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall1.setWallAtEnd(wall0);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, (-7.1F));
      wall0.setPattern((TextureImage) null);
      Integer integer0 = new Integer(1566);
      wall0.setLeftSideColor(integer0);
      wall0.getXStart();
      Float float0 = new Float((double) 0.0F);
      wall0.setHeight(float0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart((Wall) null);
      Wall wall1 = new Wall((-2195.0F), 0.0F, (-2520.084F), 0.0F, (-2195.0F), (-2520.084F));
      wall0.getHeight();
      Float float0 = Float.valueOf(1052.191F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(1255.0892F, 1255.0892F, 1255.0892F, 1255.0892F, 1255.0892F, 1255.0892F);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setThickness(1255.0892F);
      Float float0 = new Float(1255.0892F);
      wall0.setHeightAtEnd(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, (-17.4557F));
      wall0.clone();
      TexturesCategory texturesCategory0 = new TexturesCategory("");
      // Undeclared exception!
      try { 
        texturesCategory0.getTexture(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getHeight();
      Float.valueOf(0.0F);
      Wall wall1 = new Wall(1.0F, 4297.75F, (-2567.836F), 1520.3976F, (-2567.836F), 4297.75F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYStart(4094.001F);
      wall0.setRightSideShininess(1108.04F);
      wall0.containsPoint(258.708F, (-1.0F), (-1254.7151F));
      wall0.getPoints();
      wall0.getPoints();
      wall0.setYEnd(3411.0916F);
      Float.compare((-1.0F), (-1.0F));
      Float.compare(1108.04F, 0);
      Float.compare(168.02F, (-755.245F));
      wall0.setArcExtent((Float) null);
      wall0.getLevel();
      wall0.getThickness();
      wall0.getRightSideShininess();
      wall0.getYStart();
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      Level level0 = new Level("o", 0.0F, 1780.35F, 0.0F);
      Level level1 = level0.clone();
      level1.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.setLevel(level0);
      level1.removePropertyChangeListener((PropertyChangeListener) null);
      level1.clone();
      wall0.containsPoint(1780.35F, 316.789F, 3728.58F);
      wall0.containsWallEndAt(647.4775F, 316.789F, 3728.58F);
      wall0.getLeftSideShininess();
      level1.clone();
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, (-1.0F));
      wall0.getLeftSideColor();
      Level level2 = wall0.getLevel();
      wall0.isAtLevel(level2);
      wall0.setPattern((TextureImage) null);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F));
      wall0.setYStart((-659.4F));
      wall0.setRightSideShininess((-659.4F));
      wall0.containsPoint(316.789F, (-659.4F), (-659.4F));
      wall0.getPoints();
      wall0.getPoints();
      wall0.setThickness(316.789F);
      Integer.min((-1524), 195399090);
      Integer integer0 = new Integer(195399090);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      wall0.setXEnd((-1.0F));
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getYArcCircleCenter();
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(183.611F, 4024.0F, 170.0F);
      wall1.getPoints();
      wall0.containsPoint((-659.4F), 1490.0F, (-659.4F));
      wall0.getXArcCircleCenter();
      wall1.containsWallStartAt(170.0F, (-1821.92F), 1876.771F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(889.5F, 889.5F, 0.1F, (-2794.0F), 889.5F, 0.1F);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-707.197F), 1152.4089F, 2341.982F, (-1175.456F), 2.0F, 2341.982F);
      wall0.setThickness((-1175.456F));
      Wall wall1 = new Wall(2341.982F, 33.0F, (-544.727F), (-15.0F), (-707.197F), (-3136.83F));
      Float float0 = wall0.getHeight();
      wall0.setWallAtStart(wall1);
      wall1.getYArcCircleCenter();
      wall1.containsWallEndAt((-3136.83F), (-0.37783998F), (-544.727F));
      wall1.setWallAtEnd(wall0);
      Float.compare((-707.197F), 9.0F);
      wall1.setArcExtent(float0);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1152.4089F, 1152.4089F, 1768.6844F);
      wall0.getHeight();
      Float float0 = Float.valueOf(1768.6844F);
      wall0.setHeight(float0);
      Wall wall1 = wall0.clone();
      wall1.getYArcCircleCenter();
      wall1.move(0.0F, 1768.6844F);
      wall0.getXStart();
      wall1.move((-891.0F), 1172.9078F);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("com.eteks.sweethome3d.tools.TemporaryURLContent", 0.0F, (-6.2771773F), (-6.2771773F));
      Level level1 = level0.clone();
      level1.setFloorThickness((-2646.5266F));
      Level level2 = level1.clone();
      wall0.setLevel(level2);
      wall0.containsPoint((-2646.5266F), 16.786394F, 0.0F);
      wall0.containsWallEndAt((-1897.11F), 1.0F, (-1.0F));
      Level level3 = level1.clone();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.isAtLevel(level3);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      Level level1 = level0.clone();
      level1.getElevation();
      level1.getHeight();
      level0.setName("");
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      level0.setFloorThickness(2695.0F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      level1.clone();
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.setLevel(level1);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      level0.clone();
      wall0.containsPoint((-1.0F), 0.0F, (-3924.0F));
      wall0.containsWallEndAt(0.0F, 0.01F, 0.0F);
      wall0.getLeftSideShininess();
      level1.clone();
      wall0.intersectsRectangle((-3924.0F), 0.0F, 2695.0F, 2695.0F);
      wall0.getLeftSideColor();
      wall0.isAtLevel(level0);
      wall0.setPattern((TextureImage) null);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall((-1174.6805F), 1174.62F, (-1174.6805F), 1151.5126F, (-2640.304F), 1174.62F);
      Wall wall1 = new Wall(0.029414706F, 1151.5126F, (-5133.3F), 0.01F, (-1.0F), (-5133.3F));
      Level level0 = new Level("", 0.029414706F, (-1174.6805F), (-2415.3F));
      wall1.setLevel(level0);
      wall0.containsPoint((-0.26788923F), (-16.950085F), (-2520.0845F));
      wall1.containsWallEndAt(2485.4463F, 0.0F, (-0.26788923F));
      Level level1 = level0.clone();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.isAtLevel(level1);
      wall0.getLevel();
      wall1.isAtLevel((Level) null);
      Float float0 = new Float((double) (-0.26788923F));
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = wall0.getHeight();
      Float.valueOf(1768.6844F);
      Float.compare(1173.738F, 1173.738F);
      Float.compare((-1.0F), (-1424.61F));
      Float.compare(3667.969F, 3667.969F);
      wall0.setLeftSideShininess((-653.0F));
      Float.compare((-653.0F), 1);
      Wall wall1 = new Wall(8192.0F, 0, (-2496.8F), (-1.0F), 3937.2266F, (-2496.8F));
      wall1.setArcExtent(float0);
      wall1.getPoints();
      wall0.containsPoint(1173.738F, 4009.9443F, 9.3F);
      wall1.getXArcCircleCenter();
      wall1.setRightSideShininess((-1.0F));
      wall0.containsWallStartAt((-2051.5627F), 1351.4F, 1173.738F);
      // Undeclared exception!
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      float float0 = 0.01F;
      float float1 = 0.0F;
      Wall wall0 = new Wall(0.01F, 0.01F, 0.0F, 0.0F, 0.0F);
      wall0.containsWallEndAt(0.0F, 0.01F, 1081.0F);
      Integer integer0 = new Integer(92);
      String string0 = "U'\"GSEf`IO,";
      try { 
        Integer.parseUnsignedInt("U'\"GSEf`IO,");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"U'\"GSEf`IO,\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Level level0 = new Level("l", 2694.3594F, 0.0F, 2694.3594F);
      Level level1 = level0.clone();
      level0.setFloorThickness(2694.3594F);
      Level level2 = level1.clone();
      wall0.setLevel(level1);
      wall0.containsPoint((-1.0F), 0.0F, (-1.0F));
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
      level1.clone();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.isAtLevel(level2);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(3224.8F, 3224.8F, 3224.8F, 3385.65F, 0.0F, 1.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.move(3224.8F, 0.1F);
      wall0.getWallAtEnd();
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      wall1.getHeight();
      Float float0 = Float.valueOf(1768.6844F);
      wall1.setHeight(float0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall1.setXEnd(1.0F);
      wall1.getWallAtEnd();
      wall1.containsWallEndAt(0.0F, 781.7533F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-345.28314F), 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-172.64157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-345.28314F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-172.64157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-345.28314F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-172.64157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-345.28314F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, (-7.1F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-172.64157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-345.28314F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      
      wall0.setPattern((TextureImage) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-172.64157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-345.28314F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Integer integer0 = new Integer(1566);
      assertEquals(1566, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1566, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-172.64157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-345.28314F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float float0 = wall0.getXStart();
      assertEquals(1566, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-172.64157F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-345.28314F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.move(0.0F, (-7.1F));
      assertEquals(1566, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-7.1F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-179.74158F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(345.28314F, wall0.getLength(), 0.01F);
      assertEquals((-352.38315F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(345.28314F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getHeight();
      wall0.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall0.containsWallEndAt((-455.66F), (-455.66F), 0.0F);
      wall0.setWallAtEnd(wall0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getPoints();
      Float float0 = new Float(0.0F);
      wall0.setHeightAtEnd(float0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsPoint((-1.0F), 0.0F, (-1.0F));
      wall0.containsWallEndAt(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, (-2640.304F), 1174.6174F);
      Integer.valueOf(298);
      Integer.toUnsignedString((-692));
      wall0.setThickness(9.3F);
      Wall wall1 = new Wall((-253.305F), 298, (-2039.6F), (-1.0F), 1152.4089F, (-2039.6F));
      wall1.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall1.containsWallEndAt(298, 9.3F, (-1.0F));
      wall0.setWallAtEnd(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.intersectsRectangle((-253.305F), 1768.6844F, (-3681.2634F), 342.0F);
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      wall0.setThickness(9.3F);
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      wall1.getHeight();
      Float float0 = Float.valueOf(1768.6844F);
      wall1.setHeight(float0);
      wall0.setWallAtStart(wall1);
      Wall wall2 = new Wall((-253.305F), 298, (-253.305F), 298, 1152.4089F, (-253.305F));
      wall2.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall2.containsWallEndAt(298, 9.3F, (-1.0F));
      wall0.setWallAtEnd(wall2);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall2.containsPoint(1238.6F, (-253.305F), 1163.5132F);
      wall2.setXStart((-1.0F));
      Wall.clone((List<Wall>) linkedList0);
      wall2.getLevel();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("", 2694.3594F, 0.0F, 2694.3594F);
      assertEquals(2694.3594F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2694.3594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2694.3594F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2694.3594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(2694.3594F, level1.getHeight(), 0.01F);
      assertEquals(2694.3594F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getHeight();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2694.3594F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2694.3594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(2694.3594F, level1.getHeight(), 0.01F);
      assertEquals(2694.3594F, level1.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(2694.3594F, float0, 0.01F);
      
      Level level2 = level1.clone();
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertEquals(2694.3594F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2694.3594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(2694.3594F, level1.getHeight(), 0.01F);
      assertEquals(2694.3594F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2694.3594F, level2.getHeight(), 0.01F);
      assertEquals("", level2.getName());
      assertEquals(2694.3594F, level2.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      
      wall0.setLevel(level1);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2694.3594F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2694.3594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(2694.3594F, level1.getHeight(), 0.01F);
      assertEquals(2694.3594F, level1.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 0.0F, (-1.0F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.01F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Level level3 = level1.clone();
      assertNotSame(level0, level3);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level3, level0);
      assertNotSame(level3, level1);
      assertNotSame(level3, level2);
      assertEquals(2694.3594F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2694.3594F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("", level1.getName());
      assertEquals(2694.3594F, level1.getHeight(), 0.01F);
      assertEquals(2694.3594F, level1.getElevation(), 0.01F);
      assertEquals("", level3.getName());
      assertEquals(0.0F, level3.getFloorThickness(), 0.01F);
      assertEquals(2694.3594F, level3.getHeight(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(2694.3594F, level3.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertNotNull(level3);
      
      boolean boolean2 = wall0.containsWallEndAt(2694.3594F, 917.591F, (-1666.56F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Level level4 = wall0.getLevel();
      assertSame(level4, level1);
      assertNotSame(level4, level3);
      assertNotSame(level4, level2);
      assertNotSame(level4, level0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(2694.3594F, level4.getHeight(), 0.01F);
      assertEquals("", level4.getName());
      assertEquals(2694.3594F, level4.getElevation(), 0.01F);
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level0));
      assertNotNull(level4);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1172.343F));
      assertEquals((-1172.343F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1172.343F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1172.343F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare((-1172.343F), (-1172.343F));
      assertEquals(0, int0);
      
      wall0.setArcExtent(float1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall1.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1172.343F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1172.343F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1172.343F), wall1.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = wall1.containsWallStartAt((-1172.343F), (-4.149807F), (-4.149807F));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall1.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1172.343F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1172.343F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1172.343F), wall1.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      float float2 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float2, 0.01F);
      
      Float float3 = wall1.getArcExtent();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall1.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1172.343F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1172.343F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1172.343F), wall1.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((-1172.343F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      float float4 = wall1.getLength();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall1.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1172.343F), wall1.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1172.343F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1172.343F), wall1.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), 1152.4089F, (-1175.456F), (-2520.084F), 0.1F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      wall0.move(1152.4089F, 0.0F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1140.8854F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(2304.8179F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-23.04712F), wall0.getXStart(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1140.8854F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(2304.8179F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-23.04712F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1175.456F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1175.456F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1140.8854F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(2304.8179F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-23.04712F), wall0.getXStart(), 0.01F);
      assertNull(float2);
      
      wall0.setArcExtent(float0);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1140.8854F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(2304.8179F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2328.8354F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22083.793F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-23.04712F), wall0.getXStart(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-1.0F), (-1.0F), 1769.6844F, 1.0F, (-3707.75F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(884.3422F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1770.6855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1769.6844F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3707.75F), wall1.getThickness(), 0.01F);
      assertEquals(1770.6855F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float((-1417.39F));
      assertEquals((-1417.39F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max((-3707.75F), (-11.651F));
      assertEquals((-11.651F), float1, 0.01F);
      
      float float2 = Float.sum(534.0F, (-1.0F));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(533.0F, float2, 0.01F);
      
      float float3 = Float.sum((-11.651F), (-1.0F));
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-12.651F), float3, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals((-1417.39F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-3707.75F), wall2.getThickness(), 0.01F);
      assertEquals(1770.6855F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1769.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1770.6855F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(884.3422F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      wall0.setHeightAtEnd(float0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.offerLast(wall0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float4 = wall2.getHeightAtEnd();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals((-1417.39F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-3707.75F), wall2.getThickness(), 0.01F);
      assertEquals(1770.6855F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1769.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1770.6855F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(884.3422F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-1417.39F), (float)float4, 0.01F);
      assertNotNull(float4);
      
      float float5 = wall1.getStartPointToEndPointDistance();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(884.3422F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1770.6855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1769.6844F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3707.75F), wall1.getThickness(), 0.01F);
      assertEquals(1770.6855F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1770.6855F, float5, 0.01F);
      
      Wall.Property[] wall_PropertyArray1 = Wall.Property.values();
      assertNotSame(wall_PropertyArray1, wall_PropertyArray0);
      assertFalse(wall_PropertyArray1.equals((Object)wall_PropertyArray0));
      assertEquals(18, wall_PropertyArray1.length);
      assertNotNull(wall_PropertyArray1);
      
      HomeTexture homeTexture0 = wall2.getRightSideTexture();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals((-1417.39F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-3707.75F), wall2.getThickness(), 0.01F);
      assertEquals(1770.6855F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1769.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1770.6855F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(884.3422F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(homeTexture0);
      
      float float6 = wall2.getLength();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals((-1417.39F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-3707.75F), wall2.getThickness(), 0.01F);
      assertEquals(1770.6855F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1769.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1770.6855F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(884.3422F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1770.6855F, float6, 0.01F);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      int int0 = Float.compare(0.0F, 730.80444F);
      assertEquals((-1), int0);
      
      int int1 = Float.compare(557.8169F, 557.8169F);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      wall1.setHeight((Float) 557.8169F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1770.6855F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3707.75F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1770.6855F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1417.39F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1769.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(557.8169F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(884.3422F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1770.6855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1769.6844F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3707.75F), wall1.getThickness(), 0.01F);
      assertEquals(1770.6855F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-254.305F), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-114));
      assertEquals((-114), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.remainderUnsigned((-114), 1983);
      assertEquals(1363, int0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(integer0.equals((Object)int0));
      
      float float0 = wall0.getXStart();
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), float0, 0.01F);
      
      wall0.move(4706.654F, 417.103F);
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      
      Level level0 = new Level("", (-254.305F), (-462.3F), (-1323.1176F));
      assertEquals((-1323.1176F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-462.3F), level0.getFloorThickness(), 0.01F);
      assertEquals((-254.305F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      wall0.setLevel(level0);
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals((-1323.1176F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-462.3F), level0.getFloorThickness(), 0.01F);
      assertEquals((-254.305F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall((-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F));
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsWallStartAt((-2523.5144F), (-2523.5144F), 1);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertTrue(boolean0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      float float0 = 1.0F;
      float float1 = 806.31F;
      Wall wall0 = new Wall(1.0F, (-2703.47F), 1586.8849F, 0.0F, 806.31F);
      assertEquals(3134.291F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1586.8849F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3134.291F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(806.31F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(793.94244F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1351.735F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float float2 = wall0.getYEnd();
      assertEquals(3134.291F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1586.8849F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3134.291F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(806.31F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(793.94244F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1351.735F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(3134.291F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1586.8849F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3134.291F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(806.31F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(793.94244F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1351.735F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(3134.291F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1586.8849F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3134.291F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(806.31F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(793.94244F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1351.735F), wall0.getYArcCircleCenter(), 0.01F);
      
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(3134.291F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1586.8849F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3134.291F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(806.31F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(793.94244F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1351.735F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXEnd(1.0F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2703.47F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(806.31F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2703.47F, wall0.getLength(), 0.01F);
      assertEquals((-1351.735F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float3 = level1.getElevation();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(2695.0F, float3, 0.01F);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      try { 
        MockURL.URL((URL) null, "LEFT_SIDE_COLOR", uRLStreamHandler0);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: LEFT_SIDE_COLOR
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = new Level("", 0.0F, 1306.1448F, 0.0F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertNotSame(level1, level0);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = level1.getHeight();
      assertNotSame(level1, level0);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      level0.setName("");
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      level0.setFloorThickness(2695.0F);
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Level level2 = level1.clone();
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertEquals(1306.1448F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(0.0F, level2.getElevation(), 0.01F);
      assertEquals("", level2.getName());
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      
      wall0.setLevel(level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      
      Level level3 = level0.clone();
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      assertNotSame(level3, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level3.getHeight(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(2695.0F, level3.getElevation(), 0.01F);
      assertEquals(2695.0F, level3.getFloorThickness(), 0.01F);
      assertEquals("", level3.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level0));
      assertNotNull(level3);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 0.0F, (-3924.0F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.01F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      Level level4 = level1.clone();
      assertNotSame(level4, level2);
      assertNotSame(level4, level1);
      assertNotSame(level4, level0);
      assertNotSame(level4, level3);
      assertNotSame(level1, level3);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level1, level4);
      assertTrue(level4.isVisible());
      assertEquals(0.0F, level4.getElevation(), 0.01F);
      assertEquals(0.0F, level4.getHeight(), 0.01F);
      assertEquals(1306.1448F, level4.getFloorThickness(), 0.01F);
      assertEquals("", level4.getName());
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getElevation(), 0.01F);
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertNotNull(level4);
      
      boolean boolean2 = wall0.intersectsRectangle((-3924.0F), 0.0F, 2695.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean3 = wall0.containsWallStartAt((-396.721F), (-3924.0F), (-2051.5627F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer0);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart((-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideShininess((-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(316.789F, (-659.4F), (-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals(659.4F, wall0.getLength(), 0.01F);
      
      int int0 = Float.compare((-1030.8F), (-1030.8F));
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1030.8F), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(3302.1443F, (-755.245F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      wall0.setArcExtent((Float) (-755.245F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      
      float[][] floatArray2 = wall0.getPoints();
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(834, floatArray2.length);
      assertNotNull(floatArray2);
      
      boolean boolean1 = wall0.containsPoint((-1030.8F), 2047.52F, (-1.0F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-208.51535F), float0, 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(1.0F, (-943.1432F), 3929.1F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(3224.8F, 3224.8F, 3224.8F, 3224.8F, 0.0F, 1.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3224.8F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3224.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertNotNull(list2);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-1.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F));
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall((-11.371347F), (-11.371347F), (-11.371347F), (-11.371347F), (-11.371347F), (-11.371347F));
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setXStart((-11.371347F));
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(level0);
      
      wall0.setLevel((Level) null);
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertEquals((-11.371347F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.371347F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.371347F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.371347F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.371347F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.371347F), wall0.getThickness(), 0.01F);
      assertEquals((-11.371347F), wall0.getYStart(), 0.01F);
      assertEquals((-11.371347F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(341.318F, (-1.0F), 341.318F, 341.318F, 341.318F, (-155.24857F));
      assertEquals(341.318F, wall0.getXEnd(), 0.01F);
      assertEquals(342.318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(341.318F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(341.318F, wall0.getThickness(), 0.01F);
      assertEquals((-155.24857F), wall0.getHeight(), 0.01F);
      assertEquals(170.159F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(342.318F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(341.318F, wall0.getXStart(), 0.01F);
      assertEquals(341.318F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(341.318F, wall0.getXEnd(), 0.01F);
      assertEquals(342.318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(341.318F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(341.318F, wall0.getThickness(), 0.01F);
      assertEquals((-155.24857F), wall0.getHeight(), 0.01F);
      assertEquals(170.159F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(342.318F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(341.318F, wall0.getXStart(), 0.01F);
      assertEquals(341.318F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(342.318F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-155.24857F), wall1.getHeight(), 0.01F);
      assertEquals(341.318F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(341.318F, wall1.getYEnd(), 0.01F);
      assertEquals(342.318F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(341.318F, wall1.getXEnd(), 0.01F);
      assertEquals(170.159F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(341.318F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(341.318F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float0 = wall1.getLength();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(341.318F, wall0.getXEnd(), 0.01F);
      assertEquals(342.318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(341.318F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(341.318F, wall0.getThickness(), 0.01F);
      assertEquals((-155.24857F), wall0.getHeight(), 0.01F);
      assertEquals(170.159F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(342.318F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(341.318F, wall0.getXStart(), 0.01F);
      assertEquals(341.318F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(342.318F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-155.24857F), wall1.getHeight(), 0.01F);
      assertEquals(341.318F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(341.318F, wall1.getYEnd(), 0.01F);
      assertEquals(342.318F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(341.318F, wall1.getXEnd(), 0.01F);
      assertEquals(170.159F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(341.318F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(341.318F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(342.318F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = Integer.toUnsignedString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      wall0.setThickness(1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setXEnd((-1.0F));
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, (-2520.0845F), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 3743.3801F, 8192);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall0.setXStart((-1.0F));
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2520.0945F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2520.0945F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer2 = wall0.getLeftSideColor();
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2520.0945F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2520.0945F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1, (int)integer2);
      assertNotNull(integer2);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2520.0945F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2520.0945F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F), 1173.738F, 1152.4089F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-11.52356F), float0, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture(",LCrJlqZ[p", temporaryURLContent0, (-1.0F), 0.0F);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertNotNull(catalogTexture0);
      
      String string0 = catalogTexture0.getName();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertEquals(",LCrJlqZ[p", string0);
      assertNotNull(string0);
      
      TemporaryURLContent temporaryURLContent1 = (TemporaryURLContent)catalogTexture0.getImage();
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertSame(temporaryURLContent1, temporaryURLContent0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertFalse(temporaryURLContent1.isJAREntry());
      assertNotNull(temporaryURLContent1);
      
      float float1 = catalogTexture0.getWidth();
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      float float2 = catalogTexture0.getHeight();
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertEquals(",LCrJlqZ[p", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertNotNull(homeTexture0);
      
      wall1.setLeftSideTexture(homeTexture0);
      assertNotSame(wall1, wall0);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertEquals(",LCrJlqZ[p", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(0.0F, homeTexture0.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXStart((-0.26788926F));
      assertNotSame(wall1, wall0);
      assertEquals((-587.862F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1175.1881F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1175.1881F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-0.26788926F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setPattern(catalogTexture0);
      assertNotSame(wall1, wall0);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertEquals((-587.862F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1175.1881F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1175.1881F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-0.26788926F), wall1.getXStart(), 0.01F);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1240.4916F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(77497.375F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1240.4916F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(77497.375F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1740, floatArray0.length);
      assertNotNull(floatArray0);
      
      float float1 = wall0.getLength();
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1240.4916F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(77497.375F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(77497.375F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-298.42172F), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1465.7886F, wall0.getLength(), 0.01F);
      assertEquals(1465.7886F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-736.9389F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-298.42172F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1465.7886F, wall0.getLength(), 0.01F);
      assertEquals(1465.7886F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-736.9389F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-298.42172F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-114));
      assertEquals((-114), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.remainderUnsigned((-114), 1983);
      assertEquals(1363, int0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1465.7886F, wall0.getLength(), 0.01F);
      assertEquals(1465.7886F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-736.9389F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-298.42172F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(integer0.equals((Object)int0));
      
      float float0 = wall0.getXStart();
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1465.7886F, wall0.getLength(), 0.01F);
      assertEquals(1465.7886F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-736.9389F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-298.42172F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1175.456F), float0, 0.01F);
      
      wall0.move(4706.654F, 417.103F);
      assertEquals((-319.83588F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1465.7886F, wall0.getLength(), 0.01F);
      assertEquals(1465.7886F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals(118.681274F, wall0.getYEnd(), 0.01F);
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-319.83588F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1465.7886F, wall0.getLength(), 0.01F);
      assertEquals(1465.7886F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals(118.681274F, wall0.getYEnd(), 0.01F);
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean1 = wall0.intersectsRectangle(2.0F, (-298.42172F), (-114), (-298.42172F));
      assertEquals((-319.83588F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1465.7886F, wall0.getLength(), 0.01F);
      assertEquals(1465.7886F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals(118.681274F, wall0.getYEnd(), 0.01F);
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(2695.0F, float0, 0.01F);
      
      level0.setName("");
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level1));
      
      float float1 = level1.getHeight();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(2695.0F, float1, 0.01F);
      
      level0.setName("");
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      level0.setFloorThickness(2695.0F);
      assertNotSame(level0, level1);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Wall wall1 = new Wall(3509.3F, 1474.13F, 1306.1448F, (-2463.1F), 2.0F, 1520.3976F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4511.726F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(4511.726F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2463.1F), wall1.getYEnd(), 0.01F);
      assertEquals((-494.48505F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1520.3976F, wall1.getHeight(), 0.01F);
      assertEquals(2407.7224F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1306.1448F, wall1.getXEnd(), 0.01F);
      assertEquals(3509.3F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1474.13F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float2 = wall0.getHeight();
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float2);
      
      Float float3 = Float.valueOf((-2463.1F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-2463.1F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setXStart(0.0F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      float float4 = wall1.getYEnd();
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4511.726F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(4511.726F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2463.1F), wall1.getYEnd(), 0.01F);
      assertEquals((-494.48505F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1520.3976F, wall1.getHeight(), 0.01F);
      assertEquals(2407.7224F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1306.1448F, wall1.getXEnd(), 0.01F);
      assertEquals(3509.3F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1474.13F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals((-2463.1F), float4, 0.01F);
      
      Wall wall2 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      Float float5 = wall2.getHeight();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotEquals((float)float5, (float)float3, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float5, 0.01F);
      assertNotNull(float5);
      
      Float float6 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals(1768.6844F, (float)float6, 0.01F);
      assertNotNull(float6);
      
      wall2.setHeight(float6);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1768.6844F, wall2.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(boolean0);
      
      wall2.setLeftSideColor(integer0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1768.6844F, wall2.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(279.9);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(279.9F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      boolean boolean0 = float2.equals((Object) null);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertFalse(boolean0);
      
      wall0.setHeightAtEnd(float2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(279.9F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      int int0 = Float.compare(1768.6844F, 0.1F);
      assertEquals(1, int0);
      
      Float float3 = Float.valueOf(0.1F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = Float.valueOf(0.1F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(0.1F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      float float5 = Float.sum(1856.213F, 1152.4089F);
      assertEquals(3008.622F, float5, 0.01F);
      
      Float float6 = Float.valueOf((-1.0F));
      assertNotEquals((float)float6, (float)float0, 0.01F);
      assertNotEquals((float)float6, (float)float4, 0.01F);
      assertNotEquals((float)float6, (float)float2, 0.01F);
      assertNotEquals((float)float6, (float)float3, 0.01F);
      assertNotEquals((float)float6, (float)float5, 0.01F);
      assertNotEquals((float)float6, (float)float1, 0.01F);
      assertEquals((-1.0F), (float)float6, 0.01F);
      assertNotNull(float6);
      
      wall0.setArcExtent(float4);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(279.9F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float6, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float5, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(279.9F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(level0);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(279.9F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(279.9F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float7 = wall1.getThickness();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(279.9F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(279.9F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float7, float5, 0.01F);
      assertEquals(1173.738F, float7, 0.01F);
      
      Float float8 = Float.valueOf(1173.738F);
      assertNotEquals((float)float8, (float)float6, 0.01F);
      assertNotEquals((float)float8, (float)float3, 0.01F);
      assertNotEquals((float)float8, (float)float1, 0.01F);
      assertNotEquals((float)float8, (float)float0, 0.01F);
      assertEquals((float)float8, (float)float7, 0.01F);
      assertNotEquals((float)float8, (float)float5, 0.01F);
      assertNotEquals((float)float8, (float)float4, 0.01F);
      assertNotEquals((float)float8, (float)float2, 0.01F);
      assertEquals(1173.738F, (float)float8, 0.01F);
      assertNotNull(float8);
      
      Float float9 = Float.valueOf(4051.4744F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertEquals(4051.4744F, (float)float9, 0.01F);
      assertNotNull(float9);
      
      wall1.setHeight(float9);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(279.9F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(4051.4744F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(279.9F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotEquals((float)float9, (float)float6, 0.01F);
      assertNotEquals((float)float9, (float)float8, 0.01F);
      assertNotEquals((float)float9, (float)float5, 0.01F);
      assertNotEquals((float)float9, (float)float7, 0.01F);
      assertNotEquals((float)float9, (float)float0, 0.01F);
      assertNotEquals((float)float9, (float)float4, 0.01F);
      assertNotEquals((float)float9, (float)float2, 0.01F);
      assertNotEquals((float)float9, (float)float3, 0.01F);
      assertNotEquals((float)float9, (float)float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1151.5126F, (-2640.304F), 1174.6174F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(23.104858F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1151.5126F, wall0.getYEnd(), 0.01F);
      assertEquals(1163.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(23.104858F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(1151.5126F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(23.104858F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1151.5126F, wall0.getYEnd(), 0.01F);
      assertEquals(1163.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(23.104858F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1151.5126F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(23.104858F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1151.5126F, wall0.getYEnd(), 0.01F);
      assertEquals(1163.065F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(23.104858F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1151.5126F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1174.6174F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = Float.compare(1174.6174F, (-1175.456F));
      assertEquals(1, int0);
      
      wall0.setYEnd(1174.6174F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1151.5126F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1151.5126F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Level level0 = wall0.getLevel();
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1151.5126F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 3280.11F, 1900.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1640.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3280.11F, wall0.getLength(), 0.01F);
      assertEquals(3280.11F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3280.11F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1900.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1640.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3280.11F, wall0.getLength(), 0.01F);
      assertEquals(3280.11F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3280.11F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1900.0F, wall0.getThickness(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1640.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3280.11F, wall0.getLength(), 0.01F);
      assertEquals(3280.11F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3280.11F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1900.0F, wall0.getThickness(), 0.01F);
      
      wall0.move(0.0F, 0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1640.055F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3280.11F, wall0.getLength(), 0.01F);
      assertEquals(3280.11F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3280.11F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1900.0F, wall0.getThickness(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(1152.4089F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeight(float0);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-11.52356F), float1, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt((-1175.456F), 1152.4089F, 2341.982F);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float float2 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(2327.865F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), 1152.4089F, (-1175.456F), (-2520.084F), 0.1F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(1152.4089F, 1152.4089F, 1152.4089F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertTrue(boolean0);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2520.084F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2327.865F, wall1.getLength(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(2327.865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-11.52356F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2520.084F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2327.865F, wall1.getLength(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(2327.865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-11.52356F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      int int0 = Float.floatToIntBits(1733.7264F);
      assertEquals(1155053375, int0);
      
      wall1.setArcExtent((Float) 1733.7264F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2520.084F), wall1.getThickness(), 0.01F);
      assertEquals(1733.7264F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-6471.058F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(9400274.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(2327.865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-11.52356F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2520.084F), wall1.getThickness(), 0.01F);
      assertEquals(1733.7264F, wall1.getArcExtent(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-6471.058F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(9400274.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(2327.865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-11.52356F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5376, floatArray0.length);
      assertNotNull(floatArray0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall1));
      assertNotNull(linkedList1);
      
      // Undeclared exception!
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(9.3F, (-1.0F), (-1175.456F), 3385.13F, 1152.4089F, (-253.305F));
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      wall1.setWallAtStart(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall2.getYArcCircleCenter();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1692.065F, float2, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt(1173.738F, (-1.0F), 4022.4F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertTrue(boolean0);
      
      wall1.setWallAtEnd(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      ListIterator<Wall> listIterator0 = linkedList0.listIterator();
      assertEquals(0, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(listIterator0);
      
      boolean boolean1 = wall0.containsPoint(86.455246F, 1174.6174F, (-1175.456F));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setXStart((-1.0F));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(1174.666F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertFalse(list0.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(list0);
      
      Level level0 = wall1.getLevel();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(level0);
      
      float float3 = wall2.getStartPointToEndPointDistance();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(3587.4116F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((-1172.343F));
      assertEquals((-1172.343F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Level level0 = new Level("", (-2037.6F), 0.0F, 2695.0F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      level1.setName("");
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      level0.setFloorThickness(2695.0F);
      assertNotSame(level0, level1);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      
      Level level2 = level0.clone();
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level2.getName());
      assertEquals(2695.0F, level2.getHeight(), 0.01F);
      assertEquals(2695.0F, level2.getFloorThickness(), 0.01F);
      assertEquals((-2037.6F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      
      wall0.setLevel(level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      
      Level level3 = level0.clone();
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level3, level2);
      assertNotSame(level3, level1);
      assertNotSame(level3, level0);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level3.getElevation(), 0.01F);
      assertEquals(2695.0F, level3.getHeight(), 0.01F);
      assertEquals(2695.0F, level3.getFloorThickness(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals("", level3.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level0));
      assertNotNull(level3);
      
      boolean boolean0 = wall0.containsPoint(48.669F, 2695.0F, (-1.0F));
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(boolean0);
      
      Level level4 = level1.clone();
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level4);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level4, level0);
      assertNotSame(level4, level1);
      assertNotSame(level4, level2);
      assertNotSame(level4, level3);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals((-2037.6F), level4.getElevation(), 0.01F);
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals("", level4.getName());
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level3));
      assertNotNull(level4);
      
      level4.setElevation(88.89F);
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level4);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level4, level0);
      assertNotSame(level4, level1);
      assertNotSame(level4, level2);
      assertNotSame(level4, level3);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals("", level4.getName());
      assertEquals(88.89F, level4.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level4));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level3));
      
      level4.setName("HEIGHT");
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level4);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level4, level0);
      assertNotSame(level4, level1);
      assertNotSame(level4, level2);
      assertNotSame(level4, level3);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals("HEIGHT", level4.getName());
      assertEquals(88.89F, level4.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level4));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level3));
      
      boolean boolean1 = wall0.intersectsRectangle(1169.0F, 0.0F, 710.0F, (-2889.47F));
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Level level5 = level1.clone();
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level5);
      assertNotSame(level0, level1);
      assertNotSame(level1, level4);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level5);
      assertNotSame(level5, level3);
      assertNotSame(level5, level1);
      assertNotSame(level5, level2);
      assertNotSame(level5, level4);
      assertNotSame(level5, level0);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals("", level5.getName());
      assertEquals(2695.0F, level5.getHeight(), 0.01F);
      assertEquals((-2037.6F), level5.getElevation(), 0.01F);
      assertTrue(level5.isVisible());
      assertEquals(0.0F, level5.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level4));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level5.equals((Object)level3));
      assertFalse(level5.equals((Object)level1));
      assertFalse(level5.equals((Object)level2));
      assertFalse(level5.equals((Object)level4));
      assertFalse(level5.equals((Object)level0));
      assertNotNull(level5);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(integer0);
      
      boolean boolean2 = wall0.isAtLevel(level4);
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level2);
      assertNotSame(level0, level5);
      assertNotSame(level0, level1);
      assertNotSame(level1, level4);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level5);
      assertNotSame(level4, level0);
      assertNotSame(level4, level1);
      assertNotSame(level4, level2);
      assertNotSame(level4, level5);
      assertNotSame(level4, level3);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals("HEIGHT", level4.getName());
      assertEquals(88.89F, level4.getElevation(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level5));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level4));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level5));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level5));
      assertFalse(level4.equals((Object)level3));
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F));
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer((-1342));
      assertEquals((-1342), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1342), (int)wall0.getRightSideColor());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1342), (int)wall0.getRightSideColor());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(1152.4089F);
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1173.738F, (-1175.456F), 93.24F, 2.0F, 93.24F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertEquals(93.24F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1173.738F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1173.738F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare((-4066.8496F), 1.0F);
      assertEquals((-1), int0);
      
      wall0.setArcExtent(float0);
      assertEquals(104326.86F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2155.2944F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.24F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(104326.86F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2155.2944F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.24F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertEquals(650, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean0 = wall0.containsPoint((-4066.8496F), (-4103.97F), 1173.738F);
      assertEquals(104326.86F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2155.2944F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.24F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean1 = linkedList0.add(wall0);
      assertEquals(104326.86F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2155.2944F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.24F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(104326.86F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2155.2944F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.24F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.24F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertEquals(104326.86F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2155.2944F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1080.498F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(633.489F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.24F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(93.24F, wall0.getArcExtent(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1173.738F, wall0.getYStart(), 0.01F);
      assertEquals(93.24F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(93.24F, wall0.getYEnd(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall((-624.0F), 3783.5476F, (-624.0F), 1.0F, 1.0F, 5176.0F);
      assertEquals(1892.2738F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3782.5476F, wall0.getLength(), 0.01F);
      assertEquals((-624.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-624.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-624.0F), wall0.getXEnd(), 0.01F);
      assertEquals(5176.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3783.5476F, wall0.getYStart(), 0.01F);
      assertEquals(3782.5476F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Y72F2x)Ic2RARC(;;", (PropertyChangeListener) null);
      assertEquals("Y72F2x)Ic2RARC(;;", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Wall wall1 = new Wall(653.51825F, 0.0F, 2483.0F, 0.0F, 2075.5308F);
      assertEquals(2483.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1829.4817F, wall1.getLength(), 0.01F);
      assertEquals(1829.4817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1568.2592F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(653.51825F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2075.5308F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotSame(wall1, wall0);
      assertEquals(2483.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1829.4817F, wall1.getLength(), 0.01F);
      assertEquals(1829.4817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1568.2592F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(653.51825F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2075.5308F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, "Oy[y", object0, (Object) null);
      assertEquals(2483.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1829.4817F, wall1.getLength(), 0.01F);
      assertEquals(1829.4817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1568.2592F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(653.51825F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2075.5308F, wall1.getThickness(), 0.01F);
      assertEquals("Oy[y", propertyChangeEvent0.getPropertyName());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(propertyChangeEvent0);
      
      String string0 = propertyChangeEvent0.getPropertyName();
      assertNotSame(wall1, wall0);
      assertEquals(2483.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1829.4817F, wall1.getLength(), 0.01F);
      assertEquals(1829.4817F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1568.2592F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(653.51825F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2075.5308F, wall1.getThickness(), 0.01F);
      assertEquals("Oy[y", propertyChangeEvent0.getPropertyName());
      assertFalse(wall1.equals((Object)wall0));
      assertEquals("Oy[y", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.beans.PropertyChangeListenerProxy", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYEnd((-11.88105F));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((double) (-11.88105F));
      assertEquals((-11.88105F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-11.88105F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-11.88105F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      TextureImage textureImage0 = null;
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(298);
      assertEquals(298, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setThickness(8.119336F);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.119336F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall((-253.305F), 298, (-2039.6F), (-1.0F), 1152.4089F, (-2039.6F));
      assertEquals(1811.1462F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-253.305F), wall1.getXStart(), 0.01F);
      assertEquals((-2039.6F), wall1.getHeight(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(298.0F, wall1.getYStart(), 0.01F);
      assertEquals(148.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1811.1462F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1146.4525F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2039.6F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.119336F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1811.1462F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-253.305F), wall1.getXStart(), 0.01F);
      assertEquals((-2039.6F), wall1.getHeight(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(298.0F, wall1.getYStart(), 0.01F);
      assertEquals(148.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1811.1462F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1146.4525F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2039.6F), wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.119336F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1163.5132F, float0, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt(298, 8.119336F, (-1.0F));
      assertNotSame(wall1, wall0);
      assertEquals(1811.1462F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-253.305F), wall1.getXStart(), 0.01F);
      assertEquals((-2039.6F), wall1.getHeight(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(298.0F, wall1.getYStart(), 0.01F);
      assertEquals(148.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1811.1462F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1146.4525F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2039.6F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(8.119336F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1811.1462F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-253.305F), wall1.getXStart(), 0.01F);
      assertEquals((-2039.6F), wall1.getHeight(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(298.0F, wall1.getYStart(), 0.01F);
      assertEquals(148.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1811.1462F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1146.4525F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2039.6F), wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertEquals(1811.1462F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-253.305F), wall1.getXStart(), 0.01F);
      assertEquals((-2039.6F), wall1.getHeight(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(298.0F, wall1.getYStart(), 0.01F);
      assertEquals(148.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1811.1462F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1146.4525F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2039.6F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean1 = wall1.containsWallEndAt(1163.5132F, (-1.0F), (-2318.54F));
      assertNotSame(wall1, wall0);
      assertEquals(1811.1462F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-253.305F), wall1.getXStart(), 0.01F);
      assertEquals((-2039.6F), wall1.getHeight(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(298.0F, wall1.getYStart(), 0.01F);
      assertEquals(148.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1811.1462F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1146.4525F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2039.6F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Level level0 = wall1.getLevel();
      assertNotSame(wall1, wall0);
      assertEquals(1811.1462F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-253.305F), wall1.getXStart(), 0.01F);
      assertEquals((-2039.6F), wall1.getHeight(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(298.0F, wall1.getYStart(), 0.01F);
      assertEquals(148.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1811.1462F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1146.4525F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2039.6F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      int int0 = Float.compare(0.0F, (-2520.0845F));
      assertEquals(1, int0);
      
      int int1 = Float.compare(0.0F, 1633.77F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(1, (-2640.304F));
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = Float.compare(9.3F, 9.3F);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      wall0.setArcExtent((Float) 9.3F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.3F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1338.7523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(16604.682F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1181.3221F), wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.3F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1338.7523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(16604.682F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1181.3221F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(260, floatArray1.length);
      assertNotNull(floatArray1);
      
      boolean boolean0 = wall0.containsPoint((-1), 0.0F, (-2640.304F));
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.3F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1338.7523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(16604.682F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1181.3221F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.3F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1338.7523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(16604.682F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1181.3221F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1338.7523F), float0, 0.01F);
      
      wall0.setRightSideShininess((-3343.19F));
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.3F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1338.7523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-3343.19F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(16604.682F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1181.3221F), wall0.getYArcCircleCenter(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt((-1.0F), 3929.1F, (-2051.5627F));
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.3F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1338.7523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-3343.19F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(16604.682F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1181.3221F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1768.6844F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = Float.min(1768.6844F, 1173.738F);
      assertEquals(1173.738F, float2, 0.01F);
      
      float float3 = Float.sum(2.0F, 2462.3F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(2464.3F, float3, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float4 = wall1.getArcExtent();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float4);
      
      float float5 = 2.0F;
      boolean boolean0 = Float.isFinite((-1.0F));
      assertTrue(boolean0);
      
      boolean boolean1 = wall1.containsWallStartAt(2.0F, 2.0F, 2462.3F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(" doesn't contain texture ", (PropertyChangeListener) null);
      assertEquals(" doesn't contain texture ", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.setLeftSideShininess(1173.738F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, (String) null, wall0, "TX.FzAcz~M^9oq\"v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall(1174.6174F, 1174.6174F, 1152.4089F, (-1175.456F), (-1175.456F));
      assertEquals(1163.5132F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2350.1785F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.41931152F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getXStart(), 0.01F);
      assertEquals(2350.1785F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertEquals(1163.5132F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2350.1785F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.41931152F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getXStart(), 0.01F);
      assertEquals(2350.1785F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setThickness(298);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(298.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(298.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(298.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1163.5132F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2350.1785F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.41931152F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getXStart(), 0.01F);
      assertEquals(2350.1785F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(298.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall((-253.305F), 298, (-253.305F), 298, 1152.4089F, (-253.305F));
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXStart(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      wall2.setWallAtStart(wall0);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1163.5132F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2350.1785F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.41931152F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getXStart(), 0.01F);
      assertEquals(2350.1785F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXStart(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1163.5132F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2350.1785F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.41931152F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getXStart(), 0.01F);
      assertEquals(2350.1785F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-0.41931152F), float2, 0.01F);
      
      boolean boolean0 = wall2.containsWallEndAt(298, 9.3F, (-1.0F));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXStart(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1163.5132F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2350.1785F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals((-0.41931152F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getXStart(), 0.01F);
      assertEquals(2350.1785F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXStart(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall2));
      assertNotNull(linkedList0);
      
      boolean boolean1 = wall2.containsPoint(1238.6F, (-253.305F), (-0.41931152F));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXStart(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall2.setXStart((-1.0F));
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(252.305F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(252.305F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-127.1525F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      List<Wall> list0 = new LinkedList<Wall>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(wall2));
      assertNotNull(list0);
      
      Level level0 = wall2.getLevel();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(252.305F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(252.305F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-127.1525F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(level0);
      
      Wall wall3 = wall2.getWallAtStart();
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1174.6174F, wall3.getYStart(), 0.01F);
      assertEquals(2350.1785F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals(1174.6174F, wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-0.41931152F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall3.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall3.getYEnd(), 0.01F);
      assertEquals(1163.5132F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2350.1785F, wall3.getLength(), 0.01F);
      assertEquals(1152.4089F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-253.305F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(252.305F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(298.0F, wall2.getYStart(), 0.01F);
      assertEquals(252.305F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-127.1525F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(298.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall3);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(9.3F, (-1.0F), (-1175.456F), 3385.13F, 1152.4089F, (-253.305F));
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      wall1.setWallAtStart(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall2));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall2));
      assertFalse(list0.contains(wall2));
      assertNotNull(list0);
      
      wall2.setArcExtent(float1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall2.getRightSideColor());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(1682.5222F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3172911.2F, wall2.getLength(), 0.01F);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-610.35205F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall2.getYArcCircleCenter();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall2.getRightSideColor());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(1682.5222F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3172911.2F, wall2.getLength(), 0.01F);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-610.35205F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1682.5222F, float2, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("z~w\"</+%RtB", propertyChangeListener0);
      assertEquals("z~w\"</+%RtB", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall2.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall2.getRightSideColor());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(1682.5222F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3172911.2F, wall2.getLength(), 0.01F);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-610.35205F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals("z~w\"</+%RtB", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsWallEndAt(1173.738F, (-1.0F), 4022.4F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertTrue(boolean0);
      
      wall1.setWallAtEnd(wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(1682.5222F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3172911.2F, wall2.getLength(), 0.01F);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-610.35205F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall2));
      assertNotNull(linkedList1);
      
      ListIterator<Wall> listIterator0 = linkedList1.listIterator();
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall2));
      assertNotNull(listIterator0);
      
      boolean boolean1 = wall0.containsPoint(1152.4089F, 2.0F, 246.5F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      wall0.setXStart((-1.0F));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.666F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList1.contains(wall2));
      assertFalse(list1.contains(wall2));
      assertNotNull(list1);
      
      Level level0 = wall0.getLevel();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.666F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.666F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(level0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-833.3791F), (-833.3791F), (-833.3791F), 889.4654F, 889.4654F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-833.3791F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1722.8445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(28.043152F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-833.3791F), wall0.getXEnd(), 0.01F);
      assertEquals(889.4654F, wall0.getThickness(), 0.01F);
      assertEquals((-833.3791F), wall0.getXStart(), 0.01F);
      assertEquals(1722.8445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-833.3791F), wall0.getYStart(), 0.01F);
      assertEquals(889.4654F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("qJUBF}'~E!<z`8=b0N", propertyChangeListener0);
      assertEquals("qJUBF}'~E!<z`8=b0N", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-833.3791F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1722.8445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(28.043152F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-833.3791F), wall0.getXEnd(), 0.01F);
      assertEquals(889.4654F, wall0.getThickness(), 0.01F);
      assertEquals((-833.3791F), wall0.getXStart(), 0.01F);
      assertEquals(1722.8445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-833.3791F), wall0.getYStart(), 0.01F);
      assertEquals(889.4654F, wall0.getYEnd(), 0.01F);
      assertEquals("qJUBF}'~E!<z`8=b0N", propertyChangeListenerProxy0.getPropertyName());
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-833.3791F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1722.8445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(28.043152F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-833.3791F), wall0.getXEnd(), 0.01F);
      assertEquals(889.4654F, wall0.getThickness(), 0.01F);
      assertEquals((-833.3791F), wall0.getXStart(), 0.01F);
      assertEquals(1722.8445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-833.3791F), wall0.getYStart(), 0.01F);
      assertEquals(889.4654F, wall0.getYEnd(), 0.01F);
      assertEquals((-833.3791F), wall1.getXEnd(), 0.01F);
      assertEquals(889.4654F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-833.3791F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1722.8445F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(889.4654F, wall1.getYEnd(), 0.01F);
      assertEquals(1722.8445F, wall1.getLength(), 0.01F);
      assertEquals((-833.3791F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-833.3791F), wall1.getXStart(), 0.01F);
      assertEquals(28.043152F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-833.3791F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1722.8445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(28.043152F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-833.3791F), wall0.getXEnd(), 0.01F);
      assertEquals(889.4654F, wall0.getThickness(), 0.01F);
      assertEquals((-833.3791F), wall0.getXStart(), 0.01F);
      assertEquals(1722.8445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-833.3791F), wall0.getYStart(), 0.01F);
      assertEquals(889.4654F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(textureImage0);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-833.3791F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1722.8445F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(28.043152F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-833.3791F), wall0.getXEnd(), 0.01F);
      assertEquals(889.4654F, wall0.getThickness(), 0.01F);
      assertEquals((-833.3791F), wall0.getXStart(), 0.01F);
      assertEquals(1722.8445F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-833.3791F), wall0.getYStart(), 0.01F);
      assertEquals(889.4654F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float0);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = Integer.toUnsignedString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      wall0.setThickness(1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(integer1.equals((Object)integer0));
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), float0, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(level0);
      
      wall0.setLevel((Level) null);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, (-2520.0845F), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 3743.3801F, 8192);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall0.setXStart((-1.0F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      
      Wall.Property[] wall_PropertyArray1 = Wall.Property.values();
      assertNotSame(wall_PropertyArray1, wall_PropertyArray0);
      assertFalse(wall_PropertyArray1.equals((Object)wall_PropertyArray0));
      assertEquals(18, wall_PropertyArray1.length);
      assertNotNull(wall_PropertyArray1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall((-2422.749F), (-2422.749F), 1875.424F, (-2422.749F), (-758.5497F), (-2422.749F));
      assertEquals((-758.5497F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2422.749F), wall0.getYStart(), 0.01F);
      assertEquals((-2422.749F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2422.749F), wall0.getXStart(), 0.01F);
      assertEquals(1875.424F, wall0.getXEnd(), 0.01F);
      assertEquals((-2422.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-273.66254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2422.749F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf((-1600));
      assertEquals((-1600), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1600));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1600), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((-1600));
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals((-1600), (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf(2370);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(2370, (int)integer3);
      assertNotNull(integer3);
      
      int int0 = Integer.sum(33, 463);
      assertEquals(496, int0);
      
      Integer integer4 = Integer.valueOf(33);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(33, (int)integer4);
      assertNotNull(integer4);
      
      wall0.setLeftSideColor(integer4);
      assertEquals((-758.5497F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2422.749F), wall0.getYStart(), 0.01F);
      assertEquals((-2422.749F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getLeftSideColor());
      assertEquals(4298.173F, wall0.getLength(), 0.01F);
      assertEquals((-2422.749F), wall0.getXStart(), 0.01F);
      assertEquals(1875.424F, wall0.getXEnd(), 0.01F);
      assertEquals((-2422.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-273.66254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2422.749F), wall0.getHeight(), 0.01F);
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer0));
      
      Integer integer5 = new Integer(0);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertEquals(0, (int)integer5);
      assertNotNull(integer5);
      
      boolean boolean0 = integer5.equals("p),C=");
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(boolean0);
      
      wall0.setRightSideColor(integer5);
      assertEquals((-758.5497F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals((-2422.749F), wall0.getYStart(), 0.01F);
      assertEquals((-2422.749F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(33, (int)wall0.getLeftSideColor());
      assertEquals(4298.173F, wall0.getLength(), 0.01F);
      assertEquals((-2422.749F), wall0.getXStart(), 0.01F);
      assertEquals(1875.424F, wall0.getXEnd(), 0.01F);
      assertEquals((-2422.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-273.66254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2422.749F), wall0.getHeight(), 0.01F);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      
      int int1 = Integer.max((-1600), 3237);
      assertFalse(int1 == int0);
      assertEquals(3237, int1);
      
      Integer integer6 = Integer.valueOf((-1960));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals((-1960), (int)integer6);
      assertNotNull(integer6);
      
      wall0.setLeftSideColor(integer6);
      assertEquals((-758.5497F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals((-1960), (int)wall0.getLeftSideColor());
      assertEquals((-2422.749F), wall0.getYStart(), 0.01F);
      assertEquals((-2422.749F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getLength(), 0.01F);
      assertEquals((-2422.749F), wall0.getXStart(), 0.01F);
      assertEquals(1875.424F, wall0.getXEnd(), 0.01F);
      assertEquals((-2422.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-273.66254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2422.749F), wall0.getHeight(), 0.01F);
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer1));
      
      wall0.setLeftSideColor(integer2);
      assertEquals((-758.5497F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals((-2422.749F), wall0.getYStart(), 0.01F);
      assertEquals((-2422.749F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getLength(), 0.01F);
      assertEquals((-1600), (int)wall0.getLeftSideColor());
      assertEquals((-2422.749F), wall0.getXStart(), 0.01F);
      assertEquals(1875.424F, wall0.getXEnd(), 0.01F);
      assertEquals((-2422.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-273.66254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2422.749F), wall0.getHeight(), 0.01F);
      assertFalse(integer2.equals((Object)integer5));
      assertTrue(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer6));
      assertFalse(integer2.equals((Object)integer3));
      assertTrue(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)int1));
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      wall0.setRightSideColor(integer5);
      assertEquals((-758.5497F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals((-2422.749F), wall0.getYStart(), 0.01F);
      assertEquals((-2422.749F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getLength(), 0.01F);
      assertEquals((-1600), (int)wall0.getLeftSideColor());
      assertEquals((-2422.749F), wall0.getXStart(), 0.01F);
      assertEquals(1875.424F, wall0.getXEnd(), 0.01F);
      assertEquals((-2422.749F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4298.173F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-273.66254F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2422.749F), wall0.getHeight(), 0.01F);
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer6));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, (PropertyChangeListener) null);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, (-7.1F));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      wall0.setPattern((TextureImage) null);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      Integer integer0 = new Integer(1566);
      assertEquals(1566, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean1 = wall1.containsPoint(0.0F, 1566, 0.0F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = wall0.getXArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, float0, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(3224.8F, 3224.8F, 3224.8F, 3385.65F, 0.0F, 1.0F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(160.84985F, wall0.getLength(), 0.01F);
      assertEquals(3385.65F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3305.225F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(160.84985F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(160.84985F, wall0.getLength(), 0.01F);
      assertEquals(3385.65F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3305.225F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(160.84985F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      float float0 = wall0.getLength();
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(160.84985F, wall0.getLength(), 0.01F);
      assertEquals(3385.65F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3305.225F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(160.84985F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(160.84985F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1172.343F));
      assertEquals((-1172.343F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1172.343F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1172.343F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare((-1172.343F), (-1172.343F));
      assertEquals(0, int0);
      
      wall0.setArcExtent(float1);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      wall0.setHeightAtEnd(float1);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(4695.761F, 3004.5847F, 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(boolean0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      wall0.setRightSideColor((Integer) null);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-11.52356F), float0, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall1.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall1.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1152.4089F, wall1.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      Float float1 = new Float(1152.4089F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1152.4089F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall1));
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, float1, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-455.66F), (-455.66F), 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall wall1 = new Wall((-0.37783998F), (-3089.3481F), 1957.7F, 2.0F, (-3277.4558F));
      assertEquals(2.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-3277.4558F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(978.6611F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1957.7F, wall1.getXEnd(), 0.01F);
      assertEquals((-3089.3481F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3659.3035F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1543.6741F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-0.37783998F), wall1.getXStart(), 0.01F);
      assertEquals(3659.3035F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList0);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list1.contains(wall1));
      assertNotNull(list1);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.equals((Object)wall1));
      assertNull(homeTexture0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(2885.175F, 2885.175F, 2885.175F, 0.034289952F, 1.0F, (-2337.7883F));
      assertEquals(2885.175F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2337.7883F), wall1.getHeight(), 0.01F);
      assertEquals(2885.175F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2885.175F, wall1.getYStart(), 0.01F);
      assertEquals(2885.1409F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.175F, wall1.getXStart(), 0.01F);
      assertEquals(0.034289952F, wall1.getYEnd(), 0.01F);
      assertEquals(2885.1409F, wall1.getLength(), 0.01F);
      assertEquals(1442.6046F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-2337.7883F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2337.7883F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare((-2337.7883F), 1.0F);
      assertEquals((-1), int0);
      
      wall1.setArcExtent(float1);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.5337128E7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2337.7883F), wall1.getHeight(), 0.01F);
      assertEquals(2885.175F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-3514.7883F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2885.175F, wall1.getYStart(), 0.01F);
      assertEquals(2885.1409F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.175F, wall1.getXStart(), 0.01F);
      assertEquals((-2337.7883F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.034289952F, wall1.getYEnd(), 0.01F);
      assertEquals(1442.6046F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.5337128E7F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2337.7883F), wall1.getHeight(), 0.01F);
      assertEquals(2885.175F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals((-3514.7883F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2885.175F, wall1.getYStart(), 0.01F);
      assertEquals(2885.1409F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.175F, wall1.getXStart(), 0.01F);
      assertEquals((-2337.7883F), wall1.getArcExtent(), 0.01F);
      assertEquals(0.034289952F, wall1.getYEnd(), 0.01F);
      assertEquals(1442.6046F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(7836, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall wall2 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      wall1.containsPoint(0.034289952F, 279.9922F, (-2337.7883F));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall((-762.1955F), (-762.1955F), 1129.0F, (-762.1955F), 1129.0F, (-613.3F));
      assertEquals(1129.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-762.1955F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-613.3F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-762.1955F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1891.1956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(183.40225F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-762.1955F), wall0.getYStart(), 0.01F);
      assertEquals(1129.0F, wall0.getThickness(), 0.01F);
      assertEquals(1891.1956F, wall0.getLength(), 0.01F);
      assertEquals((-762.1955F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1129.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-762.1955F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-613.3F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-762.1955F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1891.1956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(183.40225F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-762.1955F), wall0.getYStart(), 0.01F);
      assertEquals(1129.0F, wall0.getThickness(), 0.01F);
      assertEquals(1891.1956F, wall0.getLength(), 0.01F);
      assertEquals((-762.1955F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotNull(list1);
      
      List<Wall> list2 = Wall.clone(list1);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertNotNull(list2);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1129.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-762.1955F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-613.3F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-762.1955F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1891.1956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(183.40225F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-762.1955F), wall0.getYStart(), 0.01F);
      assertEquals(1129.0F, wall0.getThickness(), 0.01F);
      assertEquals(1891.1956F, wall0.getLength(), 0.01F);
      assertEquals((-762.1955F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float0 = wall0.getArcExtent();
      assertEquals(1129.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-762.1955F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-613.3F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-762.1955F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1891.1956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(183.40225F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-762.1955F), wall0.getYStart(), 0.01F);
      assertEquals(1129.0F, wall0.getThickness(), 0.01F);
      assertEquals(1891.1956F, wall0.getLength(), 0.01F);
      assertEquals((-762.1955F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(float0);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertEquals(1129.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-762.1955F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-613.3F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-762.1955F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1891.1956F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(183.40225F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-762.1955F), wall0.getYStart(), 0.01F);
      assertEquals(1129.0F, wall0.getThickness(), 0.01F);
      assertEquals(1891.1956F, wall0.getLength(), 0.01F);
      assertEquals((-762.1955F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1226.93F, 1226.93F, 1226.93F, (-1382.5F));
      assertEquals(1225.93F, wall0.getLength(), 0.01F);
      assertEquals(613.965F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1382.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1226.93F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.93F, wall0.getXEnd(), 0.01F);
      assertEquals(1226.93F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.93F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1225.93F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(1225.93F, wall0.getLength(), 0.01F);
      assertEquals(613.965F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1382.5F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1226.93F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1226.93F, wall0.getXEnd(), 0.01F);
      assertEquals(1226.93F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1226.93F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1225.93F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(2695.0F, float0, 0.01F);
      
      float float1 = level1.getHeight();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(2695.0F, float1, 0.01F);
      
      level0.setName("");
      assertNotSame(level0, level1);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      level0.setFloorThickness(2695.0F);
      assertNotSame(level0, level1);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Wall wall1 = new Wall(3509.3F, 1474.13F, 1306.1448F, (-2463.1F), 2.0F, 1520.3976F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(4511.726F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1474.13F, wall1.getYStart(), 0.01F);
      assertEquals(4511.726F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3509.3F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2407.7224F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-494.48505F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1306.1448F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1520.3976F, wall1.getHeight(), 0.01F);
      assertEquals((-2463.1F), wall1.getYEnd(), 0.01F);
      assertEquals(2.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float2 = wall0.getHeight();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(float2);
      
      Float float3 = Float.valueOf((-2463.1F));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((-2463.1F), (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight((Float) null);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F));
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart((-659.4F));
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess((-659.4F));
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(316.789F, (-659.4F), (-659.4F));
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      wall0.setYEnd(0.0F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(659.4F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      int int0 = Float.compare((-1030.8F), (-1030.8F));
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1030.8F), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(3302.1443F, (-755.245F));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      wall0.setArcExtent((Float) (-755.245F));
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0);
      
      wall0.setXEnd((-941.52734F));
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-136.78694F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(717.2198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(458846.9F, wall0.getLength(), 0.01F);
      assertEquals((-349.579F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-941.52734F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float0 = wall0.getThickness();
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-136.78694F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(717.2198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(458846.9F, wall0.getLength(), 0.01F);
      assertEquals((-349.579F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-941.52734F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), float0, 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-136.78694F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(717.2198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(458846.9F, wall0.getLength(), 0.01F);
      assertEquals((-349.579F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-941.52734F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-659.4F), float1, 0.01F);
      
      float float2 = wall0.getYStart();
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-136.78694F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(717.2198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(458846.9F, wall0.getLength(), 0.01F);
      assertEquals((-349.579F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-941.52734F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals((-659.4F), float2, 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-136.78694F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(717.2198F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(458846.9F, wall0.getLength(), 0.01F);
      assertEquals((-349.579F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-941.52734F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-349.579F), float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 1162.4069F, 1162.4069F, (-2872.97F), 1162.4069F);
      assertEquals(1162.4069F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2872.97F), wall0.getYEnd(), 0.01F);
      assertEquals(1162.4069F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1162.4069F, wall0.getXEnd(), 0.01F);
      assertEquals(4199.736F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(580.7034F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-855.28156F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4199.736F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer((-5170));
      assertEquals((-5170), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1162.4069F, wall0.getYStart(), 0.01F);
      assertEquals((-5170), (int)wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-2872.97F), wall0.getYEnd(), 0.01F);
      assertEquals(1162.4069F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1162.4069F, wall0.getXEnd(), 0.01F);
      assertEquals(4199.736F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(580.7034F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-855.28156F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4199.736F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 5171.8F, 0.0F, 5.222F, 5.222F, (-1848.325F));
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1848.325F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2588.511F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5166.578F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(5.222F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall0.getYStart(), 0.01F);
      assertEquals(5166.578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5.222F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1848.325F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2588.511F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5166.578F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(5.222F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall0.getYStart(), 0.01F);
      assertEquals(5166.578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5.222F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5166.578F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(2588.511F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5171.8F, wall1.getYStart(), 0.01F);
      assertEquals((-1848.325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.222F, wall1.getYEnd(), 0.01F);
      assertEquals(5.222F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5166.578F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean0 = wall1.containsPoint(1.0F, 1608.565F, (-1848.325F));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1848.325F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2588.511F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5166.578F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(5.222F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall0.getYStart(), 0.01F);
      assertEquals(5166.578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5.222F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5166.578F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(2588.511F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5171.8F, wall1.getYStart(), 0.01F);
      assertEquals((-1848.325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.222F, wall1.getYEnd(), 0.01F);
      assertEquals(5.222F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5166.578F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      float float0 = wall0.getXArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1848.325F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2588.511F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5166.578F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(5.222F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall0.getYStart(), 0.01F);
      assertEquals(5166.578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5.222F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-0.5F), float0, 0.01F);
      
      Wall wall2 = wall1.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1848.325F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2588.511F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5166.578F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(5.222F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall0.getYStart(), 0.01F);
      assertEquals(5166.578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5.222F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5166.578F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(2588.511F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5171.8F, wall1.getYStart(), 0.01F);
      assertEquals((-1848.325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.222F, wall1.getYEnd(), 0.01F);
      assertEquals(5.222F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5166.578F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall2.getYStart(), 0.01F);
      assertEquals(5.222F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(5.222F, wall2.getThickness(), 0.01F);
      assertEquals(5166.578F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1848.325F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2588.511F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(5166.578F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      Wall wall3 = wall0.getWallAtStart();
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1848.325F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2588.511F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5166.578F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(5.222F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall0.getYStart(), 0.01F);
      assertEquals(5166.578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5.222F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(wall3);
      
      float float1 = wall1.getYStart();
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1848.325F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2588.511F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5166.578F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(5.222F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5171.8F, wall0.getYStart(), 0.01F);
      assertEquals(5166.578F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(5.222F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5166.578F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(2588.511F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5171.8F, wall1.getYStart(), 0.01F);
      assertEquals((-1848.325F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(5.222F, wall1.getYEnd(), 0.01F);
      assertEquals(5.222F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(5166.578F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(5171.8F, float1, 0.01F);
      
      TextureImage textureImage0 = null;
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(926.9F, 926.9F, 926.9F, 926.9F, 926.9F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(926.9F, 926.9F);
      assertEquals(0, int0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean0 = wall0.intersectsRectangle(0, (-3301.7673F), 1.0F, 1.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setYStart((-659.4F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setRightSideShininess((-659.4F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint(316.789F, (-659.4F), (-659.4F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(659.4F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      int int0 = Float.compare((-1030.8F), (-1030.8F));
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1030.8F), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(3302.1443F, (-755.245F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      wall0.setArcExtent((Float) (-755.245F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray2 = wall0.getPoints();
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(834, floatArray2.length);
      assertNotNull(floatArray2);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-208.51535F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall1.getHeight(), 0.01F);
      assertEquals((-659.4F), wall1.getXEnd(), 0.01F);
      assertEquals((-329.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-659.4F), wall1.getXStart(), 0.01F);
      assertEquals((-659.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-659.4F), wall1.getThickness(), 0.01F);
      assertEquals((-755.245F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(659.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(421856.28F, wall1.getLength(), 0.01F);
      assertEquals((-659.4F), wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      boolean boolean1 = wall0.containsPoint((-1030.8F), 2047.52F, (-1.0F));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float0 = wall0.getXArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-208.51535F), float0, 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(1.0F, (-943.1432F), 3929.1F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      float float1 = wall1.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-208.51535F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall1.getHeight(), 0.01F);
      assertEquals((-659.4F), wall1.getXEnd(), 0.01F);
      assertEquals((-329.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-659.4F), wall1.getXStart(), 0.01F);
      assertEquals((-659.4F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-659.4F), wall1.getThickness(), 0.01F);
      assertEquals((-755.245F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(659.4F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(421856.28F, wall1.getLength(), 0.01F);
      assertEquals((-659.4F), wall1.getRightSideShininess(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-329.7F), float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2110.7583F), 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2110.7583F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2110.7583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1055.3792F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2110.7583F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2110.7583F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2110.7583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1055.3792F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2110.7583F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-1055.3792F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(2110.7583F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-2110.7583F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2110.7583F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(2695.0F, float0, 0.01F);
      
      float float1 = level1.getHeight();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(2695.0F, float1, 0.01F);
      
      level0.setName("");
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      level0.setFloorThickness(2695.0F);
      assertNotSame(level0, level1);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Level level2 = level1.clone();
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1306.1448F, level2.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level2.getElevation(), 0.01F);
      assertEquals("", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals(2695.0F, level2.getHeight(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertNotNull(level2);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      
      wall0.setLevel(level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      
      level1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      
      Level level3 = level0.clone();
      assertNotSame(level0, level3);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level3, level1);
      assertNotSame(level3, level0);
      assertNotSame(level3, level2);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level3.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level3.getElevation(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(2695.0F, level3.getHeight(), 0.01F);
      assertEquals("", level3.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertNotNull(level3);
      
      boolean boolean0 = wall0.containsPoint((-2217.8682F), 0.0F, (-3924.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.01F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float2 = wall0.getLeftSideShininess();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      Level level4 = level1.clone();
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level4, level3);
      assertNotSame(level4, level0);
      assertNotSame(level4, level1);
      assertNotSame(level4, level2);
      assertNotSame(level1, level3);
      assertNotSame(level1, level0);
      assertNotSame(level1, level4);
      assertNotSame(level1, level2);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", level4.getName());
      assertEquals(2695.0F, level4.getElevation(), 0.01F);
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals(1306.1448F, level4.getFloorThickness(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertNotNull(level4);
      
      level1.setName("~s`z");
      assertNotSame(level0, level4);
      assertNotSame(level0, level3);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level3);
      assertNotSame(level1, level0);
      assertNotSame(level1, level4);
      assertNotSame(level1, level2);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("~s`z", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level4));
      assertFalse(level1.equals((Object)level2));
      
      boolean boolean2 = wall0.intersectsRectangle((-3924.0F), 0.0F, 2695.0F, 2695.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      float float3 = wall0.getLength();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F));
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer((-1315));
      assertEquals((-1315), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1315), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      CatalogTexture catalogTexture0 = new CatalogTexture(",LCrJlqZ[p", temporaryURLContent0, (-1.0F), 0.0F);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertNotNull(catalogTexture0);
      
      TemporaryURLContent temporaryURLContent1 = (TemporaryURLContent)catalogTexture0.getImage();
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertSame(temporaryURLContent1, temporaryURLContent0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertFalse(temporaryURLContent1.isJAREntry());
      assertNotNull(temporaryURLContent1);
      
      float float0 = catalogTexture0.getWidth();
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals((-1.0F), float0, 0.01F);
      
      float float1 = catalogTexture0.getHeight();
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setPattern(catalogTexture0);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1315), (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(",LCrJlqZ[p", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("l", 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("l", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      float float0 = level0.getHeight();
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("l", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, float0, 0.01F);
      
      level0.setFloorThickness(0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("l", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      Integer integer0 = Integer.valueOf((-284));
      assertEquals((-284), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-284));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-284), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(0);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      assertNotNull(integer2);
      
      wall0.setRightSideColor(integer2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = new Integer(2147483193);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(2147483193, (int)integer3);
      assertNotNull(integer3);
      
      Integer integer4 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(0, (int)integer4);
      assertNotNull(integer4);
      
      wall0.setLeftSideColor(integer4);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F));
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Wall wall2 = new Wall((-1811.5162F), 0.0F, (-541.0F), (-541.0F), (-1811.5162F), (-1.0F));
      assertEquals((-541.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-541.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1176.258F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1380.9028F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-1811.5162F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1811.5162F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-270.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1380.9028F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall2.setWallAtStart(wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-541.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-541.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1176.258F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1380.9028F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-1811.5162F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1811.5162F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-270.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1380.9028F, wall2.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      
      float float1 = wall1.getYArcCircleCenter();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.5F), float1, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-541.0F), (-0.5F), 0.0F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(boolean0);
      
      wall0.setThickness(75.63F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(75.63F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      
      wall1.setXEnd(486.5646F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(486.5646F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(486.56564F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(243.2823F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(486.56564F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(75.63F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(486.5646F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(486.56564F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(243.2823F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(486.56564F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall2.getPoints();
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals((-541.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-541.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1176.258F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1380.9028F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-1811.5162F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1811.5162F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-270.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1380.9028F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall wall3 = new Wall(0.85640746F, 0.0F, 2.0F, 0.0F, 4134.067F);
      assertEquals(1.1435926F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(1.1435926F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.85640746F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2.0F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals(1.4282037F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(4134.067F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotNull(wall3);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(75.63F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall2.getPoints();
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(floatArray2, floatArray0);
      assertNotSame(floatArray2, floatArray1);
      assertEquals((-541.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-541.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1176.258F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1380.9028F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals((-1811.5162F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1811.5162F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-270.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1380.9028F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall3));
      assertFalse(list0.contains(wall3));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList0);
      assertNotSame(list1, list0);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, linkedList0.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(wall3));
      assertFalse(linkedList0.contains(wall3));
      assertNotNull(list1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(486.5646F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(486.56564F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(243.2823F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(486.56564F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertNull(homeTexture0);
      
      Wall wall4 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall4);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall0);
      assertSame(wall4, wall1);
      assertNotSame(wall4, wall2);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(75.63F, wall0.getThickness(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals((-1.0F), wall4.getHeight(), 0.01F);
      assertEquals((-1.0F), wall4.getYEnd(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertEquals(486.56564F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(243.2823F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getXStart(), 0.01F);
      assertEquals(0.0F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertEquals(486.5646F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(486.56564F, wall4.getLength(), 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall2));
      assertNotNull(wall4);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt((-2523.5144F), (-2523.5144F), 1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(boolean0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-254.305F), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-114));
      assertEquals((-114), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.remainderUnsigned((-114), 1983);
      assertEquals(1363, int0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      
      float float0 = wall0.getXStart();
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertEquals((-254.305F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-588.228F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-714.8805F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), float0, 0.01F);
      
      wall0.move(4706.654F, 417.103F);
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean1 = wall0.intersectsRectangle(2.0F, (-254.305F), (-114), (-254.305F));
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      float float1 = wall0.getLength();
      assertEquals(4705.654F, wall0.getXEnd(), 0.01F);
      assertEquals(3531.1978F, wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals((-114), (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4118.426F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1492.6039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-297.77753F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(162.798F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1492.6039F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-758.353F), wall0.getYStart(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1492.6039F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-1169.61F), (-1169.61F), (-1169.61F), (-1169.61F), (-1169.61F), (-1169.61F));
      assertEquals((-1169.61F), wall0.getYStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getXStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1169.61F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1169.61F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1169.61F), wall0.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getYEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      String string0 = Integer.toUnsignedString(8);
      assertEquals("8", string0);
      assertNotNull(string0);
      
      Wall wall1 = new Wall(416.103F, (-1169.61F), (-2122.8F), 8, 8, 8.12F);
      assertEquals(2798.713F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2798.713F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(416.103F, wall1.getXStart(), 0.01F);
      assertEquals(8.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2122.8F), wall1.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-853.3485F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8.0F, wall1.getThickness(), 0.01F);
      assertEquals(8.12F, wall1.getHeight(), 0.01F);
      assertEquals((-580.805F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1169.61F), wall0.getYStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getXStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1169.61F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1169.61F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1169.61F), wall0.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getYEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getHeight(), 0.01F);
      assertEquals(2798.713F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2798.713F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(416.103F, wall1.getXStart(), 0.01F);
      assertEquals(8.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2122.8F), wall1.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-853.3485F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8.0F, wall1.getThickness(), 0.01F);
      assertEquals(8.12F, wall1.getHeight(), 0.01F);
      assertEquals((-580.805F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.containsWallEndAt((-1169.61F), 416.103F, 8);
      assertNotSame(wall0, wall1);
      assertEquals((-1169.61F), wall0.getYStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getXStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1169.61F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1169.61F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1169.61F), wall0.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getYEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1169.61F), wall0.getYStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getXStart(), 0.01F);
      assertEquals((-1169.61F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1169.61F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1169.61F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1169.61F), wall0.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getYEnd(), 0.01F);
      assertEquals((-1169.61F), wall0.getHeight(), 0.01F);
      assertEquals(2798.713F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2798.713F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(416.103F, wall1.getXStart(), 0.01F);
      assertEquals(8.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2122.8F), wall1.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-853.3485F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8.0F, wall1.getThickness(), 0.01F);
      assertEquals(8.12F, wall1.getHeight(), 0.01F);
      assertEquals((-580.805F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      boolean boolean1 = wall1.containsWallEndAt((-1175.456F), 8.12F, (-2122.8F));
      assertNotSame(wall1, wall0);
      assertEquals(2798.713F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(2798.713F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(416.103F, wall1.getXStart(), 0.01F);
      assertEquals(8.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2122.8F), wall1.getXEnd(), 0.01F);
      assertEquals((-1169.61F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-853.3485F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(8.0F, wall1.getThickness(), 0.01F);
      assertEquals(8.12F, wall1.getHeight(), 0.01F);
      assertEquals((-580.805F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-707.197F), 1152.4089F, 2341.982F, (-1175.456F), 2.0F, 2341.982F);
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness((-1175.456F));
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(2341.982F, 33.0F, (-544.727F), (-15.0F), (-707.197F), (-3136.83F));
      assertEquals(2887.108F, wall1.getLength(), 0.01F);
      assertEquals(898.62744F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.0F), wall1.getYEnd(), 0.01F);
      assertEquals(33.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2887.108F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2341.982F, wall1.getXStart(), 0.01F);
      assertEquals((-3136.83F), wall1.getHeight(), 0.01F);
      assertEquals((-707.197F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-544.727F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall0.getHeight();
      assertNotSame(wall0, wall1);
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2341.982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeight(float0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      assertEquals(2887.108F, wall1.getLength(), 0.01F);
      assertEquals(898.62744F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.0F), wall1.getYEnd(), 0.01F);
      assertEquals(33.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2341.982F, wall1.getHeight(), 0.01F);
      assertEquals(2887.108F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2341.982F, wall1.getXStart(), 0.01F);
      assertEquals((-707.197F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-544.727F), wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      assertEquals(2887.108F, wall1.getLength(), 0.01F);
      assertEquals(898.62744F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.0F), wall1.getYEnd(), 0.01F);
      assertEquals(33.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2341.982F, wall1.getHeight(), 0.01F);
      assertEquals(2887.108F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2341.982F, wall1.getXStart(), 0.01F);
      assertEquals((-707.197F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-544.727F), wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall1.getYArcCircleCenter();
      assertNotSame(wall1, wall0);
      assertEquals(2887.108F, wall1.getLength(), 0.01F);
      assertEquals(898.62744F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.0F), wall1.getYEnd(), 0.01F);
      assertEquals(33.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2341.982F, wall1.getHeight(), 0.01F);
      assertEquals(2887.108F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2341.982F, wall1.getXStart(), 0.01F);
      assertEquals((-707.197F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-544.727F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(9.0F, float1, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt((-3136.83F), (-1.0F), (-544.727F));
      assertNotSame(wall1, wall0);
      assertEquals(2887.108F, wall1.getLength(), 0.01F);
      assertEquals(898.62744F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.0F), wall1.getYEnd(), 0.01F);
      assertEquals(33.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2341.982F, wall1.getHeight(), 0.01F);
      assertEquals(2887.108F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2341.982F, wall1.getXStart(), 0.01F);
      assertEquals((-707.197F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-544.727F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      assertEquals(2887.108F, wall1.getLength(), 0.01F);
      assertEquals(898.62744F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.0F), wall1.getYEnd(), 0.01F);
      assertEquals(33.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2341.982F, wall1.getHeight(), 0.01F);
      assertEquals(2887.108F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2341.982F, wall1.getXStart(), 0.01F);
      assertEquals((-707.197F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-544.727F), wall1.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall wall2 = new Wall((-1.0F), 1957.7F, 4134.067F, 1152.4089F, 33.0F);
      assertEquals(2066.5334F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(33.0F, wall2.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(4134.067F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(4212.751F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1555.0544F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1957.7F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(4212.751F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2887.108F, wall1.getLength(), 0.01F);
      assertEquals(898.62744F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-15.0F), wall1.getYEnd(), 0.01F);
      assertEquals(33.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2341.982F, wall1.getHeight(), 0.01F);
      assertEquals(2887.108F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(9.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2341.982F, wall1.getXStart(), 0.01F);
      assertEquals((-707.197F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-544.727F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall2.getPoints();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals(2066.5334F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(33.0F, wall2.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(4134.067F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(4212.751F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1555.0544F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1957.7F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(4212.751F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      
      wall2.setPattern((TextureImage) null);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2066.5334F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(33.0F, wall2.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(4134.067F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(4212.751F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1555.0544F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1957.7F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(4212.751F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall2));
      assertFalse(list0.contains(wall2));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotSame(list1, list0);
      assertNotSame(list0, list1);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertFalse(list1.contains(wall2));
      assertFalse(linkedList0.contains(wall2));
      assertFalse(list0.contains(wall2));
      assertNotNull(list1);
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2066.5334F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(33.0F, wall2.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(4134.067F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(4212.751F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1555.0544F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1957.7F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(4212.751F, wall2.getLength(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(homeTexture0);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals((-707.197F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(817.39246F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3836.2021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2341.982F, wall0.getHeight(), 0.01F);
      assertEquals(3836.2021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2341.982F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(wall3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(3224.8F, 3224.8F, 3224.8F, 3385.65F, 0.0F, 1.0F);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(160.84985F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3305.225F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(160.84985F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3385.65F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setThickness(0.0F);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(160.84985F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3305.225F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(160.84985F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3385.65F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYStart(1633.77F);
      assertEquals(1751.8799F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3385.65F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(2509.71F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1751.8799F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd((-209.28638F));
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1843.0564F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1843.0564F, wall0.getLength(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(712.2418F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-209.28638F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1843.0564F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1843.0564F, wall0.getLength(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(712.2418F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-209.28638F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(homeTexture0);
      
      float float0 = wall0.getYStart();
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1843.0564F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1843.0564F, wall0.getLength(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(712.2418F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-209.28638F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1633.77F, float0, 0.01F);
      
      wall0.setYEnd(1.0F);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1632.77F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1632.77F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(817.385F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1632.77F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1632.77F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(817.385F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(homeTexture1);
      
      float float1 = wall0.getYStart();
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1632.77F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1632.77F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(817.385F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(1633.77F, float1, 0.01F);
      
      Float float2 = Float.valueOf(0.0F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(0.0F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      Float float4 = Float.valueOf(0.0F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setHeightAtEnd(float4);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1632.77F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1632.77F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(817.385F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertEquals(1633.77F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-2520.084F), 1152.4089F, 22.600702F, (-2520.084F));
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals((-2520.084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1248.7417F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3447.347F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(22.600702F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3447.347F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals((-2520.084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1248.7417F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3447.347F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(22.600702F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3447.347F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(float0);
      
      Float float1 = Float.valueOf((-1175.456F));
      assertEquals((-1175.456F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight((Float) null);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals((-2520.084F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1248.7417F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3447.347F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(22.600702F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3447.347F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1172.343F));
      assertEquals((-1172.343F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1172.343F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1172.343F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), 0.0F, (-659.4F), (-659.4F), (-1405.201F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(659.4F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1405.201F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart((-1405.201F));
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1032.3005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(995.50366F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1405.201F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1032.3005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(995.50366F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1405.201F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float0 = Float.valueOf(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float(1.0E-5);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1.0E-5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1032.3005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(995.50366F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setRightSideShininess(316.789F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1032.3005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(316.789F, 0.0F, 0.0F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1032.3005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1032.3005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      float[][] floatArray2 = wall0.getPoints();
      assertNotSame(floatArray2, floatArray1);
      assertNotSame(floatArray2, floatArray0);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1032.3005F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(995.50366F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertFalse(floatArray2.equals((Object)floatArray1));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertEquals(4, floatArray2.length);
      assertNotNull(floatArray2);
      
      wall0.setYEnd(2.0F);
      assertEquals(1554.0345F, wall0.getLength(), 0.01F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-329.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1554.0345F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-701.6005F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1199.0F), 1.0F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(0.0F, 0.1F);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-1), int2);
      
      wall0.setArcExtent(float0);
      assertEquals(1554.0345F, wall0.getLength(), 0.01F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.3844101E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1554.0345F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.149067E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(1554.0345F, wall0.getLength(), 0.01F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.3844101E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1554.0345F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.149067E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertNull(level0);
      
      float float2 = wall0.getThickness();
      assertEquals(1554.0345F, wall0.getLength(), 0.01F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.3844101E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1554.0345F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.149067E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), float2, 0.01F);
      
      float float3 = wall0.getRightSideShininess();
      assertEquals(1554.0345F, wall0.getLength(), 0.01F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.3844101E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1554.0345F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.149067E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(316.789F, float3, 0.01F);
      
      Wall wall1 = new Wall((-1611.3992F), (-209.28638F), (-3343.19F), 0.0F, (-1));
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.391F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2477.2944F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-209.28638F), wall1.getYStart(), 0.01F);
      assertEquals((-1611.3992F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-104.64319F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.391F, wall1.getLength(), 0.01F);
      assertEquals((-3343.19F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float4 = wall1.getYStart();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.391F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2477.2944F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-209.28638F), wall1.getYStart(), 0.01F);
      assertEquals((-1611.3992F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-104.64319F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.391F, wall1.getLength(), 0.01F);
      assertEquals((-3343.19F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-209.28638F), float4, 0.01F);
      
      float float5 = wall1.getXArcCircleCenter();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1744.391F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2477.2944F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-209.28638F), wall1.getYStart(), 0.01F);
      assertEquals((-1611.3992F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-104.64319F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1744.391F, wall1.getLength(), 0.01F);
      assertEquals((-3343.19F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals((-2477.2944F), float5, 0.01F);
      
      float float6 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertEquals(1554.0345F, wall0.getLength(), 0.01F);
      assertEquals((-1405.201F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(1.0E-5F, wall0.getHeight(), 0.01F);
      assertEquals(316.789F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.3844101E18F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1554.0345F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.149067E19F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals(1554.0345F, float6, 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), 1152.4089F, (-1175.456F), 1152.4089F, 0.1F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1175.456F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1175.456F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float0);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare(1173.738F, 1173.738F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1152.4089F, 1768.6844F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      Float float2 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(1152.4089F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(1768.6844F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeight(float3);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle(1152.4089F, 1.0F, 1.0F, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(boolean0);
      
      Integer integer0 = new Integer((-1));
      assertFalse(integer0.equals((Object)int0));
      assertTrue(integer0.equals((Object)int1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      int int2 = Integer.remainderUnsigned((-6605), 4637);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4359, int2);
      
      Integer integer1 = Integer.valueOf(2);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      assertNotNull(integer1);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)integer0));
      
      float float4 = wall0.getXStart();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, float4, 0.01F);
      
      wall0.move(3083.3F, 1.0F);
      assertEquals(1769.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1769.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(4851.9844F, wall0.getXEnd(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4851.9844F, wall0.getXStart(), 0.01F);
      assertEquals(1769.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(4851.9844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1769.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1769.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(4851.9844F, wall0.getXEnd(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4851.9844F, wall0.getXStart(), 0.01F);
      assertEquals(1769.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(4851.9844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
      
      boolean boolean1 = wall0.intersectsRectangle((-1201.0F), 1152.4089F, (-1.0F), (-3512.59F));
      assertEquals(1769.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1769.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(4851.9844F, wall0.getXEnd(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4851.9844F, wall0.getXStart(), 0.01F);
      assertEquals(1769.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(4851.9844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      float float5 = wall0.getLength();
      assertEquals(1769.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1769.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(4851.9844F, wall0.getXEnd(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4851.9844F, wall0.getXStart(), 0.01F);
      assertEquals(1769.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(4851.9844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(0.0F, float5, 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setXStart(1650.74F);
      assertEquals(237.64197F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1650.74F, wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2826.2832F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2826.2832F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(237.64197F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1650.74F, wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2826.2832F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(2826.2832F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(1174.6174F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1650.74F, wall0.getXStart(), 0.01F);
      assertEquals(172.6064F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(9862427.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9439.772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getArcExtent(), 0.01F);
      assertEquals(2826.2832F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getLength();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1650.74F, wall0.getXStart(), 0.01F);
      assertEquals(172.6064F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(9862427.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9439.772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getArcExtent(), 0.01F);
      assertEquals(2826.2832F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(9862427.0F, float1, 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1650.74F, wall0.getXStart(), 0.01F);
      assertEquals(172.6064F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(9862427.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9439.772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getArcExtent(), 0.01F);
      assertEquals(2826.2832F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1174.6174F, 1174.6174F, 1174.6174F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1174.6174F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setXStart(2.0F);
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.456F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-586.728F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1177.456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.456F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-586.728F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1177.456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float2 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1177.456F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-586.728F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1177.456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1174.6174F, float2, 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1177.456F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1174.6174F, wall2.getHeight(), 0.01F);
      assertEquals(9.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1174.6174F, wall2.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1177.456F, wall2.getLength(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals((-586.728F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      TextureImage textureImage0 = wall2.getPattern();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1177.456F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1174.6174F, wall2.getHeight(), 0.01F);
      assertEquals(9.3F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1174.6174F, wall2.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1177.456F, wall2.getLength(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals((-586.728F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1174.6174F, wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(textureImage0);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(3224.8F, 3224.8F, 3224.8F, (-1.0F), (-1.0F), 1.0F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3225.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertEquals(1611.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3225.8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      PropertyChangeEvent propertyChangeEvent0 = mock(PropertyChangeEvent.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = wall0.isTrapezoidal();
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(3225.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3224.8F, wall0.getXStart(), 0.01F);
      assertEquals(1611.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3224.8F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3225.8F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3224.8F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3224.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart((-659.4F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideShininess((-659.4F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(316.789F, (-659.4F), (-659.4F));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      wall0.setYEnd(0.0F);
      assertEquals(659.4F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      
      int int0 = Float.compare((-1030.8F), (-1030.8F));
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1030.8F), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(3302.1443F, (-755.245F));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      wall0.setArcExtent((Float) (-755.245F));
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(level0);
      
      float float0 = wall0.getThickness();
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), float0, 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-659.4F), float1, 0.01F);
      
      float float2 = wall0.getYStart();
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-659.4F), float2, 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-208.51535F), float3, 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(integer0);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare(1173.738F, 1173.738F);
      assertEquals(0, int0);
      
      int int1 = Float.compare(1152.4089F, (-1405.201F));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = Float.compare(1.0F, 1.0F);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      Float float2 = Float.valueOf(0.0F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(0.0F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setArcExtent(float3);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean0 = wall0.containsPoint((-447.79715F), (-4641.0F), (-1.0F));
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      float float4 = wall0.getXArcCircleCenter();
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, float4, 0.01F);
      
      wall0.setRightSideShininess((-1405.201F));
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals((-1405.201F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.containsWallStartAt(0.0F, 0.01F, (-1799.0F));
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals((-1405.201F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = Float.min(1768.6844F, 1768.6844F);
      assertEquals(1768.6844F, float2, 0.01F);
      
      float float3 = Float.sum(2.0F, 2462.3F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(2464.3F, float3, 0.01F);
      
      wall0.setHeight(float1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNotEquals((float)float1, (float)float3, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float4 = wall1.getArcExtent();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float4);
      
      boolean boolean0 = Float.isFinite((-1.0F));
      assertTrue(boolean0);
      
      boolean boolean1 = wall1.containsWallStartAt(2.0F, 2.0F, 2462.3F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(" doesn't contain texture ", (PropertyChangeListener) null);
      assertEquals(" doesn't contain texture ", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      wall1.setLeftSideShininess(1768.6844F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setXEnd(1768.6844F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNotSame(wall0, wall1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      float float5 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(1768.6844F, float5, 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt(1768.6844F, 1173.738F, (-1.0F));
      assertNotSame(wall0, wall1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean3 = wall0.containsPoint(1768.6844F, 737.0F, 1586.8849F);
      assertNotSame(wall0, wall1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      
      float float6 = wall0.getXArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertEquals(float6, float2, 0.01F);
      assertEquals(1768.6844F, float6, 0.01F);
      
      boolean boolean4 = wall0.containsWallStartAt(1070.386F, 1768.6844F, 416.103F);
      assertNotSame(wall0, wall1);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall((-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F), (-2523.5144F));
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setRightSideShininess((-2523.5144F));
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      
      Integer integer0 = Integer.valueOf(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      boolean boolean0 = wall0.containsWallStartAt((-2523.5144F), (-2523.5144F), 1);
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertTrue(boolean0);
      
      float float0 = wall0.getLength();
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(integer1);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals((-2523.5144F), wall0.getHeight(), 0.01F);
      assertEquals((-2523.5144F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXEnd(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2523.5144F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2523.5144F), wall0.getXStart(), 0.01F);
      assertEquals((-2523.5144F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2523.5144F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1152.4089F, 1152.4089F, 1174.6174F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertNotSame(wall1, wall0);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.208496F, wall0.getLength(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.208496F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1163.5132F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = new Wall(9.3F, (-1.0F), (-1175.456F), 3385.13F, 1152.4089F, (-253.305F));
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      wall1.setWallAtStart(wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      
      float float2 = wall2.getYArcCircleCenter();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1692.065F, float2, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(wall1));
      assertFalse(list0.contains(wall1));
      assertNotNull(list0);
      
      TextureImage textureImage0 = wall2.getPattern();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(3587.4116F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1152.4089F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(3385.13F, wall2.getYEnd(), 0.01F);
      assertEquals(3587.4116F, wall2.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(9.3F, wall2.getXStart(), 0.01F);
      assertEquals(1692.065F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-583.078F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-253.305F), wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(textureImage0);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall(24.013237F, 24.013237F, 0.0F, 24.013237F, 24.013237F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(24.013237F, wall0.getYEnd(), 0.01F);
      assertEquals(24.013237F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(24.013237F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(24.013237F, wall0.getXStart(), 0.01F);
      assertEquals(24.013237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(12.0066185F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(24.013237F, wall0.getThickness(), 0.01F);
      assertEquals(24.013237F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5.029843E-7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(24.013237F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.96082952E17F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(24.013237F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(24.013237F, wall0.getXStart(), 0.01F);
      assertEquals(24.013237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(24.013237F, wall0.getThickness(), 0.01F);
      assertEquals(24.013237F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5.029843E-7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(24.013237F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.96082952E17F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(24.013237F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(24.013237F, wall0.getXStart(), 0.01F);
      assertEquals(24.013237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(24.013237F, wall0.getThickness(), 0.01F);
      assertEquals(24.013237F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(24.013237F, float1, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(5.029843E-7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(24.013237F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.96082952E17F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(24.013237F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(24.013237F, wall0.getXStart(), 0.01F);
      assertEquals(24.013237F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(24.013237F, wall0.getThickness(), 0.01F);
      assertEquals(24.013237F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-1611.272F), (-1611.272F), (-884.0F), (-884.0F), 2524.7F, (-884.0F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1247.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2524.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1611.272F), wall0.getYStart(), 0.01F);
      assertEquals(1028.518F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1028.518F, wall0.getLength(), 0.01F);
      assertEquals((-884.0F), wall0.getHeight(), 0.01F);
      assertEquals((-884.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-884.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1611.272F), wall0.getXStart(), 0.01F);
      assertEquals((-1247.636F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(2550.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1247.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2550.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1611.272F), wall0.getYStart(), 0.01F);
      assertEquals(1028.518F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1028.518F, wall0.getLength(), 0.01F);
      assertEquals((-884.0F), wall0.getHeight(), 0.01F);
      assertEquals((-884.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-884.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1611.272F), wall0.getXStart(), 0.01F);
      assertEquals((-1247.636F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1247.636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2550.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1611.272F), wall0.getYStart(), 0.01F);
      assertEquals(1028.518F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1028.518F, wall0.getLength(), 0.01F);
      assertEquals((-884.0F), wall0.getHeight(), 0.01F);
      assertEquals((-884.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-884.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1611.272F), wall0.getXStart(), 0.01F);
      assertEquals((-1247.636F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(2695.0F, float0, 0.01F);
      
      float float1 = level1.getHeight();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(2695.0F, float1, 0.01F);
      
      level0.setName("");
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      level0.setFloorThickness(2695.0F);
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level1));
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      Level level2 = level1.clone();
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(2695.0F, level2.getHeight(), 0.01F);
      assertEquals("", level2.getName());
      assertEquals(2695.0F, level2.getElevation(), 0.01F);
      assertEquals(1306.1448F, level2.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      
      wall0.setLevel(level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      
      Level level3 = level0.clone();
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level3, level2);
      assertNotSame(level3, level0);
      assertNotSame(level3, level1);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level3.getHeight(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals(2695.0F, level3.getElevation(), 0.01F);
      assertEquals(2695.0F, level3.getFloorThickness(), 0.01F);
      assertEquals("", level3.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertNotNull(level3);
      
      boolean boolean0 = wall0.containsPoint((-2217.8682F), 0.0F, (-3924.0F));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallEndAt(0.0F, 0.01F, 0.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      Level level4 = level1.clone();
      assertNotSame(level4, level0);
      assertNotSame(level4, level1);
      assertNotSame(level4, level3);
      assertNotSame(level4, level2);
      assertNotSame(level0, level2);
      assertNotSame(level0, level4);
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level1, level4);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertEquals("", level4.getName());
      assertEquals(1306.1448F, level4.getFloorThickness(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals(2695.0F, level4.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level4.equals((Object)level0));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      assertNotNull(level4);
      
      level1.setName("~s`z");
      assertNotSame(level0, level2);
      assertNotSame(level0, level4);
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertNotSame(level1, level4);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertNotSame(level1, level3);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals("~s`z", level1.getName());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level1.equals((Object)level4));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level3));
      
      boolean boolean2 = wall0.intersectsRectangle((-3924.0F), 0.0F, 2695.0F, 2695.0F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(integer0);
      
      boolean boolean3 = wall0.isAtLevel(level0);
      assertNotSame(level0, level2);
      assertNotSame(level0, level4);
      assertNotSame(level0, level1);
      assertNotSame(level0, level3);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level3));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 5909.68F, 5909.68F, 5909.68F, 3308.93F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3308.93F, wall0.getThickness(), 0.01F);
      assertEquals(5909.68F, wall0.getYStart(), 0.01F);
      assertEquals(5909.6704F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5909.6704F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2954.845F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYEnd(), 0.01F);
      assertEquals(5909.68F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotNull(wall0);
      
      wall0.setXEnd(3308.93F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3308.93F, wall0.getThickness(), 0.01F);
      assertEquals(5909.68F, wall0.getYStart(), 0.01F);
      assertEquals(3308.92F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3308.93F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1654.47F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3308.92F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      float float0 = wall0.getLength();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3308.93F, wall0.getThickness(), 0.01F);
      assertEquals(5909.68F, wall0.getYStart(), 0.01F);
      assertEquals(3308.92F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3308.93F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1654.47F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3308.92F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3308.92F, float0, 0.01F);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3308.93F, wall0.getThickness(), 0.01F);
      assertEquals(5909.68F, wall0.getYStart(), 0.01F);
      assertEquals(3308.92F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3308.93F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1654.47F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3308.92F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(float1, float0, 0.01F);
      assertEquals(3308.92F, float1, 0.01F);
      
      Float float2 = new Float(4094.0009765625);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(4094.001F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setArcExtent(float2);
      assertEquals(4094.001F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3308.93F, wall0.getThickness(), 0.01F);
      assertEquals(5909.68F, wall0.getYStart(), 0.01F);
      assertEquals(3308.92F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3308.93F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1654.47F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5909.68F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6995847.5F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertEquals(5482.1577F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, (-1.0F), 0.0F, (-1.0F));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = Integer.toUnsignedString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      wall0.setThickness(1);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-2520.0845F), wall1.getXStart(), 0.01F);
      assertEquals(3563.9517F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1260.0372F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.01F, wall1.getXEnd(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertEquals((-2520.0845F), wall1.getXStart(), 0.01F);
      assertEquals(3563.9517F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1260.0372F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1260.0372F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-78.308F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-78.308F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Wall wall2 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      
      Float float2 = wall2.getHeight();
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1152.4089F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall2.setHeight(float3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1768.6844F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      
      wall2.setHeight(float2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1173.738F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1768.6844F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1768.6844F, wall2.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall2.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1, linkedList0.size());
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(wall0));
      assertTrue(linkedList0.contains(wall2));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertFalse(list0.contains(wall0));
      assertFalse(linkedList0.contains(wall0));
      assertTrue(linkedList0.contains(wall2));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F), (-2520.0845F));
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertEquals((-2520.0845F), wall0.getYEnd(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getThickness(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2520.0845F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall((-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F));
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-11.88105F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-11.88105F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      
      wall0.setXStart((-11.88105F));
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-11.88105F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-11.88105F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, (-2640.304F), (-1175.456F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      int int0 = Float.compare((-1175.456F), (-2640.304F));
      assertEquals(1, int0);
      
      Integer integer0 = new Integer(1);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Float float1 = new Float((-3654.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3654.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(1.0001);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals(1.0001F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setArcExtent(float2);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2427.7854F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3305.767F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1.0001F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-1175.456F), 539.4762F, (-1175.456F));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2427.7854F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3305.767F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1.0001F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(boolean0);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2427.7854F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3305.767F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1.0001F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(level0);
      
      Float float3 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2427.7854F, wall0.getLength(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3305.767F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2640.304F), wall0.getThickness(), 0.01F);
      assertEquals(1.0001F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertEquals(1.0001F, (float)float3, 0.01F);
      assertNotNull(float3);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(4094.001F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess(1108.04F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(258.708F, (-1.0F), (-1254.7151F));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYEnd(3411.0916F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0);
      
      float float0 = wall0.getThickness();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Float float2 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(float2);
      
      int int0 = Float.floatToIntBits(2.0F);
      assertEquals(1073741824, int0);
      
      wall0.setHeightAtEnd((Float) 2.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float3 = wall0.getHeightAtEnd();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertEquals(2.0F, (float)float3, 0.01F);
      assertNotNull(float3);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      Float float2 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(float2);
      
      float float3 = wall0.getXEnd();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeight(float0);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float1 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-11.52356F), float1, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall wall2 = wall1.getWallAtStart();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2327.865F, wall2.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      
      Integer integer0 = new Integer(87);
      assertEquals(87, (int)integer0);
      assertNotNull(integer0);
      
      wall2.setLeftSideColor(integer0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2327.865F, wall2.getLength(), 0.01F);
      assertEquals(87, (int)wall2.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      
      float float2 = wall2.getLength();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2327.865F, wall2.getLength(), 0.01F);
      assertEquals(87, (int)wall2.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(2327.865F, float2, 0.01F);
      
      Integer integer1 = wall2.getRightSideColor();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-11.52356F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(9.3F, wall2.getThickness(), 0.01F);
      assertEquals((-1175.456F), wall2.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall2.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall2.getXStart(), 0.01F);
      assertEquals(1152.4089F, wall2.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2327.865F, wall2.getLength(), 0.01F);
      assertEquals(87, (int)wall2.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(integer1);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-1172.343F));
      assertEquals((-1172.343F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setYStart(0.45948672F);
      assertEquals(0.45948672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(1172.8025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-585.9418F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals(1172.8025F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setArcExtent(float0);
      assertEquals(0.45948672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(1172.8025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-585.9418F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals(712228.44F, wall0.getLength(), 0.01F);
      assertEquals((-1013.532F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.45948672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(1172.8025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-585.9418F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals(712228.44F, wall0.getLength(), 0.01F);
      assertEquals((-1013.532F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(320, floatArray0.length);
      assertNotNull(floatArray0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertEquals(0.45948672F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(1172.8025F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-585.9418F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals(712228.44F, wall0.getLength(), 0.01F);
      assertEquals((-1013.532F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((-1172.343F));
      assertEquals((-1172.343F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1172.343F));
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1172.343F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Level level0 = new Level("", (-2037.6F), 0.0F, 2695.0F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      level1.setName("");
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      
      level0.setFloorThickness(2695.0F);
      assertNotSame(level0, level1);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertFalse(level0.equals((Object)level1));
      
      Level level2 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level2.isVisible());
      assertEquals("", level2.getName());
      assertEquals(2695.0F, level2.getFloorThickness(), 0.01F);
      assertEquals(2695.0F, level2.getHeight(), 0.01F);
      assertEquals((-2037.6F), level2.getElevation(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNotNull(level2);
      
      wall0.setLevel(level1);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      
      Level level3 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level3);
      assertNotSame(level3, level1);
      assertNotSame(level3, level0);
      assertNotSame(level3, level2);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level3.isVisible());
      assertEquals(2695.0F, level3.getHeight(), 0.01F);
      assertEquals((-2037.6F), level3.getElevation(), 0.01F);
      assertEquals(2695.0F, level3.getFloorThickness(), 0.01F);
      assertEquals("", level3.getName());
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level2));
      assertNotNull(level3);
      
      boolean boolean0 = wall0.containsPoint(48.669F, 2695.0F, (-1.0F));
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = wall0.containsWallEndAt((-1.0F), 2575.2F, 48.669F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Level level4 = level1.clone();
      assertNotSame(level0, level4);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level3);
      assertNotSame(level1, level4);
      assertNotSame(level1, level0);
      assertNotSame(level4, level3);
      assertNotSame(level4, level2);
      assertNotSame(level4, level1);
      assertNotSame(level4, level0);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals("", level4.getName());
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals((-2037.6F), level4.getElevation(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level0));
      assertNotNull(level4);
      
      boolean boolean2 = wall0.intersectsRectangle(1169.0F, 0.0F, 710.0F, (-2889.47F));
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(integer0);
      
      boolean boolean3 = wall0.isAtLevel(level4);
      assertNotSame(level0, level4);
      assertNotSame(level0, level1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level3);
      assertNotSame(level1, level4);
      assertNotSame(level1, level0);
      assertNotSame(level4, level3);
      assertNotSame(level4, level2);
      assertNotSame(level4, level1);
      assertNotSame(level4, level0);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals((-2037.6F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals((-2037.6F), level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals("", level4.getName());
      assertEquals(2695.0F, level4.getHeight(), 0.01F);
      assertEquals((-2037.6F), level4.getElevation(), 0.01F);
      assertTrue(level4.isVisible());
      assertEquals(0.0F, level4.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level4));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level4));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level4.equals((Object)level3));
      assertFalse(level4.equals((Object)level2));
      assertFalse(level4.equals((Object)level1));
      assertFalse(level4.equals((Object)level0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setPattern((TextureImage) null);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      
      Float float2 = wall0.getArcExtent();
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(float2);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = Integer.toUnsignedString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      wall0.setThickness(0);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall((-3972.0F), (-1.0F), 8192, 416.103F, 1151.4089F, 524.90924F);
      assertEquals(416.103F, wall1.getYEnd(), 0.01F);
      assertEquals(8192.0F, wall1.getXEnd(), 0.01F);
      assertEquals(12171.149F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(524.90924F, wall1.getHeight(), 0.01F);
      assertEquals(207.5515F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2110.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(12171.149F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3972.0F), wall1.getXStart(), 0.01F);
      assertEquals(1151.4089F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(416.103F, wall1.getYEnd(), 0.01F);
      assertEquals(8192.0F, wall1.getXEnd(), 0.01F);
      assertEquals(12171.149F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(524.90924F, wall1.getHeight(), 0.01F);
      assertEquals(207.5515F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2110.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(12171.149F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-3972.0F), wall1.getXStart(), 0.01F);
      assertEquals(1151.4089F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1260.0372F), float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, (-2520.0845F), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.containsPoint(0.0F, (-1260.0372F), 8192);
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall0.setXStart((-1.0F));
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setLeftSideColor(integer1);
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      float float1 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2520.0947F, float1, 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Wall wall0 = new Wall((-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F));
      assertNull(wall0.getHeight());
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-35.229202F), 2705.46F, 0.01F, 3297.0F, (-3939.5103F), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(3297.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(592.58875F, wall0.getLength(), 0.01F);
      assertEquals(592.58875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3001.23F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2705.46F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3939.5103F), wall0.getThickness(), 0.01F);
      assertEquals((-17.609602F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-35.229202F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(298);
      assertEquals(298, (int)integer0);
      assertNotNull(integer0);
      
      String string0 = Integer.toUnsignedString(298);
      assertEquals("298", string0);
      assertNotNull(string0);
      
      wall0.setThickness(2997.9F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(3297.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2997.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(592.58875F, wall0.getLength(), 0.01F);
      assertEquals(592.58875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3001.23F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2705.46F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-17.609602F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-35.229202F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(1277.49F, 0.0F, 165.09F, 298, 2997.9F, 3297.0F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1151.6239F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3297.0F, wall1.getHeight(), 0.01F);
      assertEquals(149.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1151.6239F, wall1.getLength(), 0.01F);
      assertEquals(2997.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(721.29F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(165.09F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1277.49F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(3297.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2997.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(592.58875F, wall0.getLength(), 0.01F);
      assertEquals(592.58875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3001.23F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2705.46F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-17.609602F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-35.229202F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1151.6239F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3297.0F, wall1.getHeight(), 0.01F);
      assertEquals(149.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1151.6239F, wall1.getLength(), 0.01F);
      assertEquals(2997.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(721.29F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(165.09F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1277.49F, wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall1.getYArcCircleCenter();
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1151.6239F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3297.0F, wall1.getHeight(), 0.01F);
      assertEquals(149.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1151.6239F, wall1.getLength(), 0.01F);
      assertEquals(2997.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(721.29F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(165.09F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1277.49F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(149.0F, float0, 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(3297.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2997.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(592.58875F, wall0.getLength(), 0.01F);
      assertEquals(592.58875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3001.23F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2705.46F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-17.609602F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-35.229202F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1151.6239F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3297.0F, wall1.getHeight(), 0.01F);
      assertEquals(149.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1151.6239F, wall1.getLength(), 0.01F);
      assertEquals(2997.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(721.29F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(165.09F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1277.49F, wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall1.containsWallEndAt((-2520.0845F), (-2520.0845F), (-1.0F));
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1151.6239F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3297.0F, wall1.getHeight(), 0.01F);
      assertEquals(149.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1151.6239F, wall1.getLength(), 0.01F);
      assertEquals(2997.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(721.29F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(165.09F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1277.49F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean0);
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(3297.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2997.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(592.58875F, wall0.getLength(), 0.01F);
      assertEquals(592.58875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3001.23F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2705.46F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-17.609602F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-35.229202F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1151.6239F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3297.0F, wall1.getHeight(), 0.01F);
      assertEquals(149.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1151.6239F, wall1.getLength(), 0.01F);
      assertEquals(2997.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(721.29F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(165.09F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1277.49F, wall1.getXStart(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      
      boolean boolean1 = wall0.intersectsRectangle(1769.6844F, 702.51F, (-253.305F), 298);
      assertNotSame(wall0, wall1);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertEquals(3297.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2997.9F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(592.58875F, wall0.getLength(), 0.01F);
      assertEquals(592.58875F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3001.23F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2705.46F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-17.609602F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-35.229202F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float1 = wall1.getLength();
      assertNotSame(wall1, wall0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(298.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1151.6239F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3297.0F, wall1.getHeight(), 0.01F);
      assertEquals(149.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1151.6239F, wall1.getLength(), 0.01F);
      assertEquals(2997.9F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(721.29F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(165.09F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1277.49F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1151.6239F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(4094.001F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess(1108.04F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(258.708F, (-1.0F), (-1254.7151F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4094.001F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4094.001F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2047.0005F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setYEnd(3411.0916F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      wall0.setArcExtent((Float) null);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(level0);
      
      float float0 = wall0.getThickness();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1108.04F, float1, 0.01F);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Level level1 = wall0.getLevel();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(level1);
      
      float float2 = wall0.getXEnd();
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3752.5464F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(682.9094F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(4094.001F, wall0.getYStart(), 0.01F);
      assertEquals(1108.04F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(682.9094F, wall0.getLength(), 0.01F);
      assertEquals(3411.0916F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float0 = Float.sum((-3316.0F), (-1.0F));
      assertEquals((-3317.0F), float0, 0.01F);
      
      Float float1 = new Float((double) 0.0F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeightAtEnd(float1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), 1152.4089F, (-1175.456F), (-2520.084F), 0.1F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-2520.084F), wall0.getThickness(), 0.01F);
      assertEquals((-11.52356F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getYEnd(), 0.01F);
      assertEquals(1152.4089F, wall0.getXEnd(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf((-1175.456F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1175.456F), (float)float1, 0.01F);
      assertNotNull(float1);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = Integer.toUnsignedString(439);
      assertEquals("439", string0);
      assertNotNull(string0);
      
      wall0.setThickness(1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      int int0 = Integer.min((-2637), 8192);
      assertEquals((-2637), int0);
      
      wall0.setLeftSideColor(integer1);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setXEnd((-1.0F));
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, (-2520.0845F), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 3743.3801F, 8192);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1260.5422F), float1, 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(3743.3801F, 976.25806F, 0);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = Integer.valueOf(1636);
      assertEquals(1636, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1636);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1636, (int)integer1);
      assertNotNull(integer1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Integer integer2 = Integer.valueOf(1636);
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      assertEquals(1636, (int)integer2);
      assertNotNull(integer2);
      
      wall0.setRightSideColor(integer2);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1636, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(integer2.equals((Object)integer1));
      assertTrue(integer2.equals((Object)integer0));
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1636, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer0.equals((Object)integer2));
      
      Float float1 = new Float(1137.2264F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1137.2264F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Integer integer3 = wall0.getRightSideColor();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1636, (int)wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertTrue(integer3.equals((Object)integer2));
      assertTrue(integer3.equals((Object)integer1));
      assertEquals(1636, (int)integer3);
      assertNotNull(integer3);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      float float0 = 0.1F;
      float float1 = (-3179.58F);
      float float2 = 1662.7F;
      float float3 = 0.1F;
      Wall wall0 = new Wall(0.1F, 1.0F, (-3179.58F), 1662.7F, 0.1F, (-548.0F));
      assertEquals((-548.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1589.74F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3587.703F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1662.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-3179.58F), wall0.getXEnd(), 0.01F);
      assertEquals(831.85F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3587.703F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = null;
      Float float4 = new Float(1.2797369E7);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(1.2797369E7F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setArcExtent(float4);
      assertEquals((-548.0F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.2797369E7F, wall0.getArcExtent(), 0.01F);
      assertEquals(3587.703F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1498.222F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.3095423E10F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1006.9705F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1662.7F, wall0.getYEnd(), 0.01F);
      assertEquals((-3179.58F), wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      // Undeclared exception!
      wall0.intersectsRectangle(float1, float2, float3, float0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotNull(wall0);
      
      Level level0 = new Level("", 2695.0F, 1306.1448F, 2695.0F);
      assertTrue(level0.isVisible());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertTrue(level0.isVisible());
      assertEquals(1306.1448F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals(2695.0F, level0.getHeight(), 0.01F);
      assertEquals(2695.0F, level0.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(2695.0F, level1.getHeight(), 0.01F);
      assertEquals(2695.0F, level1.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1306.1448F, level1.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(2695.0F, float0, 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1306.1448F, 2230.177F, 2695.0F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      wall0.setYEnd(2230.177F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2230.177F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.0885F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2230.177F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2230.177F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      int int0 = Float.compare(0.0F, 0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1030.8F), 0.0F);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(0.0F, (-687.45087F));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      Float float1 = new Float((-1030.8F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1030.8F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertEquals(6461934.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(6168.8813F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2230.177F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.0885F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1030.8F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2230.177F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Level level2 = wall0.getLevel();
      assertEquals(6461934.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(6168.8813F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2230.177F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.0885F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1030.8F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2230.177F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(level2);
      
      float float2 = wall0.getThickness();
      assertEquals(6461934.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(6168.8813F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2230.177F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.0885F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1030.8F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2230.177F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      
      float float3 = wall0.getRightSideShininess();
      assertEquals(6461934.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(6168.8813F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2230.177F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.0885F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1030.8F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2230.177F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(0.0F, float3, 0.01F);
      
      float float4 = wall0.getYStart();
      assertEquals(6461934.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(6168.8813F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2230.177F, wall0.getYEnd(), 0.01F);
      assertEquals(1115.0885F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1030.8F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2230.177F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(0.0F, float4, 0.01F);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(926.9F, 926.9F, 926.9F, 926.9F, 926.9F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      int int0 = Float.compare(926.9F, 926.9F);
      assertEquals(0, int0);
      
      wall0.setArcExtent((Float) null);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean0 = wall0.containsWallEndAt(0, 0, 926.9F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertTrue(boolean0);
      
      Level level0 = wall0.getLevel();
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(926.9F, wall0.getXStart(), 0.01F);
      assertEquals(926.9F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(926.9F, wall0.getXEnd(), 0.01F);
      assertEquals(926.9F, wall0.getYEnd(), 0.01F);
      assertEquals(926.9F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(926.9F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(926.9F, wall0.getYStart(), 0.01F);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float((double) (-1172.343F));
      assertEquals((-1172.343F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1172.343F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-1172.343F), wall0.getYStart(), 0.01F);
      assertEquals((-1172.343F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1172.343F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.343F), wall0.getHeight(), 0.01F);
      assertEquals((-1172.343F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1172.343F), wall0.getYEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      float float0 = wall0.getXStart();
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, (-1175.456F), (-1175.456F));
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1175.456F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-3654.0F));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-3654.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      Integer integer0 = new Integer((-1342));
      assertEquals((-1342), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1342), (int)wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideColor(integer0);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1342), (int)wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1342), (int)wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Wall wall1 = new Wall(1152.4089F, 1152.4089F, (-1175.456F), (-5545.7F), (-515.5F));
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5545.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-2196.6455F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-515.5F), wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(7091.0947F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7091.0947F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals(1152.4089F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf((-2327));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-2327), (int)integer2);
      assertNotNull(integer2);
      
      wall1.setLeftSideColor(integer2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-5545.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-2196.6455F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-515.5F), wall1.getThickness(), 0.01F);
      assertEquals(1152.4089F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(7091.0947F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.52356F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(7091.0947F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1175.456F), wall1.getXEnd(), 0.01F);
      assertEquals((-2327), (int)wall1.getLeftSideColor());
      assertEquals(1152.4089F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      float float2 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1342), (int)wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2327.865F, float2, 0.01F);
      
      Integer integer3 = wall0.getRightSideColor();
      assertNotSame(wall0, wall1);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1342), (int)wall0.getRightSideColor());
      assertEquals((-1175.456F), wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getThickness(), 0.01F);
      assertEquals(2327.865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2327.865F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getYEnd(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1175.456F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-1342), (int)integer3);
      assertNotNull(integer3);
      
      TextureImage textureImage0 = null;
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall((-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F), (-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotNull(list1);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, linkedList1.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
      
      List<Wall> list2 = Wall.clone((List<Wall>) linkedList1);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, linkedList1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.equals((Object)linkedList1));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(linkedList1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertNotNull(list2);
      
      wall0.setYStart((-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      
      wall0.setRightSideShininess((-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(316.789F, (-659.4F), (-659.4F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-659.4F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      wall0.setYEnd(0.0F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals(659.4F, wall0.getLength(), 0.01F);
      assertEquals((-659.4F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      
      int int0 = Float.compare((-1030.8F), (-1030.8F));
      assertEquals(0, int0);
      
      int int1 = Float.compare((-1030.8F), 0);
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      int int2 = Float.compare(3302.1443F, (-755.245F));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      wall0.setArcExtent((Float) (-755.245F));
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(level0);
      
      float float0 = wall0.getThickness();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), float0, 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals((-659.4F), float1, 0.01F);
      
      float float2 = wall0.getYStart();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-659.4F), float2, 0.01F);
      
      float float3 = wall0.getXEnd();
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getYStart(), 0.01F);
      assertEquals((-329.7F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-659.4F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(659.4F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-755.245F), wall0.getArcExtent(), 0.01F);
      assertEquals((-659.4F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-659.4F), wall0.getXStart(), 0.01F);
      assertEquals((-659.4F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(421856.28F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-659.4F), wall0.getThickness(), 0.01F);
      assertEquals((-208.51535F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals((-659.4F), float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      float float2 = wall1.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1768.6844F, float2, 0.01F);
      
      wall1.move(0.0F, 1768.6844F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3537.369F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(3537.369F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(3537.369F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3537.369F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(3537.369F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(3537.369F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      
      wall0.setXEnd(0.0F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      Wall wall3 = wall1.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(884.3422F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1173.738F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3537.369F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(3537.369F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals(3537.369F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall3);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall((-2703.47F), (-2703.47F), 1634.0F, 1634.0F, 3426.5F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3426.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertEquals((-534.735F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6134.109F, wall0.getLength(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2703.47F), wall0.getXStart(), 0.01F);
      assertEquals((-534.735F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6134.109F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3426.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertEquals((-534.735F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(6134.109F, wall0.getLength(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-2703.47F), wall0.getXStart(), 0.01F);
      assertEquals((-534.735F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(6134.109F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Integer integer0 = Integer.valueOf(3636);
      assertEquals(3636, (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.sum(0, 2562);
      assertEquals(2562, int0);
      
      wall0.setXStart(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3426.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4635.0405F, wall0.getLength(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-534.735F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4635.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      int int1 = Integer.compareUnsigned(0, 0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3426.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2703.47F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(4635.0405F, wall0.getLength(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals((-534.735F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4635.0405F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      wall0.setYStart(1634.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1634.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3426.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1634.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1634.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1634.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1634.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3426.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1634.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1634.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1634.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYStart(1634.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1634.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3426.5F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1634.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1634.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1634.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setThickness(258.708F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1634.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1634.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1634.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1634.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYStart(3426.5F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2425.4922F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(1634.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2425.4922F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2530.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setYEnd((-687.45087F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4426.5728F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals((-687.45087F), wall0.getYEnd(), 0.01F);
      assertEquals(1369.5245F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4426.5728F, wall0.getLength(), 0.01F);
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4426.5728F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals((-687.45087F), wall0.getYEnd(), 0.01F);
      assertEquals(1369.5245F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4426.5728F, wall0.getLength(), 0.01F);
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      float float0 = wall0.getYStart();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4426.5728F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals((-687.45087F), wall0.getYEnd(), 0.01F);
      assertEquals(1369.5245F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(4426.5728F, wall0.getLength(), 0.01F);
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3426.5F, float0, 0.01F);
      
      wall0.setYEnd(0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3796.1636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(3796.1636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1713.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3796.1636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(3796.1636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1713.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(homeTexture1);
      
      float float1 = wall0.getYStart();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3796.1636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(3796.1636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1713.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(float1, float0, 0.01F);
      assertEquals(3426.5F, float1, 0.01F);
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1634.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3796.1636F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(3426.5F, wall0.getYStart(), 0.01F);
      assertEquals(3796.1636F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(258.708F, wall0.getThickness(), 0.01F);
      assertEquals(3636, (int)wall0.getRightSideColor());
      assertEquals(1713.25F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(817.0F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNotNull(wall0);
      
      boolean boolean0 = wall0.containsPoint((-1.0F), 0.0F, (-1.0F));
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(boolean0);
      
      Integer integer0 = Integer.getInteger("Invalid URL base for JAR entry");
      assertNull(integer0);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      int int0 = Float.compare(1152.4089F, 1768.6844F);
      assertEquals((-1), int0);
      
      float float2 = Float.max(2208.7002F, 1.0F);
      assertEquals(2208.7002F, float2, 0.01F);
      
      int int1 = Float.compare(1.0F, 1.0F);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1152.4089F, wall0.getArcExtent(), 0.01F);
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      
      wall0.setYEnd((-1464.1053F));
      assertEquals(1937002.0F, wall0.getLength(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3232.7898F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1152.4089F, wall0.getArcExtent(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals((-1464.1053F), wall0.getYEnd(), 0.01F);
      assertEquals(2229.6104F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(152.28955F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3232.7898F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(2859263.5F, wall0.getLength(), 0.01F);
      assertEquals(1794.7234F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1464.1053F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(152.28955F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotEquals((float)float1, (float)float2, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3232.7898F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(2859263.5F, wall0.getLength(), 0.01F);
      assertEquals(1794.7234F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1464.1053F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(152.28955F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertEquals(3952, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean0 = wall0.containsPoint(1956.0919F, 1956.0919F, (-1));
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3232.7898F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertEquals(2859263.5F, wall0.getLength(), 0.01F);
      assertEquals(1794.7234F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1464.1053F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(152.28955F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertFalse(boolean0);
      
      // Undeclared exception!
      wall0.containsWallStartAt(1108.04F, (-4093.0F), (-1175.456F));
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = Integer.toUnsignedString(439);
      assertEquals("439", string0);
      assertNotNull(string0);
      
      wall0.setThickness(1);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      int int0 = Integer.min((-2637), 8192);
      assertEquals((-2637), int0);
      
      wall0.setLeftSideColor(integer1);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setXEnd((-1.0F));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1260.0372F), float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, (-2520.0845F), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 3743.3801F, 8192);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1260.5422F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(3563.2378F, wall0.getLength(), 0.01F);
      assertEquals(3563.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(4, floatArray1.length);
      assertNotNull(floatArray1);
      
      wall0.setXStart((-1.0F));
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2520.0945F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2520.0945F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getYEnd();
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2520.0945F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2520.0945F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.01F, float1, 0.01F);
      
      wall0.setLeftSideColor(integer1);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2520.0945F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2520.0945F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      
      Wall.Property[] wall_PropertyArray1 = Wall.Property.values();
      assertNotSame(wall_PropertyArray1, wall_PropertyArray0);
      assertFalse(wall_PropertyArray1.equals((Object)wall_PropertyArray0));
      assertEquals(18, wall_PropertyArray1.length);
      assertNotNull(wall_PropertyArray1);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall((-1031.82F), (-1031.82F), (-1031.82F), (-1031.82F), (-1031.82F), 0.1F);
      assertEquals((-1031.82F), wall0.getXStart(), 0.01F);
      assertEquals((-1031.82F), wall0.getThickness(), 0.01F);
      assertEquals((-1031.82F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1031.82F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1031.82F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1031.82F), wall0.getXEnd(), 0.01F);
      assertEquals((-1031.82F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      Level level0 = wall0.getLevel();
      assertEquals((-1031.82F), wall0.getXStart(), 0.01F);
      assertEquals((-1031.82F), wall0.getThickness(), 0.01F);
      assertEquals((-1031.82F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1031.82F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1031.82F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1031.82F), wall0.getXEnd(), 0.01F);
      assertEquals((-1031.82F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(level0);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertEquals((-1031.82F), wall0.getXStart(), 0.01F);
      assertEquals((-1031.82F), wall0.getThickness(), 0.01F);
      assertEquals((-1031.82F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1031.82F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1031.82F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1031.82F), wall0.getXEnd(), 0.01F);
      assertEquals((-1031.82F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall((-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F), (-11.88105F));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-11.88105F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-11.88105F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-11.88105F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-11.88105F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-11.88105F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-11.88105F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-11.88105F), wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((-11.88105F));
      assertEquals((-11.88105F), (float)float0, 0.01F);
      assertNotNull(float0);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
      assertNotNull(wall_PropertyArray0);
      
      Wall wall0 = new Wall((-2520.0845F), (-2520.0845F), 0.01F, 0.01F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Integer integer0 = Integer.valueOf(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      
      String string0 = Integer.toUnsignedString(0);
      assertEquals("0", string0);
      assertNotNull(string0);
      
      wall0.setThickness(1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideColor(integer1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(integer1.equals((Object)integer0));
      
      Wall wall1 = new Wall((-3972.0F), (-1.0F), 8192, 416.103F, 1151.4089F, 524.90924F);
      assertEquals(207.5515F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(12171.149F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3972.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1151.4089F, wall1.getThickness(), 0.01F);
      assertEquals(524.90924F, wall1.getHeight(), 0.01F);
      assertEquals(2110.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(12171.149F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(416.103F, wall1.getYEnd(), 0.01F);
      assertEquals(8192.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(207.5515F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(12171.149F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-3972.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1151.4089F, wall1.getThickness(), 0.01F);
      assertEquals(524.90924F, wall1.getHeight(), 0.01F);
      assertEquals(2110.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(12171.149F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(416.103F, wall1.getYEnd(), 0.01F);
      assertEquals(8192.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      float float0 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1260.0372F), float0, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.0F, (-2520.0845F), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = wall0.containsPoint(0.0F, (-1260.0372F), 8192);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1260.0372F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3563.9517F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2520.0845F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3563.9517F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall0.setXStart((-1.0F));
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setLeftSideColor(integer1);
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer1.equals((Object)integer0));
      
      float float1 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2520.0947F, float1, 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2520.0947F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-0.495F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, (int)wall0.getLeftSideColor());
      assertEquals((-1260.0372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2520.0845F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(0.01F, wall0.getYEnd(), 0.01F);
      assertEquals(2520.0947F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1152.4089F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertNull(homeTexture0);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Wall wall1 = new Wall((-2091.7202F), (-2928.5F), (-1.0F), (-2091.7202F), (-2928.5F), (-2928.5F));
      assertEquals((-2928.5F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1046.3601F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getLength(), 0.01F);
      assertEquals((-2510.11F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2091.7202F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2928.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2091.7202F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2928.5F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float2 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertEquals((-2928.5F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1046.3601F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getLength(), 0.01F);
      assertEquals((-2510.11F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2091.7202F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2928.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2091.7202F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2928.5F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-2928.5F), (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(1768.6844F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall1.setHeight(float2);
      assertNotSame(wall1, wall0);
      assertEquals((-2928.5F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1046.3601F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getLength(), 0.01F);
      assertEquals((-2510.11F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2091.7202F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2928.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2091.7202F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2928.5F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float3, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(wall0));
      assertNotNull(linkedList1);
      
      boolean boolean0 = linkedList1.add(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertEquals(1, linkedList1.size());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertFalse(linkedList1.contains(wall1));
      assertTrue(linkedList1.contains(wall0));
      
      List<Wall> list0 = new LinkedList<Wall>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      boolean boolean1 = wall1.intersectsRectangle(1768.6844F, 0.1F, (-3535.668F), (-3535.668F));
      assertNotSame(wall1, wall0);
      assertEquals((-2928.5F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1046.3601F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getLength(), 0.01F);
      assertEquals((-2510.11F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2091.7202F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2928.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2091.7202F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2928.5F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertNotSame(wall1, wall0);
      assertEquals((-2928.5F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1046.3601F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getLength(), 0.01F);
      assertEquals((-2510.11F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2251.9573F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2091.7202F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2928.5F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2091.7202F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2928.5F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1152.4089F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1768.6844F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1173.738F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1768.6844F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1768.6844F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall0.getYEnd(), 0.01F);
      assertEquals(1768.6844F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(textureImage0);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(0.0F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = new Float(0.0F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      wall0.setArcExtent(float2);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      Float float3 = new Float(2256.8824829949);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(2256.8826F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      wall0.setHeightAtEnd(float3);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2256.8826F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      Float float4 = wall0.getArcExtent();
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2256.8826F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      
      wall0.setArcExtent(float4);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(2256.8826F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertEquals((float)float4, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1174.6174F, (-1175.456F), 1174.6174F, 1174.6174F, 1174.6174F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1174.6174F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setThickness(9.3F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, (-1352.8862F), 1190.1356F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1190.1356F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals((-1352.8862F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      Float float0 = wall1.getHeight();
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1190.1356F, wall1.getHeight(), 0.01F);
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals((-1352.8862F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1190.1356F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(1768.6844F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1768.6844F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall1.setHeight(float1);
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals((-1352.8862F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1175.456F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertEquals((-1175.456F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals((-1352.8862F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      wall0.setXStart(2.0F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-586.728F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(1177.456F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-586.728F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(1177.456F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals((-1352.8862F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      boolean boolean0 = wall0.containsWallEndAt((-1352.8862F), (-576.54F), 1174.6174F);
      assertNotSame(wall0, wall1);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-586.728F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(1177.456F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean0);
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1174.6174F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-586.728F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1177.456F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertEquals(1174.6174F, wall0.getYStart(), 0.01F);
      assertEquals((-1175.456F), wall0.getXEnd(), 0.01F);
      assertEquals(1177.456F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(9.3F, wall0.getThickness(), 0.01F);
      assertEquals(1174.6174F, wall0.getYEnd(), 0.01F);
      assertEquals(1174.6174F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals((-1352.8862F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1768.6844F, wall1.getYStart(), 0.01F);
      assertEquals(1768.6844F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1768.6844F, wall1.getXEnd(), 0.01F);
      assertEquals((-1352.8862F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1768.6844F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1768.6844F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall((-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F), (-1172.343F));
      Float float0 = new Float((-1172.343F));
      Float float1 = Float.valueOf((-1172.343F));
      Float.compare((-1172.343F), (-1172.343F));
      wall0.setArcExtent(float1);
      Wall wall1 = wall0.clone();
      wall0.getYArcCircleCenter();
      wall0.getPoints();
      wall1.setXStart(0);
      Integer integer0 = new Integer(6);
      wall0.setLeftSideColor(integer0);
      float float2 = wall1.getLength();
      assertEquals(1172.343F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(711949.4F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1.0F), (-298.42172F), (-298.42172F));
      wall0.intersectsRectangle((-1.0F), 417.103F, 4706.654F, 2.0F);
      wall0.setRightSideShininess(417.103F);
      Integer integer0 = new Integer((-114));
      Integer.remainderUnsigned((-114), 1983);
      wall0.getXStart();
      wall0.move(4706.654F, 417.103F);
      wall0.setWallAtEnd(wall0);
      wall0.setThickness(2.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.intersectsRectangle(2.0F, (-298.42172F), (-114), (-298.42172F));
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall((-0.010728165F), (-0.010728165F), (-0.010728165F), (-0.010728165F), 1.0F);
      wall0.setHeightAtEnd((Float) null);
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.getLeftSideTexture();
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      wall0.setThickness(9.3F);
      Wall wall1 = new Wall(1768.6844F, 1768.6844F, 1768.6844F, 1768.6844F, 1173.738F, 1152.4089F);
      Float float0 = wall1.getHeight();
      assertEquals(1152.4089F, (float)float0, 0.01F);
      
      wall1.setHeight(float0);
      wall1.setWallAtStart(wall0);
      float float1 = wall0.getYArcCircleCenter();
      assertEquals((-11.52356F), float1, 0.01F);
      
      boolean boolean0 = wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      assertFalse(boolean0);
      
      wall0.setWallAtEnd(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getPoints();
      Wall wall2 = new Wall(1768.6844F, 125.3507F, 1152.4089F, 125.3507F, 1.0F);
      assertEquals(616.2755F, wall2.getLength(), 0.01F);
      
      wall1.getPoints();
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture(",LCrJlqZ[p", temporaryURLContent0, (-1.0F), 0.0F);
      catalogTexture0.getName();
      catalogTexture0.getImage();
      catalogTexture0.getWidth();
      catalogTexture0.getHeight();
      wall0.setPattern(catalogTexture0);
      assertEquals((-11.52356F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), 1173.738F, (-1175.456F), 1152.4089F, (-2640.304F), 1173.738F);
      wall0.getHeight();
      Float.valueOf((-2640.304F));
      Float.compare(1173.738F, 1.0F);
      Float.compare(4094.001F, 1152.4089F);
      Float float0 = new Float(457.02);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.containsPoint(2.0F, 1, 1173.738F);
      wall0.getXArcCircleCenter();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall((-1175.456F), (-1175.456F), (-1175.456F), 1152.4089F, 1152.4089F, (-1175.456F));
      wall0.setThickness(9.3F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.getYArcCircleCenter();
      wall1.containsWallEndAt((-1175.456F), 9.3F, 2341.982F);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      Wall wall2 = new Wall(1173.738F, 2341.982F, (-1175.456F), (-11.52356F), (-11.52356F), 1152.4089F);
      wall1.getPoints();
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
  }
}

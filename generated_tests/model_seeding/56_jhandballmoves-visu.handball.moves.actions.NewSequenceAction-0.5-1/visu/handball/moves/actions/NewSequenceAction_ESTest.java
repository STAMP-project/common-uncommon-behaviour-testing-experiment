/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:15:40 GMT 2019
 */

package visu.handball.moves.actions;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.event.ActionEvent;
import java.beans.PropertyChangeListener;
import javax.swing.plaf.metal.MetalComboBoxUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import visu.handball.moves.actions.NewSequenceAction;
import visu.handball.moves.model.HandballModel;
import visu.handball.moves.model.MoveEvent;
import visu.handball.moves.model.player.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NewSequenceAction_ESTest extends NewSequenceAction_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      PropertyChangeListener propertyChangeListener0 = metalComboBoxUI0.createPropertyChangeListener();
      newSequenceAction0.addPropertyChangeListener(propertyChangeListener0);
      // Undeclared exception!
      try { 
        newSequenceAction0.modelChanged();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // visu.handball.moves.actions.NewSequenceAction cannot be cast to javax.swing.JComboBox
         //
         verifyException("javax.swing.plaf.basic.BasicComboBoxUI$Handler", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NewSequenceAction newSequenceAction0 = null;
      try {
        newSequenceAction0 = new NewSequenceAction((HandballModel) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visu.handball.moves.actions.NewSequenceAction", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(player0).getCurrent_x();
      doReturn(0).when(player0).getCurrent_y();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-2137));
      Player player1 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(player1).getCurrent_x();
      doReturn(0).when(player1).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player1).getPlayerNumber();
      MoveEvent moveEvent1 = new MoveEvent(player1, 2303);
      handballModel0.addMoveEvent(moveEvent1);
      MoveEvent moveEvent2 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(moveEvent2).getPlayer();
      doReturn(864).when(moveEvent2).getSequenceNr();
      doReturn(true).when(moveEvent2).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent2);
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      handballModel0.setActualMoveEvent(moveEvent0);
      assertFalse(handballModel0.isBallSet());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      MoveEvent moveEvent0 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(moveEvent0).getPlayer();
      doReturn(871).when(moveEvent0).getSequenceNr();
      doReturn(true).when(moveEvent0).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent0);
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      newSequenceAction0.modelChanged();
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(player0).getCurrent_x();
      doReturn(0).when(player0).getCurrent_y();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-2137));
      MoveEvent moveEvent1 = mock(MoveEvent.class, new ViolatedAssumptionAnswer());
      doReturn((Player) null).when(moveEvent1).getPlayer();
      doReturn(864).when(moveEvent1).getSequenceNr();
      doReturn(true).when(moveEvent1).isDestinationPointSet();
      handballModel0.setActualMoveEvent(moveEvent1);
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      handballModel0.setActualMoveEvent(moveEvent0);
      assertFalse(moveEvent0.equals((Object)moveEvent1));
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      Player player0 = mock(Player.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(player0).getCurrent_x();
      doReturn(0, 0).when(player0).getCurrent_y();
      doReturn(0, 0, 0, 0).when(player0).getPlayerNumber();
      MoveEvent moveEvent0 = new MoveEvent(player0, (-734));
      handballModel0.setActualMoveEvent(moveEvent0);
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      newSequenceAction0.actionPerformed((ActionEvent) null);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HandballModel handballModel0 = new HandballModel();
      NewSequenceAction newSequenceAction0 = new NewSequenceAction(handballModel0);
      ActionEvent actionEvent0 = new ActionEvent(handballModel0, 3491, (String) null, 3491, 3491);
      newSequenceAction0.actionPerformed(actionEvent0);
      assertEquals(3491, actionEvent0.getModifiers());
  }
}

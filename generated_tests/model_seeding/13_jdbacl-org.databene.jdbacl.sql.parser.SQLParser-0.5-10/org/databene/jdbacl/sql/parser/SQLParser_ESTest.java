/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 22:14:21 GMT 2019
 */

package org.databene.jdbacl.sql.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.List;
import org.antlr.runtime.BaseRecognizer;
import org.antlr.runtime.BitSet;
import org.antlr.runtime.IntStream;
import org.antlr.runtime.RecognitionException;
import org.antlr.runtime.RecognizerSharedState;
import org.antlr.runtime.Token;
import org.antlr.runtime.TokenStream;
import org.antlr.runtime.tree.CommonTree;
import org.antlr.runtime.tree.TreeAdaptor;
import org.databene.jdbacl.sql.parser.SQLParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLParser_ESTest extends SQLParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertNotNull(sQLParser1);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      Object object0 = sQLParser_equality_expression_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1893).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(32, SQLParser.AND);
      assertEquals(70, SQLParser.T__70);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(130, SQLParser.T__130);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(114, SQLParser.T__114);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(57, SQLParser.DATE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(89, SQLParser.T__89);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(134, SQLParser.T__134);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(118, SQLParser.T__118);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(37, SQLParser.GT);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(43, SQLParser.IN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLParser.exclusive_or_expression_return sQLParser_exclusive_or_expression_return0 = new SQLParser.exclusive_or_expression_return();
      assertNotNull(sQLParser_exclusive_or_expression_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(97, SQLParser.T__97);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(125, SQLParser.T__125);
      assertEquals(98, SQLParser.T__98);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(32, SQLParser.AND);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(85, SQLParser.T__85);
      assertEquals(100, SQLParser.T__100);
      assertEquals(78, SQLParser.T__78);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(122, SQLParser.T__122);
      assertEquals(94, SQLParser.T__94);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(88, SQLParser.T__88);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-2388), (-2388), 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((-2)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      
      recognizerSharedState2.tokenStartLine = (-2640);
      BitSet bitSet0 = SQLParser.FOLLOW_86_in_ora_config618;
      assertNotNull(bitSet0);
      assertEquals(128, bitSet0.numBits());
      assertEquals(2, bitSet0.lengthInLongWords());
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.size());
      
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState2);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-2640), recognizerSharedState2.tokenStartLine);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(38, SQLParser.GE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(129, SQLParser.T__129);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(5, SQLParser.NOT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(109, SQLParser.T__109);
      assertEquals(97, SQLParser.T__97);
      assertEquals(4, SQLParser.INT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(39, SQLParser.LT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(88, SQLParser.T__88);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(73, SQLParser.T__73);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(78, SQLParser.T__78);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      SQLParser.add_constraints_return sQLParser_add_constraints_return0 = new SQLParser.add_constraints_return();
      assertNotNull(sQLParser_add_constraints_return0);
      
      Object object0 = sQLParser_add_constraints_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      sQLParser_literal_return0.start = null;
      sQLParser_literal_return0.start = null;
      Object object1 = sQLParser_literal_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(64, SQLParser.T__64);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.inline_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Object object0 = sQLParser_arguments_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn((-614), 69, (-1348)).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(117, SQLParser.T__117);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(31, SQLParser.OR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(108, SQLParser.T__108);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.type_return sQLParser_type_return0 = sQLParser0.type();
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(117, SQLParser.T__117);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(31, SQLParser.OR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(108, SQLParser.T__108);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(83, SQLParser.T__83);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertNotNull(sQLParser_type_return0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.partition_part_config_return sQLParser_partition_part_config_return0 = new SQLParser.partition_part_config_return();
      assertNotNull(sQLParser_partition_part_config_return0);
      
      Object object1 = sQLParser_partition_part_config_return0.getTree();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(120, SQLParser.T__120);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(103, SQLParser.T__103);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(101, SQLParser.T__101);
      assertEquals(72, SQLParser.T__72);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(87, SQLParser.T__87);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(122, SQLParser.T__122);
      assertEquals(73, SQLParser.T__73);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      SQLParser.drop_index_return sQLParser_drop_index_return0 = new SQLParser.drop_index_return();
      assertNotNull(sQLParser_drop_index_return0);
      
      Object object0 = sQLParser_drop_index_return0.getTree();
      assertNull(object0);
      
      Object object1 = sQLParser_drop_index_return0.getTree();
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(124, SQLParser.T__124);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(34, SQLParser.EQ);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(46, SQLParser.SUB);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(133, SQLParser.T__133);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(38, SQLParser.GE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(42, SQLParser.NULL);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(104, SQLParser.T__104);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(32, SQLParser.AND);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(73, SQLParser.T__73);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(40, SQLParser.LE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.partition_parts_return sQLParser_partition_parts_return0 = new SQLParser.partition_parts_return();
      assertNotNull(sQLParser_partition_parts_return0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      int int0 = 64;
      int int1 = 122;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(132, SQLParser.T__132);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(98, SQLParser.T__98);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn((String) null).when(tokenStream0).getSourceName();
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      TreeAdaptor treeAdaptor0 = sQLParser0.getTreeAdaptor();
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertNotNull(treeAdaptor0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      sQLParser0.setTreeAdaptor(treeAdaptor0);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      int int0 = recognitionException0.getUnexpectedType();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, int0);
      
      String string0 = sQLParser0.getErrorHeader(recognitionException0);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(string0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("line 0:0", string0);
      
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = sQLParser0.ora_configs();
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertNotNull(sQLParser_ora_configs_return0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SQLParser.create_index_return sQLParser_create_index_return0 = new SQLParser.create_index_return();
      assertNotNull(sQLParser_create_index_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      sQLParser_create_index_return0.start = null;
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      sQLParser_keyword_return0.start = null;
      sQLParser_create_index_return0.start = null;
      Object object0 = sQLParser_create_index_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(40, SQLParser.LE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(60, SQLParser.WS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(81, SQLParser.T__81);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(120, SQLParser.T__120);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(135, SQLParser.T__135);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(64, SQLParser.T__64);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(92, SQLParser.T__92);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(77, SQLParser.T__77);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(90, SQLParser.T__90);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(75, SQLParser.T__75);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(110, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(95, SQLParser.T__95);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLParser.LT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(99, SQLParser.T__99);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(69, SQLParser.T__69);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(75, SQLParser.T__75);
      assertEquals(98, SQLParser.T__98);
      assertEquals(121, SQLParser.T__121);
      assertEquals(68, SQLParser.T__68);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(114, SQLParser.T__114);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(97, SQLParser.T__97);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      sQLParser_type_return0.tree = (Object) null;
      SQLParser.primary_return sQLParser_primary_return0 = new SQLParser.primary_return();
      assertNotNull(sQLParser_primary_return0);
      
      Object object0 = sQLParser_primary_return0.getTree();
      assertNull(object0);
      
      Object object1 = sQLParser_primary_return0.tree;
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(98, SQLParser.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(61, SQLParser.T__61);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(69, SQLParser.T__69);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(84, SQLParser.T__84);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(70, SQLParser.T__70);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(93, SQLParser.T__93);
      assertEquals(32, SQLParser.AND);
      assertEquals(85, SQLParser.T__85);
      assertEquals(104, SQLParser.T__104);
      assertEquals(78, SQLParser.T__78);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(102, SQLParser.T__102);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(88, SQLParser.T__88);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(73, SQLParser.T__73);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(81, SQLParser.T__81);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, SQLParser.T__66);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(108, SQLParser.T__108);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(97, SQLParser.T__97);
      assertEquals(100, SQLParser.T__100);
      assertEquals(67, SQLParser.T__67);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_sequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 135, 80, 5821, 121).when(tokenStream0).LA(anyInt());
      doReturn(80).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 135;
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(135, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(137, SQLParser.T__137);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(122, SQLParser.T__122);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(41, SQLParser.IS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(135, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(101, SQLParser.T__101);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(90, SQLParser.T__90);
      assertEquals(47, SQLParser.STAR);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(130, SQLParser.T__130);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(42, SQLParser.NULL);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(110, SQLParser.T__110);
      assertEquals(57, SQLParser.DATE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(32, SQLParser.AND);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(74, SQLParser.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(90, SQLParser.T__90);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(111, SQLParser.T__111);
      assertEquals(41, SQLParser.IS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(118, SQLParser.T__118);
      assertEquals(91, SQLParser.T__91);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(125, SQLParser.T__125);
      assertEquals(69, SQLParser.T__69);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(37, SQLParser.GT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(72, SQLParser.T__72);
      assertEquals(130, SQLParser.T__130);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(107, SQLParser.T__107);
      assertEquals(129, SQLParser.T__129);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      SQLParser.ora_lob_return sQLParser_ora_lob_return0 = new SQLParser.ora_lob_return();
      assertNotNull(sQLParser_ora_lob_return0);
      
      Object object0 = sQLParser_ora_lob_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser1 = new SQLParser(tokenStream1, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(68, SQLParser.T__68);
      assertEquals(42, SQLParser.NULL);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(121, SQLParser.T__121);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(37, SQLParser.GT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(57, SQLParser.DATE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertNotNull(sQLParser1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser1.in_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(116, SQLParser.T__116);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(101, SQLParser.T__101);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(115, SQLParser.T__115);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(137, SQLParser.T__137);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(122, SQLParser.T__122);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(112, SQLParser.T__112);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(7, SQLParser.STRING);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(116, SQLParser.T__116);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(101, SQLParser.T__101);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(115, SQLParser.T__115);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(137, SQLParser.T__137);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(122, SQLParser.T__122);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(112, SQLParser.T__112);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(7, SQLParser.STRING);
      assertNotNull(sQLParser_commands_return0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(46, SQLParser.SUB);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(116, SQLParser.T__116);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(101, SQLParser.T__101);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(115, SQLParser.T__115);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(137, SQLParser.T__137);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(122, SQLParser.T__122);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(112, SQLParser.T__112);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(85, SQLParser.T__85);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(71, SQLParser.T__71);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(88, SQLParser.T__88);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertNotNull(sQLParser1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      
      // Undeclared exception!
      try { 
        sQLParser1.drop_sequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(31, SQLParser.OR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(131, SQLParser.T__131);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(38, SQLParser.GE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(39, SQLParser.LT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(33, SQLParser.XOR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLParser.size_return sQLParser_size_return0 = new SQLParser.size_return();
      assertNotNull(sQLParser_size_return0);
      
      sQLParser_size_return0.tree = (Object) "";
      Object object0 = sQLParser_size_return0.getTree();
      assertNotNull(object0);
      assertEquals("", object0);
      
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      sQLParser_size_return0.stop = null;
      SQLParser.primary_return sQLParser_primary_return0 = new SQLParser.primary_return();
      assertNotNull(sQLParser_primary_return0);
      
      Object object1 = sQLParser_primary_return0.getTree();
      assertNull(object1);
      
      Object object2 = sQLParser_primary_return0.tree;
      assertNull(object2);
      
      sQLParser_drop_sequence_return0.tree = null;
      sQLParser_size_return0.start = null;
      sQLParser_drop_sequence_return0.start = null;
      Object object3 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object3);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(63).when(tokenStream0).LA(anyInt());
      doReturn((-4236)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      sQLParser_size_return0.stop = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(81, SQLParser.T__81);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      SQLParser.partition_part_return sQLParser_partition_part_return0 = new SQLParser.partition_part_return();
      assertNotNull(sQLParser_partition_part_return0);
      
      Object object1 = sQLParser_partition_part_return0.getTree();
      assertNull(object1);
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      Object object2 = sQLParser_equality_expression_return0.getTree();
      assertNull(object2);
      
      SQLParser.create_index_return sQLParser_create_index_return0 = new SQLParser.create_index_return();
      assertNotNull(sQLParser_create_index_return0);
      
      Object object3 = sQLParser_create_index_return0.getTree();
      assertNull(object3);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(103, SQLParser.T__103);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, SQLParser.T__99);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(65, SQLParser.T__65);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.partition_part_config_return sQLParser_partition_part_config_return0 = new SQLParser.partition_part_config_return();
      assertNotNull(sQLParser_partition_part_config_return0);
      
      sQLParser_partition_part_config_return0.start = null;
      Object object0 = sQLParser_partition_part_config_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(40, SQLParser.LE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(41, SQLParser.IS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(5, SQLParser.NOT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(93, SQLParser.T__93);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.size_uom();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(40, SQLParser.LE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(57, SQLParser.DATE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_configs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.partition_part_config_return sQLParser_partition_part_config_return0 = new SQLParser.partition_part_config_return();
      assertNotNull(sQLParser_partition_part_config_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(39, SQLParser.LT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(33, SQLParser.XOR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(129, SQLParser.T__129);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(46, SQLParser.SUB);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.create_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = false;
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      recognizerSharedState0._fsp = (-922);
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      recognizerSharedState0.failed = false;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-922), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(107, SQLParser.T__107);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(32, SQLParser.AND);
      assertEquals(31, SQLParser.OR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(4, SQLParser.INT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.comment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      Object object0 = sQLParser_commands_return0.getTree();
      assertNull(object0);
      
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(125, SQLParser.T__125);
      assertEquals(67, SQLParser.T__67);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(106, SQLParser.T__106);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(128, SQLParser.T__128);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(122, SQLParser.T__122);
      assertEquals(85, SQLParser.T__85);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.create_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(96, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(14).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(65, SQLParser.T__65);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(130, SQLParser.T__130);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.alter_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLParser.multiplicative_expression_return sQLParser_multiplicative_expression_return0 = new SQLParser.multiplicative_expression_return();
      assertNotNull(sQLParser_multiplicative_expression_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(37, SQLParser.GT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(39, SQLParser.LT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(33, SQLParser.XOR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(78, SQLParser.T__78);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(31, SQLParser.OR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(134, SQLParser.T__134);
      assertEquals(32, SQLParser.AND);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLParser.expression_list_return sQLParser_expression_list_return0 = new SQLParser.expression_list_return();
      assertNotNull(sQLParser_expression_list_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      sQLParser_expression_list_return0.start = null;
      Object object0 = sQLParser_expression_list_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      Object object0 = sQLParser_type_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(32, SQLParser.AND);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.fractionDigits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      sQLParser_keyword_return0.tree = (Object) "LBs9";
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.syntaxErrors = 114;
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(136, SQLParser.T__136);
      assertEquals(81, SQLParser.T__81);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(111, SQLParser.T__111);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = sQLParser0.ora_configs();
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(136, SQLParser.T__136);
      assertEquals(81, SQLParser.T__81);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(87, SQLParser.T__87);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(111, SQLParser.T__111);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser_ora_configs_return0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertNotSame(recognizerSharedState1, recognizerSharedState0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      SQLParser.value_return sQLParser_value_return0 = new SQLParser.value_return();
      assertNotNull(sQLParser_value_return0);
      
      Object object0 = sQLParser_value_return0.getTree();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.equality_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      recognizerSharedState0.errorRecovery = true;
      // Undeclared exception!
      try { 
        sQLParser0.drop_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(41, SQLParser.IS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(43, SQLParser.IN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(118, SQLParser.T__118);
      assertEquals(38, SQLParser.GE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(82, SQLParser.T__82);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      SQLParser.qualified_name_return sQLParser_qualified_name_return0 = new SQLParser.qualified_name_return();
      assertNotNull(sQLParser_qualified_name_return0);
      
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.start = null;
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.tree = (Object) "0B*era|?H2o.I";
      Object object0 = sQLParser_and_expression_return0.getTree();
      assertNotNull(object0);
      assertEquals("0B*era|?H2o.I", object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      SQLParser.ora_lob_index_return sQLParser_ora_lob_index_return0 = new SQLParser.ora_lob_index_return();
      assertNotNull(sQLParser_ora_lob_index_return0);
      
      Object object1 = sQLParser_equality_expression_return0.getTree();
      assertNull(object1);
      
      SQLParser.unique_constraint_return sQLParser_unique_constraint_return0 = new SQLParser.unique_constraint_return();
      assertNotNull(sQLParser_unique_constraint_return0);
      
      sQLParser_unique_constraint_return0.tree = null;
      Object object2 = sQLParser_unique_constraint_return0.getTree();
      assertNull(object2);
      
      SQLParser.table_details_return sQLParser_table_details_return1 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return1);
      assertFalse(sQLParser_table_details_return1.equals((Object)sQLParser_table_details_return0));
      
      Object object3 = sQLParser_table_details_return1.getTree();
      assertNull(object3);
      assertFalse(sQLParser_table_details_return1.equals((Object)sQLParser_table_details_return0));
      assertNotSame(sQLParser_table_details_return1, sQLParser_table_details_return0);
      
      SQLParser.nullability_return sQLParser_nullability_return0 = new SQLParser.nullability_return();
      assertNotNull(sQLParser_nullability_return0);
      
      Object object4 = sQLParser_nullability_return0.getTree();
      assertNull(object4);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1824), (-1824), (-1355)).when(tokenStream0).LA(anyInt());
      doReturn((-96)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(67, SQLParser.T__67);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(75, SQLParser.T__75);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      sQLParser0.traceIn("[@", 0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(67, SQLParser.T__67);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(75, SQLParser.T__75);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.default_value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(81, SQLParser.T__81);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(96, 0).when(tokenStream0).LA(anyInt());
      doReturn((-28)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.channel = (-28);
      recognizerSharedState0.tokenStartCharPositionInLine = 137;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-28), recognizerSharedState0.channel);
      assertEquals(137, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(62, SQLParser.T__62);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(89, SQLParser.T__89);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-28), recognizerSharedState0.channel);
      assertEquals(137, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(62, SQLParser.T__62);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(89, SQLParser.T__89);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser_commands_return0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      sQLParser_type_return0.start = null;
      Object object0 = sQLParser_type_return0.getTree();
      assertNull(object0);
      
      SQLParser.unique_constraint_return sQLParser_unique_constraint_return0 = new SQLParser.unique_constraint_return();
      assertNotNull(sQLParser_unique_constraint_return0);
      
      Object object1 = sQLParser_unique_constraint_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn(0).when(tokenStream0).mark();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(135, SQLParser.T__135);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(120, SQLParser.T__120);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(110, SQLParser.T__110);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.command();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      SQLParser.partition_part_return sQLParser_partition_part_return0 = new SQLParser.partition_part_return();
      assertNotNull(sQLParser_partition_part_return0);
      
      Object object1 = sQLParser_partition_part_return0.getTree();
      assertNull(object1);
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      Object object2 = sQLParser_equality_expression_return0.getTree();
      assertNull(object2);
      
      SQLParser.create_index_return sQLParser_create_index_return0 = new SQLParser.create_index_return();
      assertNotNull(sQLParser_create_index_return0);
      
      Object object3 = sQLParser_create_index_return0.getTree();
      assertNull(object3);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(73, SQLParser.T__73);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(105, SQLParser.T__105);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(33, SQLParser.XOR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(72, SQLParser.T__72);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(116, SQLParser.T__116);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(89, SQLParser.T__89);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(122, SQLParser.T__122);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.sub_partition_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 135, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(80).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 135;
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(135, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(38, SQLParser.GE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertNotNull(sQLParser0);
      assertEquals(135, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(47, SQLParser.STAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1158, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser.column_detail_return sQLParser_column_detail_return0 = new SQLParser.column_detail_return();
      assertNotNull(sQLParser_column_detail_return0);
      
      Object object0 = sQLParser_column_detail_return0.getTree();
      assertNull(object0);
      
      Object object1 = sQLParser_column_detail_return0.getTree();
      assertNull(object1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(62, SQLParser.T__62);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(136, SQLParser.T__136);
      assertEquals(47, SQLParser.STAR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(7, SQLParser.STRING);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(126, SQLParser.T__126);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = false;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn(0).when(tokenStream0).mark();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(129, SQLParser.T__129);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(60, SQLParser.WS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(110, SQLParser.T__110);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(4, SQLParser.INT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.command();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      SQLParser.size_return sQLParser_size_return0 = new SQLParser.size_return();
      assertNotNull(sQLParser_size_return0);
      
      sQLParser_size_return0.tree = (Object) "";
      Object object0 = sQLParser_size_return0.getTree();
      assertNotNull(object0);
      assertEquals("", object0);
      
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      SQLParser.primary_return sQLParser_primary_return0 = new SQLParser.primary_return();
      assertNotNull(sQLParser_primary_return0);
      
      Object object1 = sQLParser_primary_return0.getTree();
      assertNull(object1);
      
      Object object2 = sQLParser_primary_return0.tree;
      assertNull(object2);
      
      sQLParser_drop_sequence_return0.tree = null;
      sQLParser_size_return0.start = null;
      sQLParser_drop_sequence_return0.start = null;
      Object object3 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object3);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(4, SQLParser.INT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(37, SQLParser.GT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(4, SQLParser.INT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser_commands_return0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(96, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.channel = 14;
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(98, SQLParser.T__98);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(63, SQLParser.T__63);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(40, SQLParser.LE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(90, SQLParser.T__90);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SQLParser.column_name_return sQLParser_column_name_return0 = new SQLParser.column_name_return();
      assertNotNull(sQLParser_column_name_return0);
      
      SQLParser.additive_expression_return sQLParser_additive_expression_return0 = new SQLParser.additive_expression_return();
      assertNotNull(sQLParser_additive_expression_return0);
      
      sQLParser_additive_expression_return0.tree = null;
      sQLParser_additive_expression_return0.stop = null;
      sQLParser_column_name_return0.tree = (Object) sQLParser_additive_expression_return0;
      SQLParser.unique_constraint_return sQLParser_unique_constraint_return0 = new SQLParser.unique_constraint_return();
      assertNotNull(sQLParser_unique_constraint_return0);
      
      sQLParser_unique_constraint_return0.stop = null;
      sQLParser_unique_constraint_return0.start = null;
      Object object0 = sQLParser_unique_constraint_return0.getTree();
      assertNull(object0);
      
      SQLParser.commands_return sQLParser_commands_return0 = new SQLParser.commands_return();
      assertNotNull(sQLParser_commands_return0);
      
      Object object1 = sQLParser_additive_expression_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(60, SQLParser.WS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(105, SQLParser.T__105);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(90, SQLParser.T__90);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(57, SQLParser.DATE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(124, SQLParser.T__124);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(110, SQLParser.T__110);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      MockThrowable mockThrowable0 = new MockThrowable("nextToken");
      assertNotNull(mockThrowable0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      IntStream intStream0 = recognitionException0.input;
      assertNull(intStream0);
      
      // Undeclared exception!
      try { 
        sQLParser0.recover((IntStream) null, recognitionException0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1507).when(tokenStream0).LA(anyInt());
      doReturn((-1)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(62, SQLParser.T__62);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(99, SQLParser.T__99);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(43, SQLParser.IN);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(85, SQLParser.T__85);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(86, SQLParser.T__86);
      assertEquals(41, SQLParser.IS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.between_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 135).when(tokenStream0).LA(anyInt());
      doReturn(80).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(7, SQLParser.STRING);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(57, SQLParser.DATE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(39, SQLParser.LT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(4, SQLParser.INT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(122, SQLParser.T__122);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(47, SQLParser.STAR);
      assertEquals(130, SQLParser.T__130);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.errorRecovery = true;
      recognizerSharedState0.syntaxErrors = (-3436);
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertTrue(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-3436), recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(95, SQLParser.T__95);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(107, SQLParser.T__107);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(101, SQLParser.T__101);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals((-3436), sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Throwable[] throwableArray0 = recognitionException0.getSuppressed();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(throwableArray0);
      assertEquals(0, throwableArray0.length);
      
      IntStream intStream0 = recognitionException0.input;
      assertNull(intStream0);
      
      StackTraceElement[] stackTraceElementArray0 = recognitionException0.getStackTrace();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      BitSet bitSet0 = SQLParser.FOLLOW_76_in_ora_key636;
      assertNotNull(bitSet0);
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(1, bitSet0.size());
      assertFalse(bitSet0.isNil());
      assertEquals(64, bitSet0.numBits());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      Object object0 = sQLParser_create_sequence_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(65535, 2250, 2250, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(65535).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      Object object0 = sQLParser_type_return0.getTree();
      assertNull(object0);
      
      recognizerSharedState0.errorRecovery = false;
      sQLParser_type_return0.start = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(37, SQLParser.GT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      SQLParser.type_return sQLParser_type_return1 = sQLParser0.type();
      assertEquals(37, SQLParser.GT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertNotNull(sQLParser_type_return1);
      assertFalse(sQLParser_type_return1.equals((Object)sQLParser_type_return0));
      assertNotSame(sQLParser_type_return1, sQLParser_type_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      Object object1 = sQLParser_type_return0.getTree();
      assertNull(object1);
      assertFalse(sQLParser_type_return0.equals((Object)sQLParser_type_return1));
      assertNotSame(sQLParser_type_return0, sQLParser_type_return1);
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      SQLParser.qualified_name_return sQLParser_qualified_name_return0 = new SQLParser.qualified_name_return();
      assertNotNull(sQLParser_qualified_name_return0);
      
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.tree = (Object) "0B*era|?H2o.I";
      Object object0 = sQLParser_and_expression_return0.getTree();
      assertNotNull(object0);
      assertEquals("0B*era|?H2o.I", object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127).when(tokenStream0).LA(anyInt());
      doReturn(41).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(38, SQLParser.GE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(121, SQLParser.T__121);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(5, SQLParser.NOT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(132, SQLParser.T__132);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(60, SQLParser.WS);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      sQLParser_qualified_name_return0.stop = null;
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLParser.value_list_return sQLParser_value_list_return0 = new SQLParser.value_list_return();
      assertNotNull(sQLParser_value_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(41, SQLParser.IS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(60, SQLParser.WS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(7, SQLParser.STRING);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(40, SQLParser.LE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(41, SQLParser.IS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(60, SQLParser.WS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(7, SQLParser.STRING);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(40, SQLParser.LE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertNotNull(sQLParser_commands_return0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.unary_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.table_mutation_return sQLParser_table_mutation_return0 = new SQLParser.table_mutation_return();
      assertNotNull(sQLParser_table_mutation_return0);
      
      Object object0 = sQLParser_table_mutation_return0.getTree();
      assertNull(object0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(34, SQLParser.EQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(137, SQLParser.T__137);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.errorRecovery = true;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertTrue(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(131, SQLParser.T__131);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(80, SQLParser.T__80);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, SQLParser.T__99);
      assertEquals(134, SQLParser.T__134);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(37, SQLParser.GT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(95, SQLParser.T__95);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(107, SQLParser.T__107);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(137, SQLParser.T__137);
      assertEquals(73, SQLParser.T__73);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Object object0 = sQLParser_keyword_return0.getTree();
      assertNull(object0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      SQLParser.exclusive_or_expression_return sQLParser_exclusive_or_expression_return0 = new SQLParser.exclusive_or_expression_return();
      assertNotNull(sQLParser_exclusive_or_expression_return0);
      
      Object object1 = sQLParser_exclusive_or_expression_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(126).when(tokenStream0).LA(anyInt());
      doReturn(126).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(92, SQLParser.T__92);
      assertEquals(7, SQLParser.STRING);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(33, SQLParser.XOR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(47, SQLParser.STAR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      sQLParser_keyword_return0.tree = (Object) "LBs9";
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      String string0 = ">3";
      sQLParser_keyword_return0.stop = null;
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(81, SQLParser.T__81);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_partition_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      Object object0 = sQLParser_type_return0.getTree();
      assertNull(object0);
      
      recognizerSharedState0.errorRecovery = false;
      SQLParser.ora_storage_opt_return sQLParser_ora_storage_opt_return0 = new SQLParser.ora_storage_opt_return();
      assertNotNull(sQLParser_ora_storage_opt_return0);
      
      Object object1 = sQLParser_ora_storage_opt_return0.getTree();
      assertNull(object1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(96, SQLParser.T__96);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(62, SQLParser.T__62);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(69, SQLParser.T__69);
      assertEquals(108, SQLParser.T__108);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(60, SQLParser.WS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.relational_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState2.type);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      
      SQLParser.column_detail_return sQLParser_column_detail_return0 = new SQLParser.column_detail_return();
      assertNotNull(sQLParser_column_detail_return0);
      
      Object object0 = sQLParser_column_detail_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1, (RecognizerSharedState) null);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(33, SQLParser.XOR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(43, SQLParser.IN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals(99, SQLParser.T__99);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(33, SQLParser.XOR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(43, SQLParser.IN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals(99, SQLParser.T__99);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertNotNull(sQLParser_commands_return0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(47, SQLParser.STAR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      recognizerSharedState1.backtracking = 132;
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      sQLParser_keyword_return0.tree = (Object) "LBs9";
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      sQLParser_keyword_return0.stop = null;
      sQLParser_type_return0.stop = null;
      sQLParser_type_return0.tree = (Object) ">3";
      Object object0 = sQLParser_type_return0.getTree();
      assertNotNull(object0);
      assertEquals(">3", object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(112, SQLParser.T__112);
      assertEquals(97, SQLParser.T__97);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(103, SQLParser.T__103);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(61, SQLParser.T__61);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(7, SQLParser.STRING);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(5, SQLParser.NOT);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(86, SQLParser.T__86);
      assertEquals(115, SQLParser.T__115);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(87, SQLParser.T__87);
      assertEquals(114, SQLParser.T__114);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(42, SQLParser.NULL);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLParser.primary_key_constraint_return sQLParser_primary_key_constraint_return0 = new SQLParser.primary_key_constraint_return();
      assertNotNull(sQLParser_primary_key_constraint_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      sQLParser_primary_key_constraint_return0.stop = null;
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      sQLParser_literal_return0.start = null;
      sQLParser_literal_return0.stop = null;
      sQLParser_literal_return0.stop = null;
      Object object0 = sQLParser_literal_return0.getTree();
      assertNull(object0);
      
      SQLParser.nullability_return sQLParser_nullability_return0 = new SQLParser.nullability_return();
      assertNotNull(sQLParser_nullability_return0);
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      SQLParser.qualified_name_return sQLParser_qualified_name_return0 = new SQLParser.qualified_name_return();
      assertNotNull(sQLParser_qualified_name_return0);
      
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.tree = (Object) "0B*era|?H2o.I";
      Object object0 = sQLParser_and_expression_return0.getTree();
      assertNotNull(object0);
      assertEquals("0B*era|?H2o.I", object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127, (-68)).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(95, SQLParser.T__95);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(32, SQLParser.AND);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      SQLParser.keyword_return sQLParser_keyword_return0 = sQLParser0.keyword();
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(95, SQLParser.T__95);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(32, SQLParser.AND);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertNotNull(sQLParser_keyword_return0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      Object object1 = sQLParser_keyword_return0.getTree();
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(95, SQLParser.T__95);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(32, SQLParser.AND);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertNull(object1);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      Object object2 = sQLParser_keyword_return0.getStop();
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(110, SQLParser.T__110);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(7, SQLParser.STRING);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(122, SQLParser.T__122);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(95, SQLParser.T__95);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(32, SQLParser.AND);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertNull(object2);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      sQLParser_qualified_name_return0.tree = null;
      sQLParser_qualified_name_return0.stop = null;
      sQLParser_and_expression_return0.stop = null;
      SQLParser.name_return sQLParser_name_return0 = new SQLParser.name_return();
      assertNotNull(sQLParser_name_return0);
      
      sQLParser_name_return0.start = null;
      sQLParser_name_return0.stop = null;
      Object object3 = sQLParser_name_return0.getTree();
      assertNull(object3);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser1 = new SQLParser(tokenStream1);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(60, SQLParser.WS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(89, SQLParser.T__89);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(39, SQLParser.LT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(4, SQLParser.INT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(135, SQLParser.T__135);
      assertEquals(71, SQLParser.T__71);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(43, SQLParser.IN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(38, SQLParser.GE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(136, SQLParser.T__136);
      assertEquals(77, SQLParser.T__77);
      assertEquals(57, SQLParser.DATE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(109, SQLParser.T__109);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertNotNull(sQLParser1);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser1.drop_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      int int0 = (-2640);
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(7, SQLParser.STRING);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(57, SQLParser.DATE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(136, SQLParser.T__136);
      assertEquals(47, SQLParser.STAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.alter_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SQLParser.add_constraints_return sQLParser_add_constraints_return0 = new SQLParser.add_constraints_return();
      assertNotNull(sQLParser_add_constraints_return0);
      
      Object object0 = sQLParser_add_constraints_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      sQLParser_literal_return0.start = null;
      sQLParser_literal_return0.start = null;
      Object object1 = sQLParser_literal_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(113, 113, 99, 113).when(tokenStream0).LA(anyInt());
      doReturn(138).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(114, SQLParser.T__114);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(132, SQLParser.T__132);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(60, SQLParser.WS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(134, SQLParser.T__134);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(90, SQLParser.T__90);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(42, SQLParser.NULL);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.inline_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SQLParser.partition_value_spec_return sQLParser_partition_value_spec_return0 = new SQLParser.partition_value_spec_return();
      assertNotNull(sQLParser_partition_value_spec_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      sQLParser_partition_value_spec_return0.start = null;
      recognitionException0.node = (Object) sQLParser_partition_value_spec_return0;
      sQLParser_partition_value_spec_return0.start = null;
      String string0 = recognitionException0.toString();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertNotNull(string0);
      assertEquals("org.evosuite.runtime.mock.java.lang.MockThrowable", string0);
      
      sQLParser_partition_value_spec_return0.tree = (Object) recognitionException0;
      sQLParser_partition_value_spec_return0.start = null;
      RecognitionException recognitionException1 = (RecognitionException)sQLParser_partition_value_spec_return0.getTree();
      assertFalse(recognitionException1.approximateLineInfo);
      assertEquals(0, recognitionException1.c);
      assertEquals(0, recognitionException1.charPositionInLine);
      assertEquals(0, recognitionException1.line);
      assertEquals(0, recognitionException1.index);
      assertNotNull(recognitionException1);
      assertSame(recognitionException1, recognitionException0);
      
      SQLParser.fractionDigits_return sQLParser_fractionDigits_return0 = new SQLParser.fractionDigits_return();
      assertNotNull(sQLParser_fractionDigits_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(39, SQLParser.LT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(67, SQLParser.T__67);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(4, SQLParser.INT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(47, SQLParser.STAR);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(130, SQLParser.T__130);
      assertEquals(64, SQLParser.T__64);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(114, SQLParser.T__114);
      assertEquals(42, SQLParser.NULL);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(129, SQLParser.T__129);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(95, SQLParser.T__95);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(68, SQLParser.T__68);
      assertEquals(111, SQLParser.T__111);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(118, SQLParser.T__118);
      assertEquals(91, SQLParser.T__91);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_partition_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(90, SQLParser.T__90);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(126, SQLParser.T__126);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(38, SQLParser.GE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(128, SQLParser.T__128);
      assertEquals(61, SQLParser.T__61);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(97, SQLParser.T__97);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(93, SQLParser.T__93);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(69, SQLParser.T__69);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(128, SQLParser.T__128);
      assertEquals(61, SQLParser.T__61);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(97, SQLParser.T__97);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(93, SQLParser.T__93);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(69, SQLParser.T__69);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertNotNull(sQLParser_commands_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Object object0 = sQLParser_arguments_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(60, SQLParser.WS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(40, SQLParser.LE);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(90, SQLParser.T__90);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(42, SQLParser.NULL);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(60, SQLParser.WS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(40, SQLParser.LE);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(90, SQLParser.T__90);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(42, SQLParser.NULL);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser_commands_return0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      SQLParser.commands_return sQLParser_commands_return1 = sQLParser0.commands();
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(60, SQLParser.WS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(40, SQLParser.LE);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(90, SQLParser.T__90);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(121, SQLParser.T__121);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(42, SQLParser.NULL);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser_commands_return1);
      assertFalse(sQLParser_commands_return1.equals((Object)sQLParser_commands_return0));
      assertNotSame(sQLParser_commands_return1, sQLParser_commands_return0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = new SQLParser.ora_configs_return();
      assertNotNull(sQLParser_ora_configs_return0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.lastErrorIndex = 1554;
      recognizerSharedState0.errorRecovery = false;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(1554, recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(60, SQLParser.WS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(118, SQLParser.T__118);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(67, SQLParser.T__67);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(135, SQLParser.T__135);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(61, SQLParser.T__61);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(4, SQLParser.INT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_part();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(101, SQLParser.T__101);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(85, SQLParser.T__85);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(95, SQLParser.T__95);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(130, SQLParser.T__130);
      assertEquals(60, SQLParser.WS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      
      SQLParser sQLParser1 = new SQLParser(sQLParser0.input, recognizerSharedState0);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(101, SQLParser.T__101);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(85, SQLParser.T__85);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(42, SQLParser.NULL);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(95, SQLParser.T__95);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(130, SQLParser.T__130);
      assertEquals(60, SQLParser.WS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(130, SQLParser.T__130);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(31, SQLParser.OR);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(40, SQLParser.LE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertNotNull(sQLParser1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      recognitionException0.line = 0;
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      Token token1 = recognizerSharedState0.token;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(110, 81).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(66, SQLParser.T__66);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(74, SQLParser.T__74);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(90, SQLParser.T__90);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(92, SQLParser.T__92);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(5, SQLParser.NOT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(78, SQLParser.T__78);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(78, 78, 78, 78, 0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(95, SQLParser.T__95);
      assertEquals(109, SQLParser.T__109);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(88, SQLParser.T__88);
      assertEquals(77, SQLParser.T__77);
      assertEquals(127, SQLParser.T__127);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(70, SQLParser.T__70);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(57, SQLParser.DATE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(37, SQLParser.GT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(5, SQLParser.NOT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(135, SQLParser.T__135);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(81, SQLParser.T__81);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(122, SQLParser.T__122);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_spec();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // rule name
         //
         verifyException("org.antlr.runtime.tree.RewriteRuleElementStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.multiplicative_expression_return sQLParser_multiplicative_expression_return0 = new SQLParser.multiplicative_expression_return();
      assertNotNull(sQLParser_multiplicative_expression_return0);
      
      Object object0 = sQLParser_multiplicative_expression_return0.getTree();
      assertNull(object0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1183, 1183, (-362)).when(tokenStream0).LA(anyInt());
      doReturn(1183).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(31, SQLParser.OR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(43, SQLParser.IN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1893).when(tokenStream0).LA(anyInt());
      doReturn(86).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(37, SQLParser.GT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(39, SQLParser.LT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      IntStream intStream0 = recognitionException0.input;
      assertNull(intStream0);
      
      BitSet bitSet0 = SQLParser.FOLLOW_name_in_ora_lob_config1010;
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(1, bitSet0.size());
      assertEquals(64, bitSet0.numBits());
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(66, SQLParser.T__66);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(98, SQLParser.T__98);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(67, SQLParser.T__67);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(34, SQLParser.EQ);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      BitSet bitSet1 = SQLParser.FOLLOW_ora_configs_in_create_index1340;
      assertNotNull(bitSet1);
      assertTrue(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertFalse(bitSet1.isNil());
      assertEquals(1, bitSet1.size());
      assertEquals(64, bitSet1.numBits());
      assertEquals(1, bitSet1.lengthInLongWords());
      
      // Undeclared exception!
      try { 
        sQLParser0.mismatch((IntStream) null, 0, bitSet1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(47, SQLParser.STAR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(43, SQLParser.IN);
      assertEquals(93, SQLParser.T__93);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(121, SQLParser.T__121);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      int int0 = 1;
      int int1 = 4;
      int int2 = 63;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(33, SQLParser.XOR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(123, SQLParser.T__123);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(131, SQLParser.T__131);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(95, SQLParser.T__95);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      BitSet bitSet0 = SQLParser.FOLLOW_table_name_in_create_table194;
      assertNotNull(bitSet0);
      assertEquals(128, bitSet0.numBits());
      assertEquals(2, bitSet0.lengthInLongWords());
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.size());
      
      // Undeclared exception!
      try { 
        sQLParser0.mismatch((IntStream) null, 0, bitSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(100, SQLParser.T__100);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(115, SQLParser.T__115);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(99, SQLParser.T__99);
      assertEquals(57, SQLParser.DATE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(97, SQLParser.T__97);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(41, SQLParser.IS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(43, SQLParser.IN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(64, SQLParser.T__64);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(5, SQLParser.NOT);
      assertEquals(40, SQLParser.LE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(102, SQLParser.T__102);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.inline_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.table_mutation_return sQLParser_table_mutation_return0 = new SQLParser.table_mutation_return();
      assertNotNull(sQLParser_table_mutation_return0);
      
      Object object0 = sQLParser_table_mutation_return0.getTree();
      assertNull(object0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState1);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState2);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(83, SQLParser.T__83);
      assertEquals(37, SQLParser.GT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(40, SQLParser.LE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(66, SQLParser.T__66);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(103, SQLParser.T__103);
      assertEquals(97, SQLParser.T__97);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(87, SQLParser.T__87);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser1 = new SQLParser(tokenStream0);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(82, SQLParser.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(33, SQLParser.XOR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(112, SQLParser.T__112);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(103, SQLParser.T__103);
      assertEquals(98, SQLParser.T__98);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(122, SQLParser.T__122);
      assertEquals(136, SQLParser.T__136);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(88, SQLParser.T__88);
      assertEquals(106, SQLParser.T__106);
      assertEquals(73, SQLParser.T__73);
      assertEquals(121, SQLParser.T__121);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(109, SQLParser.T__109);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(86, SQLParser.T__86);
      assertEquals(100, SQLParser.T__100);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(64, SQLParser.T__64);
      assertEquals(107, SQLParser.T__107);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(37, SQLParser.GT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(77, SQLParser.T__77);
      assertEquals(7, SQLParser.STRING);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertNotNull(sQLParser1);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser1.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(41, SQLParser.IS);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(62, SQLParser.T__62);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(5, SQLParser.NOT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(134, SQLParser.T__134);
      assertEquals(111, SQLParser.T__111);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(126, SQLParser.T__126);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.add_constraints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(121, SQLParser.T__121);
      assertEquals(98, SQLParser.T__98);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(118, SQLParser.T__118);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(60, SQLParser.WS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(99, SQLParser.T__99);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.create_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SQLParser.size_return sQLParser_size_return0 = new SQLParser.size_return();
      assertNotNull(sQLParser_size_return0);
      
      sQLParser_size_return0.tree = (Object) "";
      Object object0 = sQLParser_size_return0.getTree();
      assertNotNull(object0);
      assertEquals("", object0);
      
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(135, SQLParser.T__135);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(57, SQLParser.DATE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(41, SQLParser.IS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(81, SQLParser.T__81);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(5, SQLParser.NOT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(101, SQLParser.T__101);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(116, SQLParser.T__116);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(64, SQLParser.T__64);
      assertEquals(108, SQLParser.T__108);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, SQLParser.T__100);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(91, SQLParser.T__91);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(127, SQLParser.T__127);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(104, SQLParser.T__104);
      assertEquals(98, SQLParser.T__98);
      assertEquals(112, SQLParser.T__112);
      assertEquals(134, SQLParser.T__134);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(137, SQLParser.T__137);
      assertEquals(65, SQLParser.T__65);
      assertEquals(107, SQLParser.T__107);
      assertEquals(80, SQLParser.T__80);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(88, SQLParser.T__88);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(96, SQLParser.T__96);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_value_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      SQLParser.inline_constraint_return sQLParser_inline_constraint_return0 = new SQLParser.inline_constraint_return();
      assertNotNull(sQLParser_inline_constraint_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(47, SQLParser.STAR);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(57, SQLParser.DATE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(38, SQLParser.GE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(123, 14, (-1573), 0).when(tokenStream0).LA(anyInt());
      doReturn(116).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(113, SQLParser.T__113);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(73, SQLParser.T__73);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      SQLParser.partition_part_return sQLParser_partition_part_return0 = new SQLParser.partition_part_return();
      assertNotNull(sQLParser_partition_part_return0);
      
      Object object1 = sQLParser_partition_part_return0.getTree();
      assertNull(object1);
      
      SQLParser.equality_expression_return sQLParser_equality_expression_return0 = new SQLParser.equality_expression_return();
      assertNotNull(sQLParser_equality_expression_return0);
      
      Object object2 = sQLParser_equality_expression_return0.getTree();
      assertNull(object2);
      
      SQLParser.create_index_return sQLParser_create_index_return0 = new SQLParser.create_index_return();
      assertNotNull(sQLParser_create_index_return0);
      
      Object object3 = sQLParser_create_index_return0.getTree();
      assertNull(object3);
      
      TokenStream tokenStream1 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(23, (-1), 103).when(tokenStream1).LA(anyInt());
      doReturn(0).when(tokenStream1).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream1).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream1);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(4, SQLParser.INT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Object object0 = sQLParser_arguments_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(96, 96, (-1551)).when(tokenStream0).LA(anyInt());
      doReturn((-1691)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(77, SQLParser.T__77);
      assertEquals(131, SQLParser.T__131);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(23, 0).when(tokenStream0).LA(anyInt());
      doReturn(414).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(61, SQLParser.T__61);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(61, SQLParser.T__61);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertNotNull(sQLParser_commands_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.multiplicative_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Object object0 = sQLParser_arguments_return0.getTree();
      assertNull(object0);
      
      Object object1 = sQLParser_arguments_return0.getTree();
      assertNull(object1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(123, SQLParser.T__123);
      assertEquals(107, SQLParser.T__107);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(75, SQLParser.T__75);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(102, SQLParser.T__102);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(133, SQLParser.T__133);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_value_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-2388), 0).when(tokenStream0).LA(anyInt());
      doReturn((-2)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.type);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      
      recognizerSharedState2.tokenStartLine = (-2640);
      BitSet bitSet0 = SQLParser.FOLLOW_86_in_ora_config618;
      assertNotNull(bitSet0);
      assertEquals(128, bitSet0.numBits());
      assertEquals(2, bitSet0.lengthInLongWords());
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.size());
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(108, SQLParser.T__108);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(115, SQLParser.T__115);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(85, SQLParser.T__85);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(111, SQLParser.T__111);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(118, SQLParser.T__118);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(73, SQLParser.T__73);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(33, SQLParser.XOR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_partition_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      SQLParser.create_table_return sQLParser_create_table_return0 = new SQLParser.create_table_return();
      assertNotNull(sQLParser_create_table_return0);
      
      Object object1 = sQLParser_create_table_return0.getTree();
      assertNull(object1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(69, SQLParser.T__69);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, SQLParser.T__99);
      assertEquals(105, SQLParser.T__105);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(119, SQLParser.T__119);
      assertEquals(71, SQLParser.T__71);
      assertEquals(134, SQLParser.T__134);
      assertEquals(63, SQLParser.T__63);
      assertEquals(126, SQLParser.T__126);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(7, SQLParser.STRING);
      assertEquals(86, SQLParser.T__86);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(74, SQLParser.T__74);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(100, SQLParser.T__100);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        sQLParser0.ora_flag();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(43, SQLParser.IN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(57, SQLParser.DATE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(97, SQLParser.T__97);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.create_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      SQLParser.qualified_name_return sQLParser_qualified_name_return0 = new SQLParser.qualified_name_return();
      assertNotNull(sQLParser_qualified_name_return0);
      
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      sQLParser_qualified_name_return0.start = null;
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.tree = (Object) "0B*era|?H2o.I";
      Object object0 = sQLParser_and_expression_return0.getTree();
      assertNotNull(object0);
      assertEquals("0B*era|?H2o.I", object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(39, SQLParser.LT);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(83, SQLParser.T__83);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(34, SQLParser.EQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(107, SQLParser.T__107);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(131, SQLParser.T__131);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(79, SQLParser.T__79);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(40, SQLParser.LE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(76, SQLParser.T__76);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(38, SQLParser.GE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(135, SQLParser.T__135);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(100, SQLParser.T__100);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(114, SQLParser.T__114);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(57, SQLParser.DATE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(113, SQLParser.T__113);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(95, SQLParser.T__95);
      assertEquals(128, SQLParser.T__128);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(67, SQLParser.T__67);
      assertEquals(126, SQLParser.T__126);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      Object object0 = sQLParser_comment_return0.getTree();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLParser.comment_return sQLParser_comment_return0 = new SQLParser.comment_return();
      assertNotNull(sQLParser_comment_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(137, SQLParser.T__137);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(43, SQLParser.IN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(102, SQLParser.T__102);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(117, SQLParser.T__117);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(103, SQLParser.T__103);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(64, SQLParser.T__64);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(95, SQLParser.T__95);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.default_value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn((-1669), 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(33, SQLParser.XOR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals(120, SQLParser.T__120);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.unique_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = 0;
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      recognizerSharedState1.following = recognizerSharedState0.following;
      recognizerSharedState1.type = 6;
      recognizerSharedState0.tokenStartCharPositionInLine = 0;
      recognizerSharedState1.tokenStartCharIndex = (-739);
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(6, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-739), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(34, SQLParser.EQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(70, SQLParser.T__70);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(78, SQLParser.T__78);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(7, SQLParser.STRING);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(32, SQLParser.AND);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.exclusive_or_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Object object0 = sQLParser_keyword_return0.getTree();
      assertNull(object0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(23).when(tokenStream0).LA(anyInt());
      doReturn(414).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(39, SQLParser.LT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(80, SQLParser.T__80);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(60, SQLParser.WS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.qualified_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SQLParser.partition_part_return sQLParser_partition_part_return0 = new SQLParser.partition_part_return();
      assertNotNull(sQLParser_partition_part_return0);
      
      SQLParser.expression_return sQLParser_expression_return0 = new SQLParser.expression_return();
      assertNotNull(sQLParser_expression_return0);
      
      SQLParser.drop_index_return sQLParser_drop_index_return0 = new SQLParser.drop_index_return();
      assertNotNull(sQLParser_drop_index_return0);
      
      sQLParser_drop_index_return0.start = null;
      sQLParser_drop_index_return0.start = null;
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      sQLParser_drop_sequence_return0.start = null;
      Object object0 = sQLParser_drop_sequence_return0.tree;
      assertNull(object0);
      
      sQLParser_drop_index_return0.tree = null;
      sQLParser_drop_index_return0.tree = (Object) "";
      Object object1 = sQLParser_drop_index_return0.getTree();
      assertNotNull(object1);
      assertEquals("", object1);
      
      SQLParser.ora_storage_spec_return sQLParser_ora_storage_spec_return0 = new SQLParser.ora_storage_spec_return();
      assertNotNull(sQLParser_ora_storage_spec_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(60, SQLParser.WS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(33, SQLParser.XOR);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(57, SQLParser.DATE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(46, SQLParser.SUB);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(34, SQLParser.EQ);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(32, SQLParser.AND);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(37, SQLParser.GT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser.qualified_name_return sQLParser_qualified_name_return0 = new SQLParser.qualified_name_return();
      assertNotNull(sQLParser_qualified_name_return0);
      
      Object object0 = sQLParser_qualified_name_return0.getTree();
      assertNull(object0);
      
      SQLParser.literal_return sQLParser_literal_return0 = new SQLParser.literal_return();
      assertNotNull(sQLParser_literal_return0);
      
      Object object1 = sQLParser_literal_return0.getTree();
      assertNull(object1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(7, SQLParser.STRING);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = sQLParser0.ora_configs();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(7, SQLParser.STRING);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertNotNull(sQLParser_ora_configs_return0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      CommonTree commonTree0 = (CommonTree)sQLParser_ora_configs_return0.getTree();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(7, SQLParser.STRING);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals((-1), commonTree0.childIndex);
      assertNotNull(commonTree0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(25, commonTree0.getType());
      assertEquals((-1), commonTree0.getChildIndex());
      assertEquals("ORA_CONFIGS", commonTree0.getText());
      assertEquals(0, commonTree0.getChildCount());
      assertEquals(0, commonTree0.getTokenStartIndex());
      assertFalse(commonTree0.isNil());
      assertEquals(0, commonTree0.getTokenStopIndex());
      assertEquals("ORA_CONFIGS", commonTree0.toString());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(137, SQLParser.T__137);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(7, SQLParser.STRING);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertNotNull(sQLParser_commands_return0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLParser.multiplicative_expression_return sQLParser_multiplicative_expression_return0 = new SQLParser.multiplicative_expression_return();
      assertNotNull(sQLParser_multiplicative_expression_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(81, SQLParser.T__81);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(96, SQLParser.T__96);
      assertEquals(132, SQLParser.T__132);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(136, SQLParser.T__136);
      assertEquals(77, SQLParser.T__77);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(123, SQLParser.T__123);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.exclusive_or_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLParser.create_index_return sQLParser_create_index_return0 = new SQLParser.create_index_return();
      assertNotNull(sQLParser_create_index_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      sQLParser_create_index_return0.start = null;
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      sQLParser_keyword_return0.start = null;
      sQLParser_create_index_return0.start = null;
      Object object0 = sQLParser_create_index_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(121, 121, 121).when(tokenStream0).LA(anyInt());
      doReturn(1).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser.column_name_return sQLParser_column_name_return0 = new SQLParser.column_name_return();
      assertNotNull(sQLParser_column_name_return0);
      
      Object object1 = sQLParser_column_name_return0.getTree();
      assertNull(object1);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(7, SQLParser.STRING);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(107, SQLParser.T__107);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(85, SQLParser.T__85);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(42, SQLParser.NULL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLParser.foreign_key_constraint_return sQLParser_foreign_key_constraint_return0 = new SQLParser.foreign_key_constraint_return();
      assertNotNull(sQLParser_foreign_key_constraint_return0);
      
      SQLParser.partition_part_config_return sQLParser_partition_part_config_return0 = new SQLParser.partition_part_config_return();
      assertNotNull(sQLParser_partition_part_config_return0);
      
      sQLParser_partition_part_config_return0.start = null;
      Object object0 = sQLParser_partition_part_config_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(34, SQLParser.EQ);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(60, SQLParser.WS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(47, SQLParser.STAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(67, SQLParser.T__67);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(80, SQLParser.T__80);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(32, SQLParser.AND);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(57, SQLParser.DATE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.size_uom();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 135).when(tokenStream0).LA(anyInt());
      doReturn(80).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.channel = 3909;
      recognizerSharedState0.syntaxErrors = 135;
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(135, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(3909, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(125, SQLParser.T__125);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(93, SQLParser.T__93);
      assertEquals(47, SQLParser.STAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(91, SQLParser.T__91);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(129, SQLParser.T__129);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(90, SQLParser.T__90);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(135, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 3080;
      int int1 = (-1429);
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(123, SQLParser.T__123);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(79, SQLParser.T__79);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(130, SQLParser.T__130);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(65, 0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((-2)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState2);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(43, SQLParser.IN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(131, SQLParser.T__131);
      assertEquals(34, SQLParser.EQ);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(90, SQLParser.T__90);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.keyword_return sQLParser_keyword_return1 = sQLParser0.keyword();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(43, SQLParser.IN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(131, SQLParser.T__131);
      assertEquals(34, SQLParser.EQ);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(90, SQLParser.T__90);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser_keyword_return1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState0, recognizerSharedState2);
      assertNotSame(recognizerSharedState2, recognizerSharedState0);
      assertNotSame(recognizerSharedState2, recognizerSharedState1);
      assertNotSame(sQLParser_keyword_return1, sQLParser_keyword_return0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLParser.create_index_return sQLParser_create_index_return0 = new SQLParser.create_index_return();
      assertNotNull(sQLParser_create_index_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      sQLParser_create_index_return0.start = null;
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      sQLParser_keyword_return0.start = null;
      sQLParser_create_index_return0.start = null;
      Object object0 = sQLParser_create_index_return0.getTree();
      assertNull(object0);
      
      SQLParser.partition_parts_return sQLParser_partition_parts_return0 = new SQLParser.partition_parts_return();
      assertNotNull(sQLParser_partition_parts_return0);
      
      Object object1 = sQLParser_partition_parts_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn((-564), 130, (-564)).when(tokenStream0).LA(anyInt());
      doReturn((-586)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(104, SQLParser.T__104);
      assertEquals(60, SQLParser.WS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(82, SQLParser.T__82);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(95, SQLParser.T__95);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(5, SQLParser.NOT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(91, SQLParser.T__91);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(100, SQLParser.T__100);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(125, SQLParser.T__125);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(38, SQLParser.GE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.channel);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      
      Token token1 = recognizerSharedState2.token;
      assertNull(token1);
      
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(34, SQLParser.EQ);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(61, SQLParser.T__61);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(42, SQLParser.NULL);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(110, SQLParser.T__110);
      assertEquals(87, SQLParser.T__87);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState2));
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      RecognizerSharedState recognizerSharedState3 = new RecognizerSharedState(recognizerSharedState2);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertEquals(0, recognizerSharedState3.channel);
      assertFalse(recognizerSharedState3.failed);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertNotNull(recognizerSharedState3);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null, recognizerSharedState3);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState3.syntaxErrors);
      assertEquals(0, recognizerSharedState3.channel);
      assertFalse(recognizerSharedState3.failed);
      assertEquals(0, recognizerSharedState3.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState3.tokenStartLine);
      assertEquals((-1), recognizerSharedState3._fsp);
      assertEquals(0, recognizerSharedState3.type);
      assertEquals((-1), recognizerSharedState3.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState3.lastErrorIndex);
      assertFalse(recognizerSharedState3.errorRecovery);
      assertEquals(0, recognizerSharedState3.backtracking);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(120, SQLParser.T__120);
      assertEquals(68, SQLParser.T__68);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(83, SQLParser.T__83);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(76, SQLParser.T__76);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(84, SQLParser.T__84);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(92, SQLParser.T__92);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(62, SQLParser.T__62);
      assertEquals(118, SQLParser.T__118);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(63, SQLParser.T__63);
      assertEquals(94, SQLParser.T__94);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(72, SQLParser.T__72);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(123, SQLParser.T__123);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(115, SQLParser.T__115);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(42, SQLParser.NULL);
      assertEquals(81, SQLParser.T__81);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(114, SQLParser.T__114);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertNotNull(sQLParser1);
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState3));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState3.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      
      // Undeclared exception!
      try { 
        sQLParser1.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1435).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(43, SQLParser.IN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(46, SQLParser.SUB);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(109, SQLParser.T__109);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(60, SQLParser.WS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(108, SQLParser.T__108);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = sQLParser0.ora_configs();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(43, SQLParser.IN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(57, SQLParser.DATE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(68, SQLParser.T__68);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(31, SQLParser.OR);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(46, SQLParser.SUB);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(39, SQLParser.LT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(109, SQLParser.T__109);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(60, SQLParser.WS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(108, SQLParser.T__108);
      assertNotNull(sQLParser_ora_configs_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(101, SQLParser.T__101);
      assertEquals(63, SQLParser.T__63);
      assertEquals(84, SQLParser.T__84);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(80, SQLParser.T__80);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(97, SQLParser.T__97);
      assertEquals(74, SQLParser.T__74);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(121, SQLParser.T__121);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(136, SQLParser.T__136);
      assertEquals(47, SQLParser.STAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, SQLParser.T__100);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_part_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLParser.inline_constraint_return sQLParser_inline_constraint_return0 = new SQLParser.inline_constraint_return();
      assertNotNull(sQLParser_inline_constraint_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertNotNull(recognitionException0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(85).when(tokenStream0).LA(anyInt());
      doReturn(85).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(112, SQLParser.T__112);
      assertEquals(82, SQLParser.T__82);
      assertEquals(104, SQLParser.T__104);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(67, SQLParser.T__67);
      assertEquals(130, SQLParser.T__130);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(32, SQLParser.AND);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(43, SQLParser.IN);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(134, SQLParser.T__134);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      SQLParser.command_return sQLParser_command_return0 = new SQLParser.command_return();
      assertNotNull(sQLParser_command_return0);
      
      SQLParser.ora_config_return sQLParser_ora_config_return0 = new SQLParser.ora_config_return();
      assertNotNull(sQLParser_ora_config_return0);
      
      sQLParser_ora_config_return0.stop = null;
      Object object0 = sQLParser_ora_config_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      SQLParser.relational_expression_return sQLParser_relational_expression_return0 = new SQLParser.relational_expression_return();
      assertNotNull(sQLParser_relational_expression_return0);
      
      SQLParser.column_spec_return sQLParser_column_spec_return0 = new SQLParser.column_spec_return();
      assertNotNull(sQLParser_column_spec_return0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      SQLParser.multiplicative_expression_return sQLParser_multiplicative_expression_return0 = new SQLParser.multiplicative_expression_return();
      assertNotNull(sQLParser_multiplicative_expression_return0);
      
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(33, SQLParser.XOR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(47, SQLParser.STAR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(68, SQLParser.T__68);
      assertEquals(34, SQLParser.EQ);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(57, SQLParser.DATE);
      assertEquals(32, SQLParser.AND);
      assertEquals(31, SQLParser.OR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(133, SQLParser.T__133);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      SQLParser.constraint_spec_return sQLParser_constraint_spec_return0 = new SQLParser.constraint_spec_return();
      assertNotNull(sQLParser_constraint_spec_return0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      sQLParser_constraint_spec_return0.tree = (Object) sQLParser_keyword_return0;
      sQLParser_constraint_spec_return0.start = null;
      Object object0 = sQLParser_constraint_spec_return0.getTree();
      assertNotNull(object0);
      assertSame(object0, sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(110, SQLParser.T__110);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(122, SQLParser.T__122);
      assertEquals(97, SQLParser.T__97);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.alter_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      SQLParser.qualified_name_return sQLParser_qualified_name_return0 = new SQLParser.qualified_name_return();
      assertNotNull(sQLParser_qualified_name_return0);
      
      SQLParser.and_expression_return sQLParser_and_expression_return0 = new SQLParser.and_expression_return();
      assertNotNull(sQLParser_and_expression_return0);
      
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.stop = null;
      sQLParser_and_expression_return0.tree = (Object) "0B*era|?H2o.I";
      Object object0 = sQLParser_and_expression_return0.getTree();
      assertNotNull(object0);
      assertEquals("0B*era|?H2o.I", object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(127, 127, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(38, SQLParser.GE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(42, SQLParser.NULL);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(31, SQLParser.OR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.keyword();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser.ora_partition_spec_return sQLParser_ora_partition_spec_return0 = new SQLParser.ora_partition_spec_return();
      assertNotNull(sQLParser_ora_partition_spec_return0);
      
      Object object0 = sQLParser_ora_partition_spec_return0.getTree();
      assertNull(object0);
      
      SQLParser.create_table_return sQLParser_create_table_return0 = new SQLParser.create_table_return();
      assertNotNull(sQLParser_create_table_return0);
      
      Object object1 = sQLParser_create_table_return0.getTree();
      assertNull(object1);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(41, SQLParser.IS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(88, SQLParser.T__88);
      assertEquals(47, SQLParser.STAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(43, SQLParser.IN);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(94, SQLParser.T__94);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(100, SQLParser.T__100);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(84, SQLParser.T__84);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(77, SQLParser.T__77);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(136, SQLParser.T__136);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(98, SQLParser.T__98);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      SQLParser.multiplicative_expression_return sQLParser_multiplicative_expression_return0 = new SQLParser.multiplicative_expression_return();
      assertNotNull(sQLParser_multiplicative_expression_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals(39, SQLParser.LT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(96).when(tokenStream0).LA(anyInt());
      doReturn(14).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(80, SQLParser.T__80);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(65, SQLParser.T__65);
      assertEquals(42, SQLParser.NULL);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(90, SQLParser.T__90);
      assertEquals(67, SQLParser.T__67);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(129, SQLParser.T__129);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(77, SQLParser.T__77);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(31, SQLParser.OR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(7, SQLParser.STRING);
      assertEquals(125, SQLParser.T__125);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(88, SQLParser.T__88);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(118, SQLParser.T__118);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(60, SQLParser.WS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(38, SQLParser.GE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(78, SQLParser.T__78);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(84, SQLParser.T__84);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(68, SQLParser.T__68);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(67, SQLParser.T__67);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(90, SQLParser.T__90);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(78, SQLParser.T__78);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(70, SQLParser.T__70);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(62, SQLParser.T__62);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(130, SQLParser.T__130);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(41, SQLParser.IS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(32, SQLParser.AND);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(96, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(14).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(72, SQLParser.T__72);
      assertEquals(117, SQLParser.T__117);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(102, SQLParser.T__102);
      assertEquals(87, SQLParser.T__87);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(115, SQLParser.T__115);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(70, SQLParser.T__70);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(39, SQLParser.LT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(116, SQLParser.T__116);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(61, SQLParser.T__61);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(119, SQLParser.T__119);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(65, SQLParser.T__65);
      assertEquals(120, SQLParser.T__120);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      Object object0 = sQLParser_type_return0.getTree();
      assertNull(object0);
      
      recognizerSharedState0.errorRecovery = false;
      sQLParser_type_return0.start = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(61, SQLParser.T__61);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(98, SQLParser.T__98);
      assertEquals(113, SQLParser.T__113);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(34, SQLParser.EQ);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(128, SQLParser.T__128);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(39, SQLParser.LT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(105, SQLParser.T__105);
      assertEquals(33, SQLParser.XOR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(4, SQLParser.INT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_key();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(5, SQLParser.NOT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(40, SQLParser.LE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(81, SQLParser.T__81);
      assertEquals(131, SQLParser.T__131);
      assertEquals(73, SQLParser.T__73);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(108, SQLParser.T__108);
      assertEquals(96, SQLParser.T__96);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(89, SQLParser.T__89);
      assertEquals(100, SQLParser.T__100);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(130, SQLParser.T__130);
      assertEquals(74, SQLParser.T__74);
      assertEquals(137, SQLParser.T__137);
      assertEquals(67, SQLParser.T__67);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(102, SQLParser.T__102);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(34, SQLParser.EQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(88, SQLParser.T__88);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(93, SQLParser.T__93);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(85, SQLParser.T__85);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(103, SQLParser.T__103);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(79, SQLParser.T__79);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.sub_partition_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(94, SQLParser.T__94);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(131, SQLParser.T__131);
      assertEquals(63, SQLParser.T__63);
      assertEquals(101, SQLParser.T__101);
      assertEquals(71, SQLParser.T__71);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(111, SQLParser.T__111);
      assertEquals(95, SQLParser.T__95);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(32, SQLParser.AND);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(133, SQLParser.T__133);
      assertEquals(31, SQLParser.OR);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(113, SQLParser.T__113);
      assertEquals(97, SQLParser.T__97);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(43, SQLParser.IN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(57, SQLParser.DATE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(33, SQLParser.XOR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(39, SQLParser.LT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(42, SQLParser.NULL);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(122, SQLParser.T__122);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      BitSet[] bitSetArray0 = new BitSet[5];
      bitSetArray0[0] = sQLParser0.FOLLOW_68_in_arguments1839;
      bitSetArray0[1] = sQLParser0.FOLLOW_table_name_in_alter_table1089;
      bitSetArray0[2] = sQLParser0.FOLLOW_INT_in_ora_config555;
      bitSetArray0[3] = sQLParser0.FOLLOW_65_in_alter_table1087;
      bitSetArray0[4] = sQLParser0.FOLLOW_61_in_command133;
      recognizerSharedState0.following = bitSetArray0;
      recognizerSharedState0.syntaxErrors = 6;
      String string0 = "e\\5Hq9XfB`!5qQ5";
      // Undeclared exception!
      try { 
        sQLParser0.partition_part_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      SQLParser.column_comment_details_return sQLParser_column_comment_details_return0 = new SQLParser.column_comment_details_return();
      assertNotNull(sQLParser_column_comment_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(47, SQLParser.STAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(85, SQLParser.T__85);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn(0).when(tokenStream0).mark();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(32, SQLParser.AND);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(99, SQLParser.T__99);
      assertEquals(124, SQLParser.T__124);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(93, SQLParser.T__93);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(133, SQLParser.T__133);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(57, SQLParser.DATE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(120, SQLParser.T__120);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(39, SQLParser.LT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(67, SQLParser.T__67);
      assertEquals(114, SQLParser.T__114);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertEquals(47, SQLParser.STAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.command();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(81, SQLParser.T__81);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(118, SQLParser.T__118);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(67, SQLParser.T__67);
      assertEquals(71, SQLParser.T__71);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.table_mutation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1435).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(57, SQLParser.DATE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(7, SQLParser.STRING);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(31, SQLParser.OR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(76, SQLParser.T__76);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(36, SQLParser.LTGT);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_key();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(78, 78, 78, 78).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(31, SQLParser.OR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(122, SQLParser.T__122);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(85, SQLParser.T__85);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(46, SQLParser.SUB);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(106, SQLParser.T__106);
      assertEquals(78, SQLParser.T__78);
      assertEquals(121, SQLParser.T__121);
      assertEquals(93, SQLParser.T__93);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(83, SQLParser.T__83);
      assertEquals(109, SQLParser.T__109);
      assertEquals(47, SQLParser.STAR);
      assertEquals(75, SQLParser.T__75);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(90, SQLParser.T__90);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(33, SQLParser.XOR);
      assertEquals(118, SQLParser.T__118);
      assertEquals(89, SQLParser.T__89);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(39, SQLParser.LT);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(4, SQLParser.INT);
      assertEquals(96, SQLParser.T__96);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(40, SQLParser.LE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(57, SQLParser.DATE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(79, SQLParser.T__79);
      assertEquals(120, SQLParser.T__120);
      assertEquals(94, SQLParser.T__94);
      assertEquals(87, SQLParser.T__87);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(119, SQLParser.T__119);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // rule qualified_name
         //
         verifyException("org.antlr.runtime.tree.RewriteRuleElementStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.lastErrorIndex = 0;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.lastErrorIndex);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(75, SQLParser.T__75);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(7, SQLParser.STRING);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(79, SQLParser.T__79);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(95, SQLParser.T__95);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(1435, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(33, SQLParser.XOR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(37, SQLParser.GT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(41, SQLParser.IS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = sQLParser0.ora_configs();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(33, SQLParser.XOR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(86, SQLParser.T__86);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(92, SQLParser.T__92);
      assertEquals(37, SQLParser.GT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(41, SQLParser.IS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(60, SQLParser.WS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertNotNull(sQLParser_ora_configs_return0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(81, SQLParser.T__81);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(89, SQLParser.T__89);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(39, SQLParser.LT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(95, SQLParser.T__95);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(43, SQLParser.IN);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(37, SQLParser.GT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(111, SQLParser.T__111);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(118, SQLParser.T__118);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(115, SQLParser.T__115);
      assertEquals(62, SQLParser.T__62);
      assertEquals(123, SQLParser.T__123);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(99, SQLParser.T__99);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertEquals(83, SQLParser.T__83);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(121, SQLParser.T__121);
      assertEquals(98, SQLParser.T__98);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(74, SQLParser.T__74);
      assertEquals(122, SQLParser.T__122);
      assertEquals(97, SQLParser.T__97);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(33, SQLParser.XOR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(119, SQLParser.T__119);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(75, SQLParser.T__75);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(77, SQLParser.T__77);
      assertEquals(68, SQLParser.T__68);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(31, SQLParser.OR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(40, SQLParser.LE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(124, SQLParser.T__124);
      assertEquals(39, SQLParser.LT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(38, SQLParser.GE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      SQLParser.ora_storage_opt_return sQLParser_ora_storage_opt_return0 = new SQLParser.ora_storage_opt_return();
      assertNotNull(sQLParser_ora_storage_opt_return0);
      
      Object object0 = sQLParser_ora_storage_opt_return0.getTree();
      assertNull(object0);
      
      SQLParser.ora_lob_config_return sQLParser_ora_lob_config_return0 = new SQLParser.ora_lob_config_return();
      assertNotNull(sQLParser_ora_lob_config_return0);
      
      sQLParser_ora_lob_config_return0.stop = null;
      sQLParser_ora_lob_config_return0.stop = null;
      Object object1 = sQLParser_ora_lob_config_return0.getTree();
      assertNull(object1);
      
      SQLParser.fractionDigits_return sQLParser_fractionDigits_return0 = new SQLParser.fractionDigits_return();
      assertNotNull(sQLParser_fractionDigits_return0);
      
      SQLParser.table_name_return sQLParser_table_name_return0 = new SQLParser.table_name_return();
      assertNotNull(sQLParser_table_name_return0);
      
      sQLParser_table_name_return0.start = null;
      sQLParser_ora_lob_config_return0.tree = null;
      sQLParser_ora_storage_opt_return0.stop = null;
      Object object2 = sQLParser_table_name_return0.getTree();
      assertNull(object2);
      
      SQLParser.ora_lob_return sQLParser_ora_lob_return0 = new SQLParser.ora_lob_return();
      assertNotNull(sQLParser_ora_lob_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(121, SQLParser.T__121);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(113, SQLParser.T__113);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(120, SQLParser.T__120);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(93, SQLParser.T__93);
      assertEquals(135, SQLParser.T__135);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(119, SQLParser.T__119);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(126, SQLParser.T__126);
      assertEquals(94, SQLParser.T__94);
      assertEquals(134, SQLParser.T__134);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(117, SQLParser.T__117);
      assertEquals(95, SQLParser.T__95);
      assertEquals(102, SQLParser.T__102);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(96, SQLParser.T__96);
      assertEquals(124, SQLParser.T__124);
      assertEquals(66, SQLParser.T__66);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(90, SQLParser.T__90);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(68, SQLParser.T__68);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      SQLParser.between_expression_return sQLParser_between_expression_return0 = new SQLParser.between_expression_return();
      assertNotNull(sQLParser_between_expression_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_between_expression_return0.stop = null;
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      sQLParser_table_details_return0.stop = null;
      Object object0 = sQLParser_table_details_return0.getTree();
      assertNull(object0);
      
      SQLParser.expression_return sQLParser_expression_return0 = new SQLParser.expression_return();
      assertNotNull(sQLParser_expression_return0);
      
      sQLParser_expression_return0.tree = (Object) null;
      sQLParser_expression_return0.stop = null;
      SQLParser.drop_table_return sQLParser_drop_table_return0 = new SQLParser.drop_table_return();
      assertNotNull(sQLParser_drop_table_return0);
      
      Object object1 = sQLParser_expression_return0.getTree();
      assertNull(object1);
      
      SQLParser.drop_pk_return sQLParser_drop_pk_return0 = new SQLParser.drop_pk_return();
      assertNotNull(sQLParser_drop_pk_return0);
      
      SQLParser.primary_return sQLParser_primary_return0 = new SQLParser.primary_return();
      assertNotNull(sQLParser_primary_return0);
      
      Object object2 = sQLParser_primary_return0.getTree();
      assertNull(object2);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(104, SQLParser.T__104);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(47, SQLParser.STAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(75, SQLParser.T__75);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(69, SQLParser.T__69);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(118, SQLParser.T__118);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.additive_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 135, 3529).when(tokenStream0).LA(anyInt());
      doReturn(80).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 135;
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(103, SQLParser.T__103);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(73, SQLParser.T__73);
      assertEquals(33, SQLParser.XOR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(39, SQLParser.LT);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(89, SQLParser.T__89);
      assertEquals(116, SQLParser.T__116);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(90, SQLParser.T__90);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(76, SQLParser.T__76);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(57, SQLParser.DATE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(128, SQLParser.T__128);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(34, SQLParser.EQ);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(40, SQLParser.LE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(38, SQLParser.GE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(94, SQLParser.T__94);
      assertEquals(87, SQLParser.T__87);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(117, SQLParser.T__117);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(79, SQLParser.T__79);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(94, SQLParser.T__94);
      assertEquals(71, SQLParser.T__71);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(57, SQLParser.DATE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(5, SQLParser.NOT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(43, SQLParser.IN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(91, SQLParser.T__91);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression_list();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(100, SQLParser.T__100);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(4, SQLParser.INT);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(5, SQLParser.NOT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(121, SQLParser.T__121);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      BitSet[] bitSetArray0 = new BitSet[9];
      bitSetArray0[0] = sQLParser0.FOLLOW_equality_expression_in_exclusive_or_expression1552;
      BitSet bitSet0 = SQLParser.FOLLOW_arguments_in_primary1800;
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(1, bitSet0.size());
      assertEquals(64, bitSet0.numBits());
      
      bitSetArray0[3] = sQLParser0.FOLLOW_88_in_ora_config622;
      bitSetArray0[4] = sQLParser0.FOLLOW_84_in_ora_config610;
      bitSetArray0[5] = sQLParser0.FOLLOW_77_in_ora_key640;
      bitSetArray0[7] = sQLParser0.FOLLOW_between_expression_in_in_expression1636;
      BitSet bitSet1 = SQLParser.FOLLOW_66_in_foreign_key_constraint1223;
      assertNotNull(bitSet1);
      assertFalse(bitSet1.equals((Object)bitSet0));
      assertNotSame(bitSet1, bitSet0);
      assertEquals(192, bitSet1.numBits());
      assertFalse(bitSet1.isNil());
      assertEquals(32, bitSet1.size());
      assertEquals(3, bitSet1.lengthInLongWords());
      
      bitSetArray0[8] = bitSet1;
      recognizerSharedState0.following = bitSetArray0;
      // Undeclared exception!
      try { 
        sQLParser0.between_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      SQLParser.name_list_return sQLParser_name_list_return0 = new SQLParser.name_list_return();
      assertNotNull(sQLParser_name_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(42, SQLParser.NULL);
      assertEquals(100, SQLParser.T__100);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(131, SQLParser.T__131);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(85, SQLParser.T__85);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(37, SQLParser.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(135, SQLParser.T__135);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      RecognitionException recognitionException0 = null;
      try {
        recognitionException0 = new RecognitionException(sQLParser0.input);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      Object object0 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object0);
      
      Object object1 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(73, SQLParser.T__73);
      assertEquals(118, SQLParser.T__118);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(125, SQLParser.T__125);
      assertEquals(39, SQLParser.LT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(89, SQLParser.T__89);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(105, SQLParser.T__105);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(120, SQLParser.T__120);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(31, SQLParser.OR);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(129, SQLParser.T__129);
      assertEquals(46, SQLParser.SUB);
      assertEquals(34, SQLParser.EQ);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(121, SQLParser.T__121);
      assertEquals(93, SQLParser.T__93);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(102, SQLParser.T__102);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(131, SQLParser.T__131);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token0 = sQLParser_keyword_return0.stop;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(87).when(tokenStream0).LA(anyInt());
      doReturn(87).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0._fsp = 87;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(87, recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(62, SQLParser.T__62);
      assertEquals(77, SQLParser.T__77);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(120, SQLParser.T__120);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(47, SQLParser.STAR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(129, SQLParser.T__129);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(107, SQLParser.T__107);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      sQLParser_keyword_return0.stop = null;
      // Undeclared exception!
      try { 
        sQLParser0.ora_flag();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(78, 78, 78, 78, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(109, SQLParser.T__109);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(134, SQLParser.T__134);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(92, SQLParser.T__92);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(90, SQLParser.T__90);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(130, SQLParser.T__130);
      assertEquals(65, SQLParser.T__65);
      assertEquals(100, SQLParser.T__100);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.name_return sQLParser_name_return0 = sQLParser0.name();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(109, SQLParser.T__109);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(134, SQLParser.T__134);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(92, SQLParser.T__92);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(90, SQLParser.T__90);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(130, SQLParser.T__130);
      assertEquals(65, SQLParser.T__65);
      assertEquals(100, SQLParser.T__100);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertNotNull(sQLParser_name_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.type_return sQLParser_type_return0 = sQLParser0.type();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(109, SQLParser.T__109);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(116, SQLParser.T__116);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(31, SQLParser.OR);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(126, SQLParser.T__126);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(134, SQLParser.T__134);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(92, SQLParser.T__92);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(84, SQLParser.T__84);
      assertEquals(77, SQLParser.T__77);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(38, SQLParser.GE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(70, SQLParser.T__70);
      assertEquals(110, SQLParser.T__110);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(90, SQLParser.T__90);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(130, SQLParser.T__130);
      assertEquals(65, SQLParser.T__65);
      assertEquals(100, SQLParser.T__100);
      assertEquals(80, SQLParser.T__80);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(114, SQLParser.T__114);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertNotNull(sQLParser_type_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = false;
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      recognizerSharedState0._fsp = (-922);
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      recognizerSharedState0.failed = false;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-922), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(37, SQLParser.GT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(43, SQLParser.IN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(136, SQLParser.T__136);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(98, SQLParser.T__98);
      assertEquals(128, SQLParser.T__128);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(61, SQLParser.T__61);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(92, SQLParser.T__92);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(84, SQLParser.T__84);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(62, SQLParser.T__62);
      assertEquals(111, SQLParser.T__111);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(134, SQLParser.T__134);
      assertEquals(70, SQLParser.T__70);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(117, SQLParser.T__117);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(124, SQLParser.T__124);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(31, SQLParser.OR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(88, SQLParser.T__88);
      assertEquals(41, SQLParser.IS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(60, SQLParser.WS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(82, SQLParser.T__82);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.literal();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      SQLParser.size_uom_return sQLParser_size_uom_return0 = new SQLParser.size_uom_return();
      assertNotNull(sQLParser_size_uom_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(118, SQLParser.T__118);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(136, SQLParser.T__136);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      sQLParser_size_uom_return0.stop = null;
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(118, SQLParser.T__118);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(72, SQLParser.T__72);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(130, SQLParser.T__130);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(136, SQLParser.T__136);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(38, SQLParser.GE);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(41, SQLParser.IS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser_commands_return0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(74, SQLParser.T__74);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(57, SQLParser.DATE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(42, SQLParser.NULL);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(41, SQLParser.IS);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(60, SQLParser.WS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(70, SQLParser.T__70);
      assertEquals(132, SQLParser.T__132);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(101, SQLParser.T__101);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(31, SQLParser.OR);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(46, SQLParser.SUB);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(87, SQLParser.T__87);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(43, SQLParser.IN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(37, SQLParser.GT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser sQLParser1 = new SQLParser((TokenStream) null);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(132, SQLParser.T__132);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(126, SQLParser.T__126);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(89, SQLParser.T__89);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(135, SQLParser.T__135);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(61, SQLParser.T__61);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(76, SQLParser.T__76);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(85, SQLParser.T__85);
      assertEquals(41, SQLParser.IS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(40, SQLParser.LE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertNotNull(sQLParser1);
      assertFalse(sQLParser1.equals((Object)sQLParser0));
      assertEquals(0, sQLParser1.getRuleMemoizationCacheSize());
      assertFalse(sQLParser1.failed());
      assertEquals(0, sQLParser1.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser1.getGrammarFileName());
      assertEquals(0, sQLParser1.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.inline_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      SQLParser.value_return sQLParser_value_return0 = new SQLParser.value_return();
      assertNotNull(sQLParser_value_return0);
      
      SQLParser.primary_key_constraint_return sQLParser_primary_key_constraint_return0 = new SQLParser.primary_key_constraint_return();
      assertNotNull(sQLParser_primary_key_constraint_return0);
      
      sQLParser_primary_key_constraint_return0.tree = (Object) sQLParser_arguments_return0;
      Object object0 = sQLParser_primary_key_constraint_return0.getTree();
      assertNotNull(object0);
      assertSame(object0, sQLParser_arguments_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(91, SQLParser.T__91);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(135, SQLParser.T__135);
      assertEquals(99, SQLParser.T__99);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(88, SQLParser.T__88);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(137, SQLParser.T__137);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(81, SQLParser.T__81);
      assertEquals(107, SQLParser.T__107);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(87, SQLParser.T__87);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(95, SQLParser.T__95);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(31, SQLParser.OR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(108, SQLParser.T__108);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(134, SQLParser.T__134);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(77, SQLParser.T__77);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(4, SQLParser.INT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      SQLParser.name_list_return sQLParser_name_list_return0 = new SQLParser.name_list_return();
      assertNotNull(sQLParser_name_list_return0);
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      sQLParser_name_list_return0.start = null;
      Object object0 = sQLParser_name_list_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.type = (-3010);
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-3010), recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(89, SQLParser.T__89);
      assertEquals(127, SQLParser.T__127);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(135, SQLParser.T__135);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(128, SQLParser.T__128);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(90, SQLParser.T__90);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(84, SQLParser.T__84);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(117, SQLParser.T__117);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(5, SQLParser.NOT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(40, SQLParser.LE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(137, SQLParser.T__137);
      assertEquals(7, SQLParser.STRING);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(129, SQLParser.T__129);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(79, SQLParser.T__79);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(136, SQLParser.T__136);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(42, SQLParser.NULL);
      assertEquals(120, SQLParser.T__120);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(46, SQLParser.SUB);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(111, SQLParser.T__111);
      assertEquals(41, SQLParser.IS);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(90, SQLParser.T__90);
      assertEquals(133, SQLParser.T__133);
      assertEquals(75, SQLParser.T__75);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(102, SQLParser.T__102);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(5, SQLParser.NOT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(117, SQLParser.T__117);
      assertEquals(40, SQLParser.LE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(4, SQLParser.INT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(61, SQLParser.T__61);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(47, SQLParser.STAR);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.sub_partition_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80).when(tokenStream0).LA(anyInt());
      doReturn(80).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.channel = 3909;
      recognizerSharedState0.syntaxErrors = 135;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(135, recognizerSharedState0.syntaxErrors);
      assertEquals(3909, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(117, SQLParser.T__117);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(68, SQLParser.T__68);
      assertEquals(122, SQLParser.T__122);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(121, SQLParser.T__121);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(85, SQLParser.T__85);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(60, SQLParser.WS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(135, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_opt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0._fsp = 127;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(127, recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(89, SQLParser.T__89);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(127, SQLParser.T__127);
      assertEquals(67, SQLParser.T__67);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(41, SQLParser.IS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(111, SQLParser.T__111);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(42, SQLParser.NULL);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(87, SQLParser.T__87);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(57, SQLParser.DATE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(136, SQLParser.T__136);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(34, SQLParser.EQ);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals(85, SQLParser.T__85);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(94, SQLParser.T__94);
      assertEquals(123, SQLParser.T__123);
      assertEquals(71, SQLParser.T__71);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(118, SQLParser.T__118);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(110, SQLParser.T__110);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(5, SQLParser.NOT);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(117, SQLParser.T__117);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_flag();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      SQLParser.value_list_return sQLParser_value_list_return0 = new SQLParser.value_list_return();
      assertNotNull(sQLParser_value_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(135, 135, 135, 135, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(119, SQLParser.T__119);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(41, SQLParser.IS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(89, SQLParser.T__89);
      assertEquals(96, SQLParser.T__96);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(66, SQLParser.T__66);
      assertEquals(126, SQLParser.T__126);
      assertEquals(74, SQLParser.T__74);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(90, SQLParser.T__90);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(67, SQLParser.T__67);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(47, SQLParser.STAR);
      assertEquals(98, SQLParser.T__98);
      assertEquals(37, SQLParser.GT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(68, SQLParser.T__68);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(130, SQLParser.T__130);
      assertEquals(62, SQLParser.T__62);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(38, SQLParser.GE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(129, SQLParser.T__129);
      assertEquals(136, SQLParser.T__136);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(42, SQLParser.NULL);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(72, SQLParser.T__72);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(46, SQLParser.SUB);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(78, SQLParser.T__78);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(63, SQLParser.T__63);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(101, SQLParser.T__101);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(124, SQLParser.T__124);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(64, SQLParser.T__64);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(80, SQLParser.T__80);
      assertEquals(107, SQLParser.T__107);
      assertEquals(65, SQLParser.T__65);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(74, SQLParser.T__74);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(90, SQLParser.T__90);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(68, SQLParser.T__68);
      assertEquals(127, SQLParser.T__127);
      assertEquals(98, SQLParser.T__98);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(119, SQLParser.T__119);
      assertEquals(91, SQLParser.T__91);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(103, SQLParser.T__103);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(125, SQLParser.T__125);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(118, SQLParser.T__118);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(110, SQLParser.T__110);
      assertEquals(62, SQLParser.T__62);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(7, SQLParser.STRING);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      SQLParser.column_spec_return sQLParser_column_spec_return0 = new SQLParser.column_spec_return();
      assertNotNull(sQLParser_column_spec_return0);
      
      Object object0 = sQLParser_column_spec_return0.getTree();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(80, 135, (-2027), (-2027), 96).when(tokenStream0).LA(anyInt());
      doReturn(80).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.backtracking = 135;
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(135, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(117, SQLParser.T__117);
      assertEquals(78, SQLParser.T__78);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(109, SQLParser.T__109);
      assertEquals(93, SQLParser.T__93);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(92, SQLParser.T__92);
      assertEquals(108, SQLParser.T__108);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(61, SQLParser.T__61);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(130, SQLParser.T__130);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(43, SQLParser.IN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(119, SQLParser.T__119);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(133, SQLParser.T__133);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals(52, SQLParser.NUMBER);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(135, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_parts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(98, SQLParser.T__98);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(68, SQLParser.T__68);
      assertEquals(129, SQLParser.T__129);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(75, SQLParser.T__75);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(106, SQLParser.T__106);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(113, SQLParser.T__113);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(125, SQLParser.T__125);
      assertEquals(72, SQLParser.T__72);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(78, SQLParser.T__78);
      assertEquals(62, SQLParser.T__62);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(4, SQLParser.INT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(73, SQLParser.T__73);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(125, SQLParser.T__125);
      assertEquals(38, SQLParser.GE);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(34, SQLParser.EQ);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(108, SQLParser.T__108);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(76, SQLParser.T__76);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(61, SQLParser.T__61);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(97, SQLParser.T__97);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(129, SQLParser.T__129);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser_commands_return0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.constraint_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(93, SQLParser.T__93);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(129, SQLParser.T__129);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(68, SQLParser.T__68);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(99, SQLParser.T__99);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(133, SQLParser.T__133);
      assertEquals(42, SQLParser.NULL);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "nextToken";
      stringArray0[1] = "nextToken";
      stringArray0[2] = "l]pg5xYE) wjmAp)";
      stringArray0[3] = "nextToken";
      stringArray0[4] = "nextToken";
      stringArray0[5] = "nextToken";
      String string0 = sQLParser0.getErrorMessage(recognitionException0, stringArray0);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(93, SQLParser.T__93);
      assertEquals(101, SQLParser.T__101);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(131, SQLParser.T__131);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(61, SQLParser.T__61);
      assertEquals(129, SQLParser.T__129);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(68, SQLParser.T__68);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(75, SQLParser.T__75);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(100, SQLParser.T__100);
      assertEquals(99, SQLParser.T__99);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(130, SQLParser.T__130);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(67, SQLParser.T__67);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(133, SQLParser.T__133);
      assertEquals(42, SQLParser.NULL);
      assertEquals(38, SQLParser.GE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(125, SQLParser.T__125);
      assertEquals(57, SQLParser.DATE);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNull(string0);
      assertEquals(6, stringArray0.length);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_config();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-2388)).when(tokenStream0).LA(anyInt());
      doReturn((-2)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      
      recognizerSharedState2.tokenStartLine = (-2640);
      BitSet bitSet0 = SQLParser.FOLLOW_86_in_ora_config618;
      assertNotNull(bitSet0);
      assertEquals(128, bitSet0.numBits());
      assertEquals(2, bitSet0.lengthInLongWords());
      assertEquals(1, bitSet0.size());
      assertFalse(bitSet0.isNil());
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(57, SQLParser.DATE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(5, SQLParser.NOT);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(84, SQLParser.T__84);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(77, SQLParser.T__77);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(62, SQLParser.T__62);
      assertEquals(127, SQLParser.T__127);
      assertEquals(93, SQLParser.T__93);
      assertEquals(31, SQLParser.OR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(135, SQLParser.T__135);
      assertEquals(70, SQLParser.T__70);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(119, SQLParser.T__119);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(86, SQLParser.T__86);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(125, SQLParser.T__125);
      assertEquals(87, SQLParser.T__87);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(34, SQLParser.EQ);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals(81, SQLParser.T__81);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(73, SQLParser.T__73);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(67, SQLParser.T__67);
      assertEquals(41, SQLParser.IS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(90, SQLParser.T__90);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(83, SQLParser.T__83);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      SQLParser.size_return sQLParser_size_return0 = new SQLParser.size_return();
      assertNotNull(sQLParser_size_return0);
      
      sQLParser_size_return0.tree = (Object) "";
      Object object0 = sQLParser_size_return0.getTree();
      assertNotNull(object0);
      assertEquals("", object0);
      
      SQLParser.drop_sequence_return sQLParser_drop_sequence_return0 = new SQLParser.drop_sequence_return();
      assertNotNull(sQLParser_drop_sequence_return0);
      
      SQLParser.primary_return sQLParser_primary_return0 = new SQLParser.primary_return();
      assertNotNull(sQLParser_primary_return0);
      
      Object object1 = sQLParser_primary_return0.tree;
      assertNull(object1);
      
      sQLParser_drop_sequence_return0.tree = null;
      sQLParser_size_return0.start = null;
      sQLParser_drop_sequence_return0.start = null;
      Object object2 = sQLParser_drop_sequence_return0.getTree();
      assertNull(object2);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = null;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(41, SQLParser.IS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(57, SQLParser.DATE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(41, SQLParser.IS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(113, SQLParser.T__113);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(57, SQLParser.DATE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(31, SQLParser.OR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(124, SQLParser.T__124);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(34, SQLParser.EQ);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertNotNull(sQLParser_commands_return0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.between_expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(32, SQLParser.AND);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(40, SQLParser.LE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(38, SQLParser.GE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(60, SQLParser.WS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(33, SQLParser.XOR);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(135, SQLParser.T__135);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(81, SQLParser.T__81);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(67, SQLParser.T__67);
      assertEquals(128, SQLParser.T__128);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(97, SQLParser.T__97);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(136, SQLParser.T__136);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.tokenStartLine = (-2640);
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-2640), recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(38, SQLParser.GE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(46, SQLParser.SUB);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(89, SQLParser.T__89);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(32, SQLParser.AND);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(126, SQLParser.T__126);
      assertEquals(63, SQLParser.T__63);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(115, SQLParser.T__115);
      assertEquals(85, SQLParser.T__85);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(60, SQLParser.WS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.create_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      sQLParser_keyword_return0.tree = (Object) "LBs9";
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      sQLParser_keyword_return0.stop = null;
      SQLParser.create_sequence_return sQLParser_create_sequence_return0 = new SQLParser.create_sequence_return();
      assertNotNull(sQLParser_create_sequence_return0);
      
      SQLParser.type_return sQLParser_type_return0 = new SQLParser.type_return();
      assertNotNull(sQLParser_type_return0);
      
      sQLParser_keyword_return0.stop = null;
      sQLParser_type_return0.stop = null;
      sQLParser_type_return0.tree = (Object) ">3";
      Object object0 = sQLParser_type_return0.getTree();
      assertNotNull(object0);
      assertEquals(">3", object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(38, SQLParser.GE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(114, SQLParser.T__114);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(83, SQLParser.T__83);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(92, SQLParser.T__92);
      assertEquals(100, SQLParser.T__100);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(131, SQLParser.T__131);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(108, SQLParser.T__108);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(93, SQLParser.T__93);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(40, SQLParser.LE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(78, SQLParser.T__78);
      assertEquals(125, SQLParser.T__125);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(118, SQLParser.T__118);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(111, SQLParser.T__111);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(32, SQLParser.AND);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(46, SQLParser.SUB);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.fractionDigits();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(106, SQLParser.T__106);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(86, SQLParser.T__86);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(119, SQLParser.T__119);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(32, SQLParser.AND);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(127, SQLParser.T__127);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(73, SQLParser.T__73);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(40, SQLParser.LE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(106, SQLParser.T__106);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(83, SQLParser.T__83);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(101, SQLParser.T__101);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(53, SQLParser.VARCHAR2);
      assertNotNull(sQLParser_commands_return0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(78, 14, 4004).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(39, SQLParser.LT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(120, SQLParser.T__120);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(40, SQLParser.LE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(128, SQLParser.T__128);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(4, SQLParser.INT);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(73, SQLParser.T__73);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(33, SQLParser.XOR);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(95, SQLParser.T__95);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(80, SQLParser.T__80);
      assertEquals(127, SQLParser.T__127);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(65, SQLParser.T__65);
      assertEquals(76, SQLParser.T__76);
      assertEquals(137, SQLParser.T__137);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(107, SQLParser.T__107);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(136, SQLParser.T__136);
      assertEquals(83, SQLParser.T__83);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(90, SQLParser.T__90);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(97, SQLParser.T__97);
      assertEquals(109, SQLParser.T__109);
      assertEquals(78, SQLParser.T__78);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(116, SQLParser.T__116);
      assertEquals(93, SQLParser.T__93);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(32, SQLParser.AND);
      assertEquals(77, SQLParser.T__77);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(64, SQLParser.T__64);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(117, SQLParser.T__117);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(7, SQLParser.STRING);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      SQLParser.value_list_return sQLParser_value_list_return0 = new SQLParser.value_list_return();
      assertNotNull(sQLParser_value_list_return0);
      
      Object object0 = sQLParser_value_list_return0.getTree();
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(31, SQLParser.OR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(105, SQLParser.T__105);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(34, SQLParser.EQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(38, SQLParser.GE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(41, SQLParser.IS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(33, SQLParser.XOR);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(62, SQLParser.T__62);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Object object0 = sQLParser_arguments_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(96, 96, (-1551), 0).when(tokenStream0).LA(anyInt());
      doReturn((-1691)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(38, SQLParser.GE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(135, SQLParser.T__135);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(34, SQLParser.EQ);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(32, SQLParser.AND);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(95, SQLParser.T__95);
      assertEquals(128, SQLParser.T__128);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(57, SQLParser.DATE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(80, SQLParser.T__80);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(63, SQLParser.T__63);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(40, SQLParser.LE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(60, SQLParser.WS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(41, SQLParser.IS);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(124, SQLParser.T__124);
      assertEquals(51, SQLParser.ROWID);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(120, SQLParser.T__120);
      assertEquals(75, SQLParser.T__75);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(81, SQLParser.T__81);
      assertEquals(43, SQLParser.IN);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(129, SQLParser.T__129);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(5, SQLParser.NOT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(42, SQLParser.NULL);
      assertEquals(118, SQLParser.T__118);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(57, SQLParser.DATE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(79, SQLParser.T__79);
      assertEquals(109, SQLParser.T__109);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(125, SQLParser.T__125);
      assertEquals(70, SQLParser.T__70);
      assertEquals(133, SQLParser.T__133);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(100, SQLParser.T__100);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(84, SQLParser.T__84);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(92, SQLParser.T__92);
      assertEquals(114, SQLParser.T__114);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(122, SQLParser.T__122);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(33, SQLParser.XOR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(60, SQLParser.WS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(61, SQLParser.T__61);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(76, SQLParser.T__76);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(recognitionException0);
      
      IntStream intStream0 = recognitionException0.input;
      assertNull(intStream0);
      
      StackTraceElement[] stackTraceElementArray0 = recognitionException0.getStackTrace();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertFalse(recognitionException0.approximateLineInfo);
      assertNotNull(stackTraceElementArray0);
      assertEquals(3, stackTraceElementArray0.length);
      
      BitSet bitSet0 = SQLParser.FOLLOW_76_in_ora_key636;
      assertNotNull(bitSet0);
      assertFalse(bitSet0.isNil());
      assertEquals(1, bitSet0.lengthInLongWords());
      assertEquals(64, bitSet0.numBits());
      assertEquals(1, bitSet0.size());
      
      try { 
        sQLParser0.recoverFromMismatchedSet((IntStream) null, recognitionException0, bitSet0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(41, SQLParser.IS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(111, SQLParser.T__111);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(133, SQLParser.T__133);
      assertEquals(64, SQLParser.T__64);
      assertEquals(118, SQLParser.T__118);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(110, SQLParser.T__110);
      assertEquals(86, SQLParser.T__86);
      assertEquals(125, SQLParser.T__125);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(121, SQLParser.T__121);
      assertEquals(105, SQLParser.T__105);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(89, SQLParser.T__89);
      assertEquals(128, SQLParser.T__128);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(100, SQLParser.T__100);
      assertEquals(69, SQLParser.T__69);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(61, SQLParser.T__61);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(114, SQLParser.T__114);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(90, SQLParser.T__90);
      assertEquals(43, SQLParser.IN);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(63, SQLParser.T__63);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(40, SQLParser.LE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(77, SQLParser.T__77);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(39, SQLParser.LT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(131, SQLParser.T__131);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.check_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Token token1 = sQLParser_keyword_return0.start;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(65, (-1), (-1), 2341, (-1)).when(tokenStream0).LA(anyInt());
      doReturn((-2)).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState2);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(73, SQLParser.T__73);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(66, SQLParser.T__66);
      assertEquals(102, SQLParser.T__102);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(62, SQLParser.T__62);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(31, SQLParser.OR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(79, SQLParser.T__79);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.keyword_return sQLParser_keyword_return1 = sQLParser0.keyword();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState2._fsp);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState2.failed);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(65, SQLParser.T__65);
      assertEquals(110, SQLParser.T__110);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(73, SQLParser.T__73);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(33, SQLParser.XOR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(88, SQLParser.T__88);
      assertEquals(17, SQLParser.SIZE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(66, SQLParser.T__66);
      assertEquals(102, SQLParser.T__102);
      assertEquals(96, SQLParser.T__96);
      assertEquals(4, SQLParser.INT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(89, SQLParser.T__89);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(108, SQLParser.T__108);
      assertEquals(75, SQLParser.T__75);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(91, SQLParser.T__91);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(57, SQLParser.DATE);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(62, SQLParser.T__62);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(113, SQLParser.T__113);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(31, SQLParser.OR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(104, SQLParser.T__104);
      assertEquals(79, SQLParser.T__79);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertNotNull(sQLParser_keyword_return1);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState2));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(sQLParser_keyword_return1.equals((Object)sQLParser_keyword_return0));
      assertNotSame(recognizerSharedState0, recognizerSharedState1);
      assertNotSame(recognizerSharedState0, recognizerSharedState2);
      assertNotSame(recognizerSharedState2, recognizerSharedState0);
      assertNotSame(recognizerSharedState2, recognizerSharedState1);
      assertNotSame(sQLParser_keyword_return1, sQLParser_keyword_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_pk();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      SQLParser.ora_key_return sQLParser_ora_key_return0 = new SQLParser.ora_key_return();
      assertNotNull(sQLParser_ora_key_return0);
      
      SQLParser.null_comparison_return sQLParser_null_comparison_return0 = new SQLParser.null_comparison_return();
      assertNotNull(sQLParser_null_comparison_return0);
      
      sQLParser_null_comparison_return0.stop = null;
      sQLParser_null_comparison_return0.start = null;
      Object object0 = sQLParser_null_comparison_return0.getTree();
      assertNull(object0);
      
      SQLParser.drop_table_return sQLParser_drop_table_return0 = new SQLParser.drop_table_return();
      assertNotNull(sQLParser_drop_table_return0);
      
      Object object1 = sQLParser_drop_table_return0.getTree();
      assertNull(object1);
      
      SQLParser.ora_key_return sQLParser_ora_key_return1 = new SQLParser.ora_key_return();
      assertNotNull(sQLParser_ora_key_return1);
      assertFalse(sQLParser_ora_key_return1.equals((Object)sQLParser_ora_key_return0));
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(100, SQLParser.T__100);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(97, SQLParser.T__97);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(126, SQLParser.T__126);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(57, SQLParser.DATE);
      assertEquals(43, SQLParser.IN);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(90, SQLParser.T__90);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(100, SQLParser.T__100);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(97, SQLParser.T__97);
      assertEquals(112, SQLParser.T__112);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(80, SQLParser.T__80);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(126, SQLParser.T__126);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(103, SQLParser.T__103);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(116, SQLParser.T__116);
      assertEquals(85, SQLParser.T__85);
      assertEquals(124, SQLParser.T__124);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(84, SQLParser.T__84);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(92, SQLParser.T__92);
      assertEquals(5, SQLParser.NOT);
      assertEquals(102, SQLParser.T__102);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertNotNull(sQLParser_commands_return0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.comment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(94, SQLParser.T__94);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(118, SQLParser.T__118);
      assertEquals(61, SQLParser.T__61);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(119, SQLParser.T__119);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(98, SQLParser.T__98);
      assertEquals(111, SQLParser.T__111);
      assertEquals(68, SQLParser.T__68);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(32, SQLParser.AND);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      SQLParser.ora_configs_return sQLParser_ora_configs_return0 = sQLParser0.ora_configs();
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(78, SQLParser.T__78);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(86, SQLParser.T__86);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(94, SQLParser.T__94);
      assertEquals(115, SQLParser.T__115);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(118, SQLParser.T__118);
      assertEquals(61, SQLParser.T__61);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(77, SQLParser.T__77);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(33, SQLParser.XOR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(105, SQLParser.T__105);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(120, SQLParser.T__120);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(135, SQLParser.T__135);
      assertEquals(67, SQLParser.T__67);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(75, SQLParser.T__75);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(119, SQLParser.T__119);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(98, SQLParser.T__98);
      assertEquals(111, SQLParser.T__111);
      assertEquals(68, SQLParser.T__68);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(95, SQLParser.T__95);
      assertEquals(32, SQLParser.AND);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(136, SQLParser.T__136);
      assertEquals(73, SQLParser.T__73);
      assertEquals(106, SQLParser.T__106);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(121, SQLParser.T__121);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser_ora_configs_return0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(78, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(79, SQLParser.T__79);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(64, SQLParser.T__64);
      assertEquals(72, SQLParser.T__72);
      assertEquals(116, SQLParser.T__116);
      assertEquals(87, SQLParser.T__87);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(46, SQLParser.SUB);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(80, SQLParser.T__80);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(65, SQLParser.T__65);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(100, SQLParser.T__100);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(88, SQLParser.T__88);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(73, SQLParser.T__73);
      assertEquals(107, SQLParser.T__107);
      assertEquals(81, SQLParser.T__81);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(42, SQLParser.NULL);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(89, SQLParser.T__89);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(5, SQLParser.NOT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(4, SQLParser.INT);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(128, SQLParser.T__128);
      assertEquals(33, SQLParser.XOR);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(120, SQLParser.T__120);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(57, SQLParser.DATE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(69, SQLParser.T__69);
      assertEquals(127, SQLParser.T__127);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(84, SQLParser.T__84);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(119, SQLParser.T__119);
      assertEquals(92, SQLParser.T__92);
      assertEquals(77, SQLParser.T__77);
      assertEquals(103, SQLParser.T__103);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(133, SQLParser.T__133);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(78, SQLParser.T__78);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(37, SQLParser.GT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      SQLParser.ora_storage_spec_return sQLParser_ora_storage_spec_return0 = new SQLParser.ora_storage_spec_return();
      assertNotNull(sQLParser_ora_storage_spec_return0);
      
      Object object0 = sQLParser_ora_storage_spec_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(96, SQLParser.T__96);
      assertEquals(81, SQLParser.T__81);
      assertEquals(39, SQLParser.LT);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(4, SQLParser.INT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(89, SQLParser.T__89);
      assertEquals(119, SQLParser.T__119);
      assertEquals(40, SQLParser.LE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(41, SQLParser.IS);
      assertEquals(128, SQLParser.T__128);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(95, SQLParser.T__95);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(60, SQLParser.WS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(113, SQLParser.T__113);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertEquals(57, SQLParser.DATE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(129, SQLParser.T__129);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(106, SQLParser.T__106);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(61, SQLParser.T__61);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(107, SQLParser.T__107);
      assertEquals(74, SQLParser.T__74);
      assertEquals(137, SQLParser.T__137);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(108, SQLParser.T__108);
      assertEquals(77, SQLParser.T__77);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(123, SQLParser.T__123);
      assertEquals(85, SQLParser.T__85);
      assertEquals(115, SQLParser.T__115);
      assertEquals(93, SQLParser.T__93);
      assertEquals(100, SQLParser.T__100);
      assertEquals(70, SQLParser.T__70);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(124, SQLParser.T__124);
      assertEquals(92, SQLParser.T__92);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(84, SQLParser.T__84);
      assertEquals(31, SQLParser.OR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(47, SQLParser.STAR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(87, SQLParser.T__87);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(117, SQLParser.T__117);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(132, SQLParser.T__132);
      assertEquals(71, SQLParser.T__71);
      assertEquals(126, SQLParser.T__126);
      assertEquals(5, SQLParser.NOT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(111, SQLParser.T__111);
      assertEquals(7, SQLParser.STRING);
      assertEquals(103, SQLParser.T__103);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(37, SQLParser.GT);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(43, SQLParser.IN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.getRuleMemoization(2318, (-2210));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.BaseRecognizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      sQLParser0.setBacktrackingLevel(135);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(125, SQLParser.T__125);
      assertEquals(71, SQLParser.T__71);
      assertEquals(110, SQLParser.T__110);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(87, SQLParser.T__87);
      assertEquals(133, SQLParser.T__133);
      assertEquals(134, SQLParser.T__134);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(64, SQLParser.T__64);
      assertEquals(111, SQLParser.T__111);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(84, SQLParser.T__84);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(100, SQLParser.T__100);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(41, SQLParser.IS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(85, SQLParser.T__85);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(116, SQLParser.T__116);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(57, SQLParser.DATE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(5, SQLParser.NOT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(122, SQLParser.T__122);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(31, SQLParser.OR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(32, SQLParser.AND);
      assertEquals(80, SQLParser.T__80);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(105, SQLParser.T__105);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(135, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.constraint_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      TokenStream tokenStream0 = null;
      RecognizerSharedState recognizerSharedState0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, (RecognizerSharedState) null);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(69, SQLParser.T__69);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(121, SQLParser.T__121);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(115, SQLParser.T__115);
      assertEquals(43, SQLParser.IN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(75, SQLParser.T__75);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(31, SQLParser.OR);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(113, SQLParser.T__113);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(80, SQLParser.T__80);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(94, SQLParser.T__94);
      assertEquals(119, SQLParser.T__119);
      assertEquals(86, SQLParser.T__86);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(126, SQLParser.T__126);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(103, SQLParser.T__103);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(70, SQLParser.T__70);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(40, SQLParser.LE);
      assertEquals(101, SQLParser.T__101);
      assertEquals(63, SQLParser.T__63);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(84, SQLParser.T__84);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(47, SQLParser.STAR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.primary_key_constraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(80, SQLParser.T__80);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(39, SQLParser.LT);
      assertEquals(88, SQLParser.T__88);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(120, SQLParser.T__120);
      assertEquals(4, SQLParser.INT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(40, SQLParser.LE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(94, SQLParser.T__94);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(70, SQLParser.T__70);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(92, SQLParser.T__92);
      assertEquals(42, SQLParser.NULL);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(46, SQLParser.SUB);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(89, SQLParser.T__89);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(74, SQLParser.T__74);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(82, SQLParser.T__82);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(83, SQLParser.T__83);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.null_comparison();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      RecognitionException recognitionException0 = new RecognitionException();
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertNotNull(recognitionException0);
      
      Token token0 = recognitionException0.token;
      assertNull(token0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(32, SQLParser.AND);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(7, SQLParser.STRING);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(47, SQLParser.STAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(37, SQLParser.GT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(43, SQLParser.IN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(40, SQLParser.LE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(5, SQLParser.NOT);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(92, SQLParser.T__92);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(134, SQLParser.T__134);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(127, SQLParser.T__127);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(79, SQLParser.T__79);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(128, SQLParser.T__128);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_lob_index();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      SQLParser.value_list_return sQLParser_value_list_return0 = new SQLParser.value_list_return();
      assertNotNull(sQLParser_value_list_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(135, 135, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(83, SQLParser.T__83);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      SQLParser.commands_return sQLParser_commands_return0 = sQLParser0.commands();
      assertEquals(55, SQLParser.BYTE);
      assertEquals(7, SQLParser.STRING);
      assertEquals(130, SQLParser.T__130);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(61, SQLParser.T__61);
      assertEquals(100, SQLParser.T__100);
      assertEquals(114, SQLParser.T__114);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(122, SQLParser.T__122);
      assertEquals(42, SQLParser.NULL);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(98, SQLParser.T__98);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(92, SQLParser.T__92);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(32, SQLParser.AND);
      assertEquals(99, SQLParser.T__99);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(108, SQLParser.T__108);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(5, SQLParser.NOT);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(124, SQLParser.T__124);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(4, SQLParser.INT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(79, SQLParser.T__79);
      assertEquals(38, SQLParser.GE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(94, SQLParser.T__94);
      assertEquals(86, SQLParser.T__86);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(43, SQLParser.IN);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(127, SQLParser.T__127);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(135, SQLParser.T__135);
      assertEquals(33, SQLParser.XOR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(119, SQLParser.T__119);
      assertEquals(41, SQLParser.IS);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(65, SQLParser.T__65);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(82, SQLParser.T__82);
      assertEquals(128, SQLParser.T__128);
      assertEquals(74, SQLParser.T__74);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(105, SQLParser.T__105);
      assertEquals(96, SQLParser.T__96);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(81, SQLParser.T__81);
      assertEquals(83, SQLParser.T__83);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(129, SQLParser.T__129);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(121, SQLParser.T__121);
      assertEquals(67, SQLParser.T__67);
      assertEquals(106, SQLParser.T__106);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(136, SQLParser.T__136);
      assertEquals(97, SQLParser.T__97);
      assertNotNull(sQLParser_commands_return0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.partition_part();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      SQLParser.default_value_return sQLParser_default_value_return0 = new SQLParser.default_value_return();
      assertNotNull(sQLParser_default_value_return0);
      
      SQLParser.arguments_return sQLParser_arguments_return0 = new SQLParser.arguments_return();
      assertNotNull(sQLParser_arguments_return0);
      
      Object object0 = sQLParser_arguments_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(65, SQLParser.T__65);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(72, SQLParser.T__72);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(60, SQLParser.WS);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(81, SQLParser.T__81);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(47, SQLParser.STAR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(88, SQLParser.T__88);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(62, SQLParser.T__62);
      assertEquals(102, SQLParser.T__102);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(40, SQLParser.LE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(37, SQLParser.GT);
      assertEquals(110, SQLParser.T__110);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(43, SQLParser.IN);
      assertEquals(64, SQLParser.T__64);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(125, SQLParser.T__125);
      assertEquals(86, SQLParser.T__86);
      assertEquals(133, SQLParser.T__133);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(94, SQLParser.T__94);
      assertEquals(91, SQLParser.T__91);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(42, SQLParser.NULL);
      assertEquals(76, SQLParser.T__76);
      assertEquals(122, SQLParser.T__122);
      assertEquals(107, SQLParser.T__107);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(57, SQLParser.DATE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(84, SQLParser.T__84);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(96, SQLParser.T__96);
      assertEquals(66, SQLParser.T__66);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(75, SQLParser.T__75);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(83, SQLParser.T__83);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(67, SQLParser.T__67);
      assertEquals(129, SQLParser.T__129);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      
      // Undeclared exception!
      try { 
        sQLParser0.type();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      SQLParser.table_details_return sQLParser_table_details_return0 = new SQLParser.table_details_return();
      assertNotNull(sQLParser_table_details_return0);
      
      TokenStream tokenStream0 = null;
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(97, SQLParser.T__97);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(136, SQLParser.T__136);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(74, SQLParser.T__74);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(40, SQLParser.LE);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(5, SQLParser.NOT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(98, SQLParser.T__98);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(38, SQLParser.GE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(41, SQLParser.IS);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(60, SQLParser.WS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(76, SQLParser.T__76);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(91, SQLParser.T__91);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals(70, SQLParser.T__70);
      assertEquals(39, SQLParser.LT);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(4, SQLParser.INT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(109, SQLParser.T__109);
      assertEquals(33, SQLParser.XOR);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(47, SQLParser.STAR);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(84, SQLParser.T__84);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(85, SQLParser.T__85);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(64, SQLParser.T__64);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(95, SQLParser.T__95);
      assertEquals(32, SQLParser.AND);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(119, SQLParser.T__119);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(46, SQLParser.SUB);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(73, SQLParser.T__73);
      assertEquals(57, SQLParser.DATE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(31, SQLParser.OR);
      assertEquals(120, SQLParser.T__120);
      assertEquals(88, SQLParser.T__88);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_opt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(101, SQLParser.T__101);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(131, SQLParser.T__131);
      assertEquals(31, SQLParser.OR);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(34, SQLParser.EQ);
      assertEquals(109, SQLParser.T__109);
      assertEquals(77, SQLParser.T__77);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(46, SQLParser.SUB);
      assertEquals(92, SQLParser.T__92);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(132, SQLParser.T__132);
      assertEquals(102, SQLParser.T__102);
      assertEquals(86, SQLParser.T__86);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(117, SQLParser.T__117);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(63, SQLParser.T__63);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(78, SQLParser.T__78);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(7, SQLParser.STRING);
      assertEquals(93, SQLParser.T__93);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(129, SQLParser.T__129);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(137, SQLParser.T__137);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(47, SQLParser.STAR);
      assertEquals(83, SQLParser.T__83);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(122, SQLParser.T__122);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(99, SQLParser.T__99);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(41, SQLParser.IS);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(89, SQLParser.T__89);
      assertEquals(33, SQLParser.XOR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(66, SQLParser.T__66);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(73, SQLParser.T__73);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(128, SQLParser.T__128);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(67, SQLParser.T__67);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(106, SQLParser.T__106);
      assertEquals(74, SQLParser.T__74);
      assertEquals(37, SQLParser.GT);
      assertEquals(121, SQLParser.T__121);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(64, SQLParser.T__64);
      assertEquals(57, SQLParser.DATE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(125, SQLParser.T__125);
      assertEquals(42, SQLParser.NULL);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(103, SQLParser.T__103);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(111, SQLParser.T__111);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(104, SQLParser.T__104);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(112, SQLParser.T__112);
      assertEquals(32, SQLParser.AND);
      assertEquals(119, SQLParser.T__119);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = false;
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      recognizerSharedState0._fsp = (-922);
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      RecognizerSharedState recognizerSharedState2 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-922), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState2.tokenStartCharIndex);
      assertFalse(recognizerSharedState2.errorRecovery);
      assertEquals(0, recognizerSharedState2.type);
      assertEquals(0, recognizerSharedState2.syntaxErrors);
      assertFalse(recognizerSharedState2.failed);
      assertEquals((-1), recognizerSharedState2.lastErrorIndex);
      assertEquals(0, recognizerSharedState2.backtracking);
      assertEquals(0, recognizerSharedState2.tokenStartLine);
      assertEquals(0, recognizerSharedState2.channel);
      assertEquals(0, recognizerSharedState2.tokenStartCharPositionInLine);
      assertEquals((-922), recognizerSharedState2._fsp);
      assertNotNull(recognizerSharedState2);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState2.equals((Object)recognizerSharedState0));
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(79, SQLParser.T__79);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(133, SQLParser.T__133);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(80, SQLParser.T__80);
      assertEquals(103, SQLParser.T__103);
      assertEquals(118, SQLParser.T__118);
      assertEquals(87, SQLParser.T__87);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertEquals(64, SQLParser.T__64);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(72, SQLParser.T__72);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(123, SQLParser.T__123);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(101, SQLParser.T__101);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(78, SQLParser.T__78);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(4, SQLParser.INT);
      assertEquals(7, SQLParser.STRING);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(39, SQLParser.LT);
      assertEquals(124, SQLParser.T__124);
      assertEquals(117, SQLParser.T__117);
      assertEquals(5, SQLParser.NOT);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(102, SQLParser.T__102);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(90, SQLParser.T__90);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(57, SQLParser.DATE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(114, SQLParser.T__114);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(68, SQLParser.T__68);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(81, SQLParser.T__81);
      assertEquals(104, SQLParser.T__104);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals(97, SQLParser.T__97);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(89, SQLParser.T__89);
      assertEquals(42, SQLParser.NULL);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(96, SQLParser.T__96);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      SQLParser.expression_return sQLParser_expression_return0 = new SQLParser.expression_return();
      assertNotNull(sQLParser_expression_return0);
      
      // Undeclared exception!
      try { 
        sQLParser0.column_comment_details();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(110, 111, (-1)).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(125, SQLParser.T__125);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(110, SQLParser.T__110);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(41, SQLParser.IS);
      assertEquals(119, SQLParser.T__119);
      assertEquals(126, SQLParser.T__126);
      assertEquals(94, SQLParser.T__94);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(103, SQLParser.T__103);
      assertEquals(79, SQLParser.T__79);
      assertEquals(111, SQLParser.T__111);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(64, SQLParser.T__64);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(70, SQLParser.T__70);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(116, SQLParser.T__116);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(33, SQLParser.XOR);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(78, SQLParser.T__78);
      assertEquals(108, SQLParser.T__108);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(60, SQLParser.WS);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(99, SQLParser.T__99);
      assertEquals(5, SQLParser.NOT);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(40, SQLParser.LE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(84, SQLParser.T__84);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(102, SQLParser.T__102);
      assertEquals(47, SQLParser.STAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(92, SQLParser.T__92);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(43, SQLParser.IN);
      assertEquals(37, SQLParser.GT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(69, SQLParser.T__69);
      assertEquals(7, SQLParser.STRING);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(67, SQLParser.T__67);
      assertEquals(123, SQLParser.T__123);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(115, SQLParser.T__115);
      assertEquals(90, SQLParser.T__90);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(31, SQLParser.OR);
      assertEquals(89, SQLParser.T__89);
      assertEquals(135, SQLParser.T__135);
      assertEquals(74, SQLParser.T__74);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals(97, SQLParser.T__97);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(82, SQLParser.T__82);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(95, SQLParser.T__95);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(34, SQLParser.EQ);
      assertEquals(113, SQLParser.T__113);
      assertEquals(128, SQLParser.T__128);
      assertEquals(42, SQLParser.NULL);
      assertEquals(81, SQLParser.T__81);
      assertEquals(105, SQLParser.T__105);
      assertEquals(46, SQLParser.SUB);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(4, SQLParser.INT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(98, SQLParser.T__98);
      assertEquals(128, SQLParser.T__128);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(46, SQLParser.SUB);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(66, SQLParser.T__66);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      LinkedList<Token> linkedList0 = new LinkedList<Token>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<String> list0 = sQLParser0.toStrings(linkedList0);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(134, SQLParser.T__134);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(111, SQLParser.T__111);
      assertEquals(81, SQLParser.T__81);
      assertEquals(33, SQLParser.XOR);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(87, SQLParser.T__87);
      assertEquals(135, SQLParser.T__135);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(72, SQLParser.T__72);
      assertEquals(127, SQLParser.T__127);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(112, SQLParser.T__112);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(104, SQLParser.T__104);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(41, SQLParser.IS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(94, SQLParser.T__94);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(132, SQLParser.T__132);
      assertEquals(47, SQLParser.STAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(102, SQLParser.T__102);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(64, SQLParser.T__64);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(39, SQLParser.LT);
      assertEquals(93, SQLParser.T__93);
      assertEquals(118, SQLParser.T__118);
      assertEquals(85, SQLParser.T__85);
      assertEquals(4, SQLParser.INT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(70, SQLParser.T__70);
      assertEquals(125, SQLParser.T__125);
      assertEquals(62, SQLParser.T__62);
      assertEquals(40, SQLParser.LE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(5, SQLParser.NOT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(32, SQLParser.AND);
      assertEquals(100, SQLParser.T__100);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(130, SQLParser.T__130);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(99, SQLParser.T__99);
      assertEquals(31, SQLParser.OR);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(122, SQLParser.T__122);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(116, SQLParser.T__116);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(69, SQLParser.T__69);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(67, SQLParser.T__67);
      assertEquals(98, SQLParser.T__98);
      assertEquals(128, SQLParser.T__128);
      assertEquals(57, SQLParser.DATE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(113, SQLParser.T__113);
      assertEquals(83, SQLParser.T__83);
      assertEquals(105, SQLParser.T__105);
      assertEquals(75, SQLParser.T__75);
      assertEquals(46, SQLParser.SUB);
      assertEquals(114, SQLParser.T__114);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(129, SQLParser.T__129);
      assertEquals(66, SQLParser.T__66);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(82, SQLParser.T__82);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertNotNull(list0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      // Undeclared exception!
      try { 
        sQLParser0.expression();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      SQLParser.unary_expression_return sQLParser_unary_expression_return0 = new SQLParser.unary_expression_return();
      assertNotNull(sQLParser_unary_expression_return0);
      
      SQLParser.fractionDigits_return sQLParser_fractionDigits_return0 = new SQLParser.fractionDigits_return();
      assertNotNull(sQLParser_fractionDigits_return0);
      
      sQLParser_fractionDigits_return0.start = null;
      Object object0 = sQLParser_fractionDigits_return0.getTree();
      assertNull(object0);
      
      SQLParser.ora_flag_return sQLParser_ora_flag_return0 = new SQLParser.ora_flag_return();
      assertNotNull(sQLParser_ora_flag_return0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(126, SQLParser.T__126);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(88, SQLParser.T__88);
      assertEquals(73, SQLParser.T__73);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(96, SQLParser.T__96);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(133, SQLParser.T__133);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(66, SQLParser.T__66);
      assertEquals(125, SQLParser.T__125);
      assertEquals(118, SQLParser.T__118);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(89, SQLParser.T__89);
      assertEquals(74, SQLParser.T__74);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(82, SQLParser.T__82);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(86, SQLParser.T__86);
      assertEquals(63, SQLParser.T__63);
      assertEquals(71, SQLParser.T__71);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(34, SQLParser.EQ);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(128, SQLParser.T__128);
      assertEquals(46, SQLParser.SUB);
      assertEquals(113, SQLParser.T__113);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(87, SQLParser.T__87);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(104, SQLParser.T__104);
      assertEquals(31, SQLParser.OR);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(32, SQLParser.AND);
      assertEquals(95, SQLParser.T__95);
      assertEquals(112, SQLParser.T__112);
      assertEquals(80, SQLParser.T__80);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(84, SQLParser.T__84);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(107, SQLParser.T__107);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(122, SQLParser.T__122);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(129, SQLParser.T__129);
      assertEquals(62, SQLParser.T__62);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(114, SQLParser.T__114);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(43, SQLParser.IN);
      assertEquals(78, SQLParser.T__78);
      assertEquals(136, SQLParser.T__136);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(132, SQLParser.T__132);
      assertEquals(67, SQLParser.T__67);
      assertEquals(102, SQLParser.T__102);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(117, SQLParser.T__117);
      assertEquals(90, SQLParser.T__90);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(75, SQLParser.T__75);
      assertEquals(109, SQLParser.T__109);
      assertEquals(40, SQLParser.LE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(98, SQLParser.T__98);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(39, SQLParser.LT);
      assertEquals(61, SQLParser.T__61);
      assertEquals(124, SQLParser.T__124);
      assertEquals(91, SQLParser.T__91);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(47, SQLParser.STAR);
      assertEquals(108, SQLParser.T__108);
      assertEquals(76, SQLParser.T__76);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.nullability();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(63, SQLParser.T__63);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(124, SQLParser.T__124);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(94, SQLParser.T__94);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(86, SQLParser.T__86);
      assertEquals(47, SQLParser.STAR);
      assertEquals(116, SQLParser.T__116);
      assertEquals(131, SQLParser.T__131);
      assertEquals(71, SQLParser.T__71);
      assertEquals(101, SQLParser.T__101);
      assertEquals(64, SQLParser.T__64);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(108, SQLParser.T__108);
      assertEquals(79, SQLParser.T__79);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(72, SQLParser.T__72);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(32, SQLParser.AND);
      assertEquals(88, SQLParser.T__88);
      assertEquals(114, SQLParser.T__114);
      assertEquals(129, SQLParser.T__129);
      assertEquals(31, SQLParser.OR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(66, SQLParser.T__66);
      assertEquals(81, SQLParser.T__81);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(73, SQLParser.T__73);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(121, SQLParser.T__121);
      assertEquals(46, SQLParser.SUB);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(42, SQLParser.NULL);
      assertEquals(89, SQLParser.T__89);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(5, SQLParser.NOT);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals(37, SQLParser.GT);
      assertEquals(90, SQLParser.T__90);
      assertEquals(43, SQLParser.IN);
      assertEquals(135, SQLParser.T__135);
      assertEquals(127, SQLParser.T__127);
      assertEquals(57, SQLParser.DATE);
      assertEquals(38, SQLParser.GE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(75, SQLParser.T__75);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(119, SQLParser.T__119);
      assertEquals(61, SQLParser.T__61);
      assertEquals(134, SQLParser.T__134);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, SQLParser.T__99);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(111, SQLParser.T__111);
      assertEquals(69, SQLParser.T__69);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(41, SQLParser.IS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(76, SQLParser.T__76);
      assertEquals(60, SQLParser.WS);
      assertEquals(7, SQLParser.STRING);
      assertEquals(92, SQLParser.T__92);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(84, SQLParser.T__84);
      assertEquals(118, SQLParser.T__118);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(110, SQLParser.T__110);
      assertEquals(77, SQLParser.T__77);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(4, SQLParser.INT);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(117, SQLParser.T__117);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(102, SQLParser.T__102);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.drop_table();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState1);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(41, SQLParser.IS);
      assertEquals(88, SQLParser.T__88);
      assertEquals(60, SQLParser.WS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(119, SQLParser.T__119);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(95, SQLParser.T__95);
      assertEquals(80, SQLParser.T__80);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(65, SQLParser.T__65);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(125, SQLParser.T__125);
      assertEquals(133, SQLParser.T__133);
      assertEquals(87, SQLParser.T__87);
      assertEquals(103, SQLParser.T__103);
      assertEquals(111, SQLParser.T__111);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(97, SQLParser.T__97);
      assertEquals(121, SQLParser.T__121);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(120, SQLParser.T__120);
      assertEquals(135, SQLParser.T__135);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(57, SQLParser.DATE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(73, SQLParser.T__73);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(84, SQLParser.T__84);
      assertEquals(100, SQLParser.T__100);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(130, SQLParser.T__130);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(99, SQLParser.T__99);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(31, SQLParser.OR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(69, SQLParser.T__69);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(76, SQLParser.T__76);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(91, SQLParser.T__91);
      assertEquals(32, SQLParser.AND);
      assertEquals(7, SQLParser.STRING);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(114, SQLParser.T__114);
      assertEquals(61, SQLParser.T__61);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(129, SQLParser.T__129);
      assertEquals(38, SQLParser.GE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(107, SQLParser.T__107);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(137, SQLParser.T__137);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(5, SQLParser.NOT);
      assertEquals(71, SQLParser.T__71);
      assertEquals(47, SQLParser.STAR);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(132, SQLParser.T__132);
      assertEquals(40, SQLParser.LE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(102, SQLParser.T__102);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(37, SQLParser.GT);
      assertEquals(78, SQLParser.T__78);
      assertEquals(85, SQLParser.T__85);
      assertEquals(116, SQLParser.T__116);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(124, SQLParser.T__124);
      assertEquals(93, SQLParser.T__93);
      assertEquals(131, SQLParser.T__131);
      assertEquals(33, SQLParser.XOR);
      assertEquals(62, SQLParser.T__62);
      assertEquals(70, SQLParser.T__70);
      assertEquals(101, SQLParser.T__101);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.ora_storage_opt();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(107, SQLParser.T__107);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(99, SQLParser.T__99);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(114, SQLParser.T__114);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(122, SQLParser.T__122);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(137, SQLParser.T__137);
      assertEquals(83, SQLParser.T__83);
      assertEquals(43, SQLParser.IN);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(75, SQLParser.T__75);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(90, SQLParser.T__90);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(67, SQLParser.T__67);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(97, SQLParser.T__97);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(37, SQLParser.GT);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(82, SQLParser.T__82);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(34, SQLParser.EQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(89, SQLParser.T__89);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(120, SQLParser.T__120);
      assertEquals(81, SQLParser.T__81);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(31, SQLParser.OR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(95, SQLParser.T__95);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(87, SQLParser.T__87);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(64, SQLParser.T__64);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(79, SQLParser.T__79);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(94, SQLParser.T__94);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(133, SQLParser.T__133);
      assertEquals(117, SQLParser.T__117);
      assertEquals(86, SQLParser.T__86);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(78, SQLParser.T__78);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(40, SQLParser.LE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(70, SQLParser.T__70);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(124, SQLParser.T__124);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(109, SQLParser.T__109);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(33, SQLParser.XOR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(47, SQLParser.STAR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(100, SQLParser.T__100);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(69, SQLParser.T__69);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.index_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      SQLParser.between_expression_return sQLParser_between_expression_return0 = new SQLParser.between_expression_return();
      assertNotNull(sQLParser_between_expression_return0);
      
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.channel);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      Token token0 = recognizerSharedState1.token;
      assertNull(token0);
      
      sQLParser_between_expression_return0.stop = null;
      Object object0 = sQLParser_between_expression_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0, (RecognizerSharedState) null);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(120, SQLParser.T__120);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(39, SQLParser.LT);
      assertEquals(33, SQLParser.XOR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(65, SQLParser.T__65);
      assertEquals(95, SQLParser.T__95);
      assertEquals(111, SQLParser.T__111);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(87, SQLParser.T__87);
      assertEquals(68, SQLParser.T__68);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(83, SQLParser.T__83);
      assertEquals(98, SQLParser.T__98);
      assertEquals(114, SQLParser.T__114);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(90, SQLParser.T__90);
      assertEquals(128, SQLParser.T__128);
      assertEquals(67, SQLParser.T__67);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(34, SQLParser.EQ);
      assertEquals(74, SQLParser.T__74);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(82, SQLParser.T__82);
      assertEquals(97, SQLParser.T__97);
      assertEquals(113, SQLParser.T__113);
      assertEquals(42, SQLParser.NULL);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(89, SQLParser.T__89);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals(31, SQLParser.OR);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(46, SQLParser.SUB);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(137, SQLParser.T__137);
      assertEquals(107, SQLParser.T__107);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(32, SQLParser.AND);
      assertEquals(61, SQLParser.T__61);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(91, SQLParser.T__91);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(76, SQLParser.T__76);
      assertEquals(100, SQLParser.T__100);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(64, SQLParser.T__64);
      assertEquals(38, SQLParser.GE);
      assertEquals(110, SQLParser.T__110);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(43, SQLParser.IN);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(37, SQLParser.GT);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(79, SQLParser.T__79);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(133, SQLParser.T__133);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(47, SQLParser.STAR);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(7, SQLParser.STRING);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(102, SQLParser.T__102);
      assertEquals(40, SQLParser.LE);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(78, SQLParser.T__78);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(4, SQLParser.INT);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(132, SQLParser.T__132);
      assertEquals(70, SQLParser.T__70);
      assertEquals(5, SQLParser.NOT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(93, SQLParser.T__93);
      assertEquals(117, SQLParser.T__117);
      assertEquals(85, SQLParser.T__85);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.value();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      SQLParser.table_comment_details_return sQLParser_table_comment_details_return0 = new SQLParser.table_comment_details_return();
      assertNotNull(sQLParser_table_comment_details_return0);
      
      SQLParser.alter_table_return sQLParser_alter_table_return0 = new SQLParser.alter_table_return();
      assertNotNull(sQLParser_alter_table_return0);
      
      sQLParser_alter_table_return0.start = null;
      Object object0 = sQLParser_alter_table_return0.getTree();
      assertNull(object0);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.type);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      recognizerSharedState0.channel = (-1);
      recognizerSharedState1.tokenStartLine = 26;
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(26, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(131, SQLParser.T__131);
      assertEquals(62, SQLParser.T__62);
      assertEquals(101, SQLParser.T__101);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(46, SQLParser.SUB);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(34, SQLParser.EQ);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(93, SQLParser.T__93);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(85, SQLParser.T__85);
      assertEquals(70, SQLParser.T__70);
      assertEquals(100, SQLParser.T__100);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(102, SQLParser.T__102);
      assertEquals(69, SQLParser.T__69);
      assertEquals(99, SQLParser.T__99);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(32, SQLParser.AND);
      assertEquals(47, SQLParser.STAR);
      assertEquals(109, SQLParser.T__109);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(92, SQLParser.T__92);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(31, SQLParser.OR);
      assertEquals(84, SQLParser.T__84);
      assertEquals(72, SQLParser.T__72);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(110, SQLParser.T__110);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(134, SQLParser.T__134);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(126, SQLParser.T__126);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(5, SQLParser.NOT);
      assertEquals(111, SQLParser.T__111);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(118, SQLParser.T__118);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(94, SQLParser.T__94);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(38, SQLParser.GE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(135, SQLParser.T__135);
      assertEquals(66, SQLParser.T__66);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(127, SQLParser.T__127);
      assertEquals(39, SQLParser.LT);
      assertEquals(112, SQLParser.T__112);
      assertEquals(81, SQLParser.T__81);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(119, SQLParser.T__119);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(40, SQLParser.LE);
      assertEquals(89, SQLParser.T__89);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(65, SQLParser.T__65);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(41, SQLParser.IS);
      assertEquals(95, SQLParser.T__95);
      assertEquals(128, SQLParser.T__128);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(60, SQLParser.WS);
      assertEquals(80, SQLParser.T__80);
      assertEquals(105, SQLParser.T__105);
      assertEquals(120, SQLParser.T__120);
      assertEquals(57, SQLParser.DATE);
      assertEquals(88, SQLParser.T__88);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(98, SQLParser.T__98);
      assertEquals(136, SQLParser.T__136);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(76, SQLParser.T__76);
      assertEquals(106, SQLParser.T__106);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(121, SQLParser.T__121);
      assertEquals(61, SQLParser.T__61);
      assertEquals(91, SQLParser.T__91);
      assertEquals(42, SQLParser.NULL);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(130, SQLParser.T__130);
      assertEquals(67, SQLParser.T__67);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(137, SQLParser.T__137);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(82, SQLParser.T__82);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(90, SQLParser.T__90);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertFalse(sQLParser0.failed());
      
      RecognitionException recognitionException0 = null;
      try {
        recognitionException0 = new RecognitionException(sQLParser0.input);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(103, SQLParser.T__103);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(133, SQLParser.T__133);
      assertEquals(125, SQLParser.T__125);
      assertEquals(81, SQLParser.T__81);
      assertEquals(110, SQLParser.T__110);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(73, SQLParser.T__73);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(89, SQLParser.T__89);
      assertEquals(117, SQLParser.T__117);
      assertEquals(102, SQLParser.T__102);
      assertEquals(96, SQLParser.T__96);
      assertEquals(132, SQLParser.T__132);
      assertEquals(66, SQLParser.T__66);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(97, SQLParser.T__97);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(39, SQLParser.LT);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(124, SQLParser.T__124);
      assertEquals(116, SQLParser.T__116);
      assertEquals(90, SQLParser.T__90);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(67, SQLParser.T__67);
      assertEquals(47, SQLParser.STAR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(131, SQLParser.T__131);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(75, SQLParser.T__75);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(83, SQLParser.T__83);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(123, SQLParser.T__123);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertEquals(107, SQLParser.T__107);
      assertEquals(69, SQLParser.T__69);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(122, SQLParser.T__122);
      assertEquals(7, SQLParser.STRING);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(38, SQLParser.GE);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(106, SQLParser.T__106);
      assertEquals(37, SQLParser.GT);
      assertEquals(92, SQLParser.T__92);
      assertEquals(136, SQLParser.T__136);
      assertEquals(77, SQLParser.T__77);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(121, SQLParser.T__121);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(85, SQLParser.T__85);
      assertEquals(93, SQLParser.T__93);
      assertEquals(5, SQLParser.NOT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(62, SQLParser.T__62);
      assertEquals(42, SQLParser.NULL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(40, SQLParser.LE);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(128, SQLParser.T__128);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(113, SQLParser.T__113);
      assertEquals(34, SQLParser.EQ);
      assertEquals(105, SQLParser.T__105);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(78, SQLParser.T__78);
      assertEquals(46, SQLParser.SUB);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(120, SQLParser.T__120);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(94, SQLParser.T__94);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(135, SQLParser.T__135);
      assertEquals(31, SQLParser.OR);
      assertEquals(127, SQLParser.T__127);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(64, SQLParser.T__64);
      assertEquals(79, SQLParser.T__79);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(32, SQLParser.AND);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(119, SQLParser.T__119);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(72, SQLParser.T__72);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(126, SQLParser.T__126);
      assertEquals(134, SQLParser.T__134);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      
      // Undeclared exception!
      try { 
        sQLParser0.comment();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(tokenStream0).LA(anyInt());
      doReturn((String) null).when(tokenStream0).getSourceName();
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      SQLParser sQLParser0 = new SQLParser(tokenStream0);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(73, SQLParser.T__73);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(89, SQLParser.T__89);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(102, SQLParser.T__102);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(90, SQLParser.T__90);
      assertEquals(33, SQLParser.XOR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertNotNull(sQLParser0);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      RecognitionException recognitionException0 = new RecognitionException();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNotNull(recognitionException0);
      
      Throwable throwable0 = recognitionException0.getCause();
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.index);
      assertEquals(0, recognitionException0.line);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertNull(throwable0);
      
      recognitionException0.index = 6;
      sQLParser0.reportError(recognitionException0);
      assertEquals(107, SQLParser.T__107);
      assertEquals(137, SQLParser.T__137);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(69, SQLParser.T__69);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(7, SQLParser.STRING);
      assertEquals(122, SQLParser.T__122);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(114, SQLParser.T__114);
      assertEquals(84, SQLParser.T__84);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(38, SQLParser.GE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(129, SQLParser.T__129);
      assertEquals(57, SQLParser.DATE);
      assertEquals(77, SQLParser.T__77);
      assertEquals(136, SQLParser.T__136);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(37, SQLParser.GT);
      assertEquals(43, SQLParser.IN);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(92, SQLParser.T__92);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(121, SQLParser.T__121);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(5, SQLParser.NOT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(93, SQLParser.T__93);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(128, SQLParser.T__128);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(40, SQLParser.LE);
      assertEquals(113, SQLParser.T__113);
      assertEquals(78, SQLParser.T__78);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(120, SQLParser.T__120);
      assertEquals(46, SQLParser.SUB);
      assertEquals(105, SQLParser.T__105);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(86, SQLParser.T__86);
      assertEquals(94, SQLParser.T__94);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(63, SQLParser.T__63);
      assertEquals(127, SQLParser.T__127);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(31, SQLParser.OR);
      assertEquals(71, SQLParser.T__71);
      assertEquals(135, SQLParser.T__135);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(64, SQLParser.T__64);
      assertEquals(32, SQLParser.AND);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(79, SQLParser.T__79);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(87, SQLParser.T__87);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(103, SQLParser.T__103);
      assertEquals(80, SQLParser.T__80);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(88, SQLParser.T__88);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(73, SQLParser.T__73);
      assertEquals(47, SQLParser.STAR);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(81, SQLParser.T__81);
      assertEquals(110, SQLParser.T__110);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(117, SQLParser.T__117);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(132, SQLParser.T__132);
      assertEquals(89, SQLParser.T__89);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals(102, SQLParser.T__102);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(4, SQLParser.INT);
      assertEquals(97, SQLParser.T__97);
      assertEquals(124, SQLParser.T__124);
      assertEquals(109, SQLParser.T__109);
      assertEquals(39, SQLParser.LT);
      assertEquals(116, SQLParser.T__116);
      assertEquals(90, SQLParser.T__90);
      assertEquals(33, SQLParser.XOR);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(83, SQLParser.T__83);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(123, SQLParser.T__123);
      assertEquals(60, SQLParser.WS);
      assertEquals(75, SQLParser.T__75);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(100, SQLParser.T__100);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(41, SQLParser.IS);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(130, SQLParser.T__130);
      assertFalse(recognitionException0.approximateLineInfo);
      assertEquals(0, recognitionException0.c);
      assertEquals(0, recognitionException0.line);
      assertEquals(6, recognitionException0.index);
      assertEquals(0, recognitionException0.charPositionInLine);
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(1, sQLParser0.getNumberOfSyntaxErrors());
      assertFalse(sQLParser0.failed());
      
      // Undeclared exception!
      try { 
        sQLParser0.arguments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null);
      assertEquals(119, SQLParser.T__119);
      assertEquals(60, SQLParser.WS);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(41, SQLParser.IS);
      assertEquals(112, SQLParser.T__112);
      assertEquals(73, SQLParser.T__73);
      assertEquals(104, SQLParser.T__104);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(81, SQLParser.T__81);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(134, SQLParser.T__134);
      assertEquals(126, SQLParser.T__126);
      assertEquals(111, SQLParser.T__111);
      assertEquals(66, SQLParser.T__66);
      assertEquals(96, SQLParser.T__96);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(80, SQLParser.T__80);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(105, SQLParser.T__105);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(135, SQLParser.T__135);
      assertEquals(65, SQLParser.T__65);
      assertEquals(127, SQLParser.T__127);
      assertEquals(95, SQLParser.T__95);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(47, SQLParser.STAR);
      assertEquals(88, SQLParser.T__88);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(79, SQLParser.T__79);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(43, SQLParser.IN);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(37, SQLParser.GT);
      assertEquals(64, SQLParser.T__64);
      assertEquals(40, SQLParser.LE);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(5, SQLParser.NOT);
      assertEquals(72, SQLParser.T__72);
      assertEquals(117, SQLParser.T__117);
      assertEquals(87, SQLParser.T__87);
      assertEquals(102, SQLParser.T__102);
      assertEquals(132, SQLParser.T__132);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(118, SQLParser.T__118);
      assertEquals(78, SQLParser.T__78);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(110, SQLParser.T__110);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(86, SQLParser.T__86);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(133, SQLParser.T__133);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(115, SQLParser.T__115);
      assertEquals(92, SQLParser.T__92);
      assertEquals(123, SQLParser.T__123);
      assertEquals(77, SQLParser.T__77);
      assertEquals(108, SQLParser.T__108);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(32, SQLParser.AND);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(130, SQLParser.T__130);
      assertEquals(7, SQLParser.STRING);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(62, SQLParser.T__62);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(70, SQLParser.T__70);
      assertEquals(85, SQLParser.T__85);
      assertEquals(42, SQLParser.NULL);
      assertEquals(61, SQLParser.T__61);
      assertEquals(76, SQLParser.T__76);
      assertEquals(91, SQLParser.T__91);
      assertEquals(124, SQLParser.T__124);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(34, SQLParser.EQ);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(46, SQLParser.SUB);
      assertEquals(109, SQLParser.T__109);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(69, SQLParser.T__69);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(99, SQLParser.T__99);
      assertEquals(116, SQLParser.T__116);
      assertEquals(84, SQLParser.T__84);
      assertEquals(101, SQLParser.T__101);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(90, SQLParser.T__90);
      assertEquals(121, SQLParser.T__121);
      assertEquals(75, SQLParser.T__75);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(83, SQLParser.T__83);
      assertEquals(106, SQLParser.T__106);
      assertEquals(136, SQLParser.T__136);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(128, SQLParser.T__128);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(122, SQLParser.T__122);
      assertEquals(114, SQLParser.T__114);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(107, SQLParser.T__107);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(137, SQLParser.T__137);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(129, SQLParser.T__129);
      assertEquals(97, SQLParser.T__97);
      assertEquals(67, SQLParser.T__67);
      assertNotNull(sQLParser0);
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertFalse(sQLParser0.failed());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.qualified_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      SQLParser.keyword_return sQLParser_keyword_return0 = new SQLParser.keyword_return();
      assertNotNull(sQLParser_keyword_return0);
      
      Object object0 = sQLParser_keyword_return0.getTree();
      assertNull(object0);
      
      Token token0 = sQLParser_keyword_return0.start;
      assertNull(token0);
      
      Token token1 = sQLParser_keyword_return0.stop;
      assertNull(token1);
      
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn((-467)).when(tokenStream0).LA(anyInt());
      doReturn(1117).when(tokenStream0).index();
      doReturn((Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertNotNull(recognizerSharedState0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState(recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState1);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertFalse(recognizerSharedState0.failed);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(110, SQLParser.T__110);
      assertEquals(64, SQLParser.T__64);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(79, SQLParser.T__79);
      assertEquals(94, SQLParser.T__94);
      assertEquals(118, SQLParser.T__118);
      assertEquals(47, SQLParser.STAR);
      assertEquals(133, SQLParser.T__133);
      assertEquals(86, SQLParser.T__86);
      assertEquals(71, SQLParser.T__71);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(125, SQLParser.T__125);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(63, SQLParser.T__63);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(78, SQLParser.T__78);
      assertEquals(109, SQLParser.T__109);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(93, SQLParser.T__93);
      assertEquals(46, SQLParser.SUB);
      assertEquals(85, SQLParser.T__85);
      assertEquals(117, SQLParser.T__117);
      assertEquals(132, SQLParser.T__132);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(102, SQLParser.T__102);
      assertEquals(62, SQLParser.T__62);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(33, SQLParser.XOR);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(108, SQLParser.T__108);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(77, SQLParser.T__77);
      assertEquals(92, SQLParser.T__92);
      assertEquals(124, SQLParser.T__124);
      assertEquals(84, SQLParser.T__84);
      assertEquals(116, SQLParser.T__116);
      assertEquals(101, SQLParser.T__101);
      assertEquals(131, SQLParser.T__131);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(69, SQLParser.T__69);
      assertEquals(107, SQLParser.T__107);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(137, SQLParser.T__137);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(76, SQLParser.T__76);
      assertEquals(41, SQLParser.IS);
      assertEquals(122, SQLParser.T__122);
      assertEquals(91, SQLParser.T__91);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(115, SQLParser.T__115);
      assertEquals(61, SQLParser.T__61);
      assertEquals(36, SQLParser.LTGT);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(57, SQLParser.DATE);
      assertEquals(98, SQLParser.T__98);
      assertEquals(38, SQLParser.GE);
      assertEquals(68, SQLParser.T__68);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(136, SQLParser.T__136);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(83, SQLParser.T__83);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(106, SQLParser.T__106);
      assertEquals(75, SQLParser.T__75);
      assertEquals(121, SQLParser.T__121);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(90, SQLParser.T__90);
      assertEquals(114, SQLParser.T__114);
      assertEquals(37, SQLParser.GT);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(43, SQLParser.IN);
      assertEquals(129, SQLParser.T__129);
      assertEquals(67, SQLParser.T__67);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(97, SQLParser.T__97);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(7, SQLParser.STRING);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(113, SQLParser.T__113);
      assertEquals(74, SQLParser.T__74);
      assertEquals(82, SQLParser.T__82);
      assertEquals(5, SQLParser.NOT);
      assertEquals(105, SQLParser.T__105);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(39, SQLParser.LT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(4, SQLParser.INT);
      assertEquals(89, SQLParser.T__89);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(96, SQLParser.T__96);
      assertEquals(42, SQLParser.NULL);
      assertEquals(66, SQLParser.T__66);
      assertEquals(127, SQLParser.T__127);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(81, SQLParser.T__81);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(73, SQLParser.T__73);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(32, SQLParser.AND);
      assertEquals(120, SQLParser.T__120);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(88, SQLParser.T__88);
      assertEquals(135, SQLParser.T__135);
      assertEquals(95, SQLParser.T__95);
      assertEquals(31, SQLParser.OR);
      assertEquals(111, SQLParser.T__111);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(103, SQLParser.T__103);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(119, SQLParser.T__119);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(87, SQLParser.T__87);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(134, SQLParser.T__134);
      assertEquals(72, SQLParser.T__72);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(126, SQLParser.T__126);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_detail();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      recognizerSharedState0.failed = false;
      Token token0 = recognizerSharedState0.token;
      assertNull(token0);
      
      RecognizerSharedState recognizerSharedState1 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState1.tokenStartCharIndex);
      assertFalse(recognizerSharedState1.errorRecovery);
      assertEquals((-1), recognizerSharedState1._fsp);
      assertEquals(0, recognizerSharedState1.type);
      assertEquals(0, recognizerSharedState1.tokenStartLine);
      assertEquals(0, recognizerSharedState1.syntaxErrors);
      assertFalse(recognizerSharedState1.failed);
      assertEquals(0, recognizerSharedState1.tokenStartCharPositionInLine);
      assertEquals(0, recognizerSharedState1.backtracking);
      assertEquals(0, recognizerSharedState1.channel);
      assertEquals((-1), recognizerSharedState1.lastErrorIndex);
      assertNotNull(recognizerSharedState1);
      assertFalse(recognizerSharedState1.equals((Object)recognizerSharedState0));
      
      SQLParser sQLParser0 = new SQLParser((TokenStream) null, recognizerSharedState0);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(92, SQLParser.T__92);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(32, SQLParser.AND);
      assertEquals(84, SQLParser.T__84);
      assertEquals(108, SQLParser.T__108);
      assertEquals(31, SQLParser.OR);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(116, SQLParser.T__116);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(77, SQLParser.T__77);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(124, SQLParser.T__124);
      assertEquals(42, SQLParser.NULL);
      assertEquals(109, SQLParser.T__109);
      assertEquals(46, SQLParser.SUB);
      assertEquals(93, SQLParser.T__93);
      assertEquals(85, SQLParser.T__85);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(34, SQLParser.EQ);
      assertEquals(70, SQLParser.T__70);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(62, SQLParser.T__62);
      assertEquals(7, SQLParser.STRING);
      assertEquals(102, SQLParser.T__102);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(132, SQLParser.T__132);
      assertEquals(117, SQLParser.T__117);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(78, SQLParser.T__78);
      assertEquals(121, SQLParser.T__121);
      assertEquals(106, SQLParser.T__106);
      assertEquals(47, SQLParser.STAR);
      assertEquals(90, SQLParser.T__90);
      assertEquals(136, SQLParser.T__136);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(67, SQLParser.T__67);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(129, SQLParser.T__129);
      assertEquals(68, SQLParser.T__68);
      assertEquals(98, SQLParser.T__98);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(83, SQLParser.T__83);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(114, SQLParser.T__114);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(75, SQLParser.T__75);
      assertEquals(91, SQLParser.T__91);
      assertEquals(122, SQLParser.T__122);
      assertEquals(61, SQLParser.T__61);
      assertEquals(137, SQLParser.T__137);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(107, SQLParser.T__107);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(99, SQLParser.T__99);
      assertEquals(130, SQLParser.T__130);
      assertEquals(69, SQLParser.T__69);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(100, SQLParser.T__100);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(41, SQLParser.IS);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(115, SQLParser.T__115);
      assertEquals(60, SQLParser.WS);
      assertEquals(123, SQLParser.T__123);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(76, SQLParser.T__76);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(88, SQLParser.T__88);
      assertEquals(104, SQLParser.T__104);
      assertEquals(112, SQLParser.T__112);
      assertEquals(127, SQLParser.T__127);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(33, SQLParser.XOR);
      assertEquals(96, SQLParser.T__96);
      assertEquals(135, SQLParser.T__135);
      assertEquals(81, SQLParser.T__81);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(73, SQLParser.T__73);
      assertEquals(39, SQLParser.LT);
      assertEquals(120, SQLParser.T__120);
      assertEquals(105, SQLParser.T__105);
      assertEquals(89, SQLParser.T__89);
      assertEquals(4, SQLParser.INT);
      assertEquals(113, SQLParser.T__113);
      assertEquals(56, SQLParser.CHAR);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(128, SQLParser.T__128);
      assertEquals(40, SQLParser.LE);
      assertEquals(66, SQLParser.T__66);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(97, SQLParser.T__97);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(82, SQLParser.T__82);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(74, SQLParser.T__74);
      assertEquals(5, SQLParser.NOT);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(94, SQLParser.T__94);
      assertEquals(37, SQLParser.GT);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(86, SQLParser.T__86);
      assertEquals(43, SQLParser.IN);
      assertEquals(110, SQLParser.T__110);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(57, SQLParser.DATE);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(38, SQLParser.GE);
      assertEquals(125, SQLParser.T__125);
      assertEquals(64, SQLParser.T__64);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(133, SQLParser.T__133);
      assertEquals(118, SQLParser.T__118);
      assertEquals(79, SQLParser.T__79);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(103, SQLParser.T__103);
      assertEquals(87, SQLParser.T__87);
      assertEquals(111, SQLParser.T__111);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(72, SQLParser.T__72);
      assertEquals(95, SQLParser.T__95);
      assertEquals(126, SQLParser.T__126);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(134, SQLParser.T__134);
      assertEquals(65, SQLParser.T__65);
      assertEquals(80, SQLParser.T__80);
      assertEquals(119, SQLParser.T__119);
      assertNotNull(sQLParser0);
      assertFalse(recognizerSharedState0.equals((Object)recognizerSharedState1));
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_spec();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.sql.parser.SQLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      TokenStream tokenStream0 = mock(TokenStream.class, new ViolatedAssumptionAnswer());
      doReturn(57).when(tokenStream0).LA(anyInt());
      doReturn(0).when(tokenStream0).index();
      doReturn((Token) null, (Token) null, (Token) null, (Token) null).when(tokenStream0).LT(anyInt());
      RecognizerSharedState recognizerSharedState0 = new RecognizerSharedState();
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertNotNull(recognizerSharedState0);
      
      SQLParser sQLParser0 = new SQLParser(tokenStream0, recognizerSharedState0);
      assertEquals((-1), recognizerSharedState0.tokenStartCharIndex);
      assertFalse(recognizerSharedState0.errorRecovery);
      assertEquals(0, recognizerSharedState0.channel);
      assertEquals(0, recognizerSharedState0.backtracking);
      assertEquals((-1), recognizerSharedState0._fsp);
      assertEquals(0, recognizerSharedState0.type);
      assertFalse(recognizerSharedState0.failed);
      assertEquals((-1), recognizerSharedState0.lastErrorIndex);
      assertEquals(0, recognizerSharedState0.syntaxErrors);
      assertEquals(0, recognizerSharedState0.tokenStartLine);
      assertEquals(0, recognizerSharedState0.tokenStartCharPositionInLine);
      assertEquals(100, SQLParser.T__100);
      assertEquals(130, SQLParser.T__130);
      assertEquals(32, SQLParser.AND);
      assertEquals(92, SQLParser.T__92);
      assertEquals(115, SQLParser.T__115);
      assertEquals(123, SQLParser.T__123);
      assertEquals(84, SQLParser.T__84);
      assertEquals(137, SQLParser.T__137);
      assertEquals(18, SQLParser.CREATE_SEQUENCE);
      assertEquals(107, SQLParser.T__107);
      assertEquals(55, SQLParser.BYTE);
      assertEquals(24, SQLParser.COLUMN_SPEC);
      assertEquals(52, SQLParser.NUMBER);
      assertEquals(77, SQLParser.T__77);
      assertEquals(42, SQLParser.NULL);
      assertEquals(62, SQLParser.T__62);
      assertEquals(10, SQLParser.DEFAULT);
      assertEquals(53, SQLParser.VARCHAR2);
      assertEquals(36, SQLParser.LTGT);
      assertEquals(0, BaseRecognizer.DEFAULT_TOKEN_CHANNEL);
      assertEquals(70, SQLParser.T__70);
      assertEquals(48, SQLParser.SLASH);
      assertEquals(122, SQLParser.T__122);
      assertEquals(38, SQLParser.GE);
      assertEquals(93, SQLParser.T__93);
      assertEquals(114, SQLParser.T__114);
      assertEquals(85, SQLParser.T__85);
      assertEquals(136, SQLParser.T__136);
      assertEquals(78, SQLParser.T__78);
      assertEquals(7, SQLParser.STRING);
      assertEquals(106, SQLParser.T__106);
      assertEquals(129, SQLParser.T__129);
      assertEquals(71, SQLParser.T__71);
      assertEquals(63, SQLParser.T__63);
      assertEquals(25, SQLParser.ORA_CONFIGS);
      assertEquals(37, SQLParser.GT);
      assertEquals(58, SQLParser.TIMESTAMP);
      assertEquals(43, SQLParser.IN);
      assertEquals(117, SQLParser.T__117);
      assertEquals(44, SQLParser.BETWEEN);
      assertEquals(132, SQLParser.T__132);
      assertEquals(26, SQLParser.COMMENT_TABLE);
      assertEquals(102, SQLParser.T__102);
      assertEquals(75, SQLParser.T__75);
      assertEquals(90, SQLParser.T__90);
      assertEquals(5, SQLParser.NOT);
      assertEquals(8, SQLParser.QUOTED_NAME);
      assertEquals(51, SQLParser.ROWID);
      assertEquals(83, SQLParser.T__83);
      assertEquals(40, SQLParser.LE);
      assertEquals(109, SQLParser.T__109);
      assertEquals(4, SQLParser.INT);
      assertEquals(98, SQLParser.T__98);
      assertEquals(68, SQLParser.T__68);
      assertEquals(15, SQLParser.TABLE_NAME);
      assertEquals(116, SQLParser.T__116);
      assertEquals(9, SQLParser.PRIMARY);
      assertEquals(17, SQLParser.SIZE);
      assertEquals(39, SQLParser.LT);
      assertEquals(19, SQLParser.DROP_SEQUENCE);
      assertEquals(131, SQLParser.T__131);
      assertEquals(101, SQLParser.T__101);
      assertEquals(33, SQLParser.XOR);
      assertEquals(91, SQLParser.T__91);
      assertEquals(76, SQLParser.T__76);
      assertEquals(124, SQLParser.T__124);
      assertEquals(61, SQLParser.T__61);
      assertEquals(108, SQLParser.T__108);
      assertEquals(47, SQLParser.STAR);
      assertEquals(27, SQLParser.COMMENT_COLUMN);
      assertEquals(99, SQLParser.T__99);
      assertEquals(59, SQLParser.BEFORE);
      assertEquals(16, SQLParser.COLUMN_NAME);
      assertEquals(45, SQLParser.PLUS);
      assertEquals(69, SQLParser.T__69);
      assertEquals(41, SQLParser.IS);
      assertEquals((-2), BaseRecognizer.MEMO_RULE_FAILED);
      assertEquals(60, SQLParser.WS);
      assertEquals(134, SQLParser.T__134);
      assertEquals(11, SQLParser.COMMENT);
      assertEquals(21, SQLParser.CREATE_INDEX);
      assertEquals(119, SQLParser.T__119);
      assertEquals(88, SQLParser.T__88);
      assertEquals(103, SQLParser.T__103);
      assertEquals(73, SQLParser.T__73);
      assertEquals(96, SQLParser.T__96);
      assertEquals(126, SQLParser.T__126);
      assertEquals(54, SQLParser.NVARCHAR2);
      assertEquals(66, SQLParser.T__66);
      assertEquals(111, SQLParser.T__111);
      assertEquals(29, SQLParser.ARGUMENTS);
      assertEquals(81, SQLParser.T__81);
      assertEquals(56, SQLParser.CHAR);
      assertEquals((-1), BaseRecognizer.MEMO_RULE_UNKNOWN);
      assertEquals(133, SQLParser.T__133);
      assertEquals(30, SQLParser.VALUE_LIST);
      assertEquals(118, SQLParser.T__118);
      assertEquals(89, SQLParser.T__89);
      assertEquals(82, SQLParser.T__82);
      assertEquals(74, SQLParser.T__74);
      assertEquals(125, SQLParser.T__125);
      assertEquals(67, SQLParser.T__67);
      assertEquals(97, SQLParser.T__97);
      assertEquals(110, SQLParser.T__110);
      assertEquals(23, SQLParser.TABLE_DETAILS);
      assertEquals(99, BaseRecognizer.HIDDEN);
      assertEquals(86, SQLParser.T__86);
      assertEquals(50, SQLParser.BARBAR);
      assertEquals(121, SQLParser.T__121);
      assertEquals(79, SQLParser.T__79);
      assertEquals(49, SQLParser.PERCENT);
      assertEquals(94, SQLParser.T__94);
      assertEquals(113, SQLParser.T__113);
      assertEquals(14, SQLParser.ALTER_TABLE);
      assertEquals(6, SQLParser.IDENTIFIER);
      assertEquals(100, BaseRecognizer.INITIAL_FOLLOW_STACK_SIZE);
      assertEquals(22, SQLParser.INDEX_NAME);
      assertEquals(105, SQLParser.T__105);
      assertEquals(12, SQLParser.CREATE_TABLE);
      assertEquals(72, SQLParser.T__72);
      assertEquals(35, SQLParser.BANGEQ);
      assertEquals(128, SQLParser.T__128);
      assertEquals(64, SQLParser.T__64);
      assertEquals(34, SQLParser.EQ);
      assertEquals((-1), SQLParser.EOF);
      assertEquals(87, SQLParser.T__87);
      assertEquals(46, SQLParser.SUB);
      assertEquals(28, SQLParser.INVOCATION);
      assertEquals(135, SQLParser.T__135);
      assertEquals(120, SQLParser.T__120);
      assertEquals(112, SQLParser.T__112);
      assertEquals(104, SQLParser.T__104);
      assertEquals(57, SQLParser.DATE);
      assertEquals(31, SQLParser.OR);
      assertEquals(95, SQLParser.T__95);
      assertEquals(13, SQLParser.DROP_TABLE);
      assertEquals(127, SQLParser.T__127);
      assertEquals(20, SQLParser.NAME_LIST);
      assertEquals(80, SQLParser.T__80);
      assertEquals(65, SQLParser.T__65);
      assertNotNull(sQLParser0);
      assertFalse(sQLParser0.failed());
      assertEquals(0, sQLParser0.getBacktrackingLevel());
      assertEquals(0, sQLParser0.getNumberOfSyntaxErrors());
      assertEquals(0, sQLParser0.getRuleMemoizationCacheSize());
      assertEquals("/Users/volker/Documents/databene/jdbacl/src/main/g/SQL.g", sQLParser0.getGrammarFileName());
      
      // Undeclared exception!
      try { 
        sQLParser0.column_name();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.antlr.runtime.RecognitionException", e);
      }
  }
}

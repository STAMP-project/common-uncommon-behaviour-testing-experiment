/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:51:31 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((byte)1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(1L, long0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, int0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2048, (byte) (-1), 8);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      simpleCharStream0.backup((byte)1);
      assertEquals(7, byteArray0.length);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      
      simpleCharStream0.prevCharIsCR = true;
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      
      simpleCharStream0.adjustBeginLineColumn(3985, (byte)1);
      assertEquals(7, byteArray0.length);
      assertEquals(6, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3986, simpleCharStream0.getBeginLine());
      assertEquals(3985, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(3985, simpleCharStream0.getLine());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(7, byteArray0.length);
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3986, simpleCharStream0.getBeginLine());
      assertEquals(3985, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(3985, simpleCharStream0.getLine());
      assertEquals('\u0000', char0);
      
      int int2 = simpleCharStream0.getEndColumn();
      assertEquals(7, byteArray0.length);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(7, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3986, simpleCharStream0.getBeginLine());
      assertEquals(3985, simpleCharStream0.getEndLine());
      assertEquals(1, simpleCharStream0.getEndColumn());
      assertEquals(3985, simpleCharStream0.getLine());
      assertEquals(1, int2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)19, 4096);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-60), (-728));
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, 572, 572);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)106;
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 4096);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)106, (byte)0, (byte) (-60)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4096, (byte)106);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)106, (byte)0, (byte) (-60)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      int int0 = 0;
      int int1 = 0;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int2 = stringReader0.read();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-1), int2);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, (int) (byte) (-1), 8, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)106, (byte)1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)106, 1);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0, 4079, 4069, 949);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, 1, (int) (byte)0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3986), (-1281));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      int int0 = (-1116);
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
      int int1 = 4414;
      InputStream inputStream0 = null;
      int int2 = 4401;
      simpleCharStream0.ReInit(inputStream0, int1, int2);
      simpleCharStream0.Done();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = null;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      String string0 = "";
      simpleCharStream0.ReInit(inputStream0, string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1281), 10, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((-3221), 188);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "dYcGPf", 1, 1727, 1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      String string0 = simpleCharStream0.GetImage();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)19, 4096);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-60), (-728));
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)19, 4096, (int) (byte)19);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "1o[29-Pbt|`9vRs0m");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-726), (-983));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (-726);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.backup((-1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      
      simpleCharStream0.adjustBeginLineColumn((-983), (-1));
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream((Reader) null, 0, (-689), 3583);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertNotNull(simpleCharStream1);
      
      // Undeclared exception!
      try { 
        simpleCharStream1.FillBuff();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)106;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, 0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4062, (byte)106);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)106, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 0, (-1279), (-431));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "dYcGPf", 1727, 1727, 1727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-713), (-983));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (-713);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.maxNextCharInd = 4073;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.ReInit((Reader) stringReader0, 4095, 2563);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      StringReader stringReader1 = new StringReader("");
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotNull(stringReader1);
      
      int int1 = stringReader0.read();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      assertNotSame(stringReader0, stringReader1);
      
      stringReader0.close();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1, 797, (-70));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(1870);
      assertEquals(1870, charArray0.length);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)115;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 818, (byte) (-67));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.line = (int) (byte) (-67);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.adjustBeginLineColumn(4061, (-1116));
      InputStream inputStream0 = null;
      simpleCharStream0.ReInit((InputStream) null, (int) (byte)115, (int) (byte)115);
      simpleCharStream0.Done();
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray1 = null;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      String string0 = "?\"DpU~,{DS_D[Q;_+v";
      simpleCharStream0.ReInit(inputStream0, string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-763), 9);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0, (-763), (-1387), 4079);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, (-1387), 930);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.FillBuff();
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      char char0 = simpleCharStream0.BeginToken();
      assertEquals(7, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1387), simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1387), simpleCharStream0.getBeginColumn());
      assertEquals((-1387), simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals('\u0000', char0);
      
      int int1 = simpleCharStream0.getEndColumn();
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1387), simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals((-1387), simpleCharStream0.getBeginColumn());
      assertEquals((-1387), simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals((-1387), int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1281), (-1281), 0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(0, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-60);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufsize = (-408);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.ReInit((Reader) null, 4084, (int) (byte) (-60));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4086);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      int int0 = 4060;
      try { 
        simpleCharStream0.ReInit((InputStream) pushbackInputStream0, ")vXCC[!b1|$Mg76eyI", 4060, 4073, (int) (byte) (-1));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      int int1 = (-983);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-726), (-983));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, 2396, 2396);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 4086);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      String string0 = "j(l.";
      try { 
        simpleCharStream0.ReInit((InputStream) pushbackInputStream0, "j(l.", (-1), 2981, 0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)115;
      byte byte0 = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-127);
      byte byte1 = (byte)104;
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = 0;
      long long0 = byteArrayInputStream0.skip(0L);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, int1);
      
      int int2 = byteArrayInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int2);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)115, 0);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      simpleCharStream0.backup(3985);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3986), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      simpleCharStream0.tabSize = 0;
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((byte) (-127), (byte) (-72));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip((byte)1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(1L, long0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(6, int0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2048, (byte) (-1), 8);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      simpleCharStream0.backup((byte)1);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      
      simpleCharStream0.adjustBeginLineColumn(3985, (byte)1);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(6, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(3985, simpleCharStream0.getEndLine());
      assertEquals(3985, simpleCharStream0.getLine());
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(3986, simpleCharStream0.getBeginLine());
      assertEquals(1, simpleCharStream0.getColumn());
      assertEquals(1, simpleCharStream0.getEndColumn());
      
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "@oI4uHX#FoAGJv(", (int) (byte) (-1), (int) (byte)0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 1727, 1727);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)19, 706);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals((-1), int0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals((-1), int1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-1), (byte)19, 1);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      simpleCharStream0.backup((-1393));
      assertEquals(7, byteArray0.length);
      assertEquals(1392, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.adjustBeginLineColumn((-1), 1);
      assertEquals(7, byteArray0.length);
      assertEquals(1392, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "@oI4uHX#FoAGJv(", (-1364), (-1364));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-763), 9);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      simpleCharStream0.adjustBeginLineColumn(1020, 953);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(953, simpleCharStream0.getBeginColumn());
      assertEquals(1021, simpleCharStream0.getBeginLine());
      
      char char0 = simpleCharStream0.readChar();
      assertEquals(7, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1021, simpleCharStream0.getLine());
      assertEquals(954, simpleCharStream0.getEndColumn());
      assertEquals(954, simpleCharStream0.getColumn());
      assertEquals(954, simpleCharStream0.getBeginColumn());
      assertEquals(1021, simpleCharStream0.getEndLine());
      assertEquals(1021, simpleCharStream0.getBeginLine());
      assertEquals('\u0000', char0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals(7, byteArray0.length);
      assertEquals(0, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1021, simpleCharStream0.getLine());
      assertEquals(954, simpleCharStream0.getEndColumn());
      assertEquals(954, simpleCharStream0.getColumn());
      assertEquals(954, simpleCharStream0.getBeginColumn());
      assertEquals(1021, simpleCharStream0.getEndLine());
      assertEquals(1021, simpleCharStream0.getBeginLine());
      assertEquals("\u0000", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KArjbb");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '<';
      charArray0[1] = '4';
      charArray0[2] = '%';
      charArray0[3] = 'K';
      charArray0[4] = 'D';
      charArray0[5] = 'I';
      int int0 = stringReader0.read(charArray0, 0, 0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'<', '4', '%', 'K', 'D', 'I'}, charArray0);
      assertEquals(0, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-3033), 155, 1771);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 136, (-3033), (-3033));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 0;
      long long0 = stringReader0.skip(10);
      assertEquals(0L, long0);
      
      stringReader0.reset();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1281), 10, 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1281), (-1281), 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      int int1 = (-3221);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1569);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      int int2 = (-1202);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pipedInputStream0, "", (-1202), (-1202), 1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)24}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)24, (byte)24);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)24}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.bufpos = (int) (byte)24;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getLine());
      
      simpleCharStream0.Done();
      assertEquals(1, byteArray0.length);
      assertEquals(24, simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)24}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      simpleCharStream0.ReInit((Reader) null);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)24}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)19, (byte)0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-65), (-728));
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (String) null, 4033, 2152);
      assertEquals(7, byteArray0.length);
      assertFalse(simpleCharStream1.equals((Object)simpleCharStream0));
      assertEquals((-1), simpleCharStream1.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream1.getBeginLine());
      assertEquals(0, simpleCharStream1.getBeginColumn());
      assertNotNull(simpleCharStream1);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)115;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)115, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip(0L);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)115, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)115, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, int0);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)115, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int1);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)115, 0);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)115, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)115, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      simpleCharStream0.bufsize = 4088;
      assertEquals(0, byteArrayInputStream0.available());
      
      simpleCharStream0.backup(3979);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(108, simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)115, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      simpleCharStream0.tabSize = 0;
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((byte) (-127), (byte) (-72));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)19;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)19, (byte)0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte) (-65), (-728));
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 0, (-728), 1123);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)19, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-12), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InputStream inputStream0 = null;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(9);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(sequenceInputStream0, "B8]7.YtcYK^O7", (-2), (-2861));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = 709;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 1800, 709);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("jxjk1^F{KSPK/ D");
      assertNotNull(stringReader0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-1835);
      intArray0[1] = (-1);
      intArray0[2] = 709;
      intArray0[3] = 3201;
      intArray0[4] = 1;
      intArray0[5] = 1800;
      intArray0[6] = 3183;
      intArray0[7] = 709;
      simpleCharStream0.bufline = intArray0;
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals((-1835), simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      int int1 = stringReader0.read();
      assertFalse(int1 == int0);
      assertEquals(106, int1);
      
      stringReader0.close();
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn(709, 1890);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      File file0 = MockFile.createTempFile("com.pmdesigns.jvc.tools.SimpleCharStream", "");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/com.pmdesigns.jvc.tools.SimpleCharStream0", file0.toString());
      assertTrue(file0.exists());
      assertEquals("com.pmdesigns.jvc.tools.SimpleCharStream0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals("/tmp/com.pmdesigns.jvc.tools.SimpleCharStream0", file0.toString());
      assertTrue(file0.exists());
      assertEquals("com.pmdesigns.jvc.tools.SimpleCharStream0", file0.getName());
      assertEquals("/tmp", file0.getParent());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canWrite());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canExecute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 1;
      int int1 = (-793);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) mockFileInputStream0, (-793), 1, (-1057));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-60), 4090);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(64, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(64, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0, (-1137), (-830));
      assertEquals(4, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(64, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) bufferedInputStream0, (int) (byte) (-60), (int) (byte)0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(64, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-60);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte) (-60);
      byteArray0[3] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-175), 4090);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(179, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(179, byteArrayInputStream0.available());
      assertNotNull(bufferedInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0, (-1137), (-830));
      assertEquals(4, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(179, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) bufferedInputStream0, (int) (byte) (-60), (int) (byte)0, (int) (byte)0);
      assertEquals(4, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-60), (byte) (-60), (byte) (-60), (byte)0}, byteArray0);
      assertEquals(179, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)106, (byte)1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4049, 1);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0, 4079, 4069, 949);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte)0, 1, (int) (byte)0);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 4096);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)106, (byte)0, (byte) (-60)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4096, (byte)106);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)106, (byte)0, (byte) (-60)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 0, (int) (byte)0, 0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)106, (byte)0, (byte) (-60)}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-67);
      byteArray0[1] = (byte)115;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-127);
      byteArray0[4] = (byte)104;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-72);
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip(0L);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(8, int0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)0, (byte)115, 0);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(simpleCharStream0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertTrue(boolean0);
      
      simpleCharStream0.backup(3985);
      assertEquals(8, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-3986), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte) (-67), (byte)115, (byte)0, (byte) (-127), (byte)104, (byte)8, (byte) (-72), (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      
      simpleCharStream0.tabSize = (int) (byte) (-127);
      assertEquals(0, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.adjustBeginLineColumn((byte) (-127), (byte) (-72));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1738, (-1281));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(4062);
      assertEquals(4062, charArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("dcPf");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(100, int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1727, 100);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      int int1 = 1735;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((Reader) stringReader0, 100, 1735, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-60);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.backup((byte) (-1));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      simpleCharStream0.adjustBeginLineColumn(1119, (-291));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getLine());
      assertEquals(0, simpleCharStream0.getEndLine());
      assertEquals(0, simpleCharStream0.getEndColumn());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)19;
      byteArray0[1] = (byte)19;
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      String string0 = simpleCharStream0.GetImage();
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(string0);
      
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 4085, (byte) (-1));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-4078), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4085, (byte)0);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-4078), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 4054, 4096, 4079);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-4078), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-1), (byte)1, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-4078), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4076, 2048, 1751);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.setTabSize(1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      simpleCharStream0.adjustBeginLineColumn(1751, 1);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1752, simpleCharStream0.getBeginLine());
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 4083, 4083, 4083);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ExpandBuff(false);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)106, (byte)1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals((-99), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArrayInputStream1.equals((Object)byteArrayInputStream0));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream1.available());
      assertNotNull(byteArrayInputStream1);
      
      long long0 = byteArrayInputStream0.skip(2244L);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-99L), long0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      int int0 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      int int1 = byteArrayInputStream0.read(byteArray0);
      assertEquals(7, byteArray0.length);
      assertFalse(byteArrayInputStream0.equals((Object)byteArrayInputStream1));
      assertTrue(int1 == int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int1);
      assertNotSame(byteArrayInputStream0, byteArrayInputStream1);
      
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1, (-1), (byte)1, (-1877));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      InputStream inputStream0 = null;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)73, 4019);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)73}, byteArray0);
      assertEquals((-72), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (byte)73, 4019);
      assertEquals(1, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)73}, byteArray0);
      assertEquals((-72), byteArrayInputStream0.available());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      StringReader stringReader0 = new StringReader("|l");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(124, int0);
      
      stringReader0.close();
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
      assertEquals(1, byteArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new byte[] {(byte)73}, byteArray0);
      assertEquals((-72), byteArrayInputStream0.available());
      assertEquals(125, simpleCharStream0.getBeginLine());
      assertEquals(124, simpleCharStream0.getBeginColumn());
      
      String string0 = ">rFFP";
      int int1 = (-1185);
      int int2 = 3642;
      simpleCharStream0.ReInit(inputStream0, string0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4076, 2048, 1751);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.adjustBeginLineColumn(1751, 1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(1, simpleCharStream0.getBeginColumn());
      assertEquals(1752, simpleCharStream0.getBeginLine());
      
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)20;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)1;
      StringReader stringReader0 = new StringReader("Mi09`6mkF");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 1739, (byte)1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = simpleCharStream0.GetSuffix((byte)0);
      assertEquals(0, charArray0.length);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1281), (-1281), 0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertNotNull(simpleCharStream0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-42);
      byteArray0[1] = (byte)13;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3757), 1745);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)13}, byteArray0);
      assertEquals(1745, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte) (-42), 0, (int) (byte)13);
      assertEquals(2, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte) (-42), (byte)13}, byteArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(1745, byteArrayInputStream0.available());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 4401, 4401);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      int int0 = simpleCharStream0.getTabSize((-1116));
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-1), 4069);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      try { 
        simpleCharStream0.ReInit((InputStream) sequenceInputStream0, ">bV", 3261, (-3531));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte)9;
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-2166), 709);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ReInit((Reader) stringReader0, (int) (byte) (-9), 709, 3209);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(4096);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte) (-126);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-57);
      byteArray0[4] = (byte) (-64);
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-126), (byte)0, (byte) (-57), (byte) (-64), (byte)19, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      int int0 = byteArrayInputStream0.read();
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-126), (byte)0, (byte) (-57), (byte) (-64), (byte)19, (byte)0}, byteArray0);
      assertEquals(6, byteArrayInputStream0.available());
      assertEquals(113, int0);
      
      byteArrayInputStream0.reset();
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-126), (byte)0, (byte) (-57), (byte) (-64), (byte)19, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      long long0 = byteArrayInputStream0.skip((-463L));
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-126), (byte)0, (byte) (-57), (byte) (-64), (byte)19, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0L, long0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-876), 4096, (byte)0);
      assertEquals(7, byteArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new byte[] {(byte)113, (byte) (-126), (byte)0, (byte) (-57), (byte) (-64), (byte)19, (byte)0}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      assertNotNull(simpleCharStream0);
      
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-745), (-983));
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertNotNull(simpleCharStream0);
      
      simpleCharStream0.ExpandBuff(false);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertEquals(0, simpleCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mi09`6mkF");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 0, 1);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      String string0 = simpleCharStream0.GetImage();
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(string0);
      
      simpleCharStream0.prevCharIsCR = true;
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-1), 4069);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(simpleCharStream0);
      
      char[] charArray0 = simpleCharStream0.GetSuffix(0);
      assertEquals(0, charArray0.length);
      assertEquals((-1), simpleCharStream0.bufpos);
      assertFalse(SimpleCharStream.staticFlag);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(0, simpleCharStream0.getBeginColumn());
      assertEquals(0, simpleCharStream0.getBeginLine());
      assertNotNull(charArray0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "$<{h*w<7!iYWk", 0, (-260));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 907;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 907, 907);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals((-907), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 2440, (-2848), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)106;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-60);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 4096);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 4096, (byte)106);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 0, (int) (byte)0, 0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0);
      assertEquals(8, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.skip((byte)0);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)106;
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte)1;
      byteArray1[3] = (byte)106;
      byteArray1[4] = (byte)1;
      byteArray1[5] = (byte)0;
      byteArrayInputStream0.read(byteArray1);
      byteArrayInputStream1.read(byteArray1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream1, 4048, (byte)106, 20);
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup((byte)0);
      simpleCharStream0.adjustBeginLineColumn((-1147), 2);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 20
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% .cK9;tMeZ{JU=V*\"");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginColumn();
      simpleCharStream0.getTabSize(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read();
      byteArrayInputStream0.reset();
      byteArrayInputStream0.skip((byte)19);
      PipedInputStream pipedInputStream0 = new PipedInputStream(4096);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, (byte)113, (byte)19);
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (-2603), (int) (byte)0);
      StringReader stringReader0 = new StringReader("");
      simpleCharStream0.ReInit((Reader) stringReader0, 0, 4096);
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-726), (-983));
      simpleCharStream0.line = (-726);
      simpleCharStream0.prevCharIsLF = false;
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-713), (-983));
      simpleCharStream0.line = (-713);
      simpleCharStream0.prevCharIsLF = false;
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 4083, 4083, 4083);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-905), (-1), 7389);
      simpleCharStream0.getBeginLine();
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-9);
      byteArray0[1] = (byte) (-1);
      byteArray0[3] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip((byte)1);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 2048, (byte) (-1), 8);
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup((byte)1);
      simpleCharStream0.readChar();
      simpleCharStream0.UpdateLineColumn('\u0000');
      assertEquals(7, simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = 4096;
      PipedInputStream pipedInputStream0 = new PipedInputStream(4096);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, "mAOiV");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(0L);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, 7, (-1), 4086);
      int int0 = 3985;
      byteArrayInputStream0.markSupported();
      simpleCharStream0.backup(2048);
      simpleCharStream0.adjustBeginLineColumn(byte0, int0);
      String string0 = "@oI4uHX#FoAGJv(";
      int int1 = 0;
      int int2 = 0;
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, string0, int1, int2);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1281), (-1281), 0);
      simpleCharStream0.ReInit((Reader) stringReader0);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 8, (-3369), 8);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('S');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = 8;
      PipedInputStream pipedInputStream0 = new PipedInputStream(8);
      String string0 = null;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('m');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.getBeginColumn();
      assertEquals((-1), simpleCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), (-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1281), (-1281), 0);
      int int1 = 0;
      simpleCharStream0.ReInit((Reader) stringReader0, 0, (-4292), 0);
      InputStream inputStream0 = null;
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, 754, 754, 754);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, (-1319), 0, (-1319));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("kRh0?$D8");
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 2048, 1);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, "^]=C<s", 4067, 4067);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.skip(0L);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream1.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0, (-384), 2048, 4);
      byteArrayInputStream1.markSupported();
      simpleCharStream0.backup(995);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -991
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }
}

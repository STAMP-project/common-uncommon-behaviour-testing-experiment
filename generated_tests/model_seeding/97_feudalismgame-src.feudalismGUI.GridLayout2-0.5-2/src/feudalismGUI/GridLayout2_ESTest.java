/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 17:00:43 GMT 2019
 */

package src.feudalismGUI;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Container;
import java.awt.Dimension;
import javax.swing.Icon;
import javax.swing.JDesktopPane;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.javax.swing.MockJFileChooser;
import org.junit.runner.RunWith;
import src.feudalismGUI.GridLayout2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridLayout2_ESTest extends GridLayout2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JTable jTable0 = new JTable();
      jTable0.setBounds(1, 0, 1, 2908);
      gridLayout2_0.layoutContainer(jTable0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(961, 961, 961, 961);
      JScrollPane jScrollPane0 = new JScrollPane();
      gridLayout2_0.setRows(357);
      gridLayout2_0.layoutContainer(jScrollPane0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(0, (-5031), (-5031), (-5031));
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(mockJFileChooser0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(0, 1288, 1288, 1288);
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      gridLayout2_0.layoutContainer(mockJFileChooser0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1223), 388, (-1223), (-3604));
      gridLayout2_0.preferredLayoutSize(jDesktopPane0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      gridLayout2_0.preferredLayoutSize(jDesktopPane0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(718, (-5022), (-5022), (-5022));
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      gridLayout2_0.preferredLayoutSize(mockJFileChooser0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(961, 961, 961, 961);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      gridLayout2_0.minimumLayoutSize(defaultTreeCellRenderer0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JTable jTable0 = new JTable();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.minimumLayoutSize(jTable0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      GridLayout2 gridLayout2_0 = new GridLayout2(7112, 7112);
      gridLayout2_0.layoutContainer(mockJFileChooser0);
      // Undeclared exception!
      gridLayout2_0.preferredLayoutSize(mockJFileChooser0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2((-1700), (-1700), (-1700), (-1700));
      JInternalFrame jInternalFrame0 = new JInternalFrame("", false, false, false);
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jInternalFrame0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JScrollPane jScrollPane0 = new JScrollPane();
      gridLayout2_0.setRows((-7));
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jScrollPane0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(5365, 5365);
      JTextField jTextField0 = new JTextField();
      gridLayout2_0.minimumLayoutSize(jTextField0);
      // Undeclared exception!
      gridLayout2_0.minimumLayoutSize(jTextField0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JTable jTable0 = new JTable();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1205), (-1205));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      gridLayout2_0.setRows((-72));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jDesktopPane0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JScrollPane jScrollPane0 = new JScrollPane();
      GridLayout2 gridLayout2_0 = new GridLayout2(922633, 922633);
      // Undeclared exception!
      gridLayout2_0.layoutContainer(jScrollPane0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JTable jTable0 = new JTable();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), (-1), (-1), (-1));
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jTable0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JTable jTable0 = new JTable();
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows((-1));
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jTable0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(961, 961, 961, 961);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      JMenuItem jMenuItem0 = new JMenuItem(icon0);
      gridLayout2_0.layoutContainer(jMenuItem0);
      assertEquals(961, gridLayout2_0.getVgap());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(718, (-5022), (-5022), (-5022));
      MockJFileChooser mockJFileChooser0 = new MockJFileChooser();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(mockJFileChooser0);
      assertEquals(398, dimension0.width);
      assertEquals((-3600612), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(961, 961, 961, 961);
      JScrollPane jScrollPane0 = new JScrollPane();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jScrollPane0);
      assertEquals(18, dimension0.width);
      assertEquals(922587, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(961, 961, 961, 961);
      JScrollPane jScrollPane0 = new JScrollPane();
      gridLayout2_0.setRows((-1641));
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jScrollPane0);
      assertEquals(922587, dimension0.width);
      assertEquals(18, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }
}

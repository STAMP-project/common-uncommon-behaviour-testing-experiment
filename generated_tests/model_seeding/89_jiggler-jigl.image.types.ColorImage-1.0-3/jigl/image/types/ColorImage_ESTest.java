/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 13:59:39 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(Integer.MAX_VALUE, 255, 255, 255);
      assertEquals(2147483393, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(2147483393, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(2147483393, int0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.max(0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, int0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1, 1);
      assertEquals(1, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2372, 2);
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(2372, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 3;
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(2, 0, 0, 8, intArray0);
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(2372, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(2, colorImage0.X());
      assertArrayEquals(new int[] {0, 3, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(colorImage0);
      
      intArray0[2] = 3;
      intArray0[3] = (-1926);
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 5;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(4149, (-955), (-1926), 3, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.divide(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = 4366;
      ColorImage colorImage1 = new ColorImage(4, 4366);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = 160;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 1488;
      int int1 = 0;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3152, 3152);
      assertEquals(3152, colorImage0.X());
      assertEquals(3152, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.add(382, 382, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 331;
      ColorImage colorImage0 = new ColorImage(4, 331);
      assertEquals(331, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int1 = 0;
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(331, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.X());
      assertNull(integer0);
      
      int int3 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int0 = (-5);
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(1488, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(1488, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertTrue(int6 == int4);
      assertEquals(1488, int6);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-215), (-215), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -215
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(4019, 546, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4019
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide((-14), (-14), (-14));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 1465, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        colorImage0.divide(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(0, (-3278), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      rOI0.setROI(0, (-702), 0, 2038);
      assertEquals(2038, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-702), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(2741, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(2038, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((-702), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(2741, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(2741, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 32767, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1, 1);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(1, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      rOI0.setROI((-71), 1, 1, 1);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals((-71), rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(73, rOI0.X());
      
      int[] intArray0 = new int[0];
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      String string0 = interpolatedColorImage0.toString();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(1, interpolatedColorImage0.X());
      assertEquals("1:1\nnull \n1:1\nnull \n1:1\nnull \n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = 7;
      int int1 = (-3220);
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(7, (-3220));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(500, 500, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 500;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(500, interpolatedColorImage0.X());
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = (-1105);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip(500, (-1105), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 3160;
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = 970;
      // Undeclared exception!
      try { 
        colorImage0.multiply(1, 1, 1, 255, 970, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1249, 1249, 1249);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0, 0, (-491), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.get(3160, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3160
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1, 16, 16, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      rOI0.setROI(0, (-702), 0, 2038);
      assertEquals(1, rOI0.X());
      assertEquals(2741, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2038, rOI0.ly());
      assertEquals((-702), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-1823), (-702), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1823
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = (-4665);
      int[] intArray0 = new int[3];
      intArray0[0] = (-4665);
      intArray0[1] = 430;
      intArray0[2] = (-4665);
      int int1 = 0;
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1488, int2);
      
      rOI0.setROI(Integer.MAX_VALUE, 1, 681, (-4665));
      assertEquals(2147482967, rOI0.X());
      assertEquals(681, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-4665), rOI0.uy());
      assertEquals(4667, rOI0.Y());
      
      int int3 = rOI0.ux();
      assertEquals(2147482967, rOI0.X());
      assertEquals(681, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-4665), rOI0.uy());
      assertEquals(4667, rOI0.Y());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(681, int3);
      
      int int4 = rOI0.uy();
      assertEquals(2147482967, rOI0.X());
      assertEquals(681, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-4665), rOI0.uy());
      assertEquals(4667, rOI0.Y());
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals((-4665), int4);
      
      int int5 = rOI0.ly();
      assertEquals(2147482967, rOI0.X());
      assertEquals(681, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-4665), rOI0.uy());
      assertEquals(4667, rOI0.Y());
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(1, int5);
      
      int int6 = rOI0.ux();
      assertEquals(2147482967, rOI0.X());
      assertEquals(681, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-4665), rOI0.uy());
      assertEquals(4667, rOI0.Y());
      assertFalse(int6 == int1);
      assertTrue(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int5);
      assertEquals(681, int6);
      
      int int7 = rOI0.lx();
      assertEquals(2147482967, rOI0.X());
      assertEquals(681, rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-4665), rOI0.uy());
      assertEquals(4667, rOI0.Y());
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertEquals(Integer.MAX_VALUE, int7);
      
      // Undeclared exception!
      try { 
        colorImage0.add((-4665), (-4665), intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(500, interpolatedColorImage0.X());
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(500, 2609, (-2350), (-2350), 934);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2609
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[3];
      ColorImage colorImage0 = new ColorImage(1988, 285);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(285, colorImage0.Y());
      assertEquals(1988, colorImage0.X());
      assertNotNull(colorImage0);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 285;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      
      String string0 = colorImage0.toString(rOI0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(285, colorImage0.Y());
      assertEquals(1988, colorImage0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals("1988:285\nnull \n1988:285\nnull \n1988:285\nnull \n", string0);
      assertNotNull(string0);
      
      ColorModel colorModel0 = ColorModel.HSV;
      colorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.HSV, colorImage0.getColorModel());
      assertEquals(285, colorImage0.Y());
      assertEquals(1988, colorImage0.X());
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = (-2399);
      rOI0.setROI((-2399), (-3270), (-2399), (-3270));
      assertEquals((-3270), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-2399), rOI0.ux());
      assertEquals((-2399), rOI0.lx());
      assertEquals((-3270), rOI0.uy());
      
      int int2 = 0;
      rOI0.setROI(262, (-2399), (-1754), 0);
      assertEquals((-2399), rOI0.uy());
      assertEquals(2400, rOI0.Y());
      assertEquals(2017, rOI0.X());
      assertEquals((-1754), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(262, rOI0.lx());
      
      int int3 = rOI0.Y();
      assertEquals((-2399), rOI0.uy());
      assertEquals(2400, rOI0.Y());
      assertEquals(2017, rOI0.X());
      assertEquals((-1754), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(262, rOI0.lx());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(2400, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-132);
      int[] intArray0 = new int[8];
      int int1 = 1027;
      intArray0[0] = 1027;
      intArray0[1] = 0;
      intArray0[2] = (-132);
      intArray0[3] = 0;
      intArray0[4] = (-132);
      intArray0[5] = (-132);
      intArray0[6] = 0;
      intArray0[7] = (-132);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, (-132), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1, 1);
      assertEquals(1, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[5];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 1, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage();
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(colorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-9), 16, integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(3160, 3160, 3160, 3160);
      assertEquals(3160, rOI0.lx());
      assertEquals(3160, rOI0.ly());
      assertEquals(3160, rOI0.uy());
      assertEquals(3160, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = new Integer(3160);
      assertEquals(3160, int0);
      
      int int1 = rOI0.Y();
      assertEquals(3160, rOI0.lx());
      assertEquals(3160, rOI0.ly());
      assertEquals(3160, rOI0.uy());
      assertEquals(3160, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(3160, 3160, 3160, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3160
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(500, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[8];
      intArray0[1] = (-2350);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-1105), 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1105
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-5), (-5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 356;
      int int1 = 9;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(356, 356, 356, 9, 356);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = 331;
      ColorImage colorImage0 = new ColorImage(4, 331);
      assertEquals(4, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(331, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(4, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(331, colorImage0.Y());
      assertNull(integer0);
      
      int int2 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 2147483642;
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedColorImage0.interpolationMethod = interpolationMethod0;
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[11];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1488, int0);
      
      rOI0.setROI(2038, 0, 557, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(2038, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(557, rOI0.ux());
      assertEquals(1482, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(2038, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(557, rOI0.ux());
      assertEquals(1482, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(557, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(2038, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(557, rOI0.ux());
      assertEquals(1482, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1, rOI0.Y());
      assertEquals(2038, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(557, rOI0.ux());
      assertEquals(1482, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(2038, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(557, rOI0.ux());
      assertEquals(1482, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(557, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(2038, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(557, rOI0.ux());
      assertEquals(1482, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(2038, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 3160;
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(3160, 3160);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3160
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(500, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.plane(500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(476, 476);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(476, interpolatedColorImage0.X());
      assertEquals(476, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(1488, int5);
      
      int int6 = rOI0.Y();
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertEquals(1, int6);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1488
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      int int0 = 3152;
      ColorImage colorImage0 = new ColorImage(3152, 3152);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3152, colorImage0.X());
      assertEquals(3152, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      colorImage0.min();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 3160;
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI(3160, 0, 0, 12);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(13, rOI0.Y());
      assertEquals(12, rOI0.ly());
      assertEquals(3160, rOI0.lx());
      assertEquals(3161, rOI0.X());
      
      Integer integer0 = new Integer(3160);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(3160, (int)integer0);
      assertNotNull(integer0);
      
      int int1 = new Integer(0);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = 3;
      int int3 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 32767;
      intArray0[1] = 1327;
      intArray0[2] = 3160;
      rOI0.setROI((-4326), (-4326), 566, 0);
      assertEquals(566, rOI0.lx());
      assertEquals(4893, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals((-4326), rOI0.uy());
      assertEquals(4327, rOI0.Y());
      assertEquals((-4326), rOI0.ux());
      
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        colorImage0.add(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4326
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 953;
      int int1 = 3428;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(953, 3428);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1764, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1764, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(4245, (-1), (-1), 0);
      assertEquals(2, rOI0.Y());
      assertEquals(4245, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(4247, rOI0.X());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      
      rOI0.setROI(0, 0, (-1), 0);
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.add(0, 2022, 1150, 0, 2022);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2022
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      ColorImage colorImage0 = new ColorImage(1, 1);
      assertEquals(1, colorImage0.X());
      assertEquals(1, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      String string0 = interpolatedColorImage1.toString();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals("0:0\n0:0\n0:0\n", string0);
      assertNotNull(string0);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.X();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = rOI1.Y();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      
      // Undeclared exception!
      try { 
        colorImage0.add(1488, 244, 244, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 3160;
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        colorImage0.get(3160, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3160
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = 3189;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = 0;
      int int3 = (-450);
      rOI0.setROI((-450), 1, (-450), (-450));
      assertEquals((-450), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-450), rOI0.uy());
      assertEquals((-450), rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(452, rOI0.Y());
      
      rOI0.setROI((-1692), 1, 3189, 3189);
      assertEquals(4882, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(3189, rOI0.ly());
      assertEquals(3189, rOI0.lx());
      assertEquals((-1692), rOI0.ux());
      assertEquals(3189, rOI0.Y());
      
      int int4 = 3;
      rOI0.setROI(0, 0, 3189, 3);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(3, rOI0.ly());
      assertEquals(3189, rOI0.lx());
      assertEquals(3190, rOI0.X());
      assertEquals(4, rOI0.Y());
      
      int int5 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(3, rOI0.ly());
      assertEquals(3189, rOI0.lx());
      assertEquals(3190, rOI0.X());
      assertEquals(4, rOI0.Y());
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals(4, int5);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(3189, 3189, 3189, 3189, 3189, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(7, 0);
      assertEquals(7, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      GrayImage grayImage0 = colorImage1.plane(0);
      assertEquals(7, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(7, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(grayImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.plane(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[8];
      int int0 = 1027;
      intArray0[0] = 1027;
      intArray0[1] = 0;
      intArray0[2] = (-132);
      intArray0[3] = 0;
      intArray0[4] = (-132);
      intArray0[5] = (-132);
      intArray0[6] = 0;
      intArray0[7] = (-132);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, (-132), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = 0;
      rOI0.setROI(0, 0, 2153, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(2, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(2153, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(2154, rOI0.X());
      
      rOI0.setROI(2153, (-2895), Integer.MAX_VALUE, (-2363));
      assertEquals(2153, rOI0.ux());
      assertEquals(533, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals((-2895), rOI0.uy());
      assertEquals((-2363), rOI0.ly());
      assertEquals(2147481495, rOI0.X());
      
      int int2 = (-3903);
      // Undeclared exception!
      try { 
        colorImage0.get(0, (-3903), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 8;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 0, 0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 3164;
      ColorImage colorImage0 = new ColorImage(3164, 3164);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3164, colorImage0.Y());
      assertEquals(3164, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int1 = 109;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      colorImage0.minComponent();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      int int0 = 3160;
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      String string0 = colorImage0.toString(rOI0);
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals("3160:3160\nnull \n3160:3160\nnull \n3160:3160\nnull \n", string0);
      assertNotNull(string0);
      
      int int1 = new Integer(3160);
      assertTrue(int1 == int0);
      assertEquals(3160, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int3 = rOI1.X();
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      int int4 = rOI1.Y();
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(1, 3160, 3160, 1247, 3160, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3160
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = 0;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(0, (-1178), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 0
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip((-689), 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1515, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1515, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1515, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1515, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertFalse(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.get(0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1488
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, (-2626), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(500, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      Integer[] integerArray0 = new Integer[8];
      integerArray0[0] = (Integer) 1;
      integerArray0[1] = (Integer) 1;
      integerArray0[2] = (Integer) 1;
      Integer integer0 = Integer.valueOf((-1256));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-1256), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = JLayeredPane.DEFAULT_LAYER;
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      byte byte0 = integer1.byteValue();
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((byte)0, byte0);
      
      integerArray0[3] = integer1;
      integerArray0[4] = (Integer) 1;
      integerArray0[5] = (Integer) 1;
      integerArray0[6] = (Integer) 1;
      integerArray0[7] = (Integer) 1;
      interpolatedColorImage0.set(2, 1, integerArray0, rOI0);
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(500, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(8, integerArray0.length);
      
      intArray0[2] = 500;
      intArray0[3] = (-1105);
      intArray0[4] = 500;
      intArray0[6] = (-1105);
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(Integer.MAX_VALUE, (-321));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.X());
      assertEquals(3160, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      String string0 = colorImage0.toString(rOI0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.X());
      assertEquals(3160, colorImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals("3160:3160\nnull \n3160:3160\nnull \n3160:3160\nnull \n", string0);
      assertNotNull(string0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ROI rOI1 = new ROI(1488, 1488, 0, 1488);
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.uy();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1488, int2);
      
      int int3 = rOI1.ux();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI1.uy();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(1488, int4);
      
      int int5 = rOI1.ly();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals(1488, int5);
      
      int int6 = rOI1.ux();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertEquals(0, int6);
      
      int int7 = rOI1.lx();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertEquals(1488, int7);
      
      int int8 = rOI1.uy();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1489, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(1488, rOI1.lx());
      assertEquals(1488, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertEquals(1488, int8);
      
      int int9 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertTrue(int9 == int3);
      assertFalse(int9 == int7);
      assertTrue(int9 == int0);
      assertTrue(int9 == int6);
      assertFalse(int9 == int2);
      assertTrue(int9 == int1);
      assertFalse(int9 == int8);
      assertEquals(0, int9);
      
      int int10 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotSame(rOI0, rOI1);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(int10 == int5);
      assertTrue(int10 == int3);
      assertFalse(int10 == int7);
      assertTrue(int10 == int6);
      assertTrue(int10 == int0);
      assertFalse(int10 == int4);
      assertTrue(int10 == int9);
      assertTrue(int10 == int1);
      assertFalse(int10 == int8);
      assertFalse(int10 == int2);
      assertEquals(0, int10);
      
      ColorImage colorImage1 = colorImage0.copy(rOI0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.X());
      assertEquals(3160, colorImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(1, colorImage1.Y());
      assertEquals(1, colorImage1.X());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      ColorModel colorModel0 = ColorModel.HSV;
      int int11 = (-1076);
      // Undeclared exception!
      try { 
        colorImage0.plane((-1076));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1076
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1390, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1390
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1135), (-1135), (-1135), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(476, 476);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(476, interpolatedColorImage0.Y());
      assertEquals(476, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      interpolatedColorImage0.max();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      int int0 = 500;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(500, interpolatedColorImage0.X());
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = (-2350);
      int int2 = (-1389);
      // Undeclared exception!
      interpolatedColorImage0.maxComponent();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = (-2024);
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage((-2024), (-2024));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-211), (-211));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -211
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-2572), (-2572), 0, 0, 433);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      int int1 = 3;
      int int2 = 522;
      int[] intArray0 = new int[5];
      ColorModel colorModel0 = ColorModel.HLS;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.HLS, interpolatedColorImage0.getColorModel());
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1199;
      intArray0[2] = (-886);
      intArray0[3] = 3160;
      int int1 = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      // Undeclared exception!
      colorImage0.addbuffer(1199, 6515, intArray0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = (-16777216);
      // Undeclared exception!
      try { 
        colorImage0.plane((-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertEquals(1489, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertFalse(int5 == int1);
      assertTrue(int5 == int0);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 255;
      intArray0[1] = (-1);
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-223), (-223), 278, (-223), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[3];
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      intArray0[0] = 0;
      ColorModel colorModel0 = ColorModel.CMY;
      colorImage0.setColorModel(colorModel0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.CMY, colorImage0.getColorModel());
      
      intArray0[1] = 0;
      intArray0[2] = 285;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = 137;
      // Undeclared exception!
      try { 
        colorImage0.multiply(1988, 285, (-1582));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      rOI0.setROI(2, 2, 1, 1735);
      assertEquals(1, rOI0.ux());
      assertEquals(1735, rOI0.ly());
      assertEquals(1734, rOI0.Y());
      assertEquals(2, rOI0.lx());
      assertEquals(2, rOI0.X());
      assertEquals(2, rOI0.uy());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1, 1);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(1, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(1, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(382, 1, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = new Integer(1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-2350);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min((-2350));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2350
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(3160, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(3160, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      colorImage0.copy();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 897);
      assertEquals(0, colorImage0.X());
      assertEquals(897, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.max();
      assertEquals(0, colorImage0.X());
      assertEquals(897, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      int int0 = (-812);
      int int1 = (-774);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(0, colorImage0.X());
      assertEquals(897, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNull(integer0);
      
      long[] longArray0 = colorImage0.sqrSum();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(3, longArray0.length);
      assertNotNull(longArray0);
      
      GrayImage grayImage0 = colorImage0.plane(0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertNotNull(grayImage0);
      
      Integer integer1 = colorImage0.maxComponent();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNull(integer1);
      
      ColorImage colorImage1 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        colorImage0.add(colorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      int int0 = 2;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2372, 2);
      assertEquals(2372, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      interpolatedColorImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-9), 0, (Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[3];
      intArray0[2] = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(1390, 1390);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      rOI0.setROI(8, (-3935), 0, (-1878));
      assertEquals((-3935), rOI0.uy());
      assertEquals((-1878), rOI0.ly());
      assertEquals(2058, rOI0.Y());
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      
      int int3 = rOI0.lx();
      assertEquals((-3935), rOI0.uy());
      assertEquals((-1878), rOI0.ly());
      assertEquals(2058, rOI0.Y());
      assertEquals(8, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(9, rOI0.X());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(8, int3);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(3160, 0, 3160, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3935
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 2);
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(2, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2, interpolatedColorImage1.Y());
      assertEquals(16, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertNotNull(interpolatedColorImage1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract(2, 1244, 2, 1760, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1244
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 7);
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-429), 221, (-429), 3783, 3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 221
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.lx());
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        colorImage0.divide((-3816), (-3816), (-3816), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[3];
      ColorImage colorImage0 = new ColorImage(2010, 285);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(285, colorImage0.Y());
      assertEquals(2010, colorImage0.X());
      assertNotNull(colorImage0);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 285;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(285, 137, 2284);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int int0 = 9;
      ColorImage colorImage0 = new ColorImage(9, 9);
      assertEquals(9, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(9, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int1 = (-1076);
      ColorImage colorImage1 = colorImage0.copy();
      assertEquals(9, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(9, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(9, colorImage1.Y());
      assertEquals(9, colorImage1.X());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      // Undeclared exception!
      try { 
        colorImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.max(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 3;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = (-1);
      ColorModel colorModel0 = ColorModel.CMY;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.CMY, interpolatedColorImage0.getColorModel());
      
      int int3 = 0;
      int[] intArray0 = new int[4];
      intArray0[0] = 3;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.splat((double) (-1), (double) 1, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      int int0 = 42;
      ColorImage colorImage0 = new ColorImage(42, 42);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(42, colorImage0.Y());
      assertEquals(42, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        colorImage0.subtract(42, 42, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 3160;
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int1 = 6;
      int int2 = 1199;
      int[] intArray0 = new int[8];
      intArray0[0] = 3160;
      // Undeclared exception!
      try { 
        colorImage0.get((-425), 1199, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(500, interpolatedColorImage0.X());
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = (-2350);
      intArray0[2] = 500;
      intArray0[3] = (-1105);
      intArray0[4] = 500;
      intArray0[6] = (-1105);
      int int2 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        colorImage0.add(1500, 244, 244, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 3160;
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.X());
      assertEquals(3160, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      colorImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = 0;
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(1488, int1);
      
      ROI rOI1 = new ROI(1488, 1488, 0, 1488);
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1488, rOI1.ly());
      assertEquals(1489, rOI1.X());
      assertEquals(1488, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = rOI1.uy();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1488, rOI1.ly());
      assertEquals(1489, rOI1.X());
      assertEquals(1488, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1488, int2);
      
      int int3 = rOI1.ux();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1488, rOI1.ly());
      assertEquals(1489, rOI1.X());
      assertEquals(1488, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI1.uy();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1488, rOI1.ly());
      assertEquals(1489, rOI1.X());
      assertEquals(1488, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(1488, int4);
      
      int int5 = rOI1.ly();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1488, rOI1.ly());
      assertEquals(1489, rOI1.X());
      assertEquals(1488, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals(1488, int5);
      
      int int6 = rOI1.ux();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1488, rOI1.ly());
      assertEquals(1489, rOI1.X());
      assertEquals(1488, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertEquals(0, int6);
      
      int int7 = rOI1.lx();
      assertEquals(0, rOI1.ux());
      assertEquals(1488, rOI1.uy());
      assertEquals(1488, rOI1.ly());
      assertEquals(1489, rOI1.X());
      assertEquals(1488, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertTrue(int7 == int4);
      assertEquals(1488, int7);
      
      // Undeclared exception!
      try { 
        colorImage0.get(1249, 1488, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = 0;
      int int1 = 109;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, int2);
      
      int int3 = 0;
      int int4 = 0;
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int1 = rOI1.X();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI1.Y();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      GrayImage grayImage0 = colorImage0.plane(1);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNull(grayImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-1580), 3095, Integer.MAX_VALUE, (-1580), 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(3160, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.get(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply((int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 897);
      assertEquals(0, colorImage0.X());
      assertEquals(897, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.max();
      assertEquals(0, colorImage0.X());
      assertEquals(897, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3, integerArray0.length);
      assertNotNull(integerArray0);
      
      int int1 = (-812);
      int int2 = (-774);
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int3 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1, int4);
      
      Integer integer0 = colorImage0.maxComponent();
      assertEquals(0, colorImage0.X());
      assertEquals(897, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertNotNull(colorImage1);
      
      ColorImage colorImage2 = colorImage1.diff(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage2.Y());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(0, colorImage2.X());
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertSame(colorImage1, colorImage2);
      assertSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertNotNull(colorImage2);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(8, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = interpolatedColorImage0.getColorModel();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, colorModel0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = 0;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int2 = (-1069);
      int[] intArray1 = null;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-1069), 1, (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1489, rOI0.X());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1488, int0);
      
      rOI0.setROI(2038, 0, 557, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(2038, rOI0.lx());
      assertEquals(1482, rOI0.X());
      assertEquals(557, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(2038, rOI0.lx());
      assertEquals(1482, rOI0.X());
      assertEquals(557, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(557, int1);
      
      int int2 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(2038, rOI0.lx());
      assertEquals(1482, rOI0.X());
      assertEquals(557, rOI0.ux());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(2038, rOI0.lx());
      assertEquals(1482, rOI0.X());
      assertEquals(557, rOI0.ux());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(557, int3);
      
      int int4 = new Integer(557);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(557, int4);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2038;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 557;
      intArray0[4] = 0;
      intArray0[5] = 2038;
      intArray0[6] = 2038;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-5), 1465, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 16;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 7);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(7, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(16, image0.X());
      assertEquals(7, image0.Y());
      assertSame(interpolatedColorImage0, image0);
      assertNotNull(image0);
      
      int[] intArray0 = interpolatedColorImage0.interp((double) 7);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(7, interpolatedColorImage0.Y());
      assertSame(interpolatedColorImage0, image0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(7, 7, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(500, 500);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(500, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(500, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(500, 500, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 500
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      int int0 = 1764;
      ColorImage colorImage0 = new ColorImage(1764, 22);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(22, colorImage0.Y());
      assertEquals(1764, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int1 = (-2183);
      int int2 = 0;
      int int3 = 255;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        colorImage0.min(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = null;
      try {
        interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 16;
      int int1 = 7;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 7);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertEquals(7, image0.Y());
      assertEquals(16, image0.X());
      assertSame(interpolatedColorImage0, image0);
      assertNotNull(image0);
      
      int[] intArray0 = null;
      int[] intArray1 = interpolatedColorImage0.interp((double) 7);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertSame(interpolatedColorImage0, image0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray1);
      assertEquals(3, intArray1.length);
      assertNotNull(intArray1);
      
      int int2 = interpolatedColorImage0.max(0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(7, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(16, interpolatedColorImage0.X());
      assertSame(interpolatedColorImage0, image0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(7, 7, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      assertEquals(1488, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1488, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.uy();
      assertEquals(1488, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1488, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1488, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1488, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1488, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1488, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1488, rOI0.ly());
      assertEquals(1488, rOI0.lx());
      assertEquals(1489, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(1488, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-16777216), 3, (-2650), (-16777216), 128, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ColorModel colorModel0 = ColorModel.HSV;
      colorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.HSV, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      
      rOI0.setROI(3160, 0, 0, 12);
      assertEquals(0, rOI0.uy());
      assertEquals(3160, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(12, rOI0.ly());
      assertEquals(13, rOI0.Y());
      assertEquals(3161, rOI0.X());
      
      int int0 = 0;
      Integer integer0 = new Integer(3160);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(3160, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(0);
      assertTrue(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 32767;
      intArray0[1] = 1327;
      intArray0[3] = 3160;
      // Undeclared exception!
      try { 
        colorImage0.max(1327);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1327
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage(1249, 1249);
      assertEquals(1249, colorImage0.Y());
      assertEquals(1249, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip((-9), 3428, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.X());
      assertEquals(3160, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      colorImage0.toString();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      rOI0.setROI(534, 1468, 690, 1);
      assertEquals(690, rOI0.lx());
      assertEquals(1468, rOI0.ly());
      assertEquals(534, rOI0.ux());
      assertEquals(1468, rOI0.Y());
      assertEquals(157, rOI0.X());
      assertEquals(1, rOI0.uy());
      
      int[] intArray0 = new int[9];
      intArray0[0] = 534;
      intArray0[1] = 1;
      intArray0[2] = 1468;
      intArray0[3] = 534;
      intArray0[4] = 534;
      intArray0[5] = 1;
      intArray0[6] = 1468;
      intArray0[7] = 690;
      intArray0[8] = (-2120);
      // Undeclared exception!
      try { 
        colorImage0.add(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(160, 160, 160, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 0;
      int[] intArray0 = new int[3];
      ColorImage colorImage0 = new ColorImage(2010, 285);
      assertEquals(2010, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(285, colorImage0.Y());
      assertNotNull(colorImage0);
      
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 285;
      ColorImage colorImage1 = colorImage0.addbuffer(0, 867, intArray0);
      assertEquals(2010, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(285, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(867, colorImage1.Y());
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertArrayEquals(new int[] {0, 0, 285}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(colorImage1);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(285, 137, 2284);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, int0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      
      int int1 = rOI1.X();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI1.Y();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1, int2);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-131), (-131), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -131
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1390, 1390);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1390
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(278, 278, 278);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 9;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(356, 356, 356, 9, 356);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = (-77);
      rOI0.setROI(467, 1, (-77), 1);
      assertEquals(1, rOI0.ly());
      assertEquals(545, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(467, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals((-77), rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(1, 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(3160, colorImage0.Y());
      assertEquals(3160, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(3160, 3160, 3160, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(8, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(8, image0.X());
      assertEquals(0, image0.Y());
      assertSame(interpolatedColorImage0, image0);
      assertNotNull(image0);
      
      ColorModel colorModel0 = interpolatedColorImage0.getColorModel();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(8, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertSame(interpolatedColorImage0, image0);
      assertEquals(ColorModel.RGB, colorModel0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      int[] intArray0 = new int[8];
      colorImage0.addbuffer(3160, 0, intArray0);
      intArray0[0] = 3160;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage0.get(1199, 1199, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int int0 = (-10);
      int int1 = 109;
      ROI rOI0 = new ROI();
      rOI0.X();
      int int2 = 0;
      int int3 = 0;
      ColorImage colorImage1 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage1.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(16, 7);
      interpolatedColorImage0.clear();
      int int0 = 411;
      int[] intArray0 = null;
      interpolatedColorImage0.interp((double) 7);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(411, 411, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        colorImage0.add(0, 109, 0, 109, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((-2763), (-2763));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(3160, 3160);
      ROI rOI0 = new ROI();
      rOI0.setROI(3, 2038, 2038, 3160);
      rOI0.Y();
      // Undeclared exception!
      colorImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1764, 0);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      // Undeclared exception!
      try { 
        colorImage0.add(5, 0, 0, (-2172), 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI(1488, 1488, 0, 1488);
      rOI0.uy();
      rOI0.ux();
      rOI0.uy();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max((-2253), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2253
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int int0 = 8;
      ROI rOI0 = new ROI();
      rOI0.setROI(8, (-16777216), 0, 0);
      rOI0.X();
      ROI rOI1 = new ROI();
      rOI0.Y();
      rOI1.X();
      int int1 = (-3351);
      int int2 = 0;
      // Undeclared exception!
      try { 
        colorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }
}

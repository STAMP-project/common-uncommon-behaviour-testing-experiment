/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 12:30:39 GMT 2019
 */

package module;

import org.junit.Test;
import static org.junit.Assert.*;
import java.sql.ClientInfoStatus;
import java.sql.SQLClientInfoException;
import java.sql.SQLRecoverableException;
import java.util.HashMap;
import module.Module;
import module.ModuleSubscriptionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ModuleSubscriptionException_ESTest extends ModuleSubscriptionException_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HashMap<String, ClientInfoStatus> hashMap0 = new HashMap<String, ClientInfoStatus>();
      SQLClientInfoException sQLClientInfoException0 = new SQLClientInfoException("", "", hashMap0);
      ModuleSubscriptionException moduleSubscriptionException0 = new ModuleSubscriptionException("", sQLClientInfoException0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException();
      ModuleSubscriptionException moduleSubscriptionException0 = new ModuleSubscriptionException(sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SQLRecoverableException sQLRecoverableException0 = new SQLRecoverableException("");
      ModuleSubscriptionException moduleSubscriptionException0 = new ModuleSubscriptionException((Module) null, "", sQLRecoverableException0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ModuleSubscriptionException moduleSubscriptionException0 = new ModuleSubscriptionException((Module) null);
      ModuleSubscriptionException moduleSubscriptionException1 = new ModuleSubscriptionException((Module) null, moduleSubscriptionException0);
      assertFalse(moduleSubscriptionException1.equals((Object)moduleSubscriptionException0));
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:20:25 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.Range;
import weka.filters.unsupervised.attribute.FirstOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FirstOrder_ESTest extends FirstOrder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      Range range0 = new Range("Y(2y@5X");
      firstOrder0.m_DeltaCols = range0;
      String string0 = firstOrder0.getAttributeIndices();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String[] stringArray0 = new String[3];
      try { 
        firstOrder0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      try { 
        firstOrder0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "),Z3jK#I[";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "This instance filter takes a range of N numeric attributes and replaces them with N-1 numeric attributes, the values of which are the difference between consecutive attribute values from the original instance. eg: \n\nOriginal attribute values\n\n   0.1, 0.2, 0.3, 0.1, 0.3\n\nNew attribute values\n\n   0.1, 0.1, -0.2, 0.2\n\nThe range of attributes used is taken in numeric order. That is, a range spec of 7-11,3-5 will use the attribute ordering 3,4,5,7,8,9,10,11 for the differences, NOT 7,8,9,10,11,3,4,5.";
      firstOrder0.setOptions(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      // Undeclared exception!
      try { 
        firstOrder0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      Enumeration enumeration0 = firstOrder0.listOptions();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      firstOrder0.setAttributeIndices("m");
      assertTrue(firstOrder0.isNewBatch());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      FirstOrder firstOrder0 = new FirstOrder();
      String string0 = firstOrder0.getAttributeIndices();
      assertEquals("", string0);
  }
}

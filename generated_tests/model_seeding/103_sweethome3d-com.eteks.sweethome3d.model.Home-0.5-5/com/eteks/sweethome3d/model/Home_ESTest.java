/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:02:57 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.math.BigDecimal;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Home home0 = new Home();
      home0.setRecovered(true);
      boolean boolean0 = home0.isRecovered();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Home home0 = new Home(1430.1F);
      home0.setFurnitureDescendingSorted(true);
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Home home0 = new Home(0.0F);
      float float0 = home0.getWallHeight();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Home home0 = new Home((-891.95917F));
      float float0 = home0.getWallHeight();
      assertEquals((-891.95917F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 1.0F, 1.0F, 3700L, 1.0F);
      linkedList0.add(dimensionLine0);
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setModified(true);
      home0.clone();
      assertTrue(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Home home0 = new Home(1430.1F);
      home0.setFurnitureDescendingSorted(true);
      home0.clone();
      assertTrue(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Home home0 = new Home(170.0F);
      home0.setBasePlanLocked(true);
      home0.clone();
      assertTrue(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Home home0 = new Home(0.0F);
      Home home1 = home0.clone();
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Home home0 = new Home((-1636.859F));
      Home home1 = home0.clone();
      assertEquals((-1636.859F), home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setSelectedItems((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Class<Room> class0 = Room.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getLevelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Home home0 = new Home((-182.34F));
      // Undeclared exception!
      try { 
        home0.deleteDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      // Undeclared exception!
      try { 
        home0.addRoom(room0, 46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Home home0 = new Home();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) homeLight0, 10);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 10, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Home home0 = null;
      try {
        home0 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      linkedList0.add((Compass) null);
      Class<DimensionLine> class0 = DimensionLine.class;
      List<DimensionLine> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Home home0 = new Home((-1636.859F));
      Label label0 = new Label("'\"9TI,", 1580.1166F, (-100.0F));
      home0.deselectItem(label0);
      assertEquals((-1636.859F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Home home0 = new Home();
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0, 0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Home home0 = new Home(0.0F);
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, 170);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Home home0 = new Home();
      home0.getWalls();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Home home0 = new Home();
      home0.getTopCamera();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      Compass compass0 = home0.getCompass();
      linkedList0.add(compass0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      linkedList0.add((Compass) null);
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Home home0 = new Home(250.0F);
      Level level0 = new Level("", 250.0F, 250.0F, 250.0F);
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 0.0F, 0.0F, 3700L, 0.0F);
      home0.addDimensionLine(dimensionLine0);
      home0.addLevel(level0);
      // Undeclared exception!
      try { 
        home0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Home home0 = new Home(250.0F);
      Level level0 = new Level("", 250.0F, 250.0F, 250.0F);
      home0.addLevel(level0);
      Home home1 = home0.clone();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 672.8487F, 3700L, 672.8487F);
      home0.addWall(wall0);
      Home home1 = home0.clone();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Home home0 = new Home(0.0F);
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.REVERSE_LANDSCAPE;
      Float float0 = new Float((double) 0.0F);
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 3700L, 0.0F, 3700L, 0.0F, 0.0F, 1281.4135F, false, false, true, float0, "Asia/Aden", "");
      home0.setPrint(homePrint0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Home home0 = new Home(175.0F);
      home0.setPrint((HomePrint) null);
      assertEquals(175.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      
      linkedList0.add(camera0);
      home0.setStoredCameras(linkedList0);
      Home home1 = home0.clone();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      home0.setStoredCameras(linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Home home0 = new Home();
      Camera camera0 = new Camera(3700L, 100.0F, 3700L, 3700L, 3700L, 100.0F);
      home0.setCamera(camera0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Home home0 = new Home();
      home0.setCamera((Camera) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Home home0 = new Home();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BackgroundImage backgroundImage0 = new BackgroundImage(temporaryURLContent0, 3700L, 3700L, 3700L, 3700L, 594.7853F, 2413.94F, 2413.94F);
      home0.setBackgroundImage(backgroundImage0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Home home0 = new Home();
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      home0.setFurnitureVisibleProperties(linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Home home0 = new Home();
      home0.setFurnitureDescendingSorted(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Home home0 = new Home();
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Home home0 = new Home();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.TEXTURE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home0.getFurnitureSortedProperty();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Home home0 = new Home();
      home0.setRecovered(true);
      assertTrue(home0.isRecovered());
      
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Home home0 = new Home();
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Home home0 = new Home();
      home0.setModified(true);
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Home home0 = new Home();
      home0.setModified(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Home home0 = new Home();
      home0.setName("6]\"dm>{[<'T_[-");
      home0.setName("6]\"dm>{[<'T_[-");
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Home home0 = new Home();
      home0.setName((String) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }
}

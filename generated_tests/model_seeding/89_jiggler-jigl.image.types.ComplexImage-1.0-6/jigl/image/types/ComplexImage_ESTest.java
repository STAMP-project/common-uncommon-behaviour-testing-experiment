/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 15:45:40 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.HeadlessException;
import java.awt.Image;
import javax.swing.JLayeredPane;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      float float0 = (-354.848F);
      // Undeclared exception!
      try { 
        complexImage0.add((float) 5, (-1209.6F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(5, 5);
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertEquals(200, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Complex complex0 = complexImage2.max(rOI0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage2.subtract(complexImage0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      String string0 = complexImage1.toString();
      assertEquals("5:5\nnull null null null null \nnull null null null null \nnull null null null null \nnull null null null null \nnull null null null null \n5:5\nnull null null null null \nnull null null null null \nnull null null null null \nnull null null null null \nnull null null null null \n", string0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      Complex complex0 = complexImage1.min();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 513);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.divide((float) 513);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(513, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.divide((float) 0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(513, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(513, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertNotNull(realGrayImage2);
      
      complexImage0.setReal(realGrayImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(513, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(513, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(411, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1176, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(411, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1176, rOI0.X());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      int int1 = rOI0.ly();
      assertEquals(411, int1);
      assertEquals(411, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1176, rOI0.X());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage2.phaseImage();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(119, 128);
      assertEquals(128, complexImage0.Y());
      assertEquals(119, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.add((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertNotNull(complex0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(1369, (-1054), complex0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 5;
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, realGrayImage0.Y());
      assertEquals(5, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      int int1 = 2474;
      int int2 = (-16777216);
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(2474, (-16777216), (float) 2474);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(20, 20);
      assertEquals(20, complexImage0.Y());
      assertEquals(20, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(20, complexImage0.Y());
      assertEquals(20, complexImage0.X());
      assertEquals(20, complexImage1.Y());
      assertEquals(20, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ly();
      assertEquals(411, int3);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      
      int int5 = rOI0.lx();
      assertEquals(1175, int5);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int5);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int7 == int1);
      
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = 1;
      int int1 = 29;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int2 = rOI0.X();
      assertEquals(1, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.Y();
      assertEquals(1, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(29, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(5, 5, (float) 5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(1, 128, 1, (-27));
      assertEquals(156, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals((-27), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.lx());
      assertEquals(128, rOI0.ly());
      
      double double0 = complex0.real();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.real(), 0.01);
      assertEquals(9223372036854775807L, complex1.longValue());
      assertEquals(Float.POSITIVE_INFINITY, complex1.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex1.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex1.imag(), 0.01);
      assertEquals((byte) (-1), complex1.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex1.imaginary(), 0.01);
      assertEquals((short) (-1), complex1.shortValue());
      assertEquals(0.7853981633974483, complex1.arg(), 0.01);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complexImage0.max();
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0L, complex2.longValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertNotNull(complex2);
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      ROI rOI1 = null;
      int int1 = 1287;
      // Undeclared exception!
      try { 
        complexImage0.setImag(1287, 8, 1290.9415F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string0 = complexImage1.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage0.add(105.0F, 3853.382F);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage3.Y());
      assertEquals(5, complexImage3.X());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage0 = complexImage3.magnitudeImage();
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage3.Y());
      assertEquals(5, complexImage3.X());
      assertEquals(5, realGrayImage0.X());
      assertEquals(96370.305F, realGrayImage0.absSum(), 0.01F);
      assertEquals(3854.8123F, realGrayImage0.min(), 0.01F);
      assertEquals(3854.8123F, realGrayImage0.max(), 0.01F);
      assertEquals(96370.305F, realGrayImage0.addSum(), 0.01F);
      assertEquals(3.7148945E8, realGrayImage0.sqrSum(), 0.01);
      assertEquals(5, realGrayImage0.Y());
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.setImag(618, 0, 1128.04F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 618
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 122;
      int int1 = 530;
      ComplexImage complexImage0 = new ComplexImage(122, 530);
      assertEquals(530, complexImage0.Y());
      assertEquals(122, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(122, 530);
      assertEquals(530, complexImage0.Y());
      assertEquals(122, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertNotNull(complex0);
      
      int int0 = 0;
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 122, (float) 530, (float) 0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(530, complexImage0.Y());
      assertEquals(122, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(122, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(530, complexImage0.Y());
      assertEquals(122, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(122, complexImage1.Y());
      assertEquals(122, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.addbuffer(0, 0, 0.0F, (float) 530);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(530, complexImage0.Y());
      assertEquals(122, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage2.addbuffer(0, 0, 0, 0, (float) 0, (float) 0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(530, complexImage0.Y());
      assertEquals(122, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = complex1.sin();
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(-0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(-0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      double double0 = complex1.magnitude();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      
      // Undeclared exception!
      complexImage0.clear(complex1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(411, rOI0.ly());
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = new Integer(0);
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(411, rOI0.ly());
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(411, rOI0.ly());
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ly();
      assertEquals(411, int3);
      assertEquals(411, rOI0.ly());
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      RealGrayImage realGrayImage0 = complexImage2.magnitudeImage();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(15, realGrayImage0.X());
      assertEquals(15, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage1.multiply((-4956), 18, (float) (-4956), (-2623.78F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      
      String string0 = complexImage1.toString(rOI0);
      assertEquals("5:5\nnull \n5:5\nnull \n", string0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string1 = complexImage2.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(string1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(string1.equals((Object)string0));
      
      complexImage2.subtract(complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage1.addbuffer(918, 5, (-1), (-4020), (float) 918, (float) 5);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(918, complexImage3.X());
      assertEquals(5, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      Complex complex0 = complexImage1.min();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage3.X());
      assertEquals(5, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      complexImage1.add(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string0 = complexImage2.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage1.divide(0.0F, (float) 5);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage3.Y());
      assertEquals(5, complexImage3.X());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      complexImage0.add(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage3.Y());
      assertEquals(5, complexImage3.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(11, 11);
      assertEquals(11, complexImage0.Y());
      assertEquals(11, complexImage0.X());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals(11, complexImage0.Y());
      assertEquals(11, complexImage0.X());
      assertNotNull(string0);
      
      Complex complex0 = new Complex();
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      double double0 = complex1.real();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex1.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(2, (-16777216));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      Complex complex1 = complex0.unit();
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex1.magnitude(), 0.01);
      assertEquals(Float.NaN, complex1.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.imaginary(), 0.01);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      // Undeclared exception!
      try { 
        complexImage0.divide(2517.0676F, 2517.0676F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 5;
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      float float0 = (-354.848F);
      // Undeclared exception!
      try { 
        complexImage0.add(1.0F, 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(11, 11);
      assertEquals(11, complexImage0.X());
      assertEquals(11, complexImage0.Y());
      assertNotNull(complexImage0);
      
      float float0 = 1.0F;
      String string0 = complexImage0.toString();
      assertEquals(11, complexImage0.X());
      assertEquals(11, complexImage0.Y());
      assertNotNull(string0);
      
      float float1 = 2494.1853F;
      Complex complex0 = new Complex();
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      Complex complex1 = new Complex(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      double double0 = complex1.real();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex1.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(11, 11, complex1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      
      Integer integer1 = new Integer((int) integer0);
      assertEquals(5, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      
      ComplexImage complexImage3 = complexImage0.diff(complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage3.X());
      assertEquals(5, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      String string0 = complexImage3.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage3.X());
      assertEquals(5, complexImage3.Y());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.setImag(5, 5, (-1618.3696F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(3646, 3646, (float) 3646, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 4116;
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = new Integer(4116);
      assertEquals(4116, int1);
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(4116, 4898, (float) 4898, 1534.1431F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.set((-16777216), 1036, 0.0F, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(1, 0, (-868), 9);
      assertEquals((-868), rOI0.ux());
      assertEquals(1, rOI0.lx());
      assertEquals(870, rOI0.X());
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(9, rOI0.ly());
      
      rOI0.setROI(9, 9, 9, 0);
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(9, rOI0.lx());
      assertEquals(9, rOI0.ly());
      assertEquals(9, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.Y();
      assertEquals(10, int0);
      assertEquals(10, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(9, rOI0.lx());
      assertEquals(9, rOI0.ly());
      assertEquals(9, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-16777216), (-4521), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = new RealGrayImage(0, 513);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = realGrayImage0.divide((float) 513);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(513, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertNotNull(realGrayImage1);
      
      RealGrayImage realGrayImage2 = realGrayImage1.divide((float) 0);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(513, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(513, realGrayImage2.Y());
      assertNotNull(realGrayImage2);
      
      complexImage0.setImag(realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(513, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(513, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(513, realGrayImage2.Y());
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI((-707), 2213, (-2701), (-707));
      assertEquals((-707), rOI0.lx());
      assertEquals(1995, rOI0.X());
      assertEquals(2213, rOI0.ly());
      assertEquals(2921, rOI0.Y());
      assertEquals((-707), rOI0.uy());
      assertEquals((-2701), rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1995, int0);
      assertEquals((-707), rOI0.lx());
      assertEquals(1995, rOI0.X());
      assertEquals(2213, rOI0.ly());
      assertEquals(2921, rOI0.Y());
      assertEquals((-707), rOI0.uy());
      assertEquals((-2701), rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(2921, int1);
      assertEquals((-707), rOI0.lx());
      assertEquals(1995, rOI0.X());
      assertEquals(2213, rOI0.ly());
      assertEquals(2921, rOI0.Y());
      assertEquals((-707), rOI0.uy());
      assertEquals((-2701), rOI0.ux());
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1995, 1617, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string0 = complexImage2.toString();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage2.add(3906.1218F, 3906.1218F);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage3.X());
      assertEquals(15, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      
      Complex complex0 = complexImage1.max(rOI0);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((byte) (-108), complex0.byteValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(5524, complex0.intValue());
      assertEquals(5524L, complex0.longValue());
      assertEquals(5524.0903F, complex0.floatValue(), 0.01F);
      assertEquals(5524.09051337865, complex0.magnitude(), 0.01);
      assertEquals(5524.09051337865, complex0.doubleValue(), 0.01);
      assertEquals(3906.121826171875, complex0.imaginary(), 0.01);
      assertEquals((short)5524, complex0.shortValue());
      assertEquals(3906.121826171875, complex0.imag(), 0.01);
      assertEquals(3906.121826171875, complex0.real(), 0.01);
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      
      // Undeclared exception!
      try { 
        complexImage1.add(16, 16, (-2250.7832F), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = complexImage0.Y();
      assertEquals(1, int0);
      assertEquals(0, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      Complex complex0 = complexImage1.min();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(0, rOI0.uy());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      
      Complex complex1 = new Complex();
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      
      double double0 = complex1.real();
      assertEquals(0.0, double0, 0.01);
      assertNotSame(complex1, complex0);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      complexImage0.set(0, 0, complex1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string0 = complexImage2.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage0.divide((-593.0F), (float) 5);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage3.X());
      assertEquals(5, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      ComplexImage complexImage4 = complexImage2.multiply(32767.0F, 4442.91F);
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage3);
      assertSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage4.X());
      assertEquals(5, complexImage4.Y());
      assertNotNull(complexImage4);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage1));
      
      ComplexImage complexImage5 = complexImage1.divide((-100.749F), 0.0F);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage5);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage5);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage5, complexImage0);
      assertNotSame(complexImage5, complexImage4);
      assertNotSame(complexImage5, complexImage2);
      assertSame(complexImage5, complexImage1);
      assertNotSame(complexImage5, complexImage3);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage5.Y());
      assertEquals(5, complexImage5.X());
      assertNotNull(complexImage5);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage0));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertFalse(complexImage5.equals((Object)complexImage3));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(308, 308);
      assertEquals(308, complexImage0.Y());
      assertEquals(308, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(308, (-727), 1177.6F, 1.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string0 = complexImage2.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string1 = complexImage0.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(string1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertTrue(string1.equals((Object)string0));
      
      complexImage2.subtract(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage1.addbuffer(1, 255, (-205), (-731), (float) (-731), (float) 255);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.get(1369, 1369);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ly();
      assertEquals(411, int3);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.lx();
      assertEquals(1175, int5);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(1176, rOI0.X());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(411, rOI0.ly());
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int1);
      assertFalse(int7 == int5);
      assertTrue(int7 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertNotNull(complex0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = 341;
      rOI0.setROI(341, 341, 0, 1175);
      assertEquals(835, rOI0.Y());
      assertEquals(342, rOI0.X());
      assertEquals(341, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.ly());
      assertEquals(341, rOI0.uy());
      
      int int1 = (-838);
      int int2 = 411;
      // Undeclared exception!
      try { 
        complexImage0.set(0, 411, 647.83F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertNotNull(realGrayImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1220, 0, 0, 411);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ly();
      assertEquals(411, int3);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = rOI0.lx();
      assertEquals(1220, int5);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertTrue(int6 == int0);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertFalse(int7 == int3);
      assertTrue(int7 == int1);
      assertFalse(int7 == int5);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertFalse(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertFalse(int8 == int3);
      
      int int9 = rOI0.uy();
      assertEquals(0, int9);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertTrue(int9 == int4);
      assertTrue(int9 == int8);
      assertTrue(int9 == int6);
      assertTrue(int9 == int2);
      assertFalse(int9 == int5);
      assertTrue(int9 == int1);
      assertFalse(int9 == int3);
      assertTrue(int9 == int7);
      assertTrue(int9 == int0);
      
      int int10 = rOI0.ly();
      assertEquals(411, int10);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertFalse(int10 == int0);
      assertFalse(int10 == int1);
      assertFalse(int10 == int4);
      assertTrue(int10 == int3);
      assertFalse(int10 == int2);
      assertFalse(int10 == int8);
      assertFalse(int10 == int6);
      assertFalse(int10 == int7);
      assertFalse(int10 == int9);
      assertFalse(int10 == int5);
      
      int int11 = rOI0.ux();
      assertEquals(0, int11);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertTrue(int11 == int7);
      assertTrue(int11 == int9);
      assertFalse(int11 == int3);
      assertFalse(int11 == int5);
      assertTrue(int11 == int0);
      assertTrue(int11 == int1);
      assertTrue(int11 == int6);
      assertFalse(int11 == int10);
      assertTrue(int11 == int4);
      assertTrue(int11 == int2);
      assertTrue(int11 == int8);
      
      int int12 = rOI0.ux();
      assertEquals(0, int12);
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(411, rOI0.ly());
      assertEquals(1221, rOI0.X());
      assertEquals(1220, rOI0.lx());
      assertFalse(int12 == int10);
      assertTrue(int12 == int2);
      assertTrue(int12 == int8);
      assertTrue(int12 == int4);
      assertTrue(int12 == int11);
      assertFalse(int12 == int5);
      assertTrue(int12 == int0);
      assertTrue(int12 == int6);
      assertTrue(int12 == int7);
      assertTrue(int12 == int9);
      assertFalse(int12 == int3);
      assertTrue(int12 == int1);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int13 = rOI1.X();
      assertEquals(1, int13);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(int13 == int8);
      assertFalse(int13 == int5);
      assertFalse(int13 == int9);
      assertFalse(int13 == int11);
      assertFalse(int13 == int4);
      assertFalse(int13 == int2);
      assertFalse(int13 == int1);
      assertFalse(int13 == int3);
      assertFalse(int13 == int7);
      assertFalse(int13 == int12);
      assertFalse(int13 == int6);
      assertFalse(int13 == int0);
      assertFalse(int13 == int10);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int14 = rOI1.Y();
      assertEquals(1, int14);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(int14 == int2);
      assertFalse(int14 == int4);
      assertFalse(int14 == int1);
      assertFalse(int14 == int0);
      assertFalse(int14 == int8);
      assertFalse(int14 == int11);
      assertFalse(int14 == int5);
      assertTrue(int14 == int13);
      assertFalse(int14 == int3);
      assertFalse(int14 == int6);
      assertFalse(int14 == int7);
      assertFalse(int14 == int12);
      assertFalse(int14 == int9);
      assertFalse(int14 == int10);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      rOI1.setROI(1218, 264, 119, 1687);
      assertNotSame(rOI1, rOI0);
      assertEquals(1100, rOI1.X());
      assertEquals(1687, rOI1.ly());
      assertEquals(119, rOI1.ux());
      assertEquals(1424, rOI1.Y());
      assertEquals(1218, rOI1.lx());
      assertEquals(264, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.divide(411, 3, (-1938.51F), (float) 411, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      String string0 = complexImage0.toString();
      assertEquals("0:0\n0:0\n", string0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(string0);
      
      int int0 = 0;
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(1176, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(411, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertEquals(0, int1);
      assertEquals(1176, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(411, rOI0.ly());
      assertTrue(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(1176, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(411, rOI0.ly());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI0.ly();
      assertEquals(411, int3);
      assertEquals(1176, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(411, rOI0.ly());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(1176, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(411, rOI0.ly());
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      
      int int5 = rOI0.lx();
      assertEquals(1175, int5);
      assertEquals(1176, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(411, rOI0.ly());
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(1176, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(412, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(411, rOI0.ly());
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      
      rOI0.setROI(0, 341, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(341, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(342, rOI0.Y());
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(341, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(342, rOI0.Y());
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertFalse(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertFalse(int7 == int5);
      assertTrue(int7 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.add(255, (-510), (float) (-510), (-3292.0908F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -510
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertNotNull(complex0);
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNull(realGrayImage0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3, 3);
      assertEquals(3, complexImage0.X());
      assertEquals(3, complexImage0.Y());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      complexImage0.addbuffer(3, 3204, 51, 1, (-1260.8185F), (float) 1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        complexImage0.get((-2005), (-2005));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, int0);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      
      int int1 = rOI0.ux();
      assertEquals(0, int1);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertTrue(int1 == int0);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = rOI0.ly();
      assertEquals(411, int3);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.ux();
      assertEquals(0, int4);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      
      int int5 = rOI0.lx();
      assertEquals(1175, int5);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      
      int int6 = rOI0.ux();
      assertEquals(0, int6);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int5);
      assertTrue(int6 == int0);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(411, rOI0.ly());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertFalse(int7 == int3);
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(2, (-1), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertNotNull(realGrayImage0);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      complexImage0.setImag(realGrayImage0);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(94, 94, (float) 94);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      Complex complex0 = complexImage0.min();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertNotNull(complex0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotNull(realGrayImage0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int1 = 128;
      rOI0.setROI(1, 128, 341, 0);
      assertEquals(341, rOI0.X());
      assertEquals(128, rOI0.ly());
      assertEquals(129, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(341, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertEquals(129, int2);
      assertEquals(341, rOI0.X());
      assertEquals(128, rOI0.ly());
      assertEquals(129, rOI0.Y());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(341, rOI0.lx());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        complexImage0.divide(2517.0676F, 2517.0676F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = 5;
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.diff(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertNotNull(complexImage0);
      
      complexImage0.add((ComplexImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertNotNull(complexImage0);
      
      int int0 = 411;
      ROI rOI0 = new ROI(1175, 0, 0, 411);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertEquals(0, int1);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertFalse(int1 == int0);
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = rOI0.uy();
      assertEquals(0, int3);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = rOI0.ly();
      assertEquals(411, int4);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      
      int int5 = rOI0.ux();
      assertEquals(0, int5);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      
      int int6 = rOI0.lx();
      assertEquals(1175, int6);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      
      int int7 = rOI0.ux();
      assertEquals(0, int7);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertTrue(int7 == int1);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      
      int int8 = rOI0.ux();
      assertEquals(0, int8);
      assertEquals(0, rOI0.ux());
      assertEquals(1175, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(412, rOI0.Y());
      assertEquals(1176, rOI0.X());
      assertEquals(411, rOI0.ly());
      assertTrue(int8 == int5);
      assertFalse(int8 == int0);
      assertTrue(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.X();
      assertEquals(1, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.Y();
      assertEquals(1, int1);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      
      Complex complex0 = complexImage2.max(rOI0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      String string0 = complexImage2.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage1.divide(0.0F, (float) 5);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage3.Y());
      assertEquals(5, complexImage3.X());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      float float0 = 32767.0F;
      ComplexImage complexImage4 = complexImage0.multiply((float) 5, 32767.0F);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage4, complexImage1);
      assertSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage4.Y());
      assertEquals(5, complexImage4.X());
      assertNotNull(complexImage4);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int2 = rOI1.X();
      assertEquals(1, int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = rOI1.Y();
      assertEquals(1, int3);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      rOI1.setROI(1, 1, (-213), 3380);
      assertNotSame(rOI1, rOI0);
      assertEquals(215, rOI1.X());
      assertEquals(3380, rOI1.ly());
      assertEquals((-213), rOI1.ux());
      assertEquals(1, rOI1.uy());
      assertEquals(1, rOI1.lx());
      assertEquals(3380, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      float float1 = (-960.1422F);
      // Undeclared exception!
      try { 
        complexImage0.divide((-911), 1, (-1.0F), (-960.1422F), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotNull(realGrayImage0);
      
      rOI0.setROI(9, (-16777216), (-16777216), (-16777216));
      assertEquals(1, rOI0.Y());
      assertEquals(9, rOI0.lx());
      assertEquals(16777226, rOI0.X());
      assertEquals((-16777216), rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      assertEquals((-16777216), rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-16777216), (-4521), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5, 5);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertNotNull(complexImage0);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      Complex complex0 = complexImage1.max();
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertNotNull(complex0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      String string0 = complexImage2.toString();
      assertEquals("5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n5:5\n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n0.0 0.0 0.0 0.0 0.0 \n", string0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertNotNull(string0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      Integer integer1 = new Integer(5);
      assertEquals(5, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      int int0 = rOI0.Y();
      assertEquals(1, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      complexImage2.add(complexImage1, rOI0, rOI0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage1.Y());
      assertEquals(5, complexImage1.X());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      int int1 = (-1);
      ComplexImage complexImage3 = complexImage2.diff(complexImage0);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertEquals(5, complexImage0.X());
      assertEquals(5, complexImage0.Y());
      assertEquals(5, complexImage2.Y());
      assertEquals(5, complexImage2.X());
      assertEquals(5, complexImage3.Y());
      assertEquals(5, complexImage3.X());
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.getReal(1, (-1), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:25:04 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxULSymbol;
import jahuwaldt.plot.BoxURSymbol;
import jahuwaldt.plot.PlotDatum;
import jahuwaldt.plot.PlotRun;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.RTriangle4Symbol;
import jahuwaldt.plot.SquareSymbol;
import jahuwaldt.plot.TabLSymbol;
import java.awt.Color;
import java.awt.SystemColor;
import java.util.Calendar;
import java.util.Collection;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PlotRun_ESTest extends PlotRun_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[2];
      PlotDatum plotDatum0 = new PlotDatum(4765.106, 4765.106, false);
      plotDatumArray0[0] = plotDatum0;
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      SystemColor systemColor0 = SystemColor.menuText;
      // Undeclared exception!
      try { 
        plotRun0.setLineColor(systemColor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      int int0 = plotRun0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      int int0 = plotRun0.size();
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[3];
      BoxURSymbol boxURSymbol0 = new BoxURSymbol();
      PlotDatum plotDatum0 = new PlotDatum((-1910.09), 2693.078837907625, true, boxURSymbol0);
      plotDatumArray0[0] = plotDatum0;
      plotDatumArray0[1] = plotDatumArray0[0];
      plotDatumArray0[2] = plotDatumArray0[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      Object object0 = plotRun0.set(2, (Object) null);
      assertSame(object0, plotDatum0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.add(0, (Object) null);
      Object object0 = plotRun0.remove(0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, tabLSymbol0);
      plotRun0.iterator();
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      double double0 = plotRun0.getMinY();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2166.08238725367);
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      double double0 = plotRun0.getMinY();
      assertEquals((-2166.08238725367), double0, 0.01);
      assertEquals(3, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      double double0 = plotRun0.getMinX();
      assertEquals(1.7976931348623157E308, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2166.08238725367);
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      double double0 = plotRun0.getMinX();
      assertEquals((-2166.08238725367), double0, 0.01);
      assertEquals(3, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SquareSymbol squareSymbol0 = new SquareSymbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, squareSymbol0);
      PlotDatum plotDatum0 = (PlotDatum)plotRun0.get(0);
      assertFalse(plotDatum0.connected());
      assertEquals(4, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.set((-1556), plotRun0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // jahuwaldt.plot.PlotRun cannot be cast to jahuwaldt.plot.PlotDatum
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.set((-1556), (Object) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      plotRun0.clear();
      // Undeclared exception!
      try { 
        plotRun0.remove(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.remove((-1720));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRun0.getMinX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRun0.getMaxY();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PlotDatum[] plotDatumArray0 = new PlotDatum[1];
      PlotRun plotRun0 = new PlotRun(plotDatumArray0);
      // Undeclared exception!
      try { 
        plotRun0.getMaxX();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.get((-101));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.add(2048, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2048, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.add((-1883), (Object) ")+KU%gq~04ZeDyyRx~");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to jahuwaldt.plot.PlotDatum
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((PlotDatum[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((Collection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, (PlotSymbol) null);
      PlotRun plotRun1 = (PlotRun)plotRun0.clone();
      assertEquals(1, plotRun0.size());
      assertEquals(1, plotRun1.size());
      assertNotSame(plotRun1, plotRun0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      Color color0 = Color.darkGray;
      plotRun0.setLineColor(color0);
      assertEquals((-12566464), color0.getRGB());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      plotRun0.setPlotSymbol(rTriangle4Symbol0);
      assertEquals(3, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      double double0 = plotRun0.getMaxY();
      assertEquals(4, plotRun0.size());
      assertEquals(4.9E-324, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, (PlotSymbol) null);
      double double0 = plotRun0.getMinY();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      double double0 = plotRun0.getMaxX();
      assertEquals(4.9E-324, double0, 0.01);
      assertEquals(4, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      double double0 = plotRun0.getMinX();
      assertEquals(4, plotRun0.size());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Vector<PlotDatum> vector0 = new Vector<PlotDatum>();
      PlotDatum plotDatum0 = new PlotDatum(4765.106, 4765.106, false);
      vector0.add(plotDatum0);
      PlotRun plotRun0 = new PlotRun(vector0);
      assertEquals(1, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      PlotRun plotRun1 = new PlotRun(plotRun0);
      assertEquals(0, plotRun1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Set<String> set0 = Calendar.getAvailableCalendarTypes();
      PlotRun plotRun0 = new PlotRun(set0);
      // Undeclared exception!
      try { 
        plotRun0.get(2541);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2541, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      double[] doubleArray1 = new double[1];
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun(doubleArray0, doubleArray1, false, rTriangle4Symbol0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun(doubleArray0, (double[]) null, true, (PlotSymbol) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      PlotRun plotRun0 = null;
      try {
        plotRun0 = new PlotRun((double[]) null, (double[]) null, true, boxULSymbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      PlotRun plotRun0 = new PlotRun(doubleArray0, doubleArray0, false, rTriangle4Symbol0);
      plotRun0.remove(1);
      assertEquals(3, plotRun0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      plotRun0.add((Object) null);
      // Undeclared exception!
      try { 
        plotRun0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.PlotRun", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PlotRun plotRun0 = new PlotRun();
      // Undeclared exception!
      try { 
        plotRun0.set(45, (Object) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 45, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}

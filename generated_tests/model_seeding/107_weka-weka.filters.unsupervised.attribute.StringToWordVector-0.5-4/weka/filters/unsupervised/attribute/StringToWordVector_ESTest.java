/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 18:21:46 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Tag;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.StringToWordVector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringToWordVector_ESTest extends StringToWordVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      try { 
        stringToWordVector0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.StringToWordVector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.getDoNotOperateOnPerClassBasis();
      stringToWordVector0.globalInfo();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      Tag[] tagArray0 = new Tag[1];
      StringToWordVector stringToWordVector1 = new StringToWordVector(0);
      SelectedTag selectedTag0 = stringToWordVector1.getNormalizeDocLength();
      Tag tag0 = selectedTag0.getSelectedTag();
      tagArray0[0] = tag0;
      SelectedTag selectedTag1 = null;
      try {
        selectedTag1 = new SelectedTag("3LH", tagArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Selected tag is not valid
         //
         verifyException("weka.core.SelectedTag", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector((-336));
      stringToWordVector0.outputWordCountsTipText();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      // Undeclared exception!
      try { 
        stringToWordVector0.setInputFormat((Instances) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.getInvertSelection();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.isMissing(2896);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=nm8&f");
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.IDFTransformTipText();
      System.setCurrentTimeMillis(2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.setOutputWordCounts(true);
      String[] stringArray0 = stringToWordVector0.getOptions();
      stringToWordVector0.setOptions(stringArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.getTFTransform();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.setSelectedRange("C");
      stringToWordVector0.getRevision();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      Filter.runFilter((Filter) null, (String[]) null);
      nGramTokenizer0.tokenize("\nTrain and test folds for 3-fold CV:");
      nGramTokenizer0.setNGramMaxSize(0);
      nGramTokenizer0.hasMoreElements();
      nGramTokenizer0.nextElement();
      stringToWordVector0.setTokenizer(nGramTokenizer0);
      stringToWordVector0.setLowerCaseTokens(true);
      stringToWordVector0.outputWordCountsTipText();
      // Undeclared exception!
      try { 
        stringToWordVector0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.getStopwords();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      int[] intArray0 = new int[0];
      stringToWordVector0.setAttributeIndicesArray(intArray0);
      stringToWordVector0.isFirstBatchDone();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      // Undeclared exception!
      try { 
        stringToWordVector0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.setInvertSelection(true);
      // Undeclared exception!
      try { 
        stringToWordVector0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = StringToWordVector.FILTER_NORMALIZE_ALL;
      StringToWordVector stringToWordVector0 = new StringToWordVector(125);
      stringToWordVector0.normalizeDocLengthTipText();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-class-values");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-class-values";
      stringArray0[1] = "-class-values";
      stringArray0[2] = "-class-values";
      stringArray0[3] = "uBH-5V A<E^&?";
      stringArray0[4] = "-class-values";
      stringArray0[5] = "-class-values";
      stringArray0[6] = "-class-values";
      stringArray0[7] = "-class-values";
      stringToWordVector0.setOptions(stringArray0);
      stringToWordVector0.setUseStoplist(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringToWordVector0.setPeriodicPruning(0.0);
      stringToWordVector0.setMinTermFreq(264);
      stringToWordVector0.getAttributeNamePrefix();
      Filter.makeCopies(stringToWordVector0, 976);
      stringToWordVector0.getWordsToKeep();
      stringToWordVector0.getRevision();
      stringToWordVector0.invertSelectionTipText();
      stringToWordVector0.getPeriodicPruning();
      stringToWordVector0.getNormalizeDocLength();
      stringToWordVector0.getOptions();
      stringToWordVector0.getAttributeIndices();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringToWordVector stringToWordVector0 = new StringToWordVector();
      stringToWordVector0.getUseStoplist();
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 14:38:23 GMT 2019
 */

package net.sourceforge.squirrel_sql.fw.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.sourceforge.squirrel_sql.fw.id.IHasIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.util.ObjectCache;
import net.sourceforge.squirrel_sql.fw.util.ObjectCacheChangeEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ObjectCacheChangeEvent_ESTest extends ObjectCacheChangeEvent_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ObjectCacheChangeEvent<DatabaseObjectType> objectCacheChangeEvent0 = null;
      try {
        objectCacheChangeEvent0 = new ObjectCacheChangeEvent<DatabaseObjectType>((ObjectCache<DatabaseObjectType>) null, (IHasIdentifier) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ObjectCache<DatabaseObjectType> objectCache0 = new ObjectCache<DatabaseObjectType>();
      ObjectCacheChangeEvent<DatabaseObjectType> objectCacheChangeEvent0 = new ObjectCacheChangeEvent<DatabaseObjectType>(objectCache0, (IHasIdentifier) null);
      IHasIdentifier iHasIdentifier0 = objectCacheChangeEvent0.getObject();
      assertNull(iHasIdentifier0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ObjectCache<DatabaseObjectType> objectCache0 = new ObjectCache<DatabaseObjectType>();
      ObjectCacheChangeEvent<DatabaseObjectType> objectCacheChangeEvent0 = new ObjectCacheChangeEvent<DatabaseObjectType>(objectCache0, (IHasIdentifier) null);
      ObjectCache<DatabaseObjectType> objectCache1 = objectCacheChangeEvent0.getObjectCache();
      assertSame(objectCache1, objectCache0);
  }
}

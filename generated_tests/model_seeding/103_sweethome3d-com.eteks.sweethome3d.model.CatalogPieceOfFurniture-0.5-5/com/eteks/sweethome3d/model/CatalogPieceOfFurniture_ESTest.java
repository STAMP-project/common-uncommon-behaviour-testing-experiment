/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:03:11 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.math.BigDecimal;
import java.net.URL;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CatalogPieceOfFurniture_ESTest extends CatalogPieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "[W;,At=fc^i5WM", "[W;,At=fc^i5WM", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 1329.44F, 0L, true, "[W;,At=fc^i5WM", (float[][]) null, "", false, true, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("4@w", (Content) null, (Content) null, 756.636F, 0.0F, 0.0F, true, false);
      assertNotNull(catalogPieceOfFurniture1);
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals(756.636F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getId());
      assertEquals("4@w", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isResizable());
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      
      int int0 = catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      assertEquals((-1), int0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertEquals(756.636F, catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getColor());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getId());
      assertEquals("4@w", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isResizable());
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("s%", "[W;,At=fc^i5WM", "E<Tz", (Content) null, (Content) null, 0.0F, 0.0F, 0.3926991F, 788.5F, true, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("E<Tz", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("s%", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals(788.5F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 0L, 0.0F, 0L, 0.0F, true, true, (float[][]) null, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("[W;,At=fc^i5WM", "[W;,At=fc^i5WM", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, (Content) null, 1329.44F, 0.0F, 0L, 1329.44F, false, (float[][]) null, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", true, true, false, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isTexturable();
      assertFalse(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-1.0F), (-1.0F), (-1.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      boolean boolean0 = catalogPieceOfFurniture0.isResizable();
      assertTrue(boolean0);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      Integer integer0 = new Integer((-438));
      assertEquals((-438), (int)integer0);
      assertNotNull(integer0);
      
      float[][] floatArray0 = new float[6][8];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("pS3w", resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 0.0F, false, "", integer0, floatArray0, false, 0.0F, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-438), (int)catalogPieceOfFurniture0.getColor());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("pS3w", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = catalogPieceOfFurniture0.isProportional();
      assertFalse(boolean0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-438), (int)catalogPieceOfFurniture0.getColor());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("pS3w", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      Integer integer0 = new Integer((-1237));
      assertEquals((-1237), (int)integer0);
      assertNotNull(integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, resourceURLContent0, resourceURLContent0, (-2375.09F), 0.0F, 2487.35F, 0.0F, false, (String) null, integer0, (float[][]) null, false, 0.0F, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1237), (int)catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2375.09F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(2487.35F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertFalse(boolean0);
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1237), (int)catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-2375.09F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(2487.35F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "[W;,At=fc^i5WM", "[W;,At=fc^i5WM", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 1329.44F, 0L, false, "[W;,At=fc^i5WM", (float[][]) null, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", false, true, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isModifiable();
      assertFalse(boolean0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "[W;,At=fc^i5WM", "[W;,At=fc^i5WM", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 1329.44F, 0L, true, "[W;,At=fc^i5WM", (float[][]) null, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", false, true, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      
      boolean boolean0 = catalogPieceOfFurniture0.isDeformable();
      assertTrue(boolean0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-413));
      assertEquals((-413), (int)integer0);
      assertNotNull(integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.0F, (-660.64F), (-1095.25F), 308.92F, false, true, integer0, (float[][]) null, true, (-554.2082F), true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-660.64F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1095.25F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-413), (int)catalogPieceOfFurniture0.getColor());
      assertEquals((-554.2082F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(308.92F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isBackFaceShown();
      assertTrue(boolean0);
      assertEquals((-660.64F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1095.25F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-413), (int)catalogPieceOfFurniture0.getColor());
      assertEquals((-554.2082F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(308.92F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "[W;,At=fc^i5WM", "[W;,At=fc^i5WM", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 1329.44F, 0L, false, "[W;,At=fc^i5WM", (float[][]) null, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", false, true, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("}g}48GBS~/p9:", temporaryURLContent0, temporaryURLContent0, (-337.7F), 1.0F, 0.0F, true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-337.7F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("}g}48GBS~/p9:", catalogPieceOfFurniture0.getName());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertEquals((-337.7F), float0, 0.01F);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-337.7F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("}g}48GBS~/p9:", catalogPieceOfFurniture0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 0.0F, 0.0F, (-1408.47F), true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1408.47F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      BigDecimal bigDecimal0 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNull(bigDecimal0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1408.47F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1329.44F);
      assertNotNull(bigDecimal0);
      assertEquals((byte)49, bigDecimal0.byteValue());
      assertEquals((short)1329, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("[W;,At=fc^i5WM", "M:", "", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 61.7F, 1329.44F, true, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, (String) null);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)49, bigDecimal0.byteValue());
      assertEquals((short)1329, bigDecimal0.shortValue());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal1);
      assertEquals((byte)49, bigDecimal0.byteValue());
      assertEquals((short)1329, bigDecimal0.shortValue());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((byte)49, bigDecimal1.byteValue());
      assertEquals((short)1329, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      BigDecimal bigDecimal1 = new BigDecimal((-957.438723));
      assertNotNull(bigDecimal1);
      assertEquals((short) (-957), bigDecimal1.shortValue());
      assertEquals((byte)67, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "[W;,At=fc^i5WM", "[W;,At=fc^i5WM", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 1329.44F, 0L, true, "[W;,At=fc^i5WM", (float[][]) null, "", false, true, true, bigDecimal0, bigDecimal1, "");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short) (-957), bigDecimal1.shortValue());
      assertEquals((byte)67, bigDecimal1.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      BigDecimal bigDecimal2 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal2);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short) (-957), bigDecimal1.shortValue());
      assertEquals((byte)67, bigDecimal1.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals((byte)67, bigDecimal2.byteValue());
      assertEquals((short) (-957), bigDecimal2.shortValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2319.4F));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-15), bigDecimal0.byteValue());
      assertEquals((short) (-2319), bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("[W;,At=fc^i5WM", "M:", "", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 61.7F, (-2319.4F), true, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, (String) null);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte) (-15), bigDecimal0.byteValue());
      assertEquals((short) (-2319), bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertEquals((-2319.4F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal1);
      assertEquals((byte) (-15), bigDecimal0.byteValue());
      assertEquals((short) (-2319), bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertEquals((-2319.4F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((short) (-2319), bigDecimal1.shortValue());
      assertEquals((byte) (-15), bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Long long0 = Long.valueOf((-3255L));
      assertEquals((-3255L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((double) (-3255L));
      assertEquals((-3255.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = new float[6][1];
      float[] floatArray1 = new float[5];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal(876);
      assertNotNull(bigDecimal0);
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertEquals((short)876, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("user.home", "E,_", "Linux", "E,_", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 0.0F, (-3255L), 0.0F, (-1748.7018F), true, (String) null, floatArray0, "Linux", true, true, true, bigDecimal0, bigDecimal0, "N");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertEquals((short)876, bigDecimal0.shortValue());
      assertEquals("N", catalogPieceOfFurniture0.getCurrency());
      assertEquals((-3255.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1748.7018F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-3255L), (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("E,_", catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("Linux", catalogPieceOfFurniture0.getDescription());
      assertEquals("Linux", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-3255.0F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("E,_", catalogPieceOfFurniture0.getName());
      assertEquals("user.home", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1, stringArray0.length);
      assertEquals(6, floatArray0.length);
      
      String[] stringArray1 = catalogPieceOfFurniture0.getTags();
      assertNotNull(stringArray1);
      assertEquals((byte)108, bigDecimal0.byteValue());
      assertEquals((short)876, bigDecimal0.shortValue());
      assertEquals("N", catalogPieceOfFurniture0.getCurrency());
      assertEquals((-3255.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1748.7018F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-3255L), (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("E,_", catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("Linux", catalogPieceOfFurniture0.getDescription());
      assertEquals("Linux", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-3255.0F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("E,_", catalogPieceOfFurniture0.getName());
      assertEquals("user.home", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertSame(stringArray0, stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(6, floatArray0.length);
      assertEquals(1, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 0.0F, 0.0F, (-1408.47F), true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-1408.47F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      String string0 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNull(string0);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-1408.47F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Integer integer0 = new Integer(378);
      assertEquals(378, (int)integer0);
      assertNotNull(integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, true, "", integer0, (float[][]) null, false, 0.0F, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(378, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      
      String string0 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(378, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CaTalogPieceOfFurntue", (Content) null, (Content) null, (-0.72806907F), (-0.72806907F), (-0.72806907F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-0.72806907F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("com.eteks.sweethome3d.model.CaTalogPieceOfFurntue", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-0.72806907F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-0.72806907F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      
      BigDecimal bigDecimal0 = catalogPieceOfFurniture0.getPrice();
      assertNull(bigDecimal0);
      assertEquals((-0.72806907F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("com.eteks.sweethome3d.model.CaTalogPieceOfFurntue", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-0.72806907F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-0.72806907F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(1329.44F);
      assertNotNull(bigDecimal0);
      assertEquals((byte)49, bigDecimal0.byteValue());
      assertEquals((short)1329, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("[W;,At=fc^i5WM", "M:", "", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 61.7F, 1329.44F, true, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, (String) null);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)49, bigDecimal0.byteValue());
      assertEquals((short)1329, bigDecimal0.shortValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNotNull(bigDecimal1);
      assertEquals((byte)49, bigDecimal0.byteValue());
      assertEquals((short)1329, bigDecimal0.shortValue());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((byte)49, bigDecimal1.byteValue());
      assertEquals((short)1329, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-2319.4F));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-15), bigDecimal0.byteValue());
      assertEquals((short) (-2319), bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("[W;,At=fc^i5WM", "M:", "", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 61.7F, (-2319.4F), true, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0, (String) null);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte) (-15), bigDecimal0.byteValue());
      assertEquals((short) (-2319), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertEquals((-2319.4F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNotNull(bigDecimal1);
      assertEquals((byte) (-15), bigDecimal0.byteValue());
      assertEquals((short) (-2319), bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(61.7F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getId());
      assertEquals((-2319.4F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals("M:", catalogPieceOfFurniture0.getName());
      assertEquals((byte) (-15), bigDecimal1.byteValue());
      assertEquals((short) (-2319), bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, (-554.2082F), 0.0F, (-1408.47F), true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-554.2082F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1408.47F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-554.2082F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1408.47F), catalogPieceOfFurniture0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, 1697.0F, 1.0F, 1.0F, true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1697.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNull(string0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(1697.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-365));
      assertEquals((-365), (int)integer0);
      assertNotNull(integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 0.0F, (-660.64F), (-1095.25F), 308.92F, false, true, integer0, (float[][]) null, true, (-554.2082F), true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-554.2082F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-660.64F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(308.92F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1095.25F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-365), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals((-554.2082F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-660.64F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(308.92F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-1095.25F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-365), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "[W;,At=fc^i5WM", "[W;,At=fc^i5WM", (Content) null, (Content) null, (Content) null, 20.116898F, 0.0F, 1329.44F, 0L, true, "[W;,At=fc^i5WM", (float[][]) null, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", false, true, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(20.116898F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      Content content0 = catalogPieceOfFurniture0.getModel();
      assertNull(content0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(20.116898F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getDescription());
      assertEquals("[W;,At=fc^i5WM", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(1329.44F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[2];
      Long long0 = Long.valueOf((-1L));
      assertEquals((-1L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1L));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = new float[4][9];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("d>~0WL5UX`_Y", "d>~0WL5UX`_Y", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 0.0F, (-1L), 1.0F, 374, false, (String) null, floatArray0, "com.eteks.sweethome3d.tools.temporarySubFolder", false, true, true, bigDecimal0, bigDecimal0, "");
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(374.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("d>~0WL5UX`_Y", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.temporarySubFolder", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("d>~0WL5UX`_Y", catalogPieceOfFurniture0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1L), (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2, stringArray0.length);
      assertEquals(4, floatArray0.length);
      
      String string0 = catalogPieceOfFurniture0.getInformation();
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", string0);
      assertNotNull(string0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(374.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("d>~0WL5UX`_Y", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.tools.temporarySubFolder", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("d>~0WL5UX`_Y", catalogPieceOfFurniture0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1L), (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2, stringArray0.length);
      assertEquals(4, floatArray0.length);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:08:41 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jigl.image.types.ImageKernel;
import jigl.image.types.KernelType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImageKernel_ESTest extends ImageKernel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImageKernel imageKernel0 = null;
      try {
        imageKernel0 = new ImageKernel((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[3][8];
      ImageKernel imageKernel0 = null;
      try {
        imageKernel0 = new ImageKernel(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImageKernel imageKernel0 = null;
      try {
        imageKernel0 = new ImageKernel((KernelType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ImageKernel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel((-268.711F), 445);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImageKernel imageKernel0 = null;
      try {
        imageKernel0 = new ImageKernel((-32768.0F), (-671));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageKernel0.normalize();
      assertEquals(8.0F, imageKernel0.absSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImageKernel imageKernel0 = new ImageKernel(0.5139904F, 68);
      assertEquals(2376.72F, imageKernel0.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(4.0F, imageKernel0.absSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_YY;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      KernelType kernelType0 = KernelType.D_XX;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageKernel0.normalize255();
      imageKernel0.normalize255();
      imageKernel0.normalize();
      assertEquals((-4227265.5F), imageKernel0.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNSHARP_8;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(17.0F, imageKernel0.absSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNSHARP;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageKernel0.normalize();
      assertEquals(1.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN_8;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      imageKernel0.normalize255();
      assertEquals(0.0011072665656683967, imageKernel0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      KernelType kernelType0 = KernelType.LAPLACIAN;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(20.0, imageKernel0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(6.0, imageKernel0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      KernelType kernelType0 = KernelType.PREWITT_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals((-1.0F), imageKernel0.min(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_X;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(0.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      KernelType kernelType0 = KernelType.UNIFORM;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      assertEquals(9.0F, imageKernel0.addSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      ImageKernel imageKernel0 = new ImageKernel(floatArray0);
      assertEquals(0.0, imageKernel0.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      KernelType kernelType0 = KernelType.SOBEL_Y;
      ImageKernel imageKernel0 = new ImageKernel(kernelType0);
      ImageKernel imageKernel1 = new ImageKernel(imageKernel0);
      assertEquals(3, imageKernel1.X());
  }
}

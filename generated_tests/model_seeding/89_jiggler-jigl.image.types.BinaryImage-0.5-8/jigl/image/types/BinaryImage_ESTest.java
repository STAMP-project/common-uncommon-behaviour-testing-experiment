/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:06:13 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.ImageProducer;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.ROI;
import jigl.image.types.BinaryImage;
import jigl.image.types.ComplexImage;
import jigl.image.types.GrayImage;
import jigl.image.types.RealGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryImage_ESTest extends BinaryImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(12, 11);
      BinaryImage binaryImage1 = new BinaryImage(12, 12);
      binaryImage1.toString();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      Byte.toUnsignedLong((byte) (-84));
      binaryImage2.difference((BinaryImage) null);
      // Undeclared exception!
      try { 
        binaryImage1.intersection(binaryImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      Byte byte0 = new Byte((byte) (-117));
      Byte byte1 = new Byte((byte)8);
      // Undeclared exception!
      try { 
        binaryImage0.set(1498, 1498, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1498
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(1544).when(realGrayImage0).X();
      doReturn(0).when(realGrayImage0).Y();
      BinaryImage binaryImage0 = new BinaryImage(realGrayImage0);
      binaryImage0.copy();
      binaryImage0.shift((-1), 2043);
      binaryImage0.getData();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.Y();
      binaryImage1.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.count();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage0.toString();
      binaryImage2.copy();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      binaryImage3.copy();
      binaryImage3.toString();
      BinaryImage binaryImage4 = new BinaryImage(binaryImage1);
      Byte.toUnsignedLong((byte) (-66));
      binaryImage2.intersection(binaryImage3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1511, 1);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage1 = new BinaryImage();
      BinaryImage binaryImage2 = new BinaryImage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      BinaryImage binaryImage3 = new BinaryImage(1, 1, byteArray0);
      binaryImage3.compliment();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.count();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage0.toString();
      binaryImage2.copy();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      binaryImage3.copy();
      binaryImage3.toString();
      BinaryImage binaryImage4 = new BinaryImage(binaryImage1);
      Byte.toUnsignedLong((byte) (-66));
      binaryImage4.difference(binaryImage3);
      binaryImage1.intersection(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 1522;
      BinaryImage binaryImage0 = new BinaryImage(1522, 1522);
      // Undeclared exception!
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 11;
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      int int1 = (-8);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage0.getJavaImage();
      Integer integer0 = new Integer(12);
      binaryImage0.shift((int) integer0, (-8));
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          int int0 = 128;
          BinaryImage binaryImage0 = new BinaryImage(128, 128);
          assertNotNull(binaryImage0);
          assertEquals(128, binaryImage0.Y());
          assertEquals(128, binaryImage0.X());
          assertEquals((byte)0, (byte)binaryImage0.min());
          assertEquals((byte)1, (byte)binaryImage0.max());
          
          // Undeclared exception!
          binaryImage0.shift(128, 128);
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Float float0 = new Float(255.0);
      float0.floatValue();
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(526).when(realGrayImage0).X();
      doReturn(526).when(realGrayImage0).Y();
      doReturn(255.0F, float0, (Float) null).when(realGrayImage0).get(anyInt() , anyInt());
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(1282, 1282, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 834;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)107;
      byte byte0 = (byte) (-103);
      byteArray0[1] = (byte) (-103);
      byteArray0[2] = (byte)87;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)120;
      byteArray0[4] = (byte)120;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(834, 834, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.intValue();
      integer0.floatValue();
      GrayImage grayImage0 = mock(GrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(grayImage0).X();
      doReturn(8).when(grayImage0).Y();
      doReturn((-30000), integer0, integer0, integer0, integer0).when(grayImage0).get(anyInt() , anyInt());
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.setROI((-4019), 0, 223, 223);
      BinaryImage binaryImage1 = binaryImage0.shift(0, (-4019));
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage2.toString();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage4 = binaryImage2.compliment();
      ROI rOI1 = new ROI();
      BinaryImage binaryImage5 = new BinaryImage();
      BinaryImage binaryImage6 = binaryImage5.difference(binaryImage3);
      binaryImage6.union(binaryImage4);
      binaryImage1.difference(binaryImage5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(realGrayImage0).X();
      doReturn(0).when(realGrayImage0).Y();
      BinaryImage binaryImage0 = new BinaryImage(realGrayImage0);
      binaryImage0.getData();
      binaryImage0.copy();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.Y();
      // Undeclared exception!
      try { 
        binaryImage1.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      binaryImage0.toString();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-27);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      BinaryImage binaryImage0 = new BinaryImage(1, 1, byteArray0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)8, 8, (Byte) (byte)8, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(1544).when(realGrayImage0).X();
      doReturn(0).when(realGrayImage0).Y();
      BinaryImage binaryImage0 = new BinaryImage(realGrayImage0);
      binaryImage0.shift((-1), 2043);
      binaryImage0.getData();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        binaryImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      binaryImage0.compliment();
      ROI rOI0 = new ROI((-66), (-247), (-1), (-1));
      rOI0.ux();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.lx();
      rOI0.uy();
      rOI0.ux();
      rOI0.uy();
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getData();
      // Undeclared exception!
      try { 
        binaryImage0.get((-1762), (-1762));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GrayImage grayImage0 = mock(GrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(1517).when(grayImage0).X();
      doReturn(255).when(grayImage0).Y();
      doReturn((Integer) null).when(grayImage0).get(anyInt() , anyInt());
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((RealGrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.intValue();
      integer0.floatValue();
      GrayImage grayImage0 = mock(GrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(grayImage0).X();
      doReturn(8).when(grayImage0).Y();
      doReturn((-30000), integer0, integer0, integer0, integer0).when(grayImage0).get(anyInt() , anyInt());
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      ROI rOI0 = new ROI();
      int int0 = new Integer(8);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      binaryImage0.count();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage1.getJavaImage();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      binaryImage0.copy();
      binaryImage0.count();
      BinaryImage binaryImage1 = binaryImage0.shift(11, (-1));
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(0, (-16777216));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      byte[][] byteArray0 = new byte[0][5];
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.copy();
      binaryImage0.getJavaImage();
      binaryImage0.Y();
      // Undeclared exception!
      try { 
        binaryImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      byte[][] byteArray0 = new byte[6][8];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-31);
      byteArray1[3] = (byte)18;
      byteArray1[4] = (byte)0;
      byteArray1[5] = (byte) (-39);
      byteArray1[6] = (byte)10;
      byteArray1[7] = (byte)55;
      byteArray1[8] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[3];
      byteArray2[0] = (byte)0;
      byteArray2[1] = (byte) (-31);
      byteArray2[2] = (byte)0;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[6];
      byteArray3[0] = (byte)0;
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-39);
      byteArray3[3] = (byte)55;
      byteArray3[4] = (byte)18;
      byteArray3[5] = (byte)10;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte)55;
      byteArray4[1] = (byte)0;
      byteArray4[2] = (byte)0;
      byteArray4[3] = (byte)10;
      byteArray4[4] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[6];
      byteArray5[0] = (byte) (-39);
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)55;
      byteArray5[3] = (byte)31;
      byteArray5[4] = (byte)0;
      byteArray5[5] = (byte)55;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte)0;
      byteArray6[1] = (byte)0;
      byteArray6[2] = (byte)1;
      byteArray6[3] = (byte)0;
      byteArray6[4] = (byte)0;
      byteArray6[5] = (byte) (-39);
      byteArray6[6] = (byte)10;
      byteArray6[7] = (byte)0;
      byteArray6[8] = (byte)55;
      byteArray0[5] = byteArray6;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      Byte byte0 = new Byte((byte) (-84));
      Byte.toUnsignedLong((byte)38);
      // Undeclared exception!
      binaryImage0.difference(binaryImage0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.count();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage0.toString();
      binaryImage1.copy();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage2);
      binaryImage1.copy();
      binaryImage2.toString();
      BinaryImage binaryImage4 = new BinaryImage(binaryImage3);
      Byte.toUnsignedLong((byte) (-66));
      // Undeclared exception!
      try { 
        binaryImage2.difference((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      binaryImage0.count();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      binaryImage0.toString();
      binaryImage1.difference(binaryImage0);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      int int0 = new Integer(12);
      binaryImage0.shift(12, (-8));
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 12);
      Byte byte0 = new Byte((byte) (-96));
      ROI rOI0 = new ROI();
      Byte byte1 = new Byte((byte)7);
      // Undeclared exception!
      try { 
        binaryImage0.set(0, (int) (byte)7, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0, (byte[]) null);
      binaryImage0.toString();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.toString();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage0.Y();
      Byte byte0 = new Byte((byte)77);
      Byte byte1 = new Byte((byte) (-84));
      // Undeclared exception!
      try { 
        binaryImage2.set(3071, 3071, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3071
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      binaryImage0.getJavaImage();
      binaryImage0.getJavaImage();
      binaryImage0.get(8, 11);
      binaryImage0.min();
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.count();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage0.toString();
      binaryImage2.copy();
      binaryImage0.copy();
      binaryImage2.toString();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage1);
      binaryImage3.Y();
      BinaryImage binaryImage4 = binaryImage1.compliment();
      ROI rOI0 = new ROI();
      BinaryImage binaryImage5 = new BinaryImage();
      binaryImage1.difference(binaryImage4);
      BinaryImage binaryImage6 = binaryImage0.union(binaryImage2);
      binaryImage6.shift(0, 11);
      binaryImage1.difference(binaryImage3);
      Byte byte0 = new Byte((byte)8);
      // Undeclared exception!
      try { 
        binaryImage1.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(128, 128);
      ROI rOI0 = new ROI();
      binaryImage0.copy(rOI0);
      // Undeclared exception!
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 12);
      Byte byte0 = new Byte((byte) (-96));
      BinaryImage binaryImage1 = binaryImage0.shift((-16777216), 16);
      BinaryImage binaryImage2 = binaryImage1.compliment();
      binaryImage0.toString();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage1);
      binaryImage1.toString();
      BinaryImage binaryImage4 = new BinaryImage(binaryImage2);
      binaryImage1.Y();
      Byte byte1 = new Byte((byte)8);
      Byte byte2 = new Byte((byte)8);
      // Undeclared exception!
      try { 
        binaryImage1.set(6, 12, byte1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(5105).when(realGrayImage0).X();
      doReturn(5105).when(realGrayImage0).Y();
      doReturn((Float) null).when(realGrayImage0).get(anyInt() , anyInt());
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.count();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[3] = (byte) (-116);
      byteArray0[4] = (byte) (-1);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-7), 2, (Byte) (byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -7
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.count();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage0.toString();
      binaryImage2.copy();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      binaryImage3.copy();
      binaryImage1.count();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 12);
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 11);
      // Undeclared exception!
      try { 
        binaryImage0.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1511, 1);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage1 = new BinaryImage();
      BinaryImage binaryImage2 = new BinaryImage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      BinaryImage binaryImage3 = new BinaryImage(1, 1, byteArray0);
      binaryImage3.difference(binaryImage0);
      binaryImage1.toString();
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = (-1497);
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(2059).when(realGrayImage0).X();
      doReturn((-1497)).when(realGrayImage0).Y();
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(24, 7);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      binaryImage2.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      ROI rOI0 = new ROI(0, 611, 12, 12);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.shift(1511, 1539);
      BinaryImage binaryImage1 = binaryImage0.shift(1510, 1539);
      binaryImage1.getData();
      BinaryImage binaryImage2 = new BinaryImage(1539, 1);
      binaryImage1.compliment();
      ROI rOI0 = new ROI();
      BinaryImage binaryImage3 = new BinaryImage();
      BinaryImage binaryImage4 = new BinaryImage();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)63;
      BinaryImage binaryImage5 = new BinaryImage(1, 1, byteArray0);
      binaryImage5.difference(binaryImage2);
      BinaryImage binaryImage6 = new BinaryImage();
      binaryImage1.union(binaryImage2);
      BinaryImage binaryImage7 = new BinaryImage(51, 1511);
      Byte byte0 = new Byte((byte)110);
      // Undeclared exception!
      try { 
        binaryImage1.set(1849, 51, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer0.intValue();
      integer0.floatValue();
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((BinaryImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GrayImage grayImage0 = mock(GrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(grayImage0).X();
      doReturn(0).when(grayImage0).Y();
      BinaryImage binaryImage0 = new BinaryImage(grayImage0);
      int int0 = 0;
      int int1 = (-4019);
      int int2 = 223;
      ROI rOI0 = new ROI((-4019), (-4019), 0, 223);
      rOI0.setROI((-4019), 0, 223, 223);
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.count();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage0.compliment();
      ROI rOI0 = new ROI();
      BinaryImage binaryImage3 = new BinaryImage();
      binaryImage3.copy();
      binaryImage3.difference(binaryImage0);
      BinaryImage binaryImage4 = new BinaryImage();
      // Undeclared exception!
      try { 
        binaryImage2.union(binaryImage4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = 12;
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.getJavaImage();
      Integer integer0 = new Integer(1543);
      binaryImage1.shift((-8), 11);
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      int int0 = 16;
      binaryImage0.shift(16, 16);
      binaryImage0.toString();
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      binaryImage0.copy();
      binaryImage0.count();
      BinaryImage binaryImage1 = binaryImage0.compliment();
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      binaryImage2.getJavaImage();
      binaryImage0.max();
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte)13);
      Byte byte1 = new Byte((byte)88);
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte)1, 1496, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(5, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      int int0 = new Integer(5);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage0);
      binaryImage1.Y();
      Byte byte0 = new Byte((byte) (-15));
      // Undeclared exception!
      try { 
        binaryImage0.set(3939, 3605, (Byte) (byte) (-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3605
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1511, 1);
      ROI rOI0 = new ROI();
      BinaryImage binaryImage1 = new BinaryImage();
      BinaryImage binaryImage2 = new BinaryImage();
      byte[] byteArray0 = new byte[1];
      binaryImage1.compliment();
      byte[][] byteArray1 = new byte[4][2];
      byteArray1[0] = byteArray0;
      byteArray1[1] = byteArray0;
      byteArray1[2] = byteArray0;
      byteArray1[3] = byteArray0;
      BinaryImage binaryImage3 = new BinaryImage(byteArray1);
      binaryImage2.union(binaryImage3);
      binaryImage3.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.copy();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1511, 1);
      BinaryImage binaryImage1 = binaryImage0.shift(1, 1511);
      BinaryImage binaryImage2 = binaryImage1.difference(binaryImage0);
      binaryImage2.intersection(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      BinaryImage binaryImage1 = binaryImage0.shift(1511, 1539);
      binaryImage0.count();
      binaryImage0.getJavaImage();
      binaryImage1.min();
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.Y();
      Byte byte0 = Byte.valueOf((byte)88);
      // Undeclared exception!
      try { 
        binaryImage0.clear(byte0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = 12;
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      binaryImage1.count();
      BinaryImage binaryImage2 = binaryImage0.compliment();
      binaryImage0.toString();
      binaryImage2.copy();
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      binaryImage3.copy();
      binaryImage3.toString();
      BinaryImage binaryImage4 = new BinaryImage(binaryImage1);
      BinaryImage binaryImage5 = new BinaryImage();
      BinaryImage binaryImage6 = binaryImage5.difference(binaryImage3);
      binaryImage2.union(binaryImage0);
      // Undeclared exception!
      try { 
        binaryImage0.difference(binaryImage6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = Integer.valueOf(70);
      GrayImage grayImage0 = mock(GrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(grayImage0).X();
      doReturn(8).when(grayImage0).Y();
      doReturn(integer0, (Integer) null).when(grayImage0).get(anyInt() , anyInt());
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(5, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.count();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-7);
      byteArray0[4] = (byte) (-1);
      BinaryImage binaryImage2 = new BinaryImage(5, 0, byteArray0);
      binaryImage2.min();
      binaryImage1.copy();
      binaryImage1.max();
      binaryImage1.X();
      BinaryImage binaryImage3 = null;
      try {
        binaryImage3 = new BinaryImage((byte) (-15), (-204));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.toString();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      BinaryImage binaryImage2 = binaryImage0.shift((-1), 0);
      BinaryImage binaryImage3 = binaryImage0.shift(0, 5140);
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      RealGrayImage realGrayImage1 = realGrayImage0.add(1205.2F);
      BinaryImage binaryImage4 = new BinaryImage(realGrayImage1);
      binaryImage4.getData();
      BinaryImage binaryImage5 = binaryImage2.compliment();
      binaryImage4.Y();
      BinaryImage binaryImage6 = binaryImage5.difference(binaryImage2);
      binaryImage2.intersection(binaryImage3);
      binaryImage6.getData();
      binaryImage5.difference(binaryImage1);
      binaryImage2.shift((-1), (-1759));
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-105);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-100);
      byteArray0[7] = (byte)61;
      byteArray0[8] = (byte)51;
      BinaryImage binaryImage0 = new BinaryImage(0, 0, byteArray0);
      binaryImage0.count();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][2];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-29);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)40;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.copy();
      ROI rOI0 = new ROI();
      rOI0.setROI((byte)40, 1446, (-1097), (-858));
      // Undeclared exception!
      try { 
        binaryImage0.set(8, (int) (byte)0, (Byte) (byte) (-29), rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.copy();
      Integer integer0 = new Integer(1543);
      binaryImage1.shift((-8), 11);
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      doReturn(526).when(realGrayImage0).X();
      doReturn(526).when(realGrayImage0).Y();
      doReturn((Float) null).when(realGrayImage0).get(anyInt() , anyInt());
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(realGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      Byte byte0 = new Byte((byte) (-45));
      Byte.valueOf((byte) (-45));
      // Undeclared exception!
      try { 
        binaryImage0.set((int) (byte) (-45), (int) (byte) (-45), byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getJavaImage();
      binaryImage0.getData();
      binaryImage0.getJavaImage();
      binaryImage0.toString();
      binaryImage0.X();
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(4, 0, (byte[]) null);
      binaryImage0.toString();
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      binaryImage1.toString();
      BinaryImage binaryImage2 = new BinaryImage(binaryImage1);
      binaryImage2.Y();
      Byte byte0 = new Byte((byte)77);
      // Undeclared exception!
      try { 
        binaryImage0.set(4, 4, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][6];
      byte[] byteArray1 = new byte[4];
      byteArray1[0] = (byte)7;
      byteArray1[1] = (byte) (-19);
      byteArray1[2] = (byte)16;
      byteArray1[3] = (byte)44;
      byteArray0[0] = byteArray1;
      BinaryImage binaryImage0 = new BinaryImage(byteArray0);
      binaryImage0.max();
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      binaryImage0.getData();
      binaryImage0.compliment();
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = (-3);
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      
      int int1 = integer0.intValue();
      assertEquals((-30000), int1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(int1 == int0);
      
      float float0 = integer0.floatValue();
      assertEquals((-30000.0F), float0, 0.01F);
      assertTrue(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      GrayImage grayImage0 = mock(GrayImage.class, new ViolatedAssumptionAnswer());
      doReturn((-3)).when(grayImage0).X();
      doReturn((-3)).when(grayImage0).Y();
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(grayImage0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(1511, 1);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1511, binaryImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      BinaryImage binaryImage1 = new BinaryImage();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      
      BinaryImage binaryImage2 = new BinaryImage();
      assertNotNull(binaryImage2);
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.Y());
      
      byte[] byteArray0 = new byte[1];
      BinaryImage binaryImage3 = new BinaryImage(1, 1, byteArray0);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertEquals(0, binaryImage3.count());
      assertEquals(1, binaryImage3.Y());
      assertEquals(1, binaryImage3.X());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      
      BinaryImage binaryImage4 = new BinaryImage(1511, (byte)0);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(1511, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      
      BinaryImage binaryImage5 = binaryImage0.difference(binaryImage4);
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage2));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)binaryImage1));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage5, binaryImage3);
      assertSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, binaryImage2);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(1, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(1511, binaryImage0.X());
      assertEquals(0, binaryImage4.Y());
      assertEquals(0, binaryImage4.count());
      assertEquals(1511, binaryImage4.X());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(1, binaryImage5.Y());
      assertEquals(0, binaryImage5.count());
      assertEquals(1511, binaryImage5.X());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals((byte)0, (byte)binaryImage5.min());
      
      // Undeclared exception!
      try { 
        binaryImage0.intersection(binaryImage2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      
      long long0 = Byte.toUnsignedLong((byte) (-66));
      assertEquals(190L, long0);
      
      byte[][] byteArray0 = new byte[2][8];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-66);
      byteArray1[1] = (byte) (-66);
      byteArray1[2] = (byte) (-66);
      byteArray1[3] = (byte) (-66);
      byteArray1[4] = (byte)4;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[0];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray0[1] = byteArray2;
      BinaryImage binaryImage2 = null;
      try {
        binaryImage2 = new BinaryImage(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      
      Byte byte0 = new Byte((byte)85);
      assertNotNull(byte0);
      assertEquals((byte)85, (byte)byte0);
      
      byte byte1 = byte0.byteValue();
      assertEquals((byte)85, byte1);
      
      ROI rOI0 = new ROI((-66), (-247), (-1), (-1));
      assertNotNull(rOI0);
      assertEquals(66, rOI0.X());
      assertEquals((-1), rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals((-247), rOI0.uy());
      assertEquals(247, rOI0.Y());
      assertEquals((-66), rOI0.ux());
      
      int int0 = rOI0.ux();
      assertEquals((-66), int0);
      assertEquals(66, rOI0.X());
      assertEquals((-1), rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals((-247), rOI0.uy());
      assertEquals(247, rOI0.Y());
      assertEquals((-66), rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals((-66), int1);
      assertTrue(int1 == int0);
      assertEquals(66, rOI0.X());
      assertEquals((-1), rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals((-247), rOI0.uy());
      assertEquals(247, rOI0.Y());
      assertEquals((-66), rOI0.ux());
      
      rOI0.setROI(2788, 2174, (-247), (-66));
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int2 = rOI0.ly();
      assertEquals(2174, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int3 = rOI0.ux();
      assertEquals((-247), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int4 = rOI0.ly();
      assertEquals(2174, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int5 = rOI0.ux();
      assertEquals((-247), int5);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int6 = rOI0.lx();
      assertEquals(2788, int6);
      assertFalse(int6 == int1);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertFalse(int6 == int0);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int7 = rOI0.ux();
      assertEquals((-247), int7);
      assertFalse(int7 == int6);
      assertTrue(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertTrue(int7 == int3);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int8 = rOI0.lx();
      assertEquals(2788, int8);
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int3);
      assertFalse(int8 == int4);
      assertFalse(int8 == int0);
      assertTrue(int8 == int6);
      assertFalse(int8 == int7);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int9 = rOI0.uy();
      assertEquals((-66), int9);
      assertFalse(int9 == int5);
      assertFalse(int9 == int2);
      assertFalse(int9 == int4);
      assertFalse(int9 == int3);
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertFalse(int9 == int8);
      assertFalse(int9 == int7);
      assertFalse(int9 == int6);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int10 = rOI0.ux();
      assertEquals((-247), int10);
      assertFalse(int10 == int8);
      assertFalse(int10 == int9);
      assertFalse(int10 == int2);
      assertTrue(int10 == int5);
      assertFalse(int10 == int1);
      assertFalse(int10 == int6);
      assertFalse(int10 == int0);
      assertTrue(int10 == int7);
      assertTrue(int10 == int3);
      assertFalse(int10 == int4);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      int int11 = rOI0.uy();
      assertEquals((-66), int11);
      assertTrue(int11 == int0);
      assertFalse(int11 == int4);
      assertFalse(int11 == int7);
      assertFalse(int11 == int8);
      assertFalse(int11 == int10);
      assertFalse(int11 == int6);
      assertTrue(int11 == int1);
      assertTrue(int11 == int9);
      assertFalse(int11 == int3);
      assertFalse(int11 == int5);
      assertFalse(int11 == int2);
      assertEquals(2788, rOI0.lx());
      assertEquals(2174, rOI0.ly());
      assertEquals((-247), rOI0.ux());
      assertEquals(2241, rOI0.Y());
      assertEquals((-66), rOI0.uy());
      assertEquals(3036, rOI0.X());
      
      // Undeclared exception!
      try { 
        binaryImage0.set(1846, 1846, (Byte) (byte)85, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      RealGrayImage realGrayImage0 = mock(RealGrayImage.class, new ViolatedAssumptionAnswer());
      BinaryImage binaryImage0 = new BinaryImage(0, 0);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      
      BinaryImage binaryImage1 = binaryImage0.shift((-1), 2043);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage1.X());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage2 = binaryImage0.compliment();
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      int int0 = binaryImage0.Y();
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage3 = binaryImage2.difference(binaryImage0);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage3);
      assertSame(binaryImage3, binaryImage0);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage2);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.X());
      assertEquals(0, binaryImage3.count());
      assertEquals(0, binaryImage3.Y());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 30);
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(30, binaryImage0.Y());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(30, binaryImage0.Y());
      assertEquals(30, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(30, binaryImage0.Y());
      assertEquals(30, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(11, image0.X());
      assertEquals(30, image0.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(30, binaryImage0.Y());
      assertEquals(30, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      
      Integer integer0 = new Integer(1543);
      assertNotNull(integer0);
      assertEquals(1543, (int)integer0);
      
      BinaryImage binaryImage2 = binaryImage1.shift((-8), 11);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertNotSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage1);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage0.X());
      assertEquals(30, binaryImage0.Y());
      assertEquals(30, binaryImage1.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.count());
      assertEquals(11, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(0, binaryImage2.count());
      assertEquals(30, binaryImage2.Y());
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage((-509), (-509), byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(12, 12);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(12, binaryImage0.Y());
      assertEquals(12, binaryImage0.X());
      
      // Undeclared exception!
      try { 
        binaryImage0.clear();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 12);
      assertNotNull(binaryImage0);
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(12, binaryImage1.Y());
      
      int int0 = binaryImage1.count();
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.count());
      assertEquals(12, binaryImage1.Y());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-15);
      BinaryImage binaryImage2 = binaryImage0.shift(1507, 0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage2.X());
      assertEquals(0, binaryImage2.count());
      assertEquals(12, binaryImage2.Y());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(0, 12);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      
      // Undeclared exception!
      try { 
        binaryImage0.get(0, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      
      int int0 = binaryImage0.X();
      assertEquals(0, int0);
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      int int0 = 5230;
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(5230, 5230, (byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      // Undeclared exception!
      try { 
        binaryImage0.clear((Byte) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      
      Image image0 = binaryImage0.copy();
      assertNotNull(image0);
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(11, image0.X());
      assertEquals(12, image0.Y());
      
      int int0 = binaryImage0.count();
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      
      BinaryImage binaryImage1 = binaryImage0.compliment();
      assertNotNull(binaryImage1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals(132, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(132, binaryImage1.count());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertEquals(132, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image0);
      assertEquals(132, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(132, binaryImage1.count());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      BinaryImage binaryImage2 = binaryImage1.difference(binaryImage0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)image0));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage2, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(11, binaryImage2.X());
      assertEquals(12, binaryImage2.Y());
      assertEquals(0, binaryImage2.count());
      
      BinaryImage binaryImage3 = binaryImage1.intersection(binaryImage0);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertSame(binaryImage0, binaryImage2);
      assertSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage1);
      assertSame(binaryImage1, binaryImage0);
      assertSame(binaryImage1, binaryImage2);
      assertSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image0);
      assertSame(binaryImage3, binaryImage2);
      assertSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage0);
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      ImageProducer imageProducer0 = binaryImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, binaryImage0.X());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      
      // Undeclared exception!
      try { 
        binaryImage0.get(1281, (-2806));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      Byte byte0 = new Byte((byte)0);
      assertNotNull(byte0);
      assertEquals((byte)0, (byte)byte0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        binaryImage0.set((-1), (-2), byte0, rOI0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      assertEquals(11, image0.X());
      assertEquals(12, image0.Y());
      
      int int0 = binaryImage1.count();
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage0.compliment();
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(11, binaryImage2.X());
      assertEquals(12, binaryImage2.Y());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      
      Image image1 = binaryImage2.copy();
      assertNotNull(image1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(image1.equals((Object)image0));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, image0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image1);
      assertNotSame(image1, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage2.count());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(11, binaryImage2.X());
      assertEquals(12, binaryImage2.Y());
      assertEquals(11, image1.X());
      assertEquals(12, image1.Y());
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      Image image2 = binaryImage3.copy();
      assertNotNull(image2);
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(image2.equals((Object)image0));
      assertFalse(image2.equals((Object)image1));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image2);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage3, image1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image2);
      assertNotSame(binaryImage3, image0);
      assertNotSame(image2, image0);
      assertNotSame(image2, image1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(11, image2.X());
      assertEquals(12, image2.Y());
      
      String string1 = binaryImage3.toString();
      assertNotNull(string1);
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)image2));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(string1.equals((Object)string0));
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image2);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage3, image1);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, image2);
      assertNotSame(binaryImage3, image0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      BinaryImage binaryImage4 = new BinaryImage(binaryImage1);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)image2));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)image1));
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(132, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(132, binaryImage4.count());
      assertEquals(11, binaryImage4.X());
      assertEquals(12, binaryImage4.Y());
      
      int int1 = binaryImage4.Y();
      assertEquals(12, int1);
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)image2));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)image1));
      assertFalse(int1 == int0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, image2);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, image2);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, binaryImage0);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, image0);
      assertNotSame(binaryImage4, image2);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, image1);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(132, binaryImage0.count());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(132, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(132, binaryImage4.count());
      assertEquals(11, binaryImage4.X());
      assertEquals(12, binaryImage4.Y());
      
      Byte byte0 = new Byte((byte)3);
      assertNotNull(byte0);
      assertEquals((byte)3, (byte)byte0);
      
      Byte byte1 = new Byte((byte)77);
      assertNotNull(byte1);
      assertEquals((byte)77, (byte)byte1);
      assertFalse(byte1.equals((Object)byte0));
      
      // Undeclared exception!
      try { 
        binaryImage2.set((-2999), 0, byte0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2999
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      assertNotNull(binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(11, image0.X());
      assertEquals(12, image0.Y());
      
      int int0 = binaryImage1.count();
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-19);
      BinaryImage binaryImage2 = binaryImage0.shift(1507, 0);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(11, binaryImage2.X());
      assertEquals(12, binaryImage2.Y());
      
      // Undeclared exception!
      try { 
        binaryImage1.getData();
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        binaryImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      BinaryImage binaryImage0 = null;
      try {
        binaryImage0 = new BinaryImage(964, 964, byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.BinaryImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage(11, 12);
      assertNotNull(binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      
      Image image0 = binaryImage1.copy();
      assertNotNull(image0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(11, image0.X());
      assertEquals(12, image0.Y());
      
      int int0 = binaryImage1.count();
      assertEquals(0, int0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      
      BinaryImage binaryImage2 = binaryImage0.compliment();
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      assertEquals(11, binaryImage2.X());
      assertEquals(12, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(132, binaryImage2.count());
      
      String string0 = binaryImage0.toString();
      assertNotNull(string0);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      
      Image image1 = binaryImage2.copy();
      assertNotNull(image1);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(image1.equals((Object)image0));
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image1);
      assertNotSame(image1, image0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      assertEquals(11, binaryImage2.X());
      assertEquals(12, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      assertEquals(132, binaryImage2.count());
      assertEquals(11, image1.X());
      assertEquals(12, image1.Y());
      
      BinaryImage binaryImage3 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage3);
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image1));
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      Image image2 = binaryImage3.copy();
      assertNotNull(image2);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(image2.equals((Object)image1));
      assertFalse(image2.equals((Object)image0));
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage3, image0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image1);
      assertNotSame(image2, image1);
      assertNotSame(image2, image0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(11, image2.X());
      assertEquals(12, image2.Y());
      
      String string1 = binaryImage3.toString();
      assertNotNull(string1);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)image2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage3, image0);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, image2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, image1);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      assertEquals(132, binaryImage3.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      
      BinaryImage binaryImage4 = new BinaryImage(binaryImage1);
      assertNotNull(binaryImage4);
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)image1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(132, binaryImage1.count());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(132, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(11, binaryImage4.X());
      assertEquals(12, binaryImage4.Y());
      
      int int1 = binaryImage4.Y();
      assertEquals(12, int1);
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)image1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertFalse(int1 == int0);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, image2);
      assertNotSame(binaryImage4, image0);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, image2);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, image1);
      assertNotSame(binaryImage4, binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(132, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(132, binaryImage1.count());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals(132, binaryImage4.count());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(11, binaryImage4.X());
      assertEquals(12, binaryImage4.Y());
      
      BinaryImage binaryImage5 = binaryImage1.compliment();
      assertNotNull(binaryImage5);
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)image2));
      assertFalse(binaryImage5.equals((Object)image1));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)image0));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)image2));
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, image2);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage5, image1);
      assertSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, image0);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, image2);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals(0, binaryImage5.count());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(11, binaryImage5.X());
      assertEquals(12, binaryImage5.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      BinaryImage binaryImage6 = new BinaryImage();
      assertNotNull(binaryImage6);
      assertFalse(binaryImage6.equals((Object)binaryImage4));
      assertFalse(binaryImage6.equals((Object)binaryImage0));
      assertFalse(binaryImage6.equals((Object)binaryImage2));
      assertFalse(binaryImage6.equals((Object)binaryImage5));
      assertFalse(binaryImage6.equals((Object)binaryImage3));
      assertFalse(binaryImage6.equals((Object)image1));
      assertFalse(binaryImage6.equals((Object)image0));
      assertFalse(binaryImage6.equals((Object)binaryImage1));
      assertFalse(binaryImage6.equals((Object)image2));
      assertEquals((byte)0, (byte)binaryImage6.min());
      assertEquals((byte)1, (byte)binaryImage6.max());
      assertEquals(0, binaryImage6.count());
      assertEquals(0, binaryImage6.X());
      assertEquals(0, binaryImage6.Y());
      
      BinaryImage binaryImage7 = binaryImage3.difference(binaryImage5);
      assertNotNull(binaryImage7);
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage6));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)image2));
      assertFalse(binaryImage3.equals((Object)binaryImage6));
      assertFalse(binaryImage3.equals((Object)image0));
      assertFalse(binaryImage3.equals((Object)binaryImage1));
      assertFalse(binaryImage3.equals((Object)binaryImage4));
      assertFalse(binaryImage3.equals((Object)image2));
      assertFalse(binaryImage3.equals((Object)binaryImage0));
      assertFalse(binaryImage3.equals((Object)binaryImage2));
      assertFalse(binaryImage3.equals((Object)binaryImage5));
      assertFalse(binaryImage3.equals((Object)image1));
      assertFalse(binaryImage5.equals((Object)image1));
      assertFalse(binaryImage5.equals((Object)binaryImage0));
      assertFalse(binaryImage5.equals((Object)binaryImage6));
      assertFalse(binaryImage5.equals((Object)binaryImage3));
      assertFalse(binaryImage5.equals((Object)image0));
      assertFalse(binaryImage5.equals((Object)binaryImage2));
      assertFalse(binaryImage5.equals((Object)binaryImage4));
      assertFalse(binaryImage5.equals((Object)image2));
      assertFalse(binaryImage7.equals((Object)binaryImage4));
      assertFalse(binaryImage7.equals((Object)binaryImage0));
      assertFalse(binaryImage7.equals((Object)image0));
      assertFalse(binaryImage7.equals((Object)binaryImage6));
      assertFalse(binaryImage7.equals((Object)binaryImage1));
      assertFalse(binaryImage7.equals((Object)image2));
      assertFalse(binaryImage7.equals((Object)image1));
      assertFalse(binaryImage7.equals((Object)binaryImage2));
      assertFalse(binaryImage7.equals((Object)binaryImage5));
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage7);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage6);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage6);
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage7);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, image2);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage3, binaryImage6);
      assertNotSame(binaryImage3, image0);
      assertSame(binaryImage3, binaryImage7);
      assertNotSame(binaryImage3, binaryImage1);
      assertNotSame(binaryImage3, binaryImage4);
      assertNotSame(binaryImage3, image2);
      assertNotSame(binaryImage3, binaryImage0);
      assertNotSame(binaryImage3, binaryImage2);
      assertNotSame(binaryImage3, binaryImage5);
      assertNotSame(binaryImage3, image1);
      assertNotSame(binaryImage5, binaryImage7);
      assertNotSame(binaryImage5, image1);
      assertSame(binaryImage5, binaryImage1);
      assertNotSame(binaryImage5, binaryImage0);
      assertNotSame(binaryImage5, binaryImage6);
      assertNotSame(binaryImage5, binaryImage3);
      assertNotSame(binaryImage5, image0);
      assertNotSame(binaryImage5, binaryImage2);
      assertNotSame(binaryImage5, binaryImage4);
      assertNotSame(binaryImage5, image2);
      assertNotSame(binaryImage7, binaryImage4);
      assertNotSame(binaryImage7, binaryImage0);
      assertNotSame(binaryImage7, image0);
      assertNotSame(binaryImage7, binaryImage6);
      assertNotSame(binaryImage7, binaryImage1);
      assertNotSame(binaryImage7, image2);
      assertSame(binaryImage7, binaryImage3);
      assertNotSame(binaryImage7, image1);
      assertNotSame(binaryImage7, binaryImage2);
      assertNotSame(binaryImage7, binaryImage5);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage3.max());
      assertEquals(0, binaryImage3.count());
      assertEquals(11, binaryImage3.X());
      assertEquals(12, binaryImage3.Y());
      assertEquals((byte)0, (byte)binaryImage3.min());
      assertEquals(0, binaryImage5.count());
      assertEquals((byte)0, (byte)binaryImage5.min());
      assertEquals((byte)1, (byte)binaryImage5.max());
      assertEquals(11, binaryImage5.X());
      assertEquals(12, binaryImage5.Y());
      assertEquals(0, binaryImage7.count());
      assertEquals((byte)0, (byte)binaryImage7.min());
      assertEquals((byte)1, (byte)binaryImage7.max());
      assertEquals(11, binaryImage7.X());
      assertEquals(12, binaryImage7.Y());
      
      BinaryImage binaryImage8 = binaryImage0.union(binaryImage2);
      assertNotNull(binaryImage8);
      assertFalse(binaryImage8.equals((Object)binaryImage1));
      assertFalse(binaryImage8.equals((Object)image2));
      assertFalse(binaryImage8.equals((Object)image1));
      assertFalse(binaryImage8.equals((Object)binaryImage6));
      assertFalse(binaryImage8.equals((Object)binaryImage5));
      assertFalse(binaryImage8.equals((Object)binaryImage4));
      assertFalse(binaryImage8.equals((Object)image0));
      assertFalse(binaryImage8.equals((Object)binaryImage7));
      assertFalse(binaryImage8.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage7));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage2.equals((Object)binaryImage4));
      assertFalse(binaryImage2.equals((Object)binaryImage3));
      assertFalse(binaryImage2.equals((Object)image0));
      assertFalse(binaryImage2.equals((Object)binaryImage7));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertFalse(binaryImage2.equals((Object)image2));
      assertFalse(binaryImage2.equals((Object)binaryImage5));
      assertFalse(binaryImage2.equals((Object)binaryImage6));
      assertFalse(binaryImage2.equals((Object)image1));
      assertNotSame(binaryImage8, binaryImage1);
      assertNotSame(binaryImage8, image2);
      assertNotSame(binaryImage8, image1);
      assertNotSame(binaryImage8, binaryImage6);
      assertNotSame(binaryImage8, binaryImage5);
      assertNotSame(binaryImage8, binaryImage4);
      assertNotSame(binaryImage8, image0);
      assertSame(binaryImage8, binaryImage0);
      assertNotSame(binaryImage8, binaryImage7);
      assertSame(binaryImage8, binaryImage2);
      assertNotSame(binaryImage8, binaryImage3);
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage7);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage5);
      assertSame(binaryImage0, binaryImage8);
      assertNotSame(binaryImage0, binaryImage6);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage2, binaryImage4);
      assertNotSame(binaryImage2, binaryImage3);
      assertNotSame(binaryImage2, image0);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage7);
      assertNotSame(binaryImage2, binaryImage1);
      assertNotSame(binaryImage2, image2);
      assertNotSame(binaryImage2, binaryImage5);
      assertSame(binaryImage2, binaryImage8);
      assertNotSame(binaryImage2, binaryImage6);
      assertNotSame(binaryImage2, image1);
      assertEquals(0, binaryImage8.count());
      assertEquals(11, binaryImage8.X());
      assertEquals(12, binaryImage8.Y());
      assertEquals((byte)1, (byte)binaryImage8.max());
      assertEquals((byte)0, (byte)binaryImage8.min());
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(11, binaryImage2.X());
      assertEquals(12, binaryImage2.Y());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      BinaryImage binaryImage9 = binaryImage1.difference(binaryImage4);
      assertNotNull(binaryImage9);
      assertFalse(binaryImage0.equals((Object)binaryImage4));
      assertFalse(binaryImage0.equals((Object)binaryImage3));
      assertFalse(binaryImage0.equals((Object)image0));
      assertFalse(binaryImage0.equals((Object)binaryImage7));
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage0.equals((Object)image2));
      assertFalse(binaryImage0.equals((Object)binaryImage5));
      assertFalse(binaryImage0.equals((Object)binaryImage6));
      assertFalse(binaryImage0.equals((Object)image1));
      assertFalse(binaryImage9.equals((Object)binaryImage7));
      assertFalse(binaryImage9.equals((Object)image1));
      assertFalse(binaryImage9.equals((Object)binaryImage0));
      assertFalse(binaryImage9.equals((Object)binaryImage3));
      assertFalse(binaryImage9.equals((Object)image0));
      assertFalse(binaryImage9.equals((Object)binaryImage6));
      assertFalse(binaryImage9.equals((Object)binaryImage2));
      assertFalse(binaryImage9.equals((Object)binaryImage8));
      assertFalse(binaryImage9.equals((Object)binaryImage4));
      assertFalse(binaryImage9.equals((Object)image2));
      assertFalse(binaryImage1.equals((Object)image0));
      assertFalse(binaryImage1.equals((Object)binaryImage3));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage6));
      assertFalse(binaryImage1.equals((Object)image1));
      assertFalse(binaryImage1.equals((Object)binaryImage7));
      assertFalse(binaryImage1.equals((Object)binaryImage4));
      assertFalse(binaryImage1.equals((Object)binaryImage8));
      assertFalse(binaryImage1.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)image0));
      assertFalse(binaryImage4.equals((Object)binaryImage3));
      assertFalse(binaryImage4.equals((Object)binaryImage1));
      assertFalse(binaryImage4.equals((Object)image2));
      assertFalse(binaryImage4.equals((Object)binaryImage8));
      assertFalse(binaryImage4.equals((Object)binaryImage7));
      assertFalse(binaryImage4.equals((Object)binaryImage5));
      assertFalse(binaryImage4.equals((Object)binaryImage2));
      assertFalse(binaryImage4.equals((Object)binaryImage6));
      assertFalse(binaryImage4.equals((Object)image1));
      assertFalse(binaryImage4.equals((Object)binaryImage0));
      assertNotSame(binaryImage0, binaryImage4);
      assertNotSame(binaryImage0, binaryImage3);
      assertNotSame(binaryImage0, image0);
      assertNotSame(binaryImage0, binaryImage7);
      assertNotSame(binaryImage0, binaryImage1);
      assertNotSame(binaryImage0, image2);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage0, binaryImage5);
      assertNotSame(binaryImage0, binaryImage9);
      assertSame(binaryImage0, binaryImage8);
      assertNotSame(binaryImage0, binaryImage6);
      assertNotSame(binaryImage0, image1);
      assertNotSame(binaryImage9, binaryImage7);
      assertNotSame(binaryImage9, image1);
      assertNotSame(binaryImage9, binaryImage0);
      assertSame(binaryImage9, binaryImage1);
      assertSame(binaryImage9, binaryImage5);
      assertNotSame(binaryImage9, binaryImage3);
      assertNotSame(binaryImage9, image0);
      assertNotSame(binaryImage9, binaryImage6);
      assertNotSame(binaryImage9, binaryImage2);
      assertNotSame(binaryImage9, binaryImage8);
      assertNotSame(binaryImage9, binaryImage4);
      assertNotSame(binaryImage9, image2);
      assertNotSame(binaryImage1, image0);
      assertNotSame(binaryImage1, binaryImage3);
      assertNotSame(binaryImage1, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage6);
      assertNotSame(binaryImage1, image1);
      assertNotSame(binaryImage1, binaryImage7);
      assertNotSame(binaryImage1, binaryImage4);
      assertNotSame(binaryImage1, binaryImage8);
      assertSame(binaryImage1, binaryImage5);
      assertNotSame(binaryImage1, image2);
      assertSame(binaryImage1, binaryImage9);
      assertNotSame(binaryImage4, image0);
      assertNotSame(binaryImage4, binaryImage3);
      assertNotSame(binaryImage4, binaryImage1);
      assertNotSame(binaryImage4, image2);
      assertNotSame(binaryImage4, binaryImage8);
      assertNotSame(binaryImage4, binaryImage7);
      assertNotSame(binaryImage4, binaryImage5);
      assertNotSame(binaryImage4, binaryImage2);
      assertNotSame(binaryImage4, binaryImage6);
      assertNotSame(binaryImage4, image1);
      assertNotSame(binaryImage4, binaryImage9);
      assertNotSame(binaryImage4, binaryImage0);
      assertEquals(11, binaryImage0.X());
      assertEquals(12, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage0.count());
      assertEquals(0, binaryImage9.count());
      assertEquals((byte)1, (byte)binaryImage9.max());
      assertEquals((byte)0, (byte)binaryImage9.min());
      assertEquals(11, binaryImage9.X());
      assertEquals(12, binaryImage9.Y());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(11, binaryImage1.X());
      assertEquals(12, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage4.max());
      assertEquals((byte)0, (byte)binaryImage4.min());
      assertEquals(0, binaryImage4.count());
      assertEquals(11, binaryImage4.X());
      assertEquals(12, binaryImage4.Y());
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      BinaryImage binaryImage0 = new BinaryImage();
      assertNotNull(binaryImage0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      Byte[][] byteArray0 = binaryImage0.getData();
      assertEquals(0, byteArray0.length);
      assertNotNull(byteArray0);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      
      BinaryImage binaryImage1 = new BinaryImage(binaryImage0);
      assertNotNull(binaryImage1);
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      
      BinaryImage binaryImage2 = binaryImage0.union(binaryImage1);
      assertNotNull(binaryImage2);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage2.equals((Object)binaryImage1));
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertSame(binaryImage2, binaryImage0);
      assertNotSame(binaryImage2, binaryImage1);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
      assertEquals(0, binaryImage2.count());
      assertEquals(0, binaryImage2.Y());
      assertEquals(0, binaryImage2.X());
      assertEquals((byte)0, (byte)binaryImage2.min());
      assertEquals((byte)1, (byte)binaryImage2.max());
      
      ImageProducer imageProducer0 = binaryImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(binaryImage0.equals((Object)binaryImage1));
      assertFalse(binaryImage1.equals((Object)binaryImage0));
      assertFalse(binaryImage1.equals((Object)binaryImage2));
      assertNotSame(binaryImage0, binaryImage1);
      assertSame(binaryImage0, binaryImage2);
      assertNotSame(binaryImage1, binaryImage0);
      assertNotSame(binaryImage1, binaryImage2);
      assertEquals(0, binaryImage0.X());
      assertEquals(0, binaryImage0.Y());
      assertEquals((byte)0, (byte)binaryImage0.min());
      assertEquals(0, binaryImage0.count());
      assertEquals((byte)1, (byte)binaryImage0.max());
      assertEquals(0, binaryImage1.X());
      assertEquals(0, binaryImage1.Y());
      assertEquals(0, binaryImage1.count());
      assertEquals((byte)1, (byte)binaryImage1.max());
      assertEquals((byte)0, (byte)binaryImage1.min());
  }
}

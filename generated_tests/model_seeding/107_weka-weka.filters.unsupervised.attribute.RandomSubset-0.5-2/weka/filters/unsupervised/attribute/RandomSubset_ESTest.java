/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 17:12:52 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.filters.unsupervised.attribute.RandomSubset;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RandomSubset_ESTest extends RandomSubset_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      String[] stringArray0 = new String[1];
      try { 
        randomSubset0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      try { 
        randomSubset0.determineOutputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.RandomSubset", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      assertEquals(1, randomSubset0.getSeed());
      
      randomSubset0.setSeed(0);
      assertEquals(0, randomSubset0.getSeed());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      double[] doubleArray0 = new double[5];
      int[] intArray0 = new int[5];
      randomSubset0.m_Indices = intArray0;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0, intArray0, (-2132));
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      try { 
        randomSubset0.process(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances((String) null, arrayList0, 1590);
      Instances instances1 = randomSubset0.determineOutputFormat(instances0);
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
      assertEquals(1, instances1.numAttributes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("%'z>NKDC\\}XS.cG", arrayList0, 3352);
      randomSubset0.setNumAttributes(2633.877505590282);
      randomSubset0.determineOutputFormat(instances0);
      assertEquals(2633.877505590282, randomSubset0.getNumAttributes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2223);
      randomSubset0.determineOutputFormat(instances0);
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
      assertEquals(1, randomSubset0.getSeed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      String[] stringArray0 = randomSubset0.getOptions();
      randomSubset0.setOptions(stringArray0);
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      randomSubset0.listOptions();
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[1];
      RandomSubset.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      String string0 = randomSubset0.numAttributesTipText();
      assertEquals("The number of attributes to choose: < 1 percentage, >= 1 absolute number.", string0);
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      String string0 = randomSubset0.getRevision();
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
      assertEquals("8034", string0);
      assertEquals(1, randomSubset0.getSeed());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      String string0 = randomSubset0.seedTipText();
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
      assertEquals("The seed value for the random number generator.", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      String string0 = randomSubset0.globalInfo();
      assertEquals("Chooses a random subset of attributes, either an absolute number or a percentage. The class is always included in the output (as the last attribute).", string0);
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      double double0 = randomSubset0.getNumAttributes();
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      // Undeclared exception!
      try { 
        randomSubset0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      int int0 = randomSubset0.getSeed();
      assertEquals(1, int0);
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      RandomSubset randomSubset0 = new RandomSubset();
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "@attribute";
      stringArray0[2] = "@data";
      stringArray0[3] = "@data";
      randomSubset0.setOptions(stringArray0);
      assertEquals(1, randomSubset0.getSeed());
      assertEquals(0.5, randomSubset0.getNumAttributes(), 0.01);
  }
}

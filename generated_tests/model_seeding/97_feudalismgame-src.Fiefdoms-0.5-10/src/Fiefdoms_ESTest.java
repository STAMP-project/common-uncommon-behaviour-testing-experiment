/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 22:36:10 GMT 2019
 */

package src;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import src.Fiefdoms;
import src.Intruders;
import src.Knight;
import src.Player;
import src.Vassals;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Fiefdoms_ESTest extends Fiefdoms_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(457);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setLoyalVassals((-1433), true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.loyalVassals;
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      UnaryOperator<Vassals> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "BT@aPF~i). d+{");
      assertFalse(boolean0);
      
      boolean boolean1 = arrayList1.add((Intruders) null);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      Vassals vassals0 = new Vassals("3X8:mHy1II", " castles  for ");
      assertEquals("vassal", vassals0.getRank());
      assertEquals("3X8:mHy1II", vassals0.getLord());
      assertEquals(" castles  for ", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      boolean boolean2 = arrayList0.add(vassals0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("3X8:mHy1II", vassals0.getLord());
      assertEquals(" castles  for ", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertTrue(arrayList0.contains(vassals0));
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "lsxbvg<F+A389B#o2");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      boolean boolean4 = arrayList0.add(vassals0);
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("3X8:mHy1II", vassals0.getLord());
      assertEquals(" castles  for ", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertTrue(arrayList0.contains(vassals0));
      
      fiefdoms0.setMagyar(arrayList1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList2);
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(vassals0));
      
      boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3X8:mHy1II");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      
      fiefdoms0.buyPersonalCastles(3274);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setPersonalCastles(3274);
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(3274, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(3274, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(string0);
      
      boolean boolean6 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getMagyar();
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(3274, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(1, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      assertSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      
      fiefdoms0.setRebelliousVassals((-1433), true);
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(3274, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      String string1 = fiefdoms0.getConqueror();
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(3274, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(string1);
      
      // Undeclared exception!
      try { 
        fiefdoms0.setRebelliousVassals(3274, false);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Knight knight0 = new Knight("#", "viking", "viking");
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getVotes();
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("#"));
      
      boolean boolean0 = arrayList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("#"));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, (String) null, 1512, false, arrayList0);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("#"));
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)2;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)2}, byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.contains("#"));
      
      fiefdoms0.setOwner((String) null);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.contains("#"));
      
      ArrayList<Player> arrayList1 = new ArrayList<Player>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setVassalsList(arrayList1);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList0.contains("#"));
      
      fiefdoms0.setRebelliousVassals((int) (byte)2, true);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.contains("#"));
      
      fiefdoms0.setLoyalVassals((-207), false);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.contains("#"));
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertFalse(arrayList0.contains("#"));
      assertFalse(arrayList2.contains("#"));
      
      fiefdoms0.setLoyalVassals(1512, false);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertSame(arrayList0, arrayList2);
      assertFalse(arrayList0.contains("#"));
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getViking();
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertSame(arrayList0, arrayList2);
      assertNotNull(arrayList3);
      assertFalse(arrayList0.contains("#"));
      
      ArrayList<String> arrayList4 = fiefdoms0.getNeighbors();
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList4.isEmpty());
      assertEquals(1, arrayList4.size());
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList0, arrayList4);
      assertSame(arrayList4, arrayList0);
      assertSame(arrayList4, arrayList2);
      assertNotNull(arrayList4);
      assertFalse(arrayList0.contains("#"));
      assertFalse(arrayList4.contains("#"));
      
      ArrayList<String> arrayList5 = fiefdoms0.getNeighbors();
      assertFalse(arrayList5.isEmpty());
      assertEquals(1, arrayList5.size());
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertSame(arrayList5, arrayList4);
      assertSame(arrayList5, arrayList0);
      assertSame(arrayList5, arrayList2);
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList0, arrayList5);
      assertSame(arrayList0, arrayList4);
      assertNotNull(arrayList5);
      assertFalse(arrayList5.contains("#"));
      assertFalse(arrayList0.contains("#"));
      
      fiefdoms0.setLoyalVassals((int) (byte)2, false);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList0, arrayList5);
      assertSame(arrayList0, arrayList4);
      assertFalse(arrayList0.contains("#"));
      
      fiefdoms0.setLoyalVassals((-1921), true);
      assertEquals(0, knight0.getwound());
      assertEquals("viking", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("#", knight0.getName());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("viking", knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1512, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList0, arrayList5);
      assertSame(arrayList0, arrayList4);
      assertFalse(arrayList0.contains("#"));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setPersonalCastles(true);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setKingdom(true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      String string0 = fiefdoms0.getOwner();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getValue());
      assertNotNull(fiefdoms1);
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNotNull(fiefdoms2);
      
      ArrayList<Intruders> arrayList0 = fiefdoms2.getMagyar();
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms2.getMagyar();
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms3 = new Fiefdoms();
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getConqueror());
      assertNotNull(fiefdoms3);
      
      ArrayList<Intruders> arrayList2 = fiefdoms2.getViking();
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms3);
      assertNotSame(arrayList2, arrayList0);
      assertNotSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
      
      int int0 = fiefdoms2.getFiefdomCastles();
      assertEquals(0, int0);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms3);
      
      int int1 = fiefdoms3.getPersonalCastles();
      assertEquals(0, int1);
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertTrue(int1 == int0);
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getConqueror());
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      
      String string1 = fiefdoms3.getOwner();
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getConqueror());
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNull(string1);
      
      fiefdoms2.setName("\"+zXN7HZY");
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertEquals("\"+zXN7HZY", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms3);
      
      fiefdoms2.setOwner((String) null);
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms3));
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getOwner());
      assertEquals("\"+zXN7HZY", fiefdoms2.getName());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNotSame(fiefdoms2, fiefdoms1);
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms3);
      
      fiefdoms3.setLoyalVassals(0, true);
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms3.getPeasants());
      assertNull(fiefdoms3.getName());
      assertFalse(fiefdoms3.isKingdom());
      assertNull(fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertEquals(0, fiefdoms3.getValue());
      assertNull(fiefdoms3.getConqueror());
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms2);
      assertNotSame(fiefdoms3, fiefdoms0);
      
      int int2 = fiefdoms0.getPersonalCastles();
      assertEquals(1, int2);
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms2);
      assertNotSame(fiefdoms0, fiefdoms3);
      assertNotSame(fiefdoms0, fiefdoms1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      String string0 = fiefdoms0.getConqueror();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(0, true);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setFiefdomCastles(0);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders((String) null, (String) null);
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNotNull(intruders0);
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertTrue(arrayList0.contains(intruders0));
      
      boolean boolean1 = arrayList0.add(intruders0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setViking(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMuslim(0, false);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setRebelliousVassals(485, false);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setViking(3219, true);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      Knight knight0 = new Knight();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertNotNull(knight0);
      
      Knight knight1 = new Knight();
      assertFalse(knight1.equals((Object)knight0));
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getRebellionCounter());
      assertNull(knight1.getName());
      assertFalse(knight1.isDead());
      assertEquals("knight", knight1.getRank());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getScore());
      assertEquals(0, knight1.getwound());
      assertNotNull(knight1);
      
      String string0 = knight1.getLocation();
      assertEquals("Ile-De-France", string0);
      assertFalse(knight1.equals((Object)knight0));
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getTotalMoney());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals("", knight1.getOrder());
      assertEquals(0, knight1.getRebellionCounter());
      assertNull(knight1.getName());
      assertFalse(knight1.isDead());
      assertEquals("knight", knight1.getRank());
      assertNull(knight1.getPassword());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getKill());
      assertEquals(0, knight1.getWounds());
      assertFalse(knight1.getDead());
      assertEquals(0, knight1.getScore());
      assertEquals(0, knight1.getwound());
      assertNotSame(knight1, knight0);
      assertNotNull(string0);
      
      String string1 = knight0.getLocation();
      assertEquals("Ile-De-France", string1);
      assertFalse(knight0.equals((Object)knight1));
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertNotSame(knight0, knight1);
      assertNotNull(string1);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setMagyar(3219, false);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotNull(fiefdoms1);
      
      fiefdoms1.setRebelliousVassals(5, false);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      String string2 = fiefdoms1.getName();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(string2);
      
      fiefdoms1.setName((String) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      fiefdoms1.setMagyar(arrayList0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(arrayList0.isEmpty());
      assertEquals(3221, arrayList0.size());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms1, fiefdoms0);
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms1.buyPersonalCastles(3225);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      String string3 = fiefdoms1.getConqueror();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(string3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, " vassals will be moving with you", "magyar", 2, false, (ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(" vassals will be moving with you", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals("magyar", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(" vassals will be moving with you", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(2, fiefdoms0.getValue());
      assertEquals("magyar", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setKingdom(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setViking((-2414), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setRebelliousVassals((-2414), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ListIterator<Intruders> listIterator0 = arrayList0.listIterator();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertNotNull(listIterator0);
      
      ArrayList<Player> arrayList1 = new ArrayList<Player>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Stream<Player> stream0 = arrayList1.parallelStream();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(stream0);
      
      fiefdoms0.setVassalsList(arrayList1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      
      fiefdoms0.buyFiefdomCastles((-749));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setKingdom(true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.loyalVassals;
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      fiefdoms0.loyalVassals = arrayList2;
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(0, fiefdoms0.loyalVassals.size());
      assertTrue(fiefdoms0.loyalVassals.isEmpty());
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      intruders0.setType("");
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getType());
      assertNull(intruders0.getLocation());
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getType());
      assertNull(intruders0.getLocation());
      assertTrue(arrayList0.contains(intruders0));
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getMuslim();
      assertFalse(arrayList3.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      assertFalse(arrayList3.contains(intruders0));
      
      fiefdoms0.setViking(arrayList0);
      assertFalse(arrayList0.equals((Object)arrayList3));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(arrayList0, arrayList3);
      assertTrue(arrayList0.contains(intruders0));
      
      ArrayList<String> arrayList4 = new ArrayList<String>();
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotNull(arrayList4);
      assertFalse(arrayList4.contains(""));
      
      Fiefdoms fiefdoms1 = new Fiefdoms(arrayList4, "*(i;\"}'4~", "", (-1), true, arrayList4);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("*(i;\"}'4~", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotNull(fiefdoms1);
      assertFalse(arrayList4.contains(""));
      
      fiefdoms1.setRebelliousVassals(1, false);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("*(i;\"}'4~", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(arrayList4.contains(""));
      
      ArrayList<Vassals> arrayList5 = fiefdoms1.getLoyalVassals();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList5.equals((Object)arrayList2));
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("*(i;\"}'4~", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, arrayList5.size());
      assertTrue(arrayList5.isEmpty());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(arrayList5, arrayList2);
      assertNotNull(arrayList5);
      assertFalse(arrayList4.contains(""));
      
      ArrayList<Vassals> arrayList6 = fiefdoms1.getLoyalVassals();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList6.equals((Object)arrayList2));
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals("*(i;\"}'4~", fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, arrayList6.size());
      assertTrue(arrayList6.isEmpty());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertSame(arrayList6, arrayList5);
      assertNotSame(arrayList6, arrayList2);
      assertNotNull(arrayList6);
      assertFalse(arrayList4.contains(""));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals((ArrayList<Vassals>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      int int0 = (-754);
      // Undeclared exception!
      try { 
        fiefdoms0.setLoyalVassals((-3647), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, (String) null, (String) null, 2, true, (ArrayList<String>) null);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(2, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(0, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders((String) null, (String) null);
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNotNull(intruders0);
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertTrue(arrayList0.contains(intruders0));
      
      boolean boolean1 = arrayList0.add(intruders0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMuslim(0, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setRebelliousVassals(485, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setViking(3219, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertNotNull(knight0);
      
      Knight knight1 = new Knight();
      assertFalse(knight1.equals((Object)knight0));
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getScore());
      assertEquals(0, knight1.getwound());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals("knight", knight1.getRank());
      assertNull(knight1.getPassword());
      assertFalse(knight1.getDead());
      assertNotNull(knight1);
      
      String string0 = knight1.getLocation();
      assertEquals("Ile-De-France", string0);
      assertFalse(knight1.equals((Object)knight0));
      assertEquals(0, knight1.getTotalMoney());
      assertNull(knight1.getName());
      assertEquals(0, knight1.getHitsCounter());
      assertEquals(0, knight1.getRebellionCounter());
      assertEquals(0, knight1.getWounds());
      assertEquals(0, knight1.getKills());
      assertEquals(0, knight1.getScore());
      assertEquals(0, knight1.getwound());
      assertEquals("", knight1.getOrder());
      assertEquals("Ile-De-France", knight1.getLocation());
      assertEquals(0, knight1.getKill());
      assertFalse(knight1.isDead());
      assertEquals("knight", knight1.getRank());
      assertNull(knight1.getPassword());
      assertFalse(knight1.getDead());
      assertNotSame(knight1, knight0);
      assertNotNull(string0);
      
      String string1 = knight0.getLocation();
      assertEquals("Ile-De-France", string1);
      assertFalse(knight0.equals((Object)knight1));
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getWounds());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertNotSame(knight0, knight1);
      assertNotNull(string1);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertNotNull(fiefdoms1);
      
      fiefdoms1.setRebelliousVassals(5, false);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      String string2 = fiefdoms1.getName();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(string2);
      
      fiefdoms1.setMagyar(arrayList0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(3221, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms0, fiefdoms1);
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setLoyalVassals(3219, false);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotSame(fiefdoms0, fiefdoms1);
      
      String string3 = fiefdoms1.getConqueror();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(string3);
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(floatArray0);
      
      fiefdoms0.setViking(3219, false);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotSame(fiefdoms0, fiefdoms1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMagyar(971, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(string0);
      
      String string1 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-2155), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setPersonalCastles(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.ensureCapacity((-2155));
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setFiefdomCastles(711);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(floatArray0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals((-1), int0);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.buyPersonalCastles(1);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList1);
      
      ArrayList<Player> arrayList2 = fiefdoms0.getVassalsList();
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList2);
      
      boolean boolean0 = fiefdoms0.isKingdom();
      assertFalse(boolean0);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      
      int int1 = fiefdoms0.getFiefdomCastles();
      assertEquals(711, int1);
      assertFalse(int1 == int0);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setPeasants(711);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(byteArray0);
      
      fiefdoms0.setMagyar(711, true);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "=}LXud\"uWk", "=}LXud\"uWk", 2001, true, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.loyalVassals;
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      fiefdoms0.setLoyalVassals(arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      fiefdoms0.buyFiefdomCastles(2001);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertSame(arrayList0, arrayList2);
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      assertFalse(arrayList2.contains("=}LXud\"uWk"));
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getRebelliousVassals();
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertSame(arrayList0, arrayList2);
      assertNotSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMuslim();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertSame(arrayList0, arrayList2);
      assertNotNull(arrayList4);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      String string0 = fiefdoms0.getName();
      assertEquals("=}LXud\"uWk", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertSame(arrayList0, arrayList2);
      assertNotNull(string0);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      String string1 = fiefdoms0.getName();
      assertEquals("=}LXud\"uWk", string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertSame(arrayList0, arrayList2);
      assertNotNull(string1);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[0];
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {}, floatArray0, 0.01F);
      assertEquals(0, floatArray0.length);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getConversation();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setInvaderType(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setPersonalCastles((-1446));
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setOwner("#.Em^H<Bkf");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      
      fiefdoms0.setName("WN}=VuGiQIr");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("#.Em^H<Bkf");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      Vassals vassals0 = new Vassals();
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      vassals0.setLocation("");
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertEquals("", vassals0.getLocation());
      
      boolean boolean0 = arrayList1.add(vassals0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertEquals("", vassals0.getLocation());
      assertTrue(arrayList1.contains(vassals0));
      
      Spliterator<Vassals> spliterator0 = arrayList1.spliterator();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotNull(spliterator0);
      assertTrue(arrayList1.contains(vassals0));
      
      fiefdoms0.setRebelliousVassals(arrayList1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertTrue(arrayList1.contains(vassals0));
      
      fiefdoms0.setViking(0, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      
      float[] floatArray1 = new float[0];
      assertFalse(floatArray1.equals((Object)floatArray0));
      
      fiefdoms0.setShaderColor(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      assertNotSame(floatArray1, floatArray0);
      
      fiefdoms0.setValue(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("#.Em^H<Bkf");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList2.isEmpty());
      assertSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
      assertTrue(arrayList2.contains(vassals0));
      
      fiefdoms0.setMagyar((-1446), true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("WN}=VuGiQIr", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-1446), fiefdoms0.getPersonalCastles());
      assertEquals("#.Em^H<Bkf", fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyPersonalCastles(2175);
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "viking", "muslim", (-1), false, (ArrayList<String>) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals("muslim", fiefdoms1.getOwner());
      assertNotNull(fiefdoms1);
      
      fiefdoms0.setRebelliousVassals((-1), false);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotSame(fiefdoms0, fiefdoms1);
      
      fiefdoms1.setOwner("viking");
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals("viking", fiefdoms1.getOwner());
      assertEquals((-1), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertNotSame(fiefdoms1, fiefdoms0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList0);
      
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals((ArrayList<Vassals>) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setOwner((String) null);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(arrayList0);
      
      // Undeclared exception!
      try { 
        fiefdoms0.setRebelliousVassals((-754), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Knight knight0 = new Knight("Invalid fiefdom", "vS^O%|8/:}vKvnP", "Invalid fiefdom");
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.conversation;
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("Invalid fiefdom"));
      
      boolean boolean0 = arrayList0.add("vS^O%|8/:}vKvnP");
      assertTrue(boolean0);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertFalse(arrayList0.contains("Invalid fiefdom"));
      assertTrue(arrayList0.contains("vS^O%|8/:}vKvnP"));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = arrayList0.add("Invalid fiefdom");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "Invalid fiefdom", "Mik`St.Dan\"Z&zi", 3, true, arrayList0);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      fiefdoms0.setFiefdomCastles(3);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      assertFalse(function1.equals((Object)function0));
      assertNotNull(function1);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      fiefdoms0.setPersonalCastles(3);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertNull(string0);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      boolean boolean3 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      String string1 = fiefdoms0.getName();
      assertEquals("Invalid fiefdom", string1);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertNotNull(string1);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      fiefdoms0.setLoyalVassals(3, true);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      fiefdoms0.setRebelliousVassals(3, true);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMagyar();
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertNotSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertNotNull(byteArray0);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.isDead());
      assertEquals("vS^O%|8/:}vKvnP", knight0.getRank());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("Invalid fiefdom", knight0.getPassword());
      assertEquals(0, knight0.getwound());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("Invalid fiefdom", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertEquals(3, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(3, fiefdoms0.getFiefdomCastles());
      assertEquals("Invalid fiefdom", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Mik`St.Dan\"Z&zi", fiefdoms0.getOwner());
      assertNotNull(arrayList3);
      assertFalse(arrayList0.contains("Mik`St.Dan\"Z&zi"));
      assertTrue(arrayList0.contains("Invalid fiefdom"));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(5, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      Vassals vassals0 = new Vassals();
      assertNull(vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      boolean boolean0 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      
      fiefdoms0.setRebelliousVassals(1992, true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      Vassals vassals0 = new Vassals();
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getLord());
      assertNotNull(vassals0);
      
      boolean boolean0 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getLord());
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getLord());
      
      fiefdoms0.setRebelliousVassals(1, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setLoyalVassals(1, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setFiefdomCastles((-2371));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setMagyar(1879, false);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      String string0 = fiefdoms0.getOwner();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertNull(string0);
      
      int int0 = fiefdoms0.getValue();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setOwner((String) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertNull(arrayList1);
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMagyar();
      assertTrue(arrayList2.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
      
      fiefdoms0.setMagyar(2520, true);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertNotNull(byteArray0);
      
      int int1 = fiefdoms0.getFiefdomCastles();
      assertEquals((-2371), int1);
      assertFalse(int1 == int0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      int int2 = fiefdoms0.getFiefdomCastles();
      assertEquals((-2371), int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      String string1 = fiefdoms0.getOwner();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertNull(string1);
      
      String string2 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertNull(string2);
      
      fiefdoms0.setMagyar(1027, false);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals(3, false);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals(1823, true);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-2371), fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotNull(arrayList3);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.conversation;
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      knight0.setHitsCounter((-1987));
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      
      ArrayList<Knight> arrayList1 = new ArrayList<Knight>();
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(knight0));
      
      boolean boolean0 = arrayList0.removeAll(arrayList1);
      assertFalse(boolean0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList1.contains(knight0));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "ZAf8", "Invalid number", (-1360), true, arrayList0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("ZAf8"));
      
      knight0.promote("Invalid number", "");
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      
      fiefdoms0.setViking(0, false);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Invalid number"));
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      assertFalse(arrayList0.contains("Invalid number"));
      
      Vassals vassals0 = new Vassals("", "F*6R");
      assertNull(vassals0.getLocation());
      assertEquals("", vassals0.getLord());
      assertEquals("F*6R", vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNotNull(vassals0);
      
      boolean boolean1 = arrayList2.add(vassals0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertNull(vassals0.getLocation());
      assertEquals("", vassals0.getLord());
      assertEquals("F*6R", vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertFalse(arrayList0.contains("Invalid number"));
      assertTrue(arrayList2.contains(vassals0));
      
      fiefdoms0.setRebelliousVassals(arrayList2);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertFalse(arrayList2.isEmpty());
      assertEquals(1, arrayList2.size());
      assertFalse(arrayList0.contains("Invalid number"));
      assertTrue(arrayList2.contains(vassals0));
      
      fiefdoms0.setMuslim(4057, false);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Invalid number"));
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals(0, int0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Invalid number"));
      
      int int1 = fiefdoms0.getPersonalCastles();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals((-1987), knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getKill());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("ZAf8", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals((-1360), fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Invalid number", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("Invalid number"));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      Knight knight0 = new Knight("RCw:", "RCw:", "RCw:");
      assertEquals("RCw:", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals("RCw:", knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("RCw:", knight0.getRank());
      assertNotNull(knight0);
      
      ArrayList<Vassals> arrayList0 = knight0.getMovingVassals();
      assertEquals("RCw:", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals("RCw:", knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("RCw:", knight0.getRank());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("RCw:", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.getDead());
      assertEquals("RCw:", knight0.getPassword());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("RCw:", knight0.getRank());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-2155), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setPersonalCastles(false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      arrayList0.ensureCapacity((-2155));
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setFiefdomCastles(711);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(floatArray0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals((-1), int0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.buyPersonalCastles(1);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList1);
      
      ArrayList<Player> arrayList2 = fiefdoms0.getVassalsList();
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList2);
      
      boolean boolean0 = fiefdoms0.isKingdom();
      assertFalse(boolean0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      fiefdoms0.buyFiefdomCastles(202);
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<String> arrayList4 = new ArrayList<String>();
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertNotNull(arrayList4);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "viking", "Invalid number", (-2155), false, arrayList4);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals("Invalid number", fiefdoms1.getOwner());
      assertNotNull(fiefdoms1);
      assertFalse(arrayList4.contains("Invalid number"));
      
      fiefdoms1.setMagyar((-3252), false);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals("Invalid number", fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(arrayList4.contains("Invalid number"));
      
      ArrayList<Intruders> arrayList5 = fiefdoms0.getMuslim();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList5);
      
      fiefdoms1.setSelectioncolor((byte[]) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals("Invalid number", fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(arrayList4.contains("Invalid number"));
      
      int int1 = fiefdoms1.getPersonalCastles();
      assertEquals(0, int1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(int1 == int0);
      assertEquals(0, arrayList4.size());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals("Invalid number", fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(arrayList4.contains("Invalid number"));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror((String) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-2155), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setPersonalCastles(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayList0.ensureCapacity((-2155));
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vassals vassals0 = new Vassals();
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNotNull(vassals0);
      
      boolean boolean0 = arrayList0.add(vassals0);
      assertTrue(boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertTrue(arrayList0.contains(vassals0));
      
      fiefdoms0.setFiefdomCastles(711);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(floatArray0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(vassals0));
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals((-1), int0);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.buyPersonalCastles(1);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList1);
      
      ArrayList<Player> arrayList2 = fiefdoms0.getVassalsList();
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList2);
      
      boolean boolean1 = fiefdoms0.isKingdom();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertEquals(1, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      assertTrue(arrayList3.contains(vassals0));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      fiefdoms0.buyFiefdomCastles(202);
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList4 = new ArrayList<String>();
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotNull(arrayList4);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "viking", "Invalid uber", (-2155), false, arrayList4);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertEquals("Invalid uber", fiefdoms1.getOwner());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNotNull(fiefdoms1);
      assertFalse(arrayList4.contains("Invalid uber"));
      
      fiefdoms1.setMagyar((-3252), false);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertEquals("Invalid uber", fiefdoms1.getOwner());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(arrayList4.contains("Invalid uber"));
      
      ArrayList<Intruders> arrayList5 = fiefdoms0.getMuslim();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList5.isEmpty());
      assertEquals(0, arrayList5.size());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList5);
      
      fiefdoms1.setSelectioncolor((byte[]) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertEquals("Invalid uber", fiefdoms1.getOwner());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(arrayList4.contains("Invalid uber"));
      
      int int1 = fiefdoms1.getPersonalCastles();
      assertEquals(0, int1);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(int1 == int0);
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertEquals("Invalid uber", fiefdoms1.getOwner());
      assertEquals((-2155), fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("viking", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertFalse(arrayList4.contains("Invalid uber"));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyPersonalCastles((-817));
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setSelectioncolor((byte[]) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)36;
      fiefdoms0.setName("01t1 (gY#9($CU^NN]&");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-9);
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)9, (byte) (-28), (byte)36, (byte)14, (byte)66, (byte) (-9)}, byteArray0);
      assertEquals(7, byteArray0.length);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "01t1 (gY#9($CU^NN]&");
      assertFalse(boolean0);
      
      fiefdoms0.setSelectioncolor((byte[]) null);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setRebelliousVassals((-2), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setLoyalVassals((-2), false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setOwner("D");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("D", fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("D");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("D", fiefdoms0.getOwner());
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("D", fiefdoms0.getOwner());
      assertNull(byteArray1);
      
      fiefdoms0.setLoyalVassals((int) (byte)14, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("01t1 (gY#9($CU^NN]&", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("D", fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setFiefdomCastles(457);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setLoyalVassals((-1433), true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.loyalVassals;
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      UnaryOperator<Vassals> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
      
      arrayList0.replaceAll(unaryOperator0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      Vassals vassals0 = new Vassals("3X8:mHy1II", " castles  for ");
      assertEquals("3X8:mHy1II", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals(" castles  for ", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      boolean boolean0 = arrayList0.add(vassals0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("3X8:mHy1II", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals(" castles  for ", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertTrue(arrayList0.contains(vassals0));
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "osKQ1Fy M$");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      fiefdoms0.setMagyar(arrayList1);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      ArrayList<String> arrayList2 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList2);
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(vassals0));
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "3X8:mHy1II");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      fiefdoms0.buyPersonalCastles(3276);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setPersonalCastles(3276);
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(string0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getMagyar();
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      
      fiefdoms0.setRebelliousVassals((-1433), true);
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      String string1 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(string1);
      
      fiefdoms0.setRebelliousVassals(3276, false);
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getViking();
      assertTrue(arrayList4.equals((Object)arrayList3));
      assertTrue(arrayList4.equals((Object)arrayList1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotSame(arrayList4, arrayList3);
      assertNotSame(arrayList4, arrayList1);
      assertNotNull(arrayList4);
      
      ArrayList<String> arrayList5 = fiefdoms0.getNeighbors();
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList5);
      
      ArrayList<String> arrayList6 = fiefdoms0.getNeighbors();
      assertNull(fiefdoms0.getOwner());
      assertEquals(3276, fiefdoms0.getPersonalCastles());
      assertEquals(457, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList6);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles(1487);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("7");
      assertEquals("7", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setVassalsList(arrayList0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "l#-k7t'an`xgodj$%", "viking", 0, false, (ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("l#-k7t'an`xgodj$%", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("viking", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("l#-k7t'an`xgodj$%");
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals("l#-k7t'an`xgodj$%", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("l#-k7t'an`xgodj$%", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      String string0 = " castles for ";
      Vassals vassals0 = new Vassals(" castles for ", "q,}*N7D9Ud\"O0");
      assertEquals("q,}*N7D9Ud\"O0", vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertEquals(" castles for ", vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      boolean boolean0 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("q,}*N7D9Ud\"O0", vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertEquals(" castles for ", vassals0.getLord());
      assertNull(vassals0.getLocation());
      
      fiefdoms0.setMagyar((ArrayList<Intruders>) null);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, " castles for ", " castles for ", 254, false, (ArrayList<String>) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(254, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(" castles for ", fiefdoms1.getName());
      assertNotNull(fiefdoms1);
      
      fiefdoms1.setNeighbors((ArrayList<String>) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(254, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(" castles for ", fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(fiefdoms1.loyalVassals);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(254, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(" castles for ", fiefdoms1.getName());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms1, fiefdoms0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " castles for ");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = 3254;
      fiefdoms1.buyPersonalCastles(3254);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(254, fiefdoms1.getValue());
      assertEquals(" castles for ", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(3254, fiefdoms1.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      fiefdoms0.setPersonalCastles(3254);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3254, fiefdoms0.getPersonalCastles());
      assertNotSame(fiefdoms0, fiefdoms1);
      
      String string1 = fiefdoms1.getConqueror();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(254, fiefdoms1.getValue());
      assertEquals(" castles for ", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPeasants());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(3254, fiefdoms1.getPersonalCastles());
      assertEquals(" castles for ", fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(string1);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMagyar();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(3254, fiefdoms0.getPersonalCastles());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(arrayList1);
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNotNull(knight0);
      
      String string2 = "";
      boolean boolean3 = false;
      // Undeclared exception!
      try { 
        knight0.setFiefdoms("", false);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // Could not initialize class src.Map
         //
         verifyException("src.Knight", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setViking(2234, false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      ListIterator<Intruders> listIterator0 = arrayList1.listIterator();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertSame(arrayList1, arrayList0);
      assertNotNull(listIterator0);
      
      fiefdoms0.setMuslim((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string0);
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList2);
      
      fiefdoms0.setOwner((String) null);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      Vassals vassals0 = new Vassals();
      assertNull(vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(vassals0));
      
      fiefdoms0.setRebelliousVassals(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains(vassals0));
      
      vassals0.setLocation(".");
      assertNull(vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertEquals(".", vassals0.getLocation());
      
      boolean boolean0 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertEquals(".", vassals0.getLocation());
      
      Vassals vassals1 = new Vassals();
      assertFalse(vassals1.equals((Object)vassals0));
      assertNull(vassals1.getLord());
      assertNull(vassals1.getLocation());
      assertEquals("vassal", vassals1.getRank());
      assertNull(vassals1.getFiefdom());
      assertNotNull(vassals1);
      
      vassals1.setLocation((String) null);
      assertFalse(vassals1.equals((Object)vassals0));
      assertNull(vassals1.getLord());
      assertNull(vassals1.getLocation());
      assertEquals("vassal", vassals1.getRank());
      assertNull(vassals1.getFiefdom());
      assertNotSame(vassals1, vassals0);
      
      fiefdoms0.setKingdom(true);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      boolean boolean1 = arrayList0.add(vassals0);
      assertTrue(boolean1);
      assertFalse(vassals0.equals((Object)vassals1));
      assertTrue(boolean1 == boolean0);
      assertNull(vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertEquals(".", vassals0.getLocation());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertNotSame(vassals0, vassals1);
      assertTrue(arrayList0.contains(vassals0));
      assertFalse(arrayList0.contains(vassals1));
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      fiefdoms0.setRebelliousVassals(1, true);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setLoyalVassals(0, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setOwner(".");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(".", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setOwner("");
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      
      String string0 = fiefdoms0.getOwner();
      assertEquals("", string0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants(4014);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(4014, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setPersonalCastles(false);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(4014, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setRebelliousVassals((-1), true);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(4014, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(4014, int0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(4014, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "", "viking", 653, false, (ArrayList<String>) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(653, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("viking", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertNotNull(fiefdoms1);
      
      Knight knight0 = new Knight();
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", string0);
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertNotNull(string0);
      
      String string1 = knight0.getLocation();
      assertEquals("Ile-De-France", string1);
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("knight", knight0.getRank());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertNotNull(string1);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList1);
      
      fiefdoms0.setMagyar(0, true);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNotNull(fiefdoms2);
      
      fiefdoms2.setRebelliousVassals(0, true);
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertFalse(fiefdoms2.isKingdom());
      assertNull(fiefdoms2.getConqueror());
      assertNull(fiefdoms2.getName());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
      
      String string2 = fiefdoms1.getName();
      assertEquals("", string2);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertFalse(fiefdoms1.equals((Object)fiefdoms2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(653, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("", fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals("viking", fiefdoms1.getOwner());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotSame(fiefdoms1, fiefdoms2);
      assertNotNull(string2);
      
      fiefdoms0.setName("EOA^UTF^|r-'r85T![");
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("EOA^UTF^|r-'r85T![", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms2);
      
      ArrayList<Intruders> arrayList2 = new ArrayList<Intruders>();
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      Fiefdoms fiefdoms3 = new Fiefdoms((ArrayList<String>) null, "src.CurrentPlayers", "EOA^UTF^|r-'r85T![", 1942, true, (ArrayList<String>) null);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertEquals("src.CurrentPlayers", fiefdoms3.getName());
      assertEquals("EOA^UTF^|r-'r85T![", fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPeasants());
      assertTrue(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(1942, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertNotNull(fiefdoms3);
      
      fiefdoms3.setMagyar(arrayList2);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertEquals("src.CurrentPlayers", fiefdoms3.getName());
      assertEquals("EOA^UTF^|r-'r85T![", fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPeasants());
      assertTrue(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(1942, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms2);
      
      fiefdoms0.setOwner("Ile-De-France");
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(fiefdoms0.equals((Object)fiefdoms3));
      assertFalse(fiefdoms0.equals((Object)fiefdoms2));
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("EOA^UTF^|r-'r85T![", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("Ile-De-France", fiefdoms0.getOwner());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(fiefdoms0, fiefdoms3);
      assertNotSame(fiefdoms0, fiefdoms2);
      
      fiefdoms3.setMuslim((-1), false);
      assertFalse(fiefdoms3.equals((Object)fiefdoms0));
      assertFalse(fiefdoms3.equals((Object)fiefdoms1));
      assertFalse(fiefdoms3.equals((Object)fiefdoms2));
      assertEquals("src.CurrentPlayers", fiefdoms3.getName());
      assertEquals("EOA^UTF^|r-'r85T![", fiefdoms3.getOwner());
      assertEquals(0, fiefdoms3.getPeasants());
      assertTrue(fiefdoms3.isKingdom());
      assertEquals(0, fiefdoms3.getPersonalCastles());
      assertNull(fiefdoms3.getConqueror());
      assertEquals(1942, fiefdoms3.getValue());
      assertEquals(0, fiefdoms3.getFiefdomCastles());
      assertNotSame(fiefdoms3, fiefdoms0);
      assertNotSame(fiefdoms3, fiefdoms1);
      assertNotSame(fiefdoms3, fiefdoms2);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(5, true);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNotNull(fiefdoms1);
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(arrayList0);
      
      fiefdoms1.setInvaderType((ArrayList<String>) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      boolean boolean0 = fiefdoms1.isKingdom();
      assertFalse(boolean0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms1.getLoyalVassals();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(arrayList1);
      
      ArrayList<Vassals> arrayList2 = fiefdoms1.getLoyalVassals();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
      
      ArrayList<Vassals> arrayList3 = fiefdoms1.getLoyalVassals();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertSame(arrayList3, arrayList2);
      assertSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      
      int int0 = fiefdoms1.getFiefdomCastles();
      assertEquals(0, int0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      ArrayList<Vassals> arrayList4 = fiefdoms1.getLoyalVassals();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getName());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertSame(arrayList4, arrayList2);
      assertSame(arrayList4, arrayList3);
      assertSame(arrayList4, arrayList1);
      assertNotNull(arrayList4);
      
      Fiefdoms fiefdoms2 = new Fiefdoms();
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertNull(fiefdoms2.getOwner());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertNotNull(fiefdoms2);
      
      fiefdoms2.setOwner("4");
      assertFalse(fiefdoms2.equals((Object)fiefdoms0));
      assertFalse(fiefdoms2.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms2.getPersonalCastles());
      assertNull(fiefdoms2.getConqueror());
      assertEquals(0, fiefdoms2.getFiefdomCastles());
      assertEquals(0, fiefdoms2.getPeasants());
      assertEquals(0, fiefdoms2.getValue());
      assertNull(fiefdoms2.getName());
      assertFalse(fiefdoms2.isKingdom());
      assertEquals("4", fiefdoms2.getOwner());
      assertNotSame(fiefdoms2, fiefdoms0);
      assertNotSame(fiefdoms2, fiefdoms1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(1423, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      String string0 = fiefdoms0.getConqueror();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string0);
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(byteArray0);
      
      fiefdoms0.setLoyalVassals(1712, true);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Player> arrayList0 = new ArrayList<Player>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Vassals vassals0 = new Vassals("Mp", (String) null);
      assertEquals("Mp", vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNotNull(vassals0);
      
      boolean boolean1 = arrayList0.add((Player) vassals0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("Mp", vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      
      fiefdoms0.setVassalsList(arrayList0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMagyar();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      String string1 = fiefdoms0.getOwner();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string1);
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList2);
      
      ArrayList<String> arrayList3 = fiefdoms0.getInvaderType();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList3);
      
      ArrayList<String> arrayList4 = fiefdoms0.getNeighbors();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList4);
      
      ArrayList<String> arrayList5 = fiefdoms0.getInvaderType();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList5);
      
      String string2 = fiefdoms0.getOwner();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string2);
      
      ArrayList<String> arrayList6 = fiefdoms0.getInvaderType();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList6);
      
      byte[] byteArray2 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray2);
      assertEquals(3, byteArray2.length);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertSame(byteArray2, byteArray0);
      assertSame(byteArray2, byteArray1);
      assertNotNull(byteArray2);
      
      ArrayList<Player> arrayList7 = fiefdoms0.getVassalsList();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(1, arrayList7.size());
      assertFalse(arrayList7.isEmpty());
      assertSame(arrayList7, arrayList0);
      assertNotNull(arrayList7);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      Vassals vassals0 = new Vassals();
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      boolean boolean0 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertNull(vassals0.getLocation());
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setLoyalVassals(463, true);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setOwner("src.Vassals");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setOwner("src.Vassals");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("src.Vassals", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertNotNull(fiefdoms1);
      
      float[] floatArray0 = fiefdoms1.getShaderColor();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getValue());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNotNull(floatArray0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-2155), false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setPersonalCastles(false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      arrayList0.ensureCapacity((-2155));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setFiefdomCastles(711);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertNotNull(floatArray0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals((-1), int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.buyPersonalCastles(1);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      
      ArrayList<String> arrayList1 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList1);
      
      ArrayList<Player> arrayList2 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList2);
      
      boolean boolean0 = fiefdoms0.isKingdom();
      assertFalse(boolean0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Vassals> arrayList3 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList3.size());
      assertTrue(arrayList3.isEmpty());
      assertSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      
      int int1 = fiefdoms0.getFiefdomCastles();
      assertEquals(711, int1);
      assertFalse(int1 == int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setPeasants(711);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(711, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(711, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      assertNotNull(byteArray0);
      
      int int2 = fiefdoms0.getValue();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(711, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertEquals(711, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setFiefdomCastles(true);
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(711, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(712, fiefdoms0.getFiefdomCastles());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "O,Hkk41?Zq6", "O,Hkk41?Zq6", 1012, false, (ArrayList<String>) null);
      assertEquals("O,Hkk41?Zq6", fiefdoms0.getName());
      assertEquals("O,Hkk41?Zq6", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1012, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyPersonalCastles(3);
      assertEquals("O,Hkk41?Zq6", fiefdoms0.getName());
      assertEquals("O,Hkk41?Zq6", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(1012, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertEquals("O,Hkk41?Zq6", fiefdoms0.getName());
      assertEquals("O,Hkk41?Zq6", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(3, fiefdoms0.getPersonalCastles());
      assertEquals(1012, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPersonalCastles(true);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setNeighbors((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      fiefdoms0.setViking(arrayList1);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      fiefdoms0.setInvaderType((ArrayList<String>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getMuslim();
      assertTrue(arrayList2.equals((Object)arrayList1));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotSame(arrayList2, arrayList1);
      assertNotNull(arrayList2);
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getMuslim();
      assertTrue(arrayList3.equals((Object)arrayList1));
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList3.isEmpty());
      assertEquals(0, arrayList3.size());
      assertSame(arrayList3, arrayList2);
      assertNotSame(arrayList3, arrayList1);
      assertNotNull(arrayList3);
      
      fiefdoms0.setLoyalVassals((ArrayList<Vassals>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)6;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)16, (byte)2, (byte)5, (byte)6}, byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants((-1));
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals((-1), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setPersonalCastles(false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      
      fiefdoms0.setRebelliousVassals((-1), false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals((-1), int0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals((-1), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Knight knight0 = new Knight("6E}Bd", "6E}Bd", "6E}Bd");
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("6E}Bd"));
      
      knight0.setKills(0);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "", "6E}Bd", (-1597), true, arrayList0);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals((-1597), fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("6E}Bd", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("6E}Bd"));
      
      fiefdoms0.setOwner("");
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("", fiefdoms0.getName());
      assertEquals((-1597), fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("6E}Bd"));
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      knight0.promote("", (String) null);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      
      arrayList0.forEach(consumer0);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertFalse(arrayList0.contains("6E}Bd"));
      
      fiefdoms0.setValue(0);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("6E}Bd"));
      
      fiefdoms0.buyFiefdomCastles(1444);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("6E}Bd"));
      
      fiefdoms0.buyFiefdomCastles(2247);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("6E}Bd"));
      
      fiefdoms0.setMagyar((-277), true);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("6E}Bd"));
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains("6E}Bd"));
      
      byte[] byteArray0 = new byte[0];
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals("6E}Bd", knight0.getRank());
      assertEquals("6E}Bd", knight0.getName());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals("", knight0.getOrder());
      assertEquals("6E}Bd", knight0.getPassword());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, knight0.getwound());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getName());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(arrayList0.contains("6E}Bd"));
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(0, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setMagyar(arrayList0);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      fiefdoms0.setMuslim(1778, true);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setMuslim(31, false);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Knight knight0 = new Knight("6E}Bd", "6E}Bd", "6E}Bd");
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("6E}Bd", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("6E}Bd", knight0.getRank());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("6E}Bd", knight0.getPassword());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getFiefdoms();
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("6E}Bd", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("6E}Bd", knight0.getRank());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("6E}Bd", knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains("6E}Bd"));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "6E}Bd", "viking", 2001, false, arrayList0);
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("6E}Bd", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("6E}Bd", knight0.getRank());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("6E}Bd", knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2001, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("6E}Bd", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("viking", fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("6E}Bd"));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.loyalVassals;
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      fiefdoms0.setOwner("=}LXud\"uWk");
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("6E}Bd", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("6E}Bd", knight0.getRank());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("6E}Bd", knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("6E}Bd", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      String string0 = fiefdoms0.getName();
      assertEquals("6E}Bd", string0);
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getKills());
      assertEquals("6E}Bd", knight0.getName());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getTotalMoney());
      assertFalse(knight0.getDead());
      assertEquals("6E}Bd", knight0.getRank());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertEquals("6E}Bd", knight0.getPassword());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(2001, fiefdoms0.getValue());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("6E}Bd", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(string0);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setOwner("");
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)120;
      byteArray0[1] = (byte) (-40);
      fiefdoms0.setOwner("");
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byteArray0[2] = (byte) (-92);
      byteArray0[3] = (byte)37;
      float[] floatArray0 = new float[0];
      fiefdoms0.shaderColor = floatArray0;
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byteArray0[4] = (byte) (-55);
      byteArray0[5] = (byte) (-1);
      fiefdoms0.selectioncolor = byteArray0;
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals((-1935245939), false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setMuslim(3, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setMagyar(5, false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(3, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(arrayList0);
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)120, (byte) (-40), (byte) (-92), (byte)37, (byte) (-55), (byte) (-1)}, byteArray1);
      assertEquals(6, byteArray1.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      fiefdoms0.setOwner("");
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      float[] floatArray1 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {}, floatArray1, 0.01F);
      assertEquals(0, floatArray1.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayList<Player> arrayList1 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ListIterator<String> listIterator0 = arrayList0.listIterator();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      boolean boolean0 = arrayList0.add("+?19&}yE=wv$Re3");
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertTrue(arrayList0.contains("+?19&}yE=wv$Re3"));
      
      boolean boolean1 = arrayList0.add("magyar");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertTrue(arrayList0.contains("+?19&}yE=wv$Re3"));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "BMV3@ek[H", "magyar", 3250, true, arrayList0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("magyar", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(3250, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("BMV3@ek[H"));
      assertTrue(arrayList0.contains("+?19&}yE=wv$Re3"));
      
      ArrayList<Intruders> arrayList1 = new ArrayList<Intruders>(3250);
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Intruders intruders0 = new Intruders("+?19&}yE=wv$Re3", "Pu");
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNotNull(intruders0);
      
      boolean boolean2 = arrayList1.add(intruders0);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertTrue(arrayList1.contains(intruders0));
      
      fiefdoms0.setViking(arrayList1);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("magyar", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(3250, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList0.contains("Pu"));
      assertTrue(arrayList0.contains("+?19&}yE=wv$Re3"));
      assertTrue(arrayList1.contains(intruders0));
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)5;
      fiefdoms0.setRebelliousVassals((-610), true);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("magyar", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(3250, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertFalse(arrayList0.contains("Pu"));
      assertTrue(arrayList0.contains("+?19&}yE=wv$Re3"));
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "m].i");
      assertFalse(boolean0);
      
      fiefdoms0.shaderColor = null;
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setPersonalCastles(true);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-50);
      byteArray0[1] = (byte) (-13);
      byteArray0[2] = (byte) (-10);
      byteArray0[3] = (byte) (-105);
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte) (-29);
      fiefdoms0.selectioncolor = byteArray0;
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      fiefdoms0.setVassalsList((ArrayList<Player>) null);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(floatArray0);
      
      String string0 = fiefdoms0.getOwner();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(string0);
      
      String string1 = fiefdoms0.getOwner();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertEquals(1, fiefdoms0.getPersonalCastles());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(0, false);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.buyFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      // Undeclared exception!
      try { 
        arrayList0.removeIf((Predicate<? super Intruders>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(fiefdoms0);
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNotNull(byteArray0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setShaderColor((float[]) null);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      
      fiefdoms0.setOwner("4");
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("4", fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPeasants(1594);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1594, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1594, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim(1978, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((-2783), true);
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(arrayList0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms((ArrayList<String>) null, "src.Knight", "Invalid number", 703, true, (ArrayList<String>) null);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(703, fiefdoms1.getValue());
      assertEquals("Invalid number", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNotNull(fiefdoms1);
      
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) (-2783);
      floatArray0[1] = (float) 703;
      floatArray0[2] = (float) (-2783);
      floatArray0[3] = 176.1807F;
      floatArray0[4] = (float) (-2783);
      floatArray0[5] = (float) (-2783);
      floatArray0[6] = (float) (-2783);
      floatArray0[7] = (float) 703;
      floatArray0[8] = (float) 703;
      fiefdoms1.shaderColor = floatArray0;
      assertEquals(703, fiefdoms1.getValue());
      assertEquals("Invalid number", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      
      fiefdoms1.setFiefdomCastles(true);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(703, fiefdoms1.getValue());
      assertEquals("Invalid number", fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(1, fiefdoms1.getFiefdomCastles());
      assertTrue(fiefdoms1.isKingdom());
      assertEquals("src.Knight", fiefdoms1.getName());
      assertNull(fiefdoms1.getConqueror());
      assertNotSame(fiefdoms1, fiefdoms0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      Vassals vassals0 = new Vassals();
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getLord());
      assertNotNull(vassals0);
      
      vassals0.setLocation(".");
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertEquals(".", vassals0.getLocation());
      
      boolean boolean0 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLord());
      assertEquals(".", vassals0.getLocation());
      
      vassals0.setFiefdom("Please input the number of vassals you \nyou desire to take with you:");
      assertEquals("vassal", vassals0.getRank());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertEquals(".", vassals0.getLocation());
      
      vassals0.setLocation(".");
      assertEquals("vassal", vassals0.getRank());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertEquals(".", vassals0.getLocation());
      
      boolean boolean1 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("Please input the number of vassals you \nyou desire to take with you:", vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertEquals(".", vassals0.getLocation());
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setLoyalVassals(1, false);
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setOwner(".");
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(".", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      
      fiefdoms0.setOwner("b[fS*Z%D(r/J,ImZl");
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("b[fS*Z%D(r/J,ImZl", fiefdoms0.getOwner());
      
      fiefdoms0.setLoyalVassals(127, false);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("b[fS*Z%D(r/J,ImZl", fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getLoyalVassals();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("b[fS*Z%D(r/J,ImZl", fiefdoms0.getOwner());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertFalse(arrayList1.contains(vassals0));
      
      ArrayList<Intruders> arrayList2 = fiefdoms0.getViking();
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals("b[fS*Z%D(r/J,ImZl", fiefdoms0.getOwner());
      assertSame(arrayList2, arrayList0);
      assertNotNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking(2, false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("D");
      assertEquals("D", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "=}LXud\"uWk");
      assertFalse(boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "=}LXud\"uWk", "=}LXud\"uWk", 2001, true, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(2001, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(2001, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      fiefdoms0.setViking(arrayList1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(2001, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      fiefdoms0.setRebelliousVassals((int) (byte) (-12), true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(2001, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      String string0 = fiefdoms0.getName();
      assertEquals("=}LXud\"uWk", string0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(2001, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNotNull(string0);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      int int0 = fiefdoms0.getValue();
      assertEquals(2001, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(2001, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
      
      String string1 = fiefdoms0.getOwner();
      assertEquals("=}LXud\"uWk", string1);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("=}LXud\"uWk", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("=}LXud\"uWk", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(2001, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNotNull(string1);
      assertFalse(arrayList0.contains("=}LXud\"uWk"));
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-512);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      floatArray0[1] = (float) (-512);
      floatArray0[2] = (float) (-512);
      floatArray0[3] = (float) (-512);
      fiefdoms0.shaderColor = floatArray0;
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.buyPersonalCastles((-512));
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Intruders intruders0 = new Intruders("zL:)g('k>L#&", "pf9l/,?lLo[q");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNotNull(intruders0);
      
      boolean boolean1 = arrayList0.add(intruders0);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMagyar(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.buyPersonalCastles((-512));
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.buyPersonalCastles((-3223));
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertTrue(arrayList1.contains(intruders0));
      
      Intruders intruders1 = new Intruders("zL:)g('k>L#&", "pf9l/,?lLo[q");
      assertFalse(intruders1.equals((Object)intruders0));
      assertNull(intruders1.getType());
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getRank());
      assertNotNull(intruders1);
      
      boolean boolean2 = arrayList1.add(intruders1);
      assertTrue(boolean2);
      assertFalse(intruders1.equals((Object)intruders0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(intruders1.getType());
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getRank());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertNotSame(intruders1, intruders0);
      assertSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(intruders0));
      
      fiefdoms0.setMuslim(arrayList1);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertSame(arrayList1, arrayList0);
      assertTrue(arrayList1.contains(intruders0));
      
      float[] floatArray1 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {(-512.0F), (-512.0F), (-512.0F), (-512.0F)}, floatArray1, 0.01F);
      assertEquals(4, floatArray1.length);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertSame(floatArray1, floatArray0);
      assertNotNull(floatArray1);
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList2.isEmpty());
      assertEquals(0, arrayList2.size());
      assertNotNull(arrayList2);
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(string0);
      
      boolean boolean3 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      ArrayList<Intruders> arrayList3 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, arrayList3.size());
      assertFalse(arrayList3.isEmpty());
      assertSame(arrayList3, arrayList1);
      assertSame(arrayList3, arrayList0);
      assertNotNull(arrayList3);
      assertTrue(arrayList3.contains(intruders0));
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList4 = fiefdoms0.getMuslim();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, arrayList4.size());
      assertFalse(arrayList4.isEmpty());
      assertSame(arrayList4, arrayList0);
      assertSame(arrayList4, arrayList3);
      assertSame(arrayList4, arrayList1);
      assertNotNull(arrayList4);
      assertTrue(arrayList4.contains(intruders0));
      
      fiefdoms0.setLoyalVassals((-3223), false);
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Player> arrayList5 = fiefdoms0.getVassalsList();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList5);
      
      ArrayList<Vassals> arrayList6 = fiefdoms0.getLoyalVassals();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList6.isEmpty());
      assertEquals(0, arrayList6.size());
      assertSame(arrayList6, arrayList2);
      assertNotNull(arrayList6);
      
      ArrayList<Intruders> arrayList7 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(2, arrayList7.size());
      assertFalse(arrayList7.isEmpty());
      assertSame(arrayList7, arrayList3);
      assertSame(arrayList7, arrayList4);
      assertSame(arrayList7, arrayList1);
      assertSame(arrayList7, arrayList0);
      assertNotNull(arrayList7);
      assertTrue(arrayList7.contains(intruders0));
      
      ArrayList<Vassals> arrayList8 = fiefdoms0.getRebelliousVassals();
      assertTrue(arrayList8.equals((Object)arrayList6));
      assertTrue(arrayList8.equals((Object)arrayList2));
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList8.isEmpty());
      assertEquals(0, arrayList8.size());
      assertNotSame(arrayList8, arrayList6);
      assertNotSame(arrayList8, arrayList2);
      assertNotNull(arrayList8);
      
      ArrayList<Vassals> arrayList9 = fiefdoms0.getRebelliousVassals();
      assertTrue(arrayList9.equals((Object)arrayList2));
      assertTrue(arrayList9.equals((Object)arrayList6));
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList9.size());
      assertTrue(arrayList9.isEmpty());
      assertNotSame(arrayList9, arrayList2);
      assertNotSame(arrayList9, arrayList6);
      assertSame(arrayList9, arrayList8);
      assertNotNull(arrayList9);
      
      String string1 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[2];
      floatArray0[0] = 0.0F;
      floatArray0[1] = 0.0F;
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      fiefdoms0.setViking(2234, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      int int0 = fiefdoms0.getPeasants();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ListIterator<Intruders> listIterator0 = arrayList0.listIterator();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(listIterator0.hasNext());
      assertNotNull(listIterator0);
      
      fiefdoms0.setMuslim(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      String string0 = fiefdoms0.getConqueror();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Knight knight0 = new Knight();
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", string0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNotNull(string0);
      
      ArrayList<String> arrayList0 = knight0.conversation;
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      assertFalse(arrayList0.contains(string0));
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "Ile-De-France", "Ile-De-France", 912, true, arrayList0);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("Ile-De-France", fiefdoms0.getOwner());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(912, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("Ile-De-France", fiefdoms0.getOwner());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(912, fiefdoms0.getValue());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      fiefdoms0.setValue(1);
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getWounds());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getwound());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals("Ile-De-France", fiefdoms0.getOwner());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(1, fiefdoms0.getValue());
      assertFalse(arrayList0.contains("Ile-De-France"));
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setName("\"i[3SIgvp28Z(");
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("\"i[3SIgvp28Z(", fiefdoms0.getName());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      String string0 = fiefdoms0.getOwner();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(string0);
      
      fiefdoms0.setMuslim(0, false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ArrayList<Intruders> arrayList1 = new ArrayList<Intruders>(arrayList0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotNull(arrayList1);
      
      arrayList1.ensureCapacity(0);
      assertTrue(arrayList0.equals((Object)arrayList1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      boolean boolean0 = arrayList1.add((Intruders) null);
      assertTrue(boolean0);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(1, arrayList1.size());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      boolean boolean1 = arrayList1.add((Intruders) null);
      assertTrue(boolean1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      fiefdoms0.setViking(arrayList1);
      assertFalse(arrayList0.equals((Object)arrayList1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertNotSame(arrayList0, arrayList1);
      assertNotSame(arrayList1, arrayList0);
      
      fiefdoms0.setMuslim(485, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setViking(485, false);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      Knight knight0 = new Knight((String) null, (String) null, (String) null);
      assertEquals(0, knight0.getWounds());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getwound());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getRebellionCounter());
      assertNull(knight0.getName());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals("", knight0.getOrder());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertNotNull(knight0);
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setPeasants((-28));
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-28), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-28), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(byteArray0);
      
      fiefdoms0.setLoyalVassals(2951, true);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals((-28), fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      Vassals vassals0 = new Vassals();
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getLord());
      assertNotNull(vassals0);
      
      boolean boolean0 = fiefdoms0.loyalVassals.add(vassals0);
      assertTrue(boolean0);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(vassals0.getFiefdom());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getLocation());
      assertNull(vassals0.getLord());
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {0.0F, 0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setRebelliousVassals(463, true);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      
      fiefdoms0.setRebelliousVassals(3268, false);
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "N]Xi!nE:!", "XBCAOg]z}pb!lb0gNm<", 0, false, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("XBCAOg]z}pb!lb0gNm<", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("N]Xi!nE:!", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("XBCAOg]z}pb!lb0gNm<"));
      
      fiefdoms0.setViking((-1429), true);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals("XBCAOg]z}pb!lb0gNm<", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("N]Xi!nE:!", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.contains("XBCAOg]z}pb!lb0gNm<"));
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      byte[] byteArray0 = new byte[0];
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {}, byteArray1);
      assertEquals(0, byteArray1.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(0, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setFiefdomCastles(0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setViking(arrayList0);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      fiefdoms0.setMuslim(0, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setRebelliousVassals(485, false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      Knight knight0 = new Knight();
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNotNull(knight0);
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.loyalVassals;
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      fiefdoms0.setLoyalVassals(arrayList1);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      
      fiefdoms0.setRebelliousVassals(1971, true);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setOwner("E2:KD,{SJO/");
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("E2:KD,{SJO/", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setFiefdomCastles(false);
      assertNull(fiefdoms0.getConqueror());
      assertEquals("E2:KD,{SJO/", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals((-1), fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Knight knight0 = new Knight((String) null, (String) null, (String) null);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.getConversation();
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) arrayList0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) null;
      objectArray0[3] = (Object) arrayList0;
      objectArray0[4] = (Object) arrayList0;
      Object[] objectArray1 = arrayList0.toArray(objectArray0);
      assertEquals(5, objectArray0.length);
      assertEquals(5, objectArray1.length);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertSame(objectArray0, objectArray1);
      assertSame(objectArray1, objectArray0);
      assertNotNull(objectArray1);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, (String) null, 637, false, arrayList0);
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(637, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      String string0 = fiefdoms0.getName();
      assertNull(knight0.getName());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getKills());
      assertNull(knight0.getRank());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertEquals(0, knight0.getHitsCounter());
      assertFalse(knight0.getDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.isDead());
      assertEquals(0, knight0.getKill());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(637, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Knight knight0 = new Knight((String) null, (String) null, (String) null);
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertNotNull(knight0);
      
      ArrayList<String> arrayList0 = knight0.conversation;
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      boolean boolean0 = arrayList0.add((String) null);
      assertTrue(boolean0);
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int0 = (-1);
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, (String) null, (String) null, (-1), true, arrayList0);
      assertEquals(0, knight0.getWounds());
      assertEquals(0, knight0.getwound());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getScore());
      assertFalse(knight0.getDead());
      assertEquals(0, knight0.getKill());
      assertFalse(knight0.isDead());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getTotalMoney());
      assertNull(knight0.getRank());
      assertNull(knight0.getName());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals("", knight0.getOrder());
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals((-1), fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      
      float[] floatArray0 = new float[5];
      // Undeclared exception!
      try { 
        knight0.setRank((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Knight", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setViking((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setRebelliousVassals((ArrayList<Vassals>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      ArrayList<String> arrayList1 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList1);
      
      fiefdoms0.setLoyalVassals((ArrayList<Vassals>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      fiefdoms0.setValue(1975);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 1975;
      floatArray0[1] = (float) 1975;
      floatArray0[2] = (float) 1975;
      floatArray0[3] = (float) 1975;
      floatArray0[4] = (float) 1975;
      fiefdoms0.setShaderColor(floatArray0);
      assertArrayEquals(new float[] {1975.0F, 1975.0F, 1975.0F, 1975.0F, 1975.0F}, floatArray0, 0.01F);
      assertEquals(5, floatArray0.length);
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList2);
      
      ArrayList<String> arrayList3 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList3);
      
      ArrayList<Vassals> arrayList4 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList4);
      
      ArrayList<String> arrayList5 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList5);
      
      ArrayList<Vassals> arrayList6 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList6);
      
      ArrayList<Vassals> arrayList7 = fiefdoms0.getLoyalVassals();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList7);
      
      ArrayList<String> arrayList8 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertEquals(1975, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList8);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNotNull(fiefdoms1);
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms1.setViking(arrayList0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      fiefdoms1.buyPersonalCastles((-430));
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(0, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(4, byteArray0.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotSame(fiefdoms0, fiefdoms1);
      
      fiefdoms1.setPeasants(626);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(626, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertFalse(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getViking();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList1.size());
      assertTrue(arrayList1.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      
      fiefdoms1.setKingdom(true);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(626, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      Intruders intruders0 = new Intruders("#.Em^H<Bkf", "#.Em^H<Bkf");
      assertNull(intruders0.getType());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      Intruders intruders1 = new Intruders("muslim", "\"4h<y&(4-%");
      assertFalse(intruders1.equals((Object)intruders0));
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getType());
      assertNull(intruders1.getRank());
      assertNotNull(intruders1);
      
      boolean boolean0 = arrayList1.add(intruders1);
      assertTrue(boolean0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertFalse(intruders1.equals((Object)intruders0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNull(intruders1.getLocation());
      assertNull(intruders1.getType());
      assertNull(intruders1.getRank());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(arrayList1, arrayList0);
      assertNotSame(intruders1, intruders0);
      assertFalse(arrayList1.contains(intruders0));
      assertTrue(arrayList1.contains(intruders1));
      
      ArrayList<Vassals> arrayList2 = fiefdoms0.getRebelliousVassals();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, arrayList2.size());
      assertTrue(arrayList2.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotNull(arrayList2);
      
      fiefdoms1.setMagyar(667, true);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(626, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      fiefdoms0.setMagyar(arrayList1);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertFalse(arrayList1.equals((Object)arrayList0));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNotSame(arrayList1, arrayList0);
      assertFalse(arrayList1.contains(intruders0));
      assertTrue(arrayList1.contains(intruders1));
      
      fiefdoms1.buyPersonalCastles(0);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertEquals(0, fiefdoms1.getValue());
      assertEquals(626, fiefdoms1.getPeasants());
      assertNull(fiefdoms1.getName());
      assertTrue(fiefdoms1.isKingdom());
      assertNull(fiefdoms1.getConqueror());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getOwner());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      String string0 = fiefdoms0.getConqueror();
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "P7s#nYdlt;Q.", "P7s#nYdlt;Q.", 0, true, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("P7s#nYdlt;Q.", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("P7s#nYdlt;Q.", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("P7s#nYdlt;Q."));
      
      int int0 = fiefdoms0.getFiefdomCastles();
      assertEquals(0, int0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("P7s#nYdlt;Q.", fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("P7s#nYdlt;Q.", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getValue());
      assertTrue(fiefdoms0.isKingdom());
      assertFalse(arrayList0.contains("P7s#nYdlt;Q."));
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Knight knight0 = new Knight();
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNotNull(knight0);
      
      String string0 = knight0.getLocation();
      assertEquals("Ile-De-France", string0);
      assertFalse(knight0.isDead());
      assertEquals("knight", knight0.getRank());
      assertEquals(0, knight0.getHitsCounter());
      assertEquals(0, knight0.getKill());
      assertNull(knight0.getPassword());
      assertEquals(0, knight0.getWounds());
      assertFalse(knight0.getDead());
      assertEquals("Ile-De-France", knight0.getLocation());
      assertEquals(0, knight0.getTotalMoney());
      assertEquals(0, knight0.getRebellionCounter());
      assertEquals("", knight0.getOrder());
      assertNull(knight0.getName());
      assertEquals(0, knight0.getKills());
      assertEquals(0, knight0.getScore());
      assertEquals(0, knight0.getwound());
      assertNotNull(string0);
      
      Fiefdoms fiefdoms0 = new Fiefdoms(arrayList0, "Ile-De-France", "`X_-.r,98>", (-445), true, arrayList0);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-445), fiefdoms0.getValue());
      assertEquals("`X_-.r,98>", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotNull(fiefdoms0);
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-445), fiefdoms0.getValue());
      assertEquals("`X_-.r,98>", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      fiefdoms0.setMagyar((-3476), false);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-445), fiefdoms0.getValue());
      assertEquals("`X_-.r,98>", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      Fiefdoms fiefdoms1 = new Fiefdoms();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNull(fiefdoms1.getConqueror());
      assertNotNull(fiefdoms1);
      
      fiefdoms1.setConqueror("`X_-.r,98>");
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("`X_-.r,98>", fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(1942, false);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-445), fiefdoms0.getValue());
      assertEquals("`X_-.r,98>", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      fiefdoms1.setMuslim((-372), false);
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("`X_-.r,98>", fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      
      fiefdoms0.buyFiefdomCastles((-1406));
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-445), fiefdoms0.getValue());
      assertEquals("`X_-.r,98>", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      int int0 = fiefdoms0.getValue();
      assertEquals((-445), int0);
      assertFalse(fiefdoms0.equals((Object)fiefdoms1));
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals((-445), fiefdoms0.getValue());
      assertEquals("`X_-.r,98>", fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals("Ile-De-France", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertNotSame(fiefdoms0, fiefdoms1);
      assertFalse(arrayList0.contains("Ile-De-France"));
      
      ArrayList<Player> arrayList2 = fiefdoms1.getVassalsList();
      assertFalse(fiefdoms1.equals((Object)fiefdoms0));
      assertNull(fiefdoms1.getOwner());
      assertEquals(0, fiefdoms1.getFiefdomCastles());
      assertEquals("`X_-.r,98>", fiefdoms1.getConqueror());
      assertNull(fiefdoms1.getName());
      assertEquals(0, fiefdoms1.getPeasants());
      assertEquals(0, fiefdoms1.getPersonalCastles());
      assertFalse(fiefdoms1.isKingdom());
      assertEquals(0, fiefdoms1.getValue());
      assertNotSame(fiefdoms1, fiefdoms0);
      assertNull(arrayList2);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Vassals> arrayList0 = new ArrayList<Vassals>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      fiefdoms0.setLoyalVassals(arrayList0);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertTrue(arrayList1.equals((Object)arrayList0));
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms((ArrayList<String>) null, "", "", 1094, false, (ArrayList<String>) null);
      assertEquals("", fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1094, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getMuslim();
      assertEquals("", fiefdoms0.getOwner());
      assertEquals("", fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(1094, fiefdoms0.getValue());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setMuslim(2003, true);
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setLoyalVassals(0, true);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setFiefdomCastles(0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.buyFiefdomCastles(0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)0;
      fiefdoms0.setSelectioncolor(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0}, byteArray0);
      assertEquals(2, byteArray0.length);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setPeasants(0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      ArrayList<Intruders> arrayList0 = fiefdoms0.getViking();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      fiefdoms0.setKingdom(true);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      Intruders intruders0 = new Intruders("FBJ=KLfCBv", "FBJ=KLfCBv");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertNotNull(intruders0);
      
      boolean boolean0 = arrayList0.add(intruders0);
      assertTrue(boolean0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getRank());
      assertNull(intruders0.getLocation());
      assertNull(intruders0.getType());
      assertTrue(arrayList0.contains(intruders0));
      
      ArrayList<Vassals> arrayList1 = fiefdoms0.getRebelliousVassals();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      fiefdoms0.setMagyar(0, false);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setMagyar(arrayList0);
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.buyPersonalCastles((-5865));
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      String string0 = fiefdoms0.getConqueror();
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertTrue(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setConqueror("yE,cQG[#");
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("yE,cQG[#", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      ArrayList<String> arrayList0 = fiefdoms0.getNeighbors();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("yE,cQG[#", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(arrayList0);
      
      fiefdoms0.buyPersonalCastles(0);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("yE,cQG[#", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      
      ArrayList<Vassals> arrayList1 = new ArrayList<Vassals>();
      assertTrue(arrayList1.isEmpty());
      assertEquals(0, arrayList1.size());
      assertNotNull(arrayList1);
      
      Vassals vassals0 = new Vassals();
      assertNull(vassals0.getLocation());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertNotNull(vassals0);
      
      boolean boolean0 = arrayList1.add(vassals0);
      assertTrue(boolean0);
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertNull(vassals0.getLocation());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertTrue(arrayList1.contains(vassals0));
      
      boolean boolean1 = arrayList1.add(vassals0);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertNull(vassals0.getLocation());
      assertEquals("vassal", vassals0.getRank());
      assertNull(vassals0.getFiefdom());
      assertNull(vassals0.getLord());
      assertTrue(arrayList1.contains(vassals0));
      
      fiefdoms0.setLoyalVassals(arrayList1);
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("yE,cQG[#", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertFalse(arrayList1.isEmpty());
      assertEquals(2, arrayList1.size());
      assertTrue(arrayList1.contains(vassals0));
      
      String string0 = fiefdoms0.getName();
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals("yE,cQG[#", fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getName());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      int int0 = (-2414);
      fiefdoms0.setViking((ArrayList<Intruders>) null);
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getOwner());
      
      fiefdoms0.setOwner("viking");
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("viking", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      fiefdoms0.setKingdom(false);
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals("viking", fiefdoms0.getOwner());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        fiefdoms0.setViking((-2414), false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.Fiefdoms", e);
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      ArrayList<Player> arrayList0 = fiefdoms0.getVassalsList();
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      int int0 = fiefdoms0.getPersonalCastles();
      assertEquals(0, int0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      
      String string0 = fiefdoms0.getName();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertNull(string0);
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(fiefdoms0.getName());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getOwner());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setRebelliousVassals(0, true);
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertNull(fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.buyPersonalCastles((-957));
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      
      ArrayList<String> arrayList0 = fiefdoms0.getInvaderType();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getPeasants());
      assertFalse(fiefdoms0.isKingdom());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getValue());
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertNotNull(fiefdoms0);
      
      fiefdoms0.setPersonalCastles(false);
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      
      ArrayList<Vassals> arrayList0 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(fiefdoms0.getConqueror());
      assertEquals((-1), fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertEquals(0, fiefdoms0.getValue());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getPeasants());
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Fiefdoms fiefdoms0 = new Fiefdoms();
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(fiefdoms0);
      
      ArrayList<Intruders> arrayList0 = new ArrayList<Intruders>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-68);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-117);
      fiefdoms0.selectioncolor = byteArray0;
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      Intruders intruders0 = new Intruders();
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertNull(intruders0.getLocation());
      assertNotNull(intruders0);
      
      intruders0.setLocation("You are allowed to take up to ");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertEquals("You are allowed to take up to ", intruders0.getLocation());
      
      intruders0.setLocation("");
      assertNull(intruders0.getRank());
      assertNull(intruders0.getType());
      assertEquals("", intruders0.getLocation());
      
      intruders0.setType("");
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getType());
      assertEquals("", intruders0.getLocation());
      
      intruders0.setLocation("b*q=)SUYGdE");
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getType());
      assertEquals("b*q=)SUYGdE", intruders0.getLocation());
      
      arrayList0.add(0, intruders0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertNull(intruders0.getRank());
      assertEquals("", intruders0.getType());
      assertEquals("b*q=)SUYGdE", intruders0.getLocation());
      assertTrue(arrayList0.contains(intruders0));
      
      Vassals vassals0 = new Vassals("", "");
      assertEquals("", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      assertNotNull(vassals0);
      
      vassals0.setFiefdom("^eT(M6bkGTifw_eI}a");
      assertEquals("", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("^eT(M6bkGTifw_eI}a", vassals0.getFiefdom());
      assertNull(vassals0.getLocation());
      
      vassals0.setLocation("You cannot buy more than a total of ");
      assertEquals("", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("^eT(M6bkGTifw_eI}a", vassals0.getFiefdom());
      assertEquals("You cannot buy more than a total of ", vassals0.getLocation());
      
      vassals0.setLocation("b*q=)SUYGdE");
      assertEquals("", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("^eT(M6bkGTifw_eI}a", vassals0.getFiefdom());
      assertEquals("b*q=)SUYGdE", vassals0.getLocation());
      
      fiefdoms0.setMuslim(arrayList0);
      assertNull(fiefdoms0.getOwner());
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setOwner("!y^n75rj*8I6r2vv");
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      
      boolean boolean0 = arrayList0.remove((Object) vassals0);
      assertFalse(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals("", vassals0.getLord());
      assertEquals("vassal", vassals0.getRank());
      assertEquals("^eT(M6bkGTifw_eI}a", vassals0.getFiefdom());
      assertEquals("b*q=)SUYGdE", vassals0.getLocation());
      assertTrue(arrayList0.contains(intruders0));
      
      fiefdoms0.setMagyar(arrayList0);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(arrayList0.contains(intruders0));
      
      ArrayList<Intruders> arrayList1 = fiefdoms0.getMuslim();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList1.size());
      assertFalse(arrayList1.isEmpty());
      assertSame(arrayList1, arrayList0);
      assertNotNull(arrayList1);
      assertTrue(arrayList1.contains(intruders0));
      
      float[] floatArray0 = fiefdoms0.getShaderColor();
      assertArrayEquals(new float[] {0.0F, 0.0F}, floatArray0, 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNotNull(floatArray0);
      
      ArrayList<String> arrayList2 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList2);
      
      byte[] byteArray1 = fiefdoms0.getSelectioncolor();
      assertArrayEquals(new byte[] {(byte) (-68), (byte)0, (byte) (-117)}, byteArray1);
      assertEquals(3, byteArray1.length);
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertSame(byteArray1, byteArray0);
      assertNotNull(byteArray1);
      
      ArrayList<String> arrayList3 = fiefdoms0.getInvaderType();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList3);
      
      ArrayList<Vassals> arrayList4 = fiefdoms0.getRebelliousVassals();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertTrue(arrayList4.isEmpty());
      assertEquals(0, arrayList4.size());
      assertNotNull(arrayList4);
      assertFalse(arrayList4.contains(vassals0));
      
      ArrayList<Intruders> arrayList5 = fiefdoms0.getMagyar();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertEquals(1, arrayList5.size());
      assertFalse(arrayList5.isEmpty());
      assertSame(arrayList5, arrayList0);
      assertSame(arrayList5, arrayList1);
      assertNotNull(arrayList5);
      assertTrue(arrayList5.contains(intruders0));
      
      ArrayList<String> arrayList6 = fiefdoms0.getNeighbors();
      assertEquals(0, fiefdoms0.getPeasants());
      assertEquals(0, fiefdoms0.getValue());
      assertEquals(0, fiefdoms0.getPersonalCastles());
      assertNull(fiefdoms0.getName());
      assertNull(fiefdoms0.getConqueror());
      assertEquals("!y^n75rj*8I6r2vv", fiefdoms0.getOwner());
      assertFalse(fiefdoms0.isKingdom());
      assertEquals(0, fiefdoms0.getFiefdomCastles());
      assertNull(arrayList6);
  }
}

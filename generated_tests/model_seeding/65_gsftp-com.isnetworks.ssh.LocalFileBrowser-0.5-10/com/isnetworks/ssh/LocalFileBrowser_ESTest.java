/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 22:17:45 GMT 2019
 */

package com.isnetworks.ssh;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.isnetworks.ssh.FileDisplay;
import com.isnetworks.ssh.FileListItem;
import com.isnetworks.ssh.LocalFileBrowser;
import java.awt.HeadlessException;
import mindbright.ssh.SSHPropertyHandler;
import mindbright.ssh.SSHSCPIndicator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LocalFileBrowser_ESTest extends LocalFileBrowser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.refresh();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      // Undeclared exception!
      try { 
        localFileBrowser0.rename((FileListItem) null, "-Zb.Kb.cep_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.mFileDisplay = null;
      // Undeclared exception!
      try { 
        localFileBrowser0.refresh();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      // Undeclared exception!
      try { 
        localFileBrowser0.makeDirectory((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      try { 
        localFileBrowser0.initialize();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to refresh file list
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      // Undeclared exception!
      try { 
        localFileBrowser0.initialize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      // Undeclared exception!
      try { 
        localFileBrowser0.fileDoubleClicked((FileListItem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      FileListItem[] fileListItemArray0 = new FileListItem[1];
      // Undeclared exception!
      try { 
        localFileBrowser0.delete(fileListItemArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = null;
      try {
        localFileBrowser0 = new LocalFileBrowser((FileDisplay) null, sSHPropertyHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.AbstractFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.initialize();
      localFileBrowser0.refresh();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",*/,*");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "not directory");
      FileListItem fileListItem0 = new FileListItem(",*", ",*", true, 1024L, (-1727L));
      try { 
        localFileBrowser0.fileDoubleClicked(fileListItem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to open directory: /home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/,*_/,*
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      FileListItem fileListItem0 = new FileListItem("", "", true, (-1L), (-2658L));
      localFileBrowser0.fileDoubleClicked(fileListItem0);
      assertTrue(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      MockFile mockFile0 = new MockFile(",*");
      FileListItem fileListItem0 = new FileListItem(mockFile0);
      localFileBrowser0.fileDoubleClicked(fileListItem0);
      assertEquals(0L, fileListItem0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      FileListItem fileListItem0 = new FileListItem(":", "UPzR4J~", true, 0L, 1024L);
      try { 
        localFileBrowser0.rename(fileListItem0, "9lMrRZif");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to rename file UPzR4J~: to UPzR4J~9lMrRZif
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",*/,*");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileListItem fileListItem0 = new FileListItem(",*", ",*", true, 2812L, 2812L);
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.changeDirectory(",*");
      localFileBrowser0.rename(fileListItem0, "o!?h\"7[f%,yt");
      try { 
        localFileBrowser0.fileDoubleClicked(fileListItem0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to open directory: /home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation/,*_/,*
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(",*");
      byte[] byteArray0 = new byte[6];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      try { 
        localFileBrowser0.changeDirectory(",*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ,* a file, not a directory.
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      try { 
        localFileBrowser0.changeDirectory("..");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Directory .. does not exist or you do not have permission to access it.
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.changeDirectory("");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.changeDirectory((String) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      FileListItem[] fileListItemArray0 = new FileListItem[10];
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, (SSHPropertyHandler) null);
      // Undeclared exception!
      try { 
        localFileBrowser0.delete(fileListItemArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      FileListItem[] fileListItemArray0 = new FileListItem[0];
      localFileBrowser0.delete(fileListItemArray0);
      assertEquals(0, fileListItemArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.delete((FileListItem[]) null);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      try { 
        localFileBrowser0.makeDirectory("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unable to make directory: /home/pderakhshanfar/evosuite-model-seeding-ee/evosuite-model-seeding-empirical-evaluation
         //
         verifyException("com.isnetworks.ssh.LocalFileBrowser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.makeDirectory("\"k=\u0005");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      FileListItem fileListItem0 = new FileListItem("..", "..", true, 1000L, 1000L);
      localFileBrowser0.fileDoubleClicked(fileListItem0);
      assertTrue(fileListItem0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      SSHSCPIndicator sSHSCPIndicator0 = mock(SSHSCPIndicator.class, new ViolatedAssumptionAnswer());
      localFileBrowser0.putFiles(sSHSCPIndicator0, (FileDisplay) null, (FileDisplay) null, false);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.disconnect();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      SSHSCPIndicator sSHSCPIndicator0 = mock(SSHSCPIndicator.class, new ViolatedAssumptionAnswer());
      localFileBrowser0.getFiles(sSHSCPIndicator0, (FileDisplay) null, (FileDisplay) null, true);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.abort();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileDisplay fileDisplay0 = mock(FileDisplay.class, new ViolatedAssumptionAnswer());
      SSHPropertyHandler sSHPropertyHandler0 = new SSHPropertyHandler();
      LocalFileBrowser localFileBrowser0 = new LocalFileBrowser(fileDisplay0, sSHPropertyHandler0);
      localFileBrowser0.initialize();
      FileListItem fileListItem0 = new FileListItem("..", "..", true, 1000L, 1000L);
      localFileBrowser0.fileDoubleClicked(fileListItem0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 16:10:27 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.NumericToBinary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NumericToBinary_ESTest extends NumericToBinary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      // Undeclared exception!
      try { 
        numericToBinary0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      // Undeclared exception!
      try { 
        numericToBinary0.input((Instance) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.NumericToBinary", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      String string0 = numericToBinary0.globalInfo();
      assertEquals("Converts all numeric attributes into binary attributes (apart from the class attribute, if set): if the value of the numeric attribute is exactly zero, the value of the new attribute will be zero. If the value of the numeric attribute is missing, the value of the new attribute will be missing. Otherwise, the value of the new attribute will be one. The new attributes will be nominal.", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      // Undeclared exception!
      try { 
        numericToBinary0.setInputFormat((Instances) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String[] stringArray0 = new String[6];
      NumericToBinary.main(stringArray0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      NumericToBinary numericToBinary0 = new NumericToBinary();
      String string0 = numericToBinary0.getRevision();
      assertEquals("8034", string0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:12:31 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Contract;
import com.ib.client.ContractDetails;
import com.ib.client.EWrapperMsgGenerator;
import com.ib.client.Execution;
import com.ib.client.Order;
import com.ib.client.OrderState;
import com.ib.client.UnderComp;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EWrapperMsgGenerator_ESTest extends EWrapperMsgGenerator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      ContractDetails contractDetails0 = new ContractDetails(contract0, "8g1KTH=>", "", (-724.1), "", " allOrNone=", 0, " allOrNone=", (String) null, "", " impliedFuture = ", "", "=", "", "Xq!2~B$m%#GdL^C*[");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contractDetails0.m_priceMagnifier);
      assertFalse(contractDetails0.m_convertible);
      assertEquals(0, contractDetails0.m_underConId);
      assertFalse(contractDetails0.m_nextOptionPartial);
      assertEquals(0.0, contractDetails0.m_coupon, 0.01);
      assertFalse(contractDetails0.m_callable);
      assertEquals((-724.1), contractDetails0.m_minTick, 0.01);
      assertFalse(contractDetails0.m_putable);
      assertNotNull(contractDetails0);
      
      String string0 = EWrapperMsgGenerator.scannerData(671, 0, contractDetails0, " impliedFuture = ", (String) null, (String) null, "n),KR");
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contractDetails0.m_priceMagnifier);
      assertFalse(contractDetails0.m_convertible);
      assertEquals(0, contractDetails0.m_underConId);
      assertFalse(contractDetails0.m_nextOptionPartial);
      assertEquals(0.0, contractDetails0.m_coupon, 0.01);
      assertFalse(contractDetails0.m_callable);
      assertEquals((-724.1), contractDetails0.m_minTick, 0.01);
      assertFalse(contractDetails0.m_putable);
      assertEquals("id = 671 rank=0 symbol=null secType=null expiry=null strike=0.0 right=null exchange=null currency=null localSymbol=null marketName=8g1KTH=> tradingClass= distance= impliedFuture =  benchmark=null projection=null legsStr=n),KR", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.realtimeBar(1262, 1262, 1262, 0.0, 1262, 0.0, 1262, 0.0, 1262);
      assertEquals("id=1262 time = 1262 open=1262.0 high=0.0 low=1262.0 close=0.0 volume=1262 count=1262 WAP=0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.historicalData(575, "reqId = 222 =============== end ===============", 1.7976931348623157E308, 0.0, 222, 222, 102, 575, 0, false);
      assertEquals("id=575 date = reqId = 222 =============== end =============== open=1.7976931348623157E308 high=0.0 low=222.0 close=222.0 volume=102 count=575 WAP=0.0 hasGaps=false", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.historicalData(1337, "FA: null id = -2574 underComp.conId =0 underComp.delta =0.0 underComp.price =0.0", (-575.4), 0.0, 0.0, (-1097), 0, 0, 2, true);
      assertEquals("id=1337 date = FA: null id = -2574 underComp.conId =0 underComp.delta =0.0 underComp.price =0.0 open=-575.4 high=0.0 low=0.0 close=-1097.0 volume=0 count=0 WAP=2.0 hasGaps=true", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateNewsBulletin(222, 539, "reqId = 222 =============== end ===============", "accountDownloadEnd: ");
      assertEquals("MsgId=222 :: MsgType=539 :: Origin=accountDownloadEnd:  :: Message=reqId = 222 =============== end ===============", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateMktDepthL2((-1076), 0, "I\"ot6`K;Ux5Xy*", 1148, (-1076), 1282, 0);
      assertEquals("updateMktDepth: -1076 0 I\"ot6`K;Ux5Xy* 1148 -1076 1282.0 0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateMktDepthL2(234, 234, "8g1KTH=>", 0, 2820, 0, 63);
      assertEquals("updateMktDepth: 234 234 8g1KTH=> 0 2820 0.0 63", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateMktDepth(0, 0, 13, 0, 0.0, 98);
      assertEquals("updateMktDepth: 0 0 13 0 0.0 98", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateMktDepth(3, (-1), 0, 1705, 0, (-1));
      assertEquals("updateMktDepth: 3 -1 0 1705 0.0 -1", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      String string0 = EWrapperMsgGenerator.updatePortfolio(contract0, 0, 1320.0748231917, 10.0, 1320.0748231917, 10.0, 1320.0748231917, (String) null);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals("updatePortfolio: conid = 0\nsymbol = null\nsecType = null\nexpiry = null\nstrike = 0.0\nright = null\nmultiplier = null\nexchange = null\nprimaryExch = null\ncurrency = null\nlocalSymbol = null\n0 1320.0748231917 10.0 1320.0748231917 10.0 1320.0748231917 null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateAccountValue("suOKxTyuz)>{.v&=ka", "com.ib.client.OrderState", "\nmultiplier = ", "");
      assertEquals("updateAccountValue: suOKxTyuz)>{.v&=ka com.ib.client.OrderState \nmultiplier =  ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.orderStatus(Integer.MAX_VALUE, "com.ib.client.Execution", 102, 102, 0.0, 102, 0, 102, 0, " auxPrice=");
      assertEquals("order status: orderId=2147483647 clientId=0 permId=102 status=com.ib.client.Execution filled=102 remaining=102 avgFillPrice=0.0 lastFillPrice=102.0 parent Id=0 whyHeld= auxPrice=", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.orderStatus((-5905), "XG'LDL-[&^S", 695, 1913, 1.7976931348623157E308, 520, 1913, 520, 0, "BOND");
      assertEquals("order status: orderId=-5905 clientId=0 permId=520 status=XG'LDL-[&^S filled=695 remaining=1913 avgFillPrice=1.7976931348623157E308 lastFillPrice=520.0 parent Id=1913 whyHeld=BOND", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickEFP((-4558), 0, 0, "}JQ*-<x_", 317.242732, (-4558), "", (-4558), 0);
      assertEquals("id=-4558  bidSize: basisPoints = 0.0/}JQ*-<x_ impliedFuture = 317.242732 holdDays = -4558 futureExpiry =  dividendImpact = -4558.0 dividends to expiry = 0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickEFP((-2145491666), (-2145491666), 38, "id=0  bidEFP: vol = 1378.697450627461 delta = 0.0", 0, 0, "id=0  bidEFP: vol = 1378.697450627461 delta = 0.0", 38, (-2197.4706));
      assertEquals("id=-2145491666  unknown: basisPoints = 38.0/id=0  bidEFP: vol = 1378.697450627461 delta = 0.0 impliedFuture = 0.0 holdDays = 0 futureExpiry = id=0  bidEFP: vol = 1378.697450627461 delta = 0.0 dividendImpact = 38.0 dividends to expiry = -2197.4706", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickString(0, 14, "FA:");
      assertEquals("id=0  open=FA:", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickGeneric(3, 1605, 0.0);
      assertEquals("id=3  unknown=0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(1286, 13, 2100.65836079052, 0.0, 2100.65836079052, 0.0);
      assertEquals("id=1286  modelOptComp: vol = 2100.65836079052 delta = 0.0: modelPrice = 2100.65836079052: pvDividend = 0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(311, 311, 2371.0, 1.0, 1387.0, 1819.0);
      assertEquals("id=311  unknown: vol = 2371.0 delta = 1.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(0, 0, 0, 0, 0, 0);
      assertEquals("id=0  bidSize: vol = 0.0 delta = 0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickSize((-1), (-467), 0);
      assertEquals("id=-1  unknown=0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickPrice((-1), 486, 0.0, 35);
      assertEquals("id=-1  unknown=0.0  canAutoExecute", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickPrice(0, (-382), 2480.159, (-382));
      assertEquals("id=0  unknown=2480.159  canAutoExecute", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContractDetails contractDetails0 = new ContractDetails();
      assertFalse(contractDetails0.m_nextOptionPartial);
      assertEquals(0, contractDetails0.m_priceMagnifier);
      assertFalse(contractDetails0.m_convertible);
      assertEquals(0, contractDetails0.m_underConId);
      assertFalse(contractDetails0.m_putable);
      assertEquals(0.0, contractDetails0.m_coupon, 0.01);
      assertFalse(contractDetails0.m_callable);
      assertEquals(0.0, contractDetails0.m_minTick, 0.01);
      assertNotNull(contractDetails0);
      
      String string0 = EWrapperMsgGenerator.scannerData((-1819), (-1819), contractDetails0, (String) null, "order status: orderId=", (String) null, (String) null);
      assertFalse(contractDetails0.m_nextOptionPartial);
      assertEquals(0, contractDetails0.m_priceMagnifier);
      assertFalse(contractDetails0.m_convertible);
      assertEquals(0, contractDetails0.m_underConId);
      assertFalse(contractDetails0.m_putable);
      assertEquals(0.0, contractDetails0.m_coupon, 0.01);
      assertFalse(contractDetails0.m_callable);
      assertEquals(0.0, contractDetails0.m_minTick, 0.01);
      assertEquals("id = -1819 rank=-1819 symbol=null secType=null expiry=null strike=0.0 right=null exchange=null currency=null localSymbol=null marketName=null tradingClass=null distance=null benchmark=order status: orderId= projection=null legsStr=null", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertNotNull(underComp0);
      
      String string0 = EWrapperMsgGenerator.deltaNeutralValidation(0, underComp0);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals("id = 0 underComp.conId =0 underComp.delta =0.0 underComp.price =0.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ContractDetails contractDetails0 = new ContractDetails();
      assertEquals(0.0, contractDetails0.m_coupon, 0.01);
      assertFalse(contractDetails0.m_callable);
      assertEquals(0.0, contractDetails0.m_minTick, 0.01);
      assertFalse(contractDetails0.m_putable);
      assertEquals(0, contractDetails0.m_priceMagnifier);
      assertFalse(contractDetails0.m_convertible);
      assertEquals(0, contractDetails0.m_underConId);
      assertFalse(contractDetails0.m_nextOptionPartial);
      assertNotNull(contractDetails0);
      
      String string0 = EWrapperMsgGenerator.bondContractDetails((-1), contractDetails0);
      assertEquals(0.0, contractDetails0.m_coupon, 0.01);
      assertFalse(contractDetails0.m_callable);
      assertEquals(0.0, contractDetails0.m_minTick, 0.01);
      assertFalse(contractDetails0.m_putable);
      assertEquals(0, contractDetails0.m_priceMagnifier);
      assertFalse(contractDetails0.m_convertible);
      assertEquals(0, contractDetails0.m_underConId);
      assertFalse(contractDetails0.m_nextOptionPartial);
      assertEquals("reqId = -1 ===================================\n ---- Bond Contract Details begin ----\nsymbol = null\nsecType = null\ncusip = null\ncoupon = 0.0\nmaturity = null\nissueDate = null\nratings = null\nbondType = null\ncouponType = null\nconvertible = false\ncallable = false\nputable = false\ndescAppend = null\nexchange = null\ncurrency = null\nmarketName = null\ntradingClass = null\nconid = 0\nminTick = 0.0\norderTypes = null\nvalidExchanges = null\nnextOptionDate = null\nnextOptionType = null\nnextOptionPartial = false\nnotes = null\nlongName = null\n ---- Bond Contract Details End ----\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.updatePortfolio((Contract) null, (-8), 1.0, 1.7976931348623157E308, (-8), 1.7976931348623157E308, 1.0, ";.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Order order0 = new Order();
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_origin);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, order0.m_ocaType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertNotNull(order0);
      
      OrderState orderState0 = new OrderState();
      assertEquals(0.0, orderState0.m_minCommission, 0.01);
      assertEquals(0.0, orderState0.m_commission, 0.01);
      assertEquals(0.0, orderState0.m_maxCommission, 0.01);
      assertNotNull(orderState0);
      
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.openOrder(0, (Contract) null, order0, orderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.fundamentalData('b', (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Contract contract0 = new Contract();
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.execDetails((-1), contract0, (Execution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.contractMsg((Contract) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.contractDetails(1221, (ContractDetails) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertNotNull(contract0);
      
      String string0 = EWrapperMsgGenerator.contractMsg(contract0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0, contract0.m_conId);
      assertEquals("conid = 0\nsymbol = null\nsecType = null\nexpiry = null\nstrike = 0.0\nright = null\nmultiplier = null\nexchange = null\nprimaryExch = null\ncurrency = null\nlocalSymbol = null\n", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Order order0 = new Order();
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_notHeld);
      assertTrue(order0.m_transmit);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_ocaType);
      assertNotNull(order0);
      
      order0.m_algoStrategy = "vQluFU";
      OrderState orderState0 = new OrderState();
      assertEquals(0.0, orderState0.m_maxCommission, 0.01);
      assertEquals(0.0, orderState0.m_minCommission, 0.01);
      assertEquals(0.0, orderState0.m_commission, 0.01);
      assertNotNull(orderState0);
      
      order0.m_algoParams = contract0.m_comboLegs;
      assertEquals(10, order0.m_algoParams.capacity());
      assertEquals(0, order0.m_algoParams.size());
      assertEquals("[]", order0.m_algoParams.toString());
      assertTrue(order0.m_algoParams.isEmpty());
      
      String string0 = EWrapperMsgGenerator.openOrder(Integer.MAX_VALUE, contract0, order0, orderState0);
      assertEquals(0, contract0.m_conId);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1, Order.FIRM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_notHeld);
      assertTrue(order0.m_transmit);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0.0, orderState0.m_maxCommission, 0.01);
      assertEquals(0.0, orderState0.m_minCommission, 0.01);
      assertEquals(0.0, orderState0.m_commission, 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertNotNull(contract0);
      
      Order order0 = new Order();
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertNotNull(order0);
      
      order0.m_algoStrategy = "volume";
      OrderState orderState0 = new OrderState("VOL", "|7knz[4&;]:s^", "|7knz[4&;]:s^", "volume", 0, 1.7976931348623157E308, 2535.075, (String) null, "");
      assertEquals(0.0, orderState0.m_commission, 0.01);
      assertEquals(1.7976931348623157E308, orderState0.m_minCommission, 0.01);
      assertEquals(2535.075, orderState0.m_maxCommission, 0.01);
      assertNotNull(orderState0);
      
      String string0 = EWrapperMsgGenerator.openOrder(0, contract0, order0, orderState0);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, orderState0.m_commission, 0.01);
      assertEquals(1.7976931348623157E308, orderState0.m_minCommission, 0.01);
      assertEquals(2535.075, orderState0.m_maxCommission, 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Contract contract0 = new Contract();
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertNotNull(contract0);
      
      Order order0 = new Order();
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_triggerMethod);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertNotNull(order0);
      
      OrderState orderState0 = new OrderState((String) null, (String) null, (String) null, "vQluFU", 0.0, Integer.MAX_VALUE, 0, (String) null, (String) null);
      assertEquals(2.147483647E9, orderState0.m_minCommission, 0.01);
      assertEquals(0.0, orderState0.m_maxCommission, 0.01);
      assertEquals(0.0, orderState0.m_commission, 0.01);
      assertNotNull(orderState0);
      
      UnderComp underComp0 = new UnderComp();
      assertEquals(0.0, underComp0.m_price, 0.01);
      assertEquals(0, underComp0.m_conId);
      assertEquals(0.0, underComp0.m_delta, 0.01);
      assertNotNull(underComp0);
      
      contract0.m_underComp = underComp0;
      String string0 = EWrapperMsgGenerator.openOrder(Integer.MAX_VALUE, contract0, order0, orderState0);
      assertEquals(0, contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, contract0.m_strike, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_triggerMethod);
      assertFalse(order0.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_clientId);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_outsideRth);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertFalse(order0.m_blockOrder);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_displaySize);
      assertTrue(order0.m_transmit);
      assertEquals(2.147483647E9, orderState0.m_minCommission, 0.01);
      assertEquals(0.0, orderState0.m_maxCommission, 0.01);
      assertEquals(0.0, orderState0.m_commission, 0.01);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OrderState orderState0 = new OrderState("d", "d", "d", "$IK*hc?d}|", (-1799L), (-1799L), (-2272.076039933), "d", "$IK*hc?d}|");
      assertEquals((-1799.0), orderState0.m_minCommission, 0.01);
      assertEquals((-1799.0), orderState0.m_commission, 0.01);
      assertEquals((-2272.076039933), orderState0.m_maxCommission, 0.01);
      assertNotNull(orderState0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("d"));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      Contract contract0 = new Contract((-2371), (String) null, "BAG", "d", (-1799.0), (String) null, "", "fundamentals", (String) null, "\nlocalSymbol = ", vector0, "BAG", false, "", "d");
      assertEquals((-2371), contract0.m_conId);
      assertEquals((-1799.0), contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(vector0.contains((-2371)));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(contract0);
      
      contract0.m_comboLegsDescrip = "),K8<vU>%7X@<:?7L";
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      Order order0 = new Order();
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_allOrNone);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertNotNull(order0);
      
      String string0 = EWrapperMsgGenerator.openOrder(30, contract0, order0, orderState0);
      assertEquals((-1799.0), orderState0.m_minCommission, 0.01);
      assertEquals((-1799.0), orderState0.m_commission, 0.01);
      assertEquals((-2272.076039933), orderState0.m_maxCommission, 0.01);
      assertEquals((-2371), contract0.m_conId);
      assertEquals((-1799.0), contract0.m_strike, 0.01);
      assertFalse(contract0.m_includeExpired);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_notHeld);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_auctionStrategy);
      assertFalse(order0.m_allOrNone);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(vector0.contains((-2371)));
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OrderState orderState0 = new OrderState("", "", "", "$IK*hc?d}|", (-1375.43), (-1799L), (-2272.076039933), "aVhf1>_f9_*x8", "$IK*hc?d}|");
      assertEquals((-1375.43), orderState0.m_commission, 0.01);
      assertEquals((-1799.0), orderState0.m_minCommission, 0.01);
      assertEquals((-2272.076039933), orderState0.m_maxCommission, 0.01);
      assertNotNull(orderState0);
      
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("$IK*hc?d}|"));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(vector0);
      
      Contract contract0 = new Contract((-2371), (String) null, "BAG", "shortable", (-1799.0), (String) null, "", "fundamentals", (String) null, "\nlocalSymbol = ", vector0, "BAG", false, "93DFkn", "");
      assertEquals((-1799.0), contract0.m_strike, 0.01);
      assertEquals((-2371), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertFalse(vector0.contains("$IK*hc?d}|"));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(contract0);
      
      Order order0 = new Order();
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_whatIf);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertNotNull(order0);
      
      String string0 = EWrapperMsgGenerator.openOrder(22, contract0, order0, orderState0);
      assertEquals((-1375.43), orderState0.m_commission, 0.01);
      assertEquals((-1799.0), orderState0.m_minCommission, 0.01);
      assertEquals((-2272.076039933), orderState0.m_maxCommission, 0.01);
      assertEquals((-1799.0), contract0.m_strike, 0.01);
      assertEquals((-2371), contract0.m_conId);
      assertFalse(contract0.m_includeExpired);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order0.m_whatIf);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_displaySize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(vector0.contains("$IK*hc?d}|"));
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(13, 13, 13, 13, 13, 1.7976931348623157E308);
      assertEquals("id=13  modelOptComp: vol = 13.0 delta = N/A: modelPrice = 13.0: pvDividend = N/A", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(13, 13, 13, 13, 1.7976931348623157E308, 13);
      assertEquals("id=13  modelOptComp: vol = 13.0 delta = N/A: modelPrice = N/A: pvDividend = 13.0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation((-1073741824), 13, 13, 13, (-1073741824), (-1073741824));
      assertEquals("id=-1073741824  modelOptComp: vol = 13.0 delta = N/A: modelPrice = N/A: pvDividend = N/A", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(2147483646, 13, 1.0, 0.0, 1276.28, 3854.04266464265);
      assertEquals("id=2147483646  modelOptComp: vol = 1.0 delta = 0.0: modelPrice = 1276.28: pvDividend = 3854.04266464265", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(13, 13, 1.7976931348623157E308, 1.7976931348623157E308, 13, 13);
      assertEquals("id=13  modelOptComp: vol = N/A delta = N/A: modelPrice = 13.0: pvDividend = 13.0", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation(13, 13, 1, 645.483468, 0.0, Integer.MAX_VALUE);
      assertEquals("id=13  modelOptComp: vol = 1.0 delta = N/A: modelPrice = 0.0: pvDividend = 2.147483647E9", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickOptionComputation((-8), (-8), (-8), (-8), (-8), (-8));
      assertEquals("id=-8  unknown: vol = N/A delta = N/A", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickPrice(3, 3, 3, 0);
      assertEquals("id=3  askSize=3.0  noAutoExecute", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.deltaNeutralValidation(1639, (UnderComp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.fundamentalData((-366), "lastPrice");
      assertEquals("id  = -366 len = 9\nlastPrice", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Contract contract0 = new Contract();
      String string0 = EWrapperMsgGenerator.updatePortfolio(contract0, 0, (-1.0), (-2410.78808618948), 0.0, 0.0, 1025.3616436722918, "");
      assertEquals("updatePortfolio: conid = 0\nsymbol = null\nsecType = null\nexpiry = null\nstrike = 0.0\nright = null\nmultiplier = null\nexchange = null\nprimaryExch = null\ncurrency = null\nlocalSymbol = null\n0 -1.0 -2410.78808618948 0.0 0.0 1025.3616436722918 ", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.receiveFA(0, "lastSize");
      assertEquals("FA: null lastSize", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.contractDetailsEnd(18);
      assertEquals("reqId = 18 =============== end ===============", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickSnapshotEnd(902);
      assertEquals("id=902 =============== end ===============", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.scannerDataEnd(1536);
      assertEquals("id = 1536 =============== end ===============", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.managedAccounts("");
      assertEquals("Connected : The list of managed accounts are : []", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EWrapperMsgGenerator eWrapperMsgGenerator0 = new EWrapperMsgGenerator();
      assertEquals("Connection Closed", eWrapperMsgGenerator0.connectionClosed());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Vector<Integer> vector0 = new Vector<Integer>();
      Contract contract0 = new Contract(1286, "bidPrice", "e|V3K_w12%1N#{IkpZ", "u!Ym6Tf6d~$", 186.0, " scaleInitLevelSize=", "updateAccountTime: e|V3K_w12%1N#{IkpZ", "NwWo|# ~>kR$AXs", "id=1286  modelOptComp: vol = 2100.65836079052 delta = 0.0: modelPrice = 2100.65836079052: pvDividend = 0.0", "SCANNER PARAMETERS:\ne|V3K_w12%1N#{IkpZ", vector0, "vf", false, "_Zvy-7ki/'~-!", "j/n 3KLt239Jq/");
      ContractDetails contractDetails0 = new ContractDetails(contract0, "NwWo|# ~>kR$AXs", "_", 186.0, "id=1286  modelOptComp: vol = 2100.65836079052 delta = 0.0: modelPrice = 2100.65836079052: pvDividend = 0.0", " eTradeOnly=", 5153, "(a^(P*#m*-?;uj", "5n)YB=oS#<ocK<Te}Q", "g^N", "$IK*hc?d}|", "_Zvy-7ki/'~-!", " eTradeOnly=", "\"B@L", "vf");
      String string0 = EWrapperMsgGenerator.contractDetails(13, contractDetails0);
      assertEquals("reqId = 13 ===================================\n ---- Contract Details begin ----\nconid = 1286\nsymbol = bidPrice\nsecType = e|V3K_w12%1N#{IkpZ\nexpiry = u!Ym6Tf6d~$\nstrike = 186.0\nright =  scaleInitLevelSize=\nmultiplier = updateAccountTime: e|V3K_w12%1N#{IkpZ\nexchange = NwWo|# ~>kR$AXs\nprimaryExch = vf\ncurrency = id=1286  modelOptComp: vol = 2100.65836079052 delta = 0.0: modelPrice = 2100.65836079052: pvDividend = 0.0\nlocalSymbol = SCANNER PARAMETERS:\ne|V3K_w12%1N#{IkpZ\nmarketName = NwWo|# ~>kR$AXs\ntradingClass = _\nminTick = 186.0\nprice magnifier = 0\norderTypes = id=1286  modelOptComp: vol = 2100.65836079052 delta = 0.0: modelPrice = 2100.65836079052: pvDividend = 0.0\nvalidExchanges =  eTradeOnly=\nunderConId = 5153\nlongName = (a^(P*#m*-?;uj\ncontractMonth = 5n)YB=oS#<ocK<Te}Q\nindustry = g^N\ncategory = $IK*hc?d}|\nsubcategory = _Zvy-7ki/'~-!\ntimeZoneId =  eTradeOnly=\ntradingHours = \"B@L\nliquidHours = vf\n ---- Contract Details End ----\n", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.accountDownloadEnd((String) null);
      assertEquals("accountDownloadEnd: null", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.bondContractDetails(13, (ContractDetails) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.scannerData(0, 0, (ContractDetails) null, "10GyT|RZYEz)aap2;I", "|$F#J`Gx~dx", "`vond1,Me(X>45zyCz;", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.realtimeBar(0, 1387L, (-1077.064), (-1077.064), (-1.0), 0.0, 2L, (-2371), (-2371));
      assertEquals("id=0 time = 1387 open=-1077.064 high=-1077.064 low=-1.0 close=0.0 volume=2 count=-2371 WAP=-2371.0", string0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.nextValidId(1286);
      assertEquals("Next Valid Order ID: 1286", string0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.execDetailsEnd(13);
      assertEquals("reqId = 13 =============== end ===============", string0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 17:08:17 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeEnvironment_ESTest extends HomeEnvironment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.setVideoFrameRate(36);
      assertEquals(36, homeEnvironment0.getVideoFrameRate());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.setVideoWidth(1143);
      assertEquals(857, homeEnvironment0.getVideoHeight());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      homeEnvironment0.setPhotoHeight(13684944);
      assertEquals(13684944, homeEnvironment0.getPhotoHeight());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(0, (HomeTexture) null, 0, (HomeTexture) null, 0, 0);
      homeEnvironment0.setPhotoWidth(1143);
      assertEquals(1143, homeEnvironment0.getPhotoWidth());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 1.7777778F, (-251.73198F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(0, homeTexture0, 0, 0, 0.0F);
      homeEnvironment0.setCeillingLightColor((-4248));
      homeEnvironment0.setCeillingLightColor(0);
      assertEquals(0, homeEnvironment0.getCeillingLightColor());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 1.7777778F, (-251.73198F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      HomeEnvironment homeEnvironment0 = new HomeEnvironment(211, homeTexture0, 211, homeTexture0, 14, 1.0F);
      homeEnvironment0.setLightColor(300);
      assertEquals(300, homeEnvironment0.getLightColor());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Class<HomeEnvironment> class0 = HomeEnvironment.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      CatalogTexture catalogTexture0 = new CatalogTexture("ZJ:oc1^=", "KN2BQ~TE", resourceURLContent0, (-4158), 1.5F, "ZJ:oc1^=", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      HomeEnvironment homeEnvironment0 = new HomeEnvironment((-4158), homeTexture0, (-752), homeTexture0, (-752), 0.0F);
      homeEnvironment0.setSkyColor(0);
      assertEquals(0, homeEnvironment0.getSkyColor());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      
      homeEnvironment0.setGroundColor(13684944);
      assertEquals(13684944, homeEnvironment0.getGroundColor());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      HomeEnvironment homeEnvironment0 = new HomeEnvironment();
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      
      homeEnvironment0.setObserverCameraElevationAdjusted(false);
      boolean boolean0 = homeEnvironment0.isObserverCameraElevationAdjusted();
      assertFalse(boolean0);
  }
}

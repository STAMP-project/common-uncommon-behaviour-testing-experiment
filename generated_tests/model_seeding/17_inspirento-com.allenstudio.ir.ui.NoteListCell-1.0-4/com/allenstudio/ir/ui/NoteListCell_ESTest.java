/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 12:41:18 GMT 2019
 */

package com.allenstudio.ir.ui;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.allenstudio.ir.core.plugins.AbstractNote;
import com.allenstudio.ir.core.plugins.CommonNote;
import com.allenstudio.ir.ui.NoteListCell;
import java.awt.Dimension;
import java.awt.Graphics;
import javax.swing.JInternalFrame;
import javax.swing.plaf.metal.MetalInternalFrameUI;
import javax.swing.plaf.multi.MultiPanelUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NoteListCell_ESTest extends NoteListCell_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteListCell0.initComponents();
      assertEquals((-1), noteListCell0.getIndexInList());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("This is a testing description. \u00CF\u00A3\u00CD\u00FB\u00C4\u00E3\u00C4\u00DC\u00BF\u00B4\u00B5\u00BD\u00CB\u00FC\u00A1\u00A3", false);
      MetalInternalFrameUI metalInternalFrameUI0 = new MetalInternalFrameUI(jInternalFrame0);
      Dimension dimension0 = metalInternalFrameUI0.getMinimumSize(commonNote0);
      noteListCell0.setPreferredSize(dimension0);
      Dimension dimension1 = noteListCell0.getMaximumSize();
      assertEquals((-1), noteListCell0.getIndexInList());
      assertEquals(Integer.MAX_VALUE, dimension1.width);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      assertEquals((-1), noteListCell0.getIndexInList());
      
      noteListCell0.setIndexInList(0);
      int int0 = noteListCell0.getIndexInList();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteListCell0.setIndexInList(2743);
      int int0 = noteListCell0.getIndexInList();
      assertEquals(2743, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      MultiPanelUI multiPanelUI0 = new MultiPanelUI();
      noteListCell0.setUI(multiPanelUI0);
      // Undeclared exception!
      try { 
        noteListCell0.getMaximumSize();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NoteListCell noteListCell0 = null;
      try {
        noteListCell0 = new NoteListCell((AbstractNote) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.NoteListCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      commonNote0.setFeature((String) null);
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      assertEquals((-1), noteListCell0.getIndexInList());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteListCell0.setSelected(true);
      boolean boolean0 = noteListCell0.isSelected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteListCell0.setSelected(false);
      assertEquals((-1), noteListCell0.getIndexInList());
      assertFalse(noteListCell0.isSelected());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      noteListCell0.isSelected();
      assertEquals((-1), noteListCell0.getIndexInList());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      Dimension dimension0 = noteListCell0.getMaximumSize();
      assertEquals((-1), noteListCell0.getIndexInList());
      assertEquals(55, dimension0.height);
      assertEquals(Integer.MAX_VALUE, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      // Undeclared exception!
      try { 
        noteListCell0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.NoteListCell", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CommonNote commonNote0 = new CommonNote();
      NoteListCell noteListCell0 = new NoteListCell(commonNote0);
      int int0 = noteListCell0.getIndexInList();
      assertEquals((-1), int0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:47:41 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.min();
      complexImage0.min();
      complexImage0.phaseImage();
      complexImage0.min();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.subtract(complexImage1);
      ROI rOI0 = new ROI(1, 1921, 1, 0);
      complexImage0.divide((float) 1921, (float) 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(6, 6);
      complexImage0.clear();
      complexImage0.min();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.multiply(6, 6, (float) 6, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 3079);
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complex1.real();
      complex1.magnitude();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.set(1, 2420, complex1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.magnitudeImage();
      ComplexImage complexImage1 = new ComplexImage(12, 12);
      complexImage0.subtract((float) 12, (float) 12);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.phaseImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.multiply(complexImage0);
      ComplexImage complexImage2 = complexImage0.divide(2604.5076F, (-2663.0F));
      float float0 = (-353.54F);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.uy();
      ROI rOI1 = new ROI(2564, (-2974), 1, 0);
      rOI1.ly();
      // Undeclared exception!
      try { 
        complexImage2.multiply(0.0F, (-353.54F), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2974
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      int int1 = (-1);
      ROI rOI0 = new ROI(0, (-1), (-1), 0);
      int int2 = 8;
      rOI0.setROI(8, (-1), 1, 0);
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-4555), (-4555));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      Complex complex0 = new Complex();
      ComplexImage complexImage1 = new ComplexImage(8, 8);
      ROI rOI0 = new ROI();
      rOI0.X();
      rOI0.Y();
      rOI0.uy();
      ROI rOI1 = new ROI(2564, (-2974), 1, 0);
      rOI1.ly();
      // Undeclared exception!
      try { 
        complexImage1.subtract((-91.1F), (-150.9F), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = (-2536.0F);
      int int0 = 15;
      ROI rOI0 = new ROI(15, 5, 16, 3469);
      // Undeclared exception!
      try { 
        complexImage0.setImag(15, 15, (-2536.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.setROI(1589, 1589, 2299, 2299);
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1589, (-91.1F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.multiply(2787.5583F, (float) 8);
      Complex complex0 = new Complex();
      complex0.real();
      Complex complex1 = new Complex(complex0);
      complexImage1.add(0.0F, (float) (-284));
      ComplexImage complexImage2 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage2.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setImag((-181), (-181), (float) (-181));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int int0 = 15;
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 15, (float) 15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      int int1 = 12;
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      complexImage0.imag = realGrayImage0;
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      complexImage1.multiply(complexImage0);
      complexImage1.divide(2604.5076F, (-2663.0F));
      complexImage2.subtract(complexImage1);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      Complex complex2 = Complex.mult(complex0, complex1);
      complex2.magnitude();
      Complex complex3 = new Complex(complex2);
      ROI rOI0 = new ROI((-1226), (-2652), 15, (-1394));
      // Undeclared exception!
      try { 
        complexImage1.divide((float) 11, (-1.0F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      complexImage2.min();
      ROI rOI0 = new ROI();
      complexImage2.min(rOI0);
      ComplexImage complexImage3 = complexImage0.subtract((float) 37, (float) 37);
      complexImage2.copy(rOI0);
      complexImage1.add(complexImage3);
      complexImage3.subtract((float) 37, (float) 37, rOI0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = 32767.0F;
      // Undeclared exception!
      try { 
        complexImage0.get(0, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(1906, 0);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.multiply(complexImage0);
      complexImage1.magnitudeImage();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1179, 0);
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(703, 0);
      ComplexImage complexImage2 = complexImage1.add((-50.77449F), 1257.0114F);
      complexImage2.copy();
      complexImage2.X();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      Complex.mult(complex0, complex1);
      ROI rOI0 = new ROI();
      complexImage0.min();
      complexImage1.min(rOI0);
      rOI0.ly();
      complexImage1.multiply(complexImage0, rOI0, rOI0);
      complexImage0.add(0, 4, (-1343.12F), (float) 0, rOI0);
      complexImage0.add(0.0F, (float) 15, rOI0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      complexImage1.divide(complexImage0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = complexImage1.divide(2604.5076F, (-2663.0F));
      assertNotNull(complexImage3);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.divide((-2970), 0, (float) (-2970), (float) (-2970));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      ROI rOI1 = new ROI(3103, (-2974), 0, 0);
      rOI1.ly();
      ComplexImage complexImage1 = new ComplexImage(1589, 1933);
      ROI rOI2 = new ROI((-1415), 1, 1589, (-2972));
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI2, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complexImage0.min();
      complexImage0.subtract(complexImage1);
      ROI rOI0 = new ROI();
      complexImage0.multiply(1, 1, (-559.40796F), 0.0F, rOI0);
      complexImage1.subtract(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(598, 0);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, 0, 0, 1.0F, (float) 598);
      ComplexImage complexImage2 = new ComplexImage(0, 0);
      rOI0.setROI((-622), 457, 336, 15);
      complexImage2.max();
      complexImage2.multiply(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.getImag(0, 1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = 32767.0F;
      ROI rOI0 = new ROI();
      rOI0.setROI(336, 336, 0, 255);
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.magnitudeImage();
      complexImage0.phaseImage();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.add(complexImage1);
      int int0 = 670;
      Complex complex0 = null;
      try {
        complex0 = new Complex((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.math.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.clear();
      int int1 = (-2974);
      complexImage0.toString();
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1211), 1, (-1211), (-2974), (float) 0, (-1.0F));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      Complex complex0 = new Complex();
      complexImage0.setReal((RealGrayImage) null);
      Complex complex1 = new Complex(complex0);
      Complex complex2 = Complex.mult(complex0, complex1);
      Complex complex3 = new Complex(complex2);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(6051, 6051);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      Complex complex0 = complexImage1.max();
      Complex complex1 = new Complex();
      Complex complex2 = new Complex(complex1);
      Complex.sub(complex2, complex0);
      ROI rOI0 = new ROI();
      complexImage0.min();
      complexImage1.min(rOI0);
      rOI0.ly();
      complexImage1.multiply(complexImage0, rOI0, rOI0);
      complexImage0.divide(7149.7036F, 7149.7036F);
      ComplexImage complexImage2 = complexImage1.diff(complexImage0);
      complexImage2.toString(rOI0);
      complexImage2.divide(complexImage1);
      complexImage2.set(0, 0, complex0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.phaseImage();
      ComplexImage complexImage1 = complexImage0.add((-1.0F), (-1.0F));
      ComplexImage complexImage2 = complexImage1.copy();
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      int int0 = complexImage0.X();
      assertNotSame(complexImage0, complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract((-1), 0, (float) 0, (-1.0F), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.X();
      // Undeclared exception!
      try { 
        complexImage0.multiply((-547), (-181), (float) 0, (-5897.011F), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 0.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      complexImage0.imag = realGrayImage0;
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      complexImage1.multiply(complexImage0);
      float float0 = (-2663.0F);
      complexImage1.divide(2604.5076F, (-2663.0F));
      complexImage2.subtract(complexImage1);
      ROI rOI0 = new ROI();
      complexImage1.subtract((float) 12, (float) 12);
      // Undeclared exception!
      try { 
        complexImage2.multiply(12, 12, (-286.4514F), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage0.imag;
      complexImage0.setReal((RealGrayImage) null);
      complexImage0.min();
      int int0 = 2;
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1), 2, (float) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.divide(complexImage1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.getMagnitudeImage();
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      Complex complex0 = new Complex();
      complex0.real();
      Complex complex1 = new Complex(complex0);
      ROI rOI0 = new ROI((-1370), 8, (-1558), (-1558));
      // Undeclared exception!
      try { 
        complexImage0.set(2, 2, (float) 2, (float) 2, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.subtract((float) 0, (float) 0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 5718;
      ComplexImage complexImage0 = new ComplexImage(5718, 0);
      complexImage0.max();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, 2, (float) 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      complexImage0.clear();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.multiply((float) 37, (float) 37);
      complexImage0.add((float) 37, (-4135.68F));
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      complexImage1.max(rOI0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      ROI rOI0 = new ROI();
      complexImage0.toString(rOI0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(8, 2533);
      complexImage1.toString();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      int int1 = 0;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-1226), (-4555), (-2185), (-2185));
      // Undeclared exception!
      try { 
        complexImage0.divide((-1481.73F), (-1481.73F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      complexImage1.copy();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      complexImage1.multiply(complexImage2);
      complexImage0.divide(0.0F, (float) 15);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.setImag(15, (-750), (float) 15, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      Complex complex2 = Complex.mult(complex0, complex1);
      complex2.magnitude();
      Complex complex3 = new Complex(complex2);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI(15, 1497, 11, 11);
      complexImage1.divide((-1481.73F), (float) 11, rOI0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 15;
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      Complex complex0 = complexImage1.max();
      Complex complex1 = new Complex(complex0);
      Complex complex2 = new Complex(complex0);
      Complex complex3 = Complex.mult(complex1, complex2);
      Integer integer0 = new Integer(1497);
      Complex complex4 = new Complex(complex3);
      complexImage1.getMagnitudeImage();
      complexImage0.copy();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.set(1497, 15, complex4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      complexImage0.clear();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.multiply((float) 37, (float) 37);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      complexImage2.subtract(complexImage1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      // Undeclared exception!
      try { 
        complexImage0.multiply(2031.434F, (-226.3F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 1589, (-91.1F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5718, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      complexImage0.addbuffer(5718, 5718, (float) 5718, (-541.635F));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.clear();
      float float0 = (-1127.0F);
      // Undeclared exception!
      try { 
        complexImage0.setImag(0, 0, (-1127.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      Complex complex2 = Complex.mult(complex0, complex1);
      complex2.magnitude();
      Complex complex3 = new Complex(complex2);
      ROI rOI0 = new ROI();
      complexImage1.divide(complexImage0);
      complexImage0.copy(rOI0);
      ComplexImage complexImage2 = complexImage1.multiply((float) 15, (float) 15, rOI0);
      // Undeclared exception!
      try { 
        complexImage2.setImag((-2974), 1815, (float) 1815);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(6, 6);
      ComplexImage complexImage1 = complexImage0.clear();
      Complex complex0 = complexImage1.max();
      Complex complex1 = Complex.mult(complex0, complex0);
      Complex complex2 = new Complex(complex1);
      complexImage0.min();
      ROI rOI0 = new ROI();
      complexImage0.multiply(1, 1, (-559.40796F), 0.0F, rOI0);
      complexImage0.add(complexImage1, rOI0, rOI0);
      ROI rOI1 = new ROI(1292, 8, 1292, (-567));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.subtract(0.0F, (float) 1);
      complexImage1.multiply(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      RealGrayImage realGrayImage0 = complexImage0.real;
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      complexImage2.min();
      ROI rOI0 = new ROI();
      complexImage1.min(rOI0);
      ComplexImage complexImage3 = complexImage2.subtract((float) 37, (float) 37);
      complexImage2.add(complexImage1);
      complexImage3.divide(complexImage2, rOI0, rOI0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 2533;
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      ROI rOI0 = new ROI((-441), 2533, (-441), (-441));
      rOI0.setROI((-441), 2533, 2533, 0);
      int int1 = (-1);
      // Undeclared exception!
      try { 
        complexImage0.divide(2533, 2533, (-573.71F), (-871.87F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage2.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      assertNotNull(complexImage0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(37, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(37, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(37, complexImage2.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(37, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(37, realGrayImage0.Y());
      assertEquals(37, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      complexImage1.setImaginary(realGrayImage0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(37, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(37, realGrayImage0.Y());
      assertEquals(37, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      Complex complex1 = complexImage1.min(rOI0);
      assertNotNull(complex1);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(37, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complex1, complex0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexImage complexImage3 = complexImage2.subtract((float) 37, 1218.7F);
      assertNotNull(complexImage3);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage3.Y());
      assertEquals(37, complexImage3.X());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertNotNull(complexImage4);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(37, complexImage2.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(37, complexImage3.Y());
      assertEquals(37, complexImage3.X());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      
      Complex complex2 = complexImage4.min();
      assertNotNull(complex2);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(37, complexImage2.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(37, complexImage3.Y());
      assertEquals(37, complexImage3.X());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
      assertEquals((-1.601147224965867), complex2.arg(), 0.01);
      assertEquals(1219, complex2.intValue());
      assertEquals(1219.2615080449314, complex2.magnitude(), 0.01);
      assertEquals((-1218.699951171875), complex2.imag(), 0.01);
      assertEquals(1219.2615080449314, complex2.doubleValue(), 0.01);
      assertEquals(1219L, complex2.longValue());
      assertEquals((-1218.699951171875), complex2.imaginary(), 0.01);
      assertEquals((-37.0), complex2.real(), 0.01);
      assertEquals((short)1219, complex2.shortValue());
      assertEquals(1219.2615F, complex2.floatValue(), 0.01F);
      assertEquals((byte) (-61), complex2.byteValue());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      complexImage2.add(complexImage1);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(37, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage4);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3716, 1046);
      assertNotNull(complexImage0);
      assertEquals(1046, complexImage0.Y());
      assertEquals(3716, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, int0);
      
      rOI0.setROI(1101, 1101, 1046, 1557);
      assertEquals(1557, rOI0.ly());
      assertEquals(457, rOI0.Y());
      assertEquals(1101, rOI0.uy());
      assertEquals(56, rOI0.X());
      assertEquals(1101, rOI0.lx());
      assertEquals(1046, rOI0.ux());
      
      int int1 = rOI0.Y();
      assertEquals(1557, rOI0.ly());
      assertEquals(457, rOI0.Y());
      assertEquals(1101, rOI0.uy());
      assertEquals(56, rOI0.X());
      assertEquals(1101, rOI0.lx());
      assertEquals(1046, rOI0.ux());
      assertEquals(457, int1);
      assertFalse(int1 == int0);
      
      int int2 = rOI0.uy();
      assertEquals(1557, rOI0.ly());
      assertEquals(457, rOI0.Y());
      assertEquals(1101, rOI0.uy());
      assertEquals(56, rOI0.X());
      assertEquals(1101, rOI0.lx());
      assertEquals(1046, rOI0.ux());
      assertEquals(1101, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ROI rOI1 = new ROI(2564, (-2974), 457, 0);
      assertNotNull(rOI1);
      assertEquals(2108, rOI1.X());
      assertEquals(2564, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(457, rOI1.ux());
      assertEquals((-2974), rOI1.uy());
      assertEquals(2975, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.ly();
      assertEquals(2108, rOI1.X());
      assertEquals(2564, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(457, rOI1.ux());
      assertEquals((-2974), rOI1.uy());
      assertEquals(2975, rOI1.Y());
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex1.magnitude();
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, double1, 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      // Undeclared exception!
      try { 
        complexImage0.set(270, (-1), complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.imag = realGrayImage0;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, complexImage0.imag.addSum(), 0.01F);
      assertEquals((-32768.0F), complexImage0.imag.max(), 0.01F);
      assertEquals(32767.0F, complexImage0.imag.min(), 0.01F);
      assertEquals(0.0, complexImage0.imag.sqrSum(), 0.01);
      assertEquals(0, complexImage0.imag.X());
      assertEquals(0.0F, complexImage0.imag.absSum(), 0.01F);
      assertEquals(0, complexImage0.imag.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = complexImage2.add(1470.0F, 1470.0F);
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      Complex complex0 = complexImage3.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      ComplexImage complexImage4 = complexImage3.copy();
      assertNotNull(complexImage4);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(12, complexImage4.Y());
      assertEquals(0, complexImage4.X());
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      
      int int0 = complexImage3.X();
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertEquals(0, int0);
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      ComplexImage complexImage5 = complexImage4.clear(complex0);
      assertNotNull(complexImage5);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(12, complexImage4.Y());
      assertEquals(0, complexImage4.X());
      assertEquals(0, complexImage5.X());
      assertEquals(12, complexImage5.Y());
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage5);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage5);
      assertNotSame(complexImage3, complexImage5);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage4, complexImage2);
      assertSame(complexImage4, complexImage5);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage5, complexImage1);
      assertNotSame(complexImage5, complexImage2);
      assertNotSame(complexImage5, complexImage3);
      assertSame(complexImage5, complexImage4);
      assertNotSame(complexImage5, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage5.equals((Object)complexImage1));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.set((-2974), (-2974), (Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      
      Complex complex1 = complexImage1.min(rOI0);
      assertNotNull(complex1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      complexImage0.subtract(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage3 = complexImage0.subtract(0.0F, (float) 15, rOI0);
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(15, complexImage3.Y());
      assertEquals(15, complexImage3.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(12, 12);
      assertNotNull(complexImage2);
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage1.divide(2604.5076F, (-2663.0F));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      ComplexImage complexImage4 = complexImage0.addbuffer(12, 12, 2604.5076F, 1138.8069F);
      assertNotNull(complexImage4);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(12, complexImage4.X());
      assertEquals(12, complexImage4.Y());
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(29, 29);
      assertNotNull(complexImage0);
      assertEquals(29, complexImage0.X());
      assertEquals(29, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 0;
      int int1 = (-529);
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(0, (-529), (float) (-529), 0.0F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(825, 0);
      assertNotNull(complexImage0);
      assertEquals(825, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(825, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(825, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage0.imag = realGrayImage0;
      assertEquals(825, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(825, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, complexImage0.imag.addSum(), 0.01F);
      assertEquals(825, complexImage0.imag.X());
      assertEquals(0.0, complexImage0.imag.sqrSum(), 0.01);
      assertEquals(32767.0F, complexImage0.imag.min(), 0.01F);
      assertEquals((-32768.0F), complexImage0.imag.max(), 0.01F);
      assertEquals(0, complexImage0.imag.Y());
      assertEquals(0.0F, complexImage0.imag.absSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 965;
      ComplexImage complexImage0 = new ComplexImage(965, 965);
      assertNotNull(complexImage0);
      assertEquals(965, complexImage0.Y());
      assertEquals(965, complexImage0.X());
      
      // Undeclared exception!
      complexImage0.clear();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      assertNotNull(complexImage0);
      assertEquals(1589, complexImage0.X());
      assertEquals(1589, complexImage0.Y());
      
      Integer integer0 = new Integer(1589);
      assertNotNull(integer0);
      assertEquals(1589, (int)integer0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = 2564;
      int int3 = (-2974);
      ROI rOI1 = new ROI(3538, 3538, 6, 0);
      assertNotNull(rOI1);
      assertEquals(3539, rOI1.Y());
      assertEquals(3538, rOI1.lx());
      assertEquals(3538, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(3533, rOI1.X());
      assertEquals(6, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int4 = rOI1.ly();
      assertEquals(3539, rOI1.Y());
      assertEquals(3538, rOI1.lx());
      assertEquals(3538, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(3533, rOI1.X());
      assertEquals(6, rOI1.ux());
      assertNotSame(rOI1, rOI0);
      assertEquals(3538, int4);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      rOI1.setROI((-625), 2564, (-2052), 1460);
      assertEquals((-2052), rOI1.ux());
      assertEquals((-625), rOI1.lx());
      assertEquals(1428, rOI1.X());
      assertEquals(2564, rOI1.ly());
      assertEquals(1105, rOI1.Y());
      assertEquals(1460, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((-1.0F), (float) 3538, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = complexImage1.X();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, int0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int1 = complexImage1.Y();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, int1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertTrue(int1 == int0);
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertNotSame(complexImage0, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = 2276;
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.uy();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = 2564;
      ROI rOI1 = new ROI(2564, 255, 1, 0);
      assertNotNull(rOI1);
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(256, rOI1.Y());
      assertEquals(2564, rOI1.X());
      assertEquals(255, rOI1.ly());
      assertEquals(2564, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int5 = rOI1.ly();
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(256, rOI1.Y());
      assertEquals(2564, rOI1.X());
      assertEquals(255, rOI1.ly());
      assertEquals(2564, rOI1.lx());
      assertNotSame(rOI1, rOI0);
      assertEquals(255, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      
      int int6 = 696;
      int int7 = (-193);
      rOI1.setROI(696, 2299, (-193), 0);
      assertEquals(2300, rOI1.Y());
      assertEquals(696, rOI1.lx());
      assertEquals(0, rOI1.uy());
      assertEquals(2299, rOI1.ly());
      assertEquals((-193), rOI1.ux());
      assertEquals(890, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.add((-591.309F), (-514.0F), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage1.multiply(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      float float0 = (-2663.0F);
      ComplexImage complexImage3 = complexImage0.divide((float) (-1), (float) (-1));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      complexImage1.subtract(complexImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI((-1), (-1), 10, (-1));
      assertNotNull(rOI1);
      assertEquals(10, rOI1.lx());
      assertEquals(12, rOI1.X());
      assertEquals((-1), rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals((-1), rOI1.ly());
      assertEquals((-1), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage2.add(complexImage1, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage0.subtract((float) 15, (float) 15);
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage3.Y());
      assertEquals(15, complexImage3.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, (-2974), (Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage1.divide(2604.5076F, (float) 12);
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      complexImage2.subtract(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.setImag((RealGrayImage) null);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.divide(32767.0F, (-992.417F));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int int0 = 5718;
      ComplexImage complexImage0 = new ComplexImage(5718, 0);
      assertNotNull(complexImage0);
      assertEquals(5718, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      Complex complex1 = complexImage1.max(rOI0);
      assertNotNull(complex1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complex1, complex0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5718, 0);
      assertNotNull(complexImage0);
      assertEquals(5718, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(5718, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(5718, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(5718, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.divide((-0.360329F), 0.0F);
      assertNotNull(complexImage2);
      assertEquals(5718, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(5718, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      assertNotNull(complexImage0);
      assertEquals(1589, complexImage0.Y());
      assertEquals(1589, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(1589, (-1139), (float) 1589, 3087.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1139
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.mult(complex1, complex2);
      assertNotNull(complex3);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals((short)0, complex3.shortValue());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      Complex complex4 = complexImage0.min();
      assertNotNull(complex4);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0, complex4.intValue());
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0L, complex4.longValue());
      assertEquals((short)0, complex4.shortValue());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex1);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      Complex complex5 = complexImage1.min(rOI0);
      assertNotNull(complex5);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0.0, complex5.magnitude(), 0.01);
      assertEquals(0.0, complex5.doubleValue(), 0.01);
      assertEquals((short)0, complex5.shortValue());
      assertEquals((byte)0, complex5.byteValue());
      assertEquals(0.0, complex5.imaginary(), 0.01);
      assertEquals(0L, complex5.longValue());
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0, complex5.intValue());
      assertEquals(0.0F, complex5.floatValue(), 0.01F);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex3);
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex3));
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      complexImage1.multiply(complexImage0, rOI0, rOI0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.divide(7149.7036F, 7149.7036F);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      ComplexImage complexImage3 = complexImage1.diff(complexImage0);
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage3.X());
      assertEquals(15, complexImage3.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      
      String string0 = complexImage3.toString(rOI0);
      assertNotNull(string0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(15, complexImage3.X());
      assertEquals(15, complexImage3.Y());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertEquals("15:15\n0.0 \n15:15\n0.0 \n", string0);
      
      RealGrayImage realGrayImage0 = complexImage2.imaginary();
      assertNotNull(realGrayImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(15, realGrayImage0.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      RealGrayImage realGrayImage1 = complexImage1.real();
      assertNotNull(realGrayImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(15, realGrayImage1.X());
      assertEquals(15, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5718, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(5718, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add((-988), (-988), 345.9F, 4377.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 12);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(12, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(12, complexImage0.Y());
      assertEquals(12, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 0, (float) 0);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(12, complexImage0.Y());
      assertEquals(12, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1, 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      int int0 = 2004;
      int int1 = (-1);
      ROI rOI0 = new ROI((-1), (-1), (-1), 2004);
      assertNotNull(rOI0);
      assertEquals((-1), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(2006, rOI0.Y());
      assertEquals(2004, rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      
      rOI0.setROI((-1375), 2004, (-1), 2004);
      assertEquals(1, rOI0.Y());
      assertEquals((-1), rOI0.lx());
      assertEquals(2004, rOI0.uy());
      assertEquals(2004, rOI0.ly());
      assertEquals(1375, rOI0.X());
      assertEquals((-1375), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal(2004, 2004, (-2477.4F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = (-1.0F);
      ComplexImage complexImage1 = complexImage0.add((-1.0F), (-1.0F));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(255, 255, (-425), (-69), 0.0F, (float) (-69));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, int0);
      
      int int1 = 2276;
      rOI0.setROI(2276, 255, 1, 629);
      assertEquals(2276, rOI0.X());
      assertEquals(375, rOI0.Y());
      assertEquals(2276, rOI0.lx());
      assertEquals(629, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(255, rOI0.uy());
      
      int int2 = rOI0.Y();
      assertEquals(2276, rOI0.X());
      assertEquals(375, rOI0.Y());
      assertEquals(2276, rOI0.lx());
      assertEquals(629, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(375, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = rOI0.uy();
      assertEquals(2276, rOI0.X());
      assertEquals(375, rOI0.Y());
      assertEquals(2276, rOI0.lx());
      assertEquals(629, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(255, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = 2564;
      ROI rOI1 = new ROI(2564, (-2974), 375, 0);
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(2975, rOI1.Y());
      assertEquals(2190, rOI1.X());
      assertEquals(2564, rOI1.lx());
      assertEquals((-2974), rOI1.uy());
      assertEquals(375, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int5 = rOI1.ly();
      assertEquals(0, rOI1.ly());
      assertEquals(2975, rOI1.Y());
      assertEquals(2190, rOI1.X());
      assertEquals(2564, rOI1.lx());
      assertEquals((-2974), rOI1.uy());
      assertEquals(375, rOI1.ux());
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int5);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      
      rOI1.setROI(255, 2564, 1, 0);
      assertEquals(1, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(2564, rOI1.ly());
      assertEquals(255, rOI1.X());
      assertEquals(2565, rOI1.Y());
      assertEquals(255, rOI1.lx());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int6 = 696;
      int int7 = (-193);
      rOI1.setROI(696, 2299, (-193), 255);
      assertEquals(2299, rOI1.ly());
      assertEquals(2045, rOI1.Y());
      assertEquals((-193), rOI1.ux());
      assertEquals(255, rOI1.uy());
      assertEquals(696, rOI1.lx());
      assertEquals(890, rOI1.X());
      assertNotSame(rOI1, rOI0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.add((-591.309F), (-514.0F), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      assertNotNull(complexImage0);
      assertEquals(1589, complexImage0.X());
      assertEquals(1589, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1, 333, 220.0F, 220.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.set(2516, 1, (float) 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-753);
      int int1 = 1269;
      // Undeclared exception!
      try { 
        complexImage0.set((-753), 1269, (float) 1269, (float) 1269);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(687, 1, 2442.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.mult(complex1, complex2);
      assertNotNull(complex3);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0L, complex3.longValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      Complex complex4 = complexImage0.min();
      assertNotNull(complex4);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0L, complex4.longValue());
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0, complex4.intValue());
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals((short)0, complex4.shortValue());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complexImage1.min(rOI0);
      assertNotNull(complex5);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0.0, complex5.magnitude(), 0.01);
      assertEquals(0.0, complex5.doubleValue(), 0.01);
      assertEquals((short)0, complex5.shortValue());
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0F, complex5.floatValue(), 0.01F);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals(0, complex5.intValue());
      assertEquals((byte)0, complex5.byteValue());
      assertEquals(0.0, complex5.imaginary(), 0.01);
      assertEquals(0L, complex5.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex1);
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex1));
      
      ComplexImage complexImage2 = complexImage1.subtract(0.0F, 255.0F);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      int int0 = 255;
      ComplexImage complexImage0 = new ComplexImage(255, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(255, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          ComplexImage complexImage0 = new ComplexImage(15, 15);
          assertNotNull(complexImage0);
          assertEquals(15, complexImage0.Y());
          assertEquals(15, complexImage0.X());
          
          ComplexImage complexImage1 = complexImage0.clear();
          assertNotNull(complexImage1);
          assertEquals(15, complexImage0.Y());
          assertEquals(15, complexImage0.X());
          assertEquals(15, complexImage1.Y());
          assertEquals(15, complexImage1.X());
          assertSame(complexImage0, complexImage1);
          assertSame(complexImage1, complexImage0);
          
          Complex complex0 = complexImage1.max();
          assertNotNull(complex0);
          assertEquals(15, complexImage0.Y());
          assertEquals(15, complexImage0.X());
          assertEquals(15, complexImage1.Y());
          assertEquals(15, complexImage1.X());
          assertEquals((short)0, complex0.shortValue());
          assertEquals(0L, complex0.longValue());
          assertEquals(0.0, complex0.imaginary(), 0.01);
          assertEquals(0, complex0.intValue());
          assertEquals((byte)0, complex0.byteValue());
          assertEquals(0.0, complex0.arg(), 0.01);
          assertEquals(0.0, complex0.doubleValue(), 0.01);
          assertEquals(0.0, complex0.magnitude(), 0.01);
          assertEquals(0.0, complex0.imag(), 0.01);
          assertEquals(0.0, complex0.real(), 0.01);
          assertEquals(0.0F, complex0.floatValue(), 0.01F);
          assertSame(complexImage0, complexImage1);
          assertSame(complexImage1, complexImage0);
          
          Complex complex1 = new Complex();
          assertNotNull(complex1);
          assertEquals(0, complex1.intValue());
          assertEquals(0.0F, complex1.floatValue(), 0.01F);
          assertEquals(0.0, complex1.imag(), 0.01);
          assertEquals(0.0, complex1.magnitude(), 0.01);
          assertEquals((byte)0, complex1.byteValue());
          assertEquals(0.0, complex1.imaginary(), 0.01);
          assertEquals(0.0, complex1.doubleValue(), 0.01);
          assertEquals(0L, complex1.longValue());
          assertEquals(0.0, complex1.real(), 0.01);
          assertEquals((short)0, complex1.shortValue());
          assertEquals(0.0, complex1.arg(), 0.01);
          assertFalse(complex1.equals((Object)complex0));
          
          Complex complex2 = new Complex(complex1);
          assertNotNull(complex2);
          assertEquals(0, complex1.intValue());
          assertEquals(0.0F, complex1.floatValue(), 0.01F);
          assertEquals(0.0, complex1.imag(), 0.01);
          assertEquals(0.0, complex1.magnitude(), 0.01);
          assertEquals((byte)0, complex1.byteValue());
          assertEquals(0.0, complex1.imaginary(), 0.01);
          assertEquals(0.0, complex1.doubleValue(), 0.01);
          assertEquals(0L, complex1.longValue());
          assertEquals(0.0, complex1.real(), 0.01);
          assertEquals((short)0, complex1.shortValue());
          assertEquals(0.0, complex1.arg(), 0.01);
          assertEquals(0.0, complex2.real(), 0.01);
          assertEquals(0L, complex2.longValue());
          assertEquals(0.0F, complex2.floatValue(), 0.01F);
          assertEquals(0.0, complex2.magnitude(), 0.01);
          assertEquals(0, complex2.intValue());
          assertEquals((byte)0, complex2.byteValue());
          assertEquals(0.0, complex2.imaginary(), 0.01);
          assertEquals(0.0, complex2.imag(), 0.01);
          assertEquals(0.0, complex2.doubleValue(), 0.01);
          assertEquals(0.0, complex2.arg(), 0.01);
          assertEquals((short)0, complex2.shortValue());
          assertFalse(complex1.equals((Object)complex0));
          assertFalse(complex2.equals((Object)complex0));
          assertFalse(complex2.equals((Object)complex1));
          
          Complex complex3 = complexImage0.min();
          assertNotNull(complex3);
          assertEquals(15, complexImage0.Y());
          assertEquals(15, complexImage0.X());
          assertEquals(0.0, complex3.magnitude(), 0.01);
          assertEquals(0.0, complex3.imag(), 0.01);
          assertEquals(0.0, complex3.doubleValue(), 0.01);
          assertEquals((byte)0, complex3.byteValue());
          assertEquals(0L, complex3.longValue());
          assertEquals(0.0, complex3.arg(), 0.01);
          assertEquals((short)0, complex3.shortValue());
          assertEquals(0.0F, complex3.floatValue(), 0.01F);
          assertEquals(0.0, complex3.real(), 0.01);
          assertEquals(0, complex3.intValue());
          assertEquals(0.0, complex3.imaginary(), 0.01);
          assertSame(complexImage0, complexImage1);
          assertNotSame(complex3, complex0);
          assertNotSame(complex3, complex1);
          assertNotSame(complex3, complex2);
          assertFalse(complex3.equals((Object)complex0));
          assertFalse(complex3.equals((Object)complex1));
          assertFalse(complex3.equals((Object)complex2));
          
          ComplexImage complexImage2 = complexImage1.add((-2880.739F), (-2528.0781F));
          assertNotNull(complexImage2);
          assertEquals(15, complexImage0.Y());
          assertEquals(15, complexImage0.X());
          assertEquals(15, complexImage1.Y());
          assertEquals(15, complexImage1.X());
          assertEquals(15, complexImage2.X());
          assertEquals(15, complexImage2.Y());
          assertSame(complexImage0, complexImage1);
          assertSame(complexImage0, complexImage2);
          assertSame(complexImage1, complexImage2);
          assertSame(complexImage1, complexImage0);
          assertSame(complexImage2, complexImage1);
          assertSame(complexImage2, complexImage0);
          
          // Undeclared exception!
          try { 
            complexImage2.getJavaImage();
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"loadLibrary.javalcms\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkLink(SecurityManager.java:835)
             // java.lang.Runtime.loadLibrary0(Runtime.java:864)
             // java.lang.System.loadLibrary(System.java:1122)
             // sun.java2d.cmm.lcms.LCMS$1.run(LCMS.java:210)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.java2d.cmm.lcms.LCMS.getModule(LCMS.java:203)
             // sun.java2d.cmm.lcms.LcmsServiceProvider.getModule(LcmsServiceProvider.java:34)
             // sun.java2d.cmm.CMMServiceProvider.getColorManagementModule(CMMServiceProvider.java:31)
             // sun.java2d.cmm.CMSManager.getModule(CMSManager.java:76)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:783)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:1017)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:982)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:933)
             // java.awt.color.ICC_Profile$2.run(ICC_Profile.java:929)
             // java.security.AccessController.doPrivileged(Native Method)
             // java.awt.color.ICC_Profile.getStandardProfile(ICC_Profile.java:928)
             // java.awt.color.ICC_Profile.getDeferredInstance(ICC_Profile.java:1075)
             // java.awt.color.ICC_Profile.getInstance(ICC_Profile.java:847)
             // java.awt.color.ColorSpace.getInstance(ColorSpace.java:298)
             // java.awt.image.DirectColorModel.<init>(DirectColorModel.java:182)
             // java.awt.image.ColorModel.getRGBdefault(ColorModel.java:242)
             // java.awt.image.MemoryImageSource.<init>(MemoryImageSource.java:227)
             // jigl.image.types.RealGrayImage.getJavaImage(RealGrayImage.java:658)
             // jigl.image.types.ComplexImage.getJavaImage(ComplexImage.java:94)
             // sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
             // sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1179, 0);
      assertNotNull(complexImage0);
      assertEquals(1179, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(1179, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1179, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage1 = complexImage0.add((-1.0F), (-1.0F));
      assertNotNull(complexImage1);
      assertEquals(1179, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(1179, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertNotNull(complexImage2);
      assertEquals(1179, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(1179, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      int int0 = complexImage2.X();
      assertEquals(1179, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(1179, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1179, int0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 2510);
      assertNotNull(complexImage0);
      assertEquals(2510, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 2510, 1936.4F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertFalse(complex1.equals((Object)complex0));
      
      ROI rOI0 = new ROI(2533, 2533, 2533, 2533);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(2533, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(2533, rOI0.uy());
      assertEquals(2533, rOI0.ly());
      assertEquals(2533, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.set(0, (-1), complex1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      assertNotNull(complexImage0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(37, 37, (float) 37);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      assertNotNull(complexImage0);
      assertEquals(1589, complexImage0.X());
      assertEquals(1589, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1589, (float) 1589);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, (-1), (-1), 0);
      assertNotNull(rOI0);
      assertEquals(2, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage(8, 1110);
      assertNotNull(complexImage1);
      assertEquals(1110, complexImage1.Y());
      assertEquals(8, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(0, 0, (float) 0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(1179, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(1179, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(1179, complexImage0.X());
      assertEquals(1179, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(1179, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1179, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      complexImage0.setImaginary(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(1179, complexImage0.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1179, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = complexImage0.imaginary();
      assertNotNull(realGrayImage2);
      assertEquals(0, complexImage0.Y());
      assertEquals(1179, complexImage0.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(1179, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertSame(realGrayImage2, realGrayImage1);
      
      int int1 = (-1251);
      // Undeclared exception!
      try { 
        complexImage0.setImaginary((-1251), 0, 1701.933F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      float float0 = 220.0F;
      int int0 = (-2219);
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(int0, int0, (float) int0, float0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      
      int int0 = complexImage0.X();
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, (-1), (-1), 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-1), rOI0.uy());
      assertEquals((-1), rOI0.ux());
      assertEquals(2, rOI0.Y());
      assertEquals(2, rOI0.X());
      
      ComplexImage complexImage1 = new ComplexImage(8, 1110);
      assertNotNull(complexImage1);
      assertEquals(8, complexImage1.X());
      assertEquals(1110, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      complexImage1.multiply(complexImage2);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-166);
      int int1 = (-526);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.subtract(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      Complex complex0 = new Complex((-1520.1798248), (-1520.1798248));
      assertNotNull(complex0);
      assertEquals(2149, complex0.intValue());
      assertEquals((byte)101, complex0.byteValue());
      assertEquals(2149L, complex0.longValue());
      assertEquals(2149.859F, complex0.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex0.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals((short)2149, complex0.shortValue());
      assertEquals(2149.8589488615294, complex0.magnitude(), 0.01);
      assertEquals((-1520.1798095703125), complex0.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex0.doubleValue(), 0.01);
      
      double double0 = complex0.real();
      assertEquals(2149, complex0.intValue());
      assertEquals((byte)101, complex0.byteValue());
      assertEquals(2149L, complex0.longValue());
      assertEquals(2149.859F, complex0.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex0.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals((short)2149, complex0.shortValue());
      assertEquals(2149.8589488615294, complex0.magnitude(), 0.01);
      assertEquals((-1520.1798095703125), complex0.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex0.doubleValue(), 0.01);
      assertEquals((-1520.1798095703125), double0, 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(2149, complex0.intValue());
      assertEquals((byte)101, complex0.byteValue());
      assertEquals(2149L, complex0.longValue());
      assertEquals(2149.859F, complex0.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex0.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals((short)2149, complex0.shortValue());
      assertEquals(2149.8589488615294, complex0.magnitude(), 0.01);
      assertEquals((-1520.1798095703125), complex0.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex0.doubleValue(), 0.01);
      assertEquals(2149L, complex1.longValue());
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals((-1520.1798095703125), complex1.imaginary(), 0.01);
      assertEquals((short)2149, complex1.shortValue());
      assertEquals(2149.8589488615294, complex1.magnitude(), 0.01);
      assertEquals(2149.8589488615294, complex1.doubleValue(), 0.01);
      assertEquals((byte)101, complex1.byteValue());
      assertEquals(2149.859F, complex1.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex1.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex1.real(), 0.01);
      assertEquals(2149, complex1.intValue());
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(2149, complex0.intValue());
      assertEquals((byte)101, complex0.byteValue());
      assertEquals(2149L, complex0.longValue());
      assertEquals(2149.859F, complex0.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex0.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals((short)2149, complex0.shortValue());
      assertEquals(2149.8589488615294, complex0.magnitude(), 0.01);
      assertEquals((-1520.1798095703125), complex0.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex0.doubleValue(), 0.01);
      assertEquals(2149L, complex1.longValue());
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals((-1520.1798095703125), complex1.imaginary(), 0.01);
      assertEquals((short)2149, complex1.shortValue());
      assertEquals(2149.8589488615294, complex1.magnitude(), 0.01);
      assertEquals(2149.8589488615294, complex1.doubleValue(), 0.01);
      assertEquals((byte)101, complex1.byteValue());
      assertEquals(2149.859F, complex1.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex1.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex1.real(), 0.01);
      assertEquals(2149, complex1.intValue());
      assertEquals(2149.859F, complex2.floatValue(), 0.01F);
      assertEquals((short)2149, complex2.shortValue());
      assertEquals(2149L, complex2.longValue());
      assertEquals((-1520.1798095703125), complex2.imaginary(), 0.01);
      assertEquals((-2.356194490192345), complex2.arg(), 0.01);
      assertEquals(2149.8589488615294, complex2.doubleValue(), 0.01);
      assertEquals((byte)101, complex2.byteValue());
      assertEquals(2149.8589488615294, complex2.magnitude(), 0.01);
      assertEquals(2149, complex2.intValue());
      assertEquals((-1520.1798095703125), complex2.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex2.real(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.mult(complex1, complex2);
      assertNotNull(complex3);
      assertEquals(2149, complex0.intValue());
      assertEquals((byte)101, complex0.byteValue());
      assertEquals(2149L, complex0.longValue());
      assertEquals(2149.859F, complex0.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex0.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals((short)2149, complex0.shortValue());
      assertEquals(2149.8589488615294, complex0.magnitude(), 0.01);
      assertEquals((-1520.1798095703125), complex0.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex0.doubleValue(), 0.01);
      assertEquals(2149L, complex1.longValue());
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals((-1520.1798095703125), complex1.imaginary(), 0.01);
      assertEquals((short)2149, complex1.shortValue());
      assertEquals(2149.8589488615294, complex1.magnitude(), 0.01);
      assertEquals(2149.8589488615294, complex1.doubleValue(), 0.01);
      assertEquals((byte)101, complex1.byteValue());
      assertEquals(2149.859F, complex1.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex1.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex1.real(), 0.01);
      assertEquals(2149, complex1.intValue());
      assertEquals(2149.859F, complex2.floatValue(), 0.01F);
      assertEquals((short)2149, complex2.shortValue());
      assertEquals(2149L, complex2.longValue());
      assertEquals((-1520.1798095703125), complex2.imaginary(), 0.01);
      assertEquals((-2.356194490192345), complex2.arg(), 0.01);
      assertEquals(2149.8589488615294, complex2.doubleValue(), 0.01);
      assertEquals((byte)101, complex2.byteValue());
      assertEquals(2149.8589488615294, complex2.magnitude(), 0.01);
      assertEquals(2149, complex2.intValue());
      assertEquals((-1520.1798095703125), complex2.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex2.real(), 0.01);
      assertEquals(4621893.394848479, complex3.doubleValue(), 0.01);
      assertEquals(4621893, complex3.intValue());
      assertEquals(4621893.394848479, complex3.magnitude(), 0.01);
      assertEquals(4621893.5F, complex3.floatValue(), 0.01F);
      assertEquals((byte)69, complex3.byteValue());
      assertEquals(1.5707963267948966, complex3.arg(), 0.01);
      assertEquals(4621893.5, complex3.imaginary(), 0.01);
      assertEquals((short) (-31163), complex3.shortValue());
      assertEquals(4621893.5, complex3.imag(), 0.01);
      assertEquals(4621893L, complex3.longValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      
      double double1 = complex3.magnitude();
      assertEquals(2149, complex0.intValue());
      assertEquals((byte)101, complex0.byteValue());
      assertEquals(2149L, complex0.longValue());
      assertEquals(2149.859F, complex0.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex0.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals((short)2149, complex0.shortValue());
      assertEquals(2149.8589488615294, complex0.magnitude(), 0.01);
      assertEquals((-1520.1798095703125), complex0.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex0.doubleValue(), 0.01);
      assertEquals(2149L, complex1.longValue());
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals((-1520.1798095703125), complex1.imaginary(), 0.01);
      assertEquals((short)2149, complex1.shortValue());
      assertEquals(2149.8589488615294, complex1.magnitude(), 0.01);
      assertEquals(2149.8589488615294, complex1.doubleValue(), 0.01);
      assertEquals((byte)101, complex1.byteValue());
      assertEquals(2149.859F, complex1.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex1.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex1.real(), 0.01);
      assertEquals(2149, complex1.intValue());
      assertEquals(2149.859F, complex2.floatValue(), 0.01F);
      assertEquals((short)2149, complex2.shortValue());
      assertEquals(2149L, complex2.longValue());
      assertEquals((-1520.1798095703125), complex2.imaginary(), 0.01);
      assertEquals((-2.356194490192345), complex2.arg(), 0.01);
      assertEquals(2149.8589488615294, complex2.doubleValue(), 0.01);
      assertEquals((byte)101, complex2.byteValue());
      assertEquals(2149.8589488615294, complex2.magnitude(), 0.01);
      assertEquals(2149, complex2.intValue());
      assertEquals((-1520.1798095703125), complex2.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex2.real(), 0.01);
      assertEquals(4621893.394848479, complex3.doubleValue(), 0.01);
      assertEquals(4621893, complex3.intValue());
      assertEquals(4621893.394848479, complex3.magnitude(), 0.01);
      assertEquals(4621893.5F, complex3.floatValue(), 0.01F);
      assertEquals((byte)69, complex3.byteValue());
      assertEquals(1.5707963267948966, complex3.arg(), 0.01);
      assertEquals(4621893.5, complex3.imaginary(), 0.01);
      assertEquals((short) (-31163), complex3.shortValue());
      assertEquals(4621893.5, complex3.imag(), 0.01);
      assertEquals(4621893L, complex3.longValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertEquals(4621893.394848479, double1, 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertNotEquals(double1, double0, 0.01);
      
      Complex complex4 = new Complex(complex1);
      assertNotNull(complex4);
      assertEquals(2149, complex0.intValue());
      assertEquals((byte)101, complex0.byteValue());
      assertEquals(2149L, complex0.longValue());
      assertEquals(2149.859F, complex0.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex0.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex0.real(), 0.01);
      assertEquals((-2.356194490192345), complex0.arg(), 0.01);
      assertEquals((short)2149, complex0.shortValue());
      assertEquals(2149.8589488615294, complex0.magnitude(), 0.01);
      assertEquals((-1520.1798095703125), complex0.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex0.doubleValue(), 0.01);
      assertEquals(2149L, complex1.longValue());
      assertEquals((-2.356194490192345), complex1.arg(), 0.01);
      assertEquals((-1520.1798095703125), complex1.imaginary(), 0.01);
      assertEquals((short)2149, complex1.shortValue());
      assertEquals(2149.8589488615294, complex1.magnitude(), 0.01);
      assertEquals(2149.8589488615294, complex1.doubleValue(), 0.01);
      assertEquals((byte)101, complex1.byteValue());
      assertEquals(2149.859F, complex1.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex1.imag(), 0.01);
      assertEquals((-1520.1798095703125), complex1.real(), 0.01);
      assertEquals(2149, complex1.intValue());
      assertEquals(2149.859F, complex4.floatValue(), 0.01F);
      assertEquals((-1520.1798095703125), complex4.real(), 0.01);
      assertEquals(2149L, complex4.longValue());
      assertEquals(2149.8589488615294, complex4.doubleValue(), 0.01);
      assertEquals((short)2149, complex4.shortValue());
      assertEquals((-2.356194490192345), complex4.arg(), 0.01);
      assertEquals((-1520.1798095703125), complex4.imaginary(), 0.01);
      assertEquals(2149.8589488615294, complex4.magnitude(), 0.01);
      assertEquals((byte)101, complex4.byteValue());
      assertEquals((-1520.1798095703125), complex4.imag(), 0.01);
      assertEquals(2149, complex4.intValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      complexImage0.divide(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(12, 12);
      assertNotNull(complexImage2);
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = new ComplexImage(complexImage2);
      assertNotNull(complexImage3);
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage2.X());
      assertEquals(12, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      int int1 = complexImage3.X();
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage2.X());
      assertEquals(12, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(12, int1);
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(int1 == int0);
      
      int int2 = complexImage3.Y();
      assertEquals(12, complexImage2.Y());
      assertEquals(12, complexImage2.X());
      assertEquals(12, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(12, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage2.getImaginary(12, 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 15;
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.mult(complex1, complex2);
      assertNotNull(complex3);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0L, complex3.longValue());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      double double0 = complex3.magnitude();
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0L, complex3.longValue());
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = new Complex(complex3);
      assertNotNull(complex4);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0L, complex4.longValue());
      assertEquals((short)0, complex4.shortValue());
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0, complex4.intValue());
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1497, 15, complex4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(6, 6);
      assertNotNull(complexImage0);
      assertEquals(6, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(6, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(6, complexImage1.Y());
      assertEquals(6, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(6, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(6, complexImage1.Y());
      assertEquals(6, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = Complex.mult(complex0, complex0);
      assertNotNull(complex1);
      assertEquals(6, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(6, complexImage1.Y());
      assertEquals(6, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(6, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(6, complexImage1.Y());
      assertEquals(6, complexImage1.X());
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complexImage0.min();
      assertNotNull(complex3);
      assertEquals(6, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      complexImage0.add(complexImage1, rOI0, rOI0);
      assertEquals(6, complexImage0.X());
      assertEquals(6, complexImage0.Y());
      assertEquals(6, complexImage1.Y());
      assertEquals(6, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ROI rOI1 = new ROI(1292, 8, 1292, (-567));
      assertNotNull(rOI1);
      assertEquals(8, rOI1.ly());
      assertEquals(1292, rOI1.ux());
      assertEquals((-567), rOI1.uy());
      assertEquals(576, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(1292, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(2016, 11, (float) (-567), 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 15;
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      int int1 = 1;
      int int2 = 543;
      int int3 = 1815;
      ROI rOI0 = new ROI(543, 1, 1815, 15);
      assertNotNull(rOI0);
      assertEquals(15, rOI0.Y());
      assertEquals(1815, rOI0.lx());
      assertEquals(1, rOI0.uy());
      assertEquals(543, rOI0.ux());
      assertEquals(1273, rOI0.X());
      assertEquals(15, rOI0.ly());
      
      rOI0.setROI(1, 1815, 1, 1);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(1815, rOI0.ly());
      assertEquals(1, rOI0.uy());
      assertEquals(1815, rOI0.Y());
      assertEquals(1, rOI0.lx());
      
      int int4 = 696;
      int int5 = 128;
      rOI0.setROI((-193), 2564, 952, 128);
      assertEquals(128, rOI0.uy());
      assertEquals(952, rOI0.lx());
      assertEquals(2564, rOI0.ly());
      assertEquals((-193), rOI0.ux());
      assertEquals(1146, rOI0.X());
      assertEquals(2437, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1807.6677F, 4618.938F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(1, 0, 1, 1518);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1518, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1519, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1;
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      int int1 = (-1);
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals((short) (-1), complex0.shortValue());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(1, (-1), (float) (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1179, 0);
      assertNotNull(complexImage0);
      assertEquals(1179, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      int int0 = 12;
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.imag = realGrayImage0;
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, complexImage0.imag.sqrSum(), 0.01);
      assertEquals(32767.0F, complexImage0.imag.min(), 0.01F);
      assertEquals((-32768.0F), complexImage0.imag.max(), 0.01F);
      assertEquals(0, complexImage0.imag.X());
      assertEquals(0.0F, complexImage0.imag.addSum(), 0.01F);
      assertEquals(0.0F, complexImage0.imag.absSum(), 0.01F);
      assertEquals(0, complexImage0.imag.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = complexImage1.divide(2604.5076F, (-2663.0F));
      assertNotNull(complexImage3);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      complexImage2.subtract(complexImage1);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(12, complexImage2.Y());
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      int int0 = complexImage2.X();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, int0);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      int int1 = complexImage2.Y();
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, int1);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertTrue(int1 == int0);
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(5718, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(5718, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, 5718, (float) 5718);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(12, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = complexImage1.divide(2604.5076F, (float) 12);
      assertNotNull(complexImage3);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      int int0 = complexImage1.X();
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(0, int0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage1.Y());
      assertEquals(12, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      complexImage0.multiply(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = complexImage1.divide((float) 15, (float) 15);
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage3.Y());
      assertEquals(15, complexImage3.X());
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ComplexImage complexImage3 = complexImage0.multiply(15.300736F, (-4035.1646F));
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage3.X());
      assertEquals(15, complexImage3.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      assertNotNull(complexImage0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      Complex complex0 = complexImage2.min();
      assertNotNull(complex0);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Complex complex1 = complexImage1.min(rOI0);
      assertNotNull(complex1);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex1, complex0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexImage complexImage3 = complexImage2.subtract((float) 37, 1218.7F);
      assertNotNull(complexImage3);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(37, complexImage3.X());
      assertEquals(37, complexImage3.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertNotNull(complexImage4);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(37, complexImage3.X());
      assertEquals(37, complexImage3.Y());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage3));
      
      complexImage2.add(complexImage1);
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      
      Complex complex1 = Complex.mult(complex0, complex0);
      assertNotNull(complex1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex0);
      assertNotNull(complex2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = complexImage1.min();
      assertNotNull(complex3);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex0);
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      complexImage0.multiply(1, 1, 0.0F, 0.0F, rOI0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertSame(complexImage0, complexImage1);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(2533, 698, (float) 2533, (float) 698, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage1.addbuffer(15, 15, 1987, 0, 0.0F, (float) 15);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage2.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = new ComplexImage(complexImage0);
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage3.X());
      assertEquals(15, complexImage3.Y());
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      ComplexImage complexImage4 = complexImage0.multiply((float) 15, (-442.1F));
      assertNotNull(complexImage4);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage4.X());
      assertEquals(15, complexImage4.Y());
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(15, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(15, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      
      ComplexImage complexImage3 = new ComplexImage(complexImage2);
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage3.Y());
      assertEquals(15, complexImage3.X());
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      RealGrayImage realGrayImage1 = new RealGrayImage(15, 17);
      assertNotNull(realGrayImage1);
      assertEquals(15, realGrayImage1.X());
      assertEquals(17, realGrayImage1.Y());
      
      complexImage3.imag = realGrayImage1;
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(15, complexImage3.Y());
      assertEquals(15, complexImage3.X());
      assertEquals(15, realGrayImage1.X());
      assertEquals(17, realGrayImage1.Y());
      assertEquals(17, complexImage3.imag.Y());
      assertEquals(15, complexImage3.imag.X());
      
      ComplexImage complexImage4 = complexImage0.multiply(603.0F, 603.0F);
      assertNotNull(complexImage4);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage4.Y());
      assertEquals(15, complexImage4.X());
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage4, complexImage2);
      assertSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage3));
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage0 = new ComplexImage(2090, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(2090, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(2090, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(2090, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(2090, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(2090, complexImage1.X());
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(2787.5583F, (float) 8);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      
      double double0 = complex0.real();
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      double double1 = complex0.magnitude();
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertNotSame(complex0, complex1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertEquals(double1, double0, 0.01);
      
      Complex complex2 = complex1.pow((-1));
      assertNotNull(complex2);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(Double.NaN, complex2.imaginary(), 0.01);
      assertEquals(Double.NaN, complex2.doubleValue(), 0.01);
      assertEquals(Float.NaN, complex2.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex2.magnitude(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.real(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = new Complex(complex1);
      assertNotNull(complex3);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = complex3.log();
      assertNotNull(complex4);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(Double.NEGATIVE_INFINITY, complex4.real(), 0.01);
      assertEquals(3.141592653589793, complex4.arg(), 0.01);
      assertEquals(9223372036854775807L, complex4.longValue());
      assertEquals((short) (-1), complex4.shortValue());
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex4.doubleValue(), 0.01);
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals((byte) (-1), complex4.byteValue());
      assertEquals(Float.POSITIVE_INFINITY, complex4.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex4.intValue());
      assertNotSame(complex0, complex4);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex4);
      assertNotSame(complex1, complex2);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex4);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertNotSame(complex4, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = Complex.mult(complex1, complex2);
      assertNotNull(complex3);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      double double0 = complex3.magnitude();
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      
      Complex complex4 = complexImage0.min();
      assertNotNull(complex4);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals((short)0, complex4.shortValue());
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0L, complex4.longValue());
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0, complex4.intValue());
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex4, complex0);
      assertNotSame(complex4, complex1);
      assertNotSame(complex4, complex3);
      assertNotSame(complex4, complex2);
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      
      Complex complex5 = complexImage1.min(rOI0);
      assertNotNull(complex5);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals((short)0, complex5.shortValue());
      assertEquals(0.0, complex5.magnitude(), 0.01);
      assertEquals(0L, complex5.longValue());
      assertEquals(0.0, complex5.doubleValue(), 0.01);
      assertEquals(0.0, complex5.imaginary(), 0.01);
      assertEquals(0, complex5.intValue());
      assertEquals(0.0, complex5.real(), 0.01);
      assertEquals(0.0, complex5.imag(), 0.01);
      assertEquals(0.0F, complex5.floatValue(), 0.01F);
      assertEquals(0.0, complex5.arg(), 0.01);
      assertEquals((byte)0, complex5.byteValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex5, complex1);
      assertNotSame(complex5, complex0);
      assertNotSame(complex5, complex2);
      assertNotSame(complex5, complex3);
      assertNotSame(complex5, complex4);
      assertFalse(complex5.equals((Object)complex1));
      assertFalse(complex5.equals((Object)complex0));
      assertFalse(complex5.equals((Object)complex2));
      assertFalse(complex5.equals((Object)complex3));
      assertFalse(complex5.equals((Object)complex4));
      
      float float0 = 1.0F;
      // Undeclared exception!
      try { 
        complexImage0.add((-16777216), 10, (float) (-16777216), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 2510);
      assertNotNull(complexImage0);
      assertEquals(2510, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(2510, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(2510, complexImage1.Y());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      complexImage1.copy();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.add(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.divide((-2663.0F), 251.0F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      int int0 = 6;
      // Undeclared exception!
      try { 
        complexImage0.add(1, 6, (float) 1, (-2663.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.mult(complex0, complex1);
      assertNotNull(complex2);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex2);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      
      Complex complex3 = new Complex(complex2);
      assertNotNull(complex3);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0L, complex3.longValue());
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      complexImage1.divide(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.add(complexImage1, rOI0, rOI0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.getReal(0, 57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int0);
      
      int int1 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1, 5042, 2042.27F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(37, 37);
      assertNotNull(complexImage0);
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(37, complexImage2.X());
      assertEquals(37, complexImage2.Y());
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Complex complex0 = complexImage1.max(rOI0);
      assertNotNull(complex0);
      assertEquals(37, complexImage0.X());
      assertEquals(37, complexImage0.Y());
      assertEquals(37, complexImage1.X());
      assertEquals(37, complexImage1.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      int int1 = (-2974);
      String string0 = complexImage0.toString();
      assertNotNull(string0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertSame(complexImage0, complexImage1);
      assertEquals("0:0\n0:0\n", string0);
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1211), 1, (-1211), (-2974), (float) 0, (float) 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      
      ComplexImage complexImage3 = complexImage1.divide(2604.5076F, (-2663.0F));
      assertNotNull(complexImage3);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      
      complexImage2.subtract(complexImage1);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        complexImage0.add(1, 1, 255.0F, 1586.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rOI0).ly();
      doReturn(0, 0).when(rOI0).ux();
      doReturn(0).when(rOI0).uy();
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.mult(complex1, complex2);
      assertNotNull(complex3);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      
      double double0 = complex3.magnitude();
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex1, complex3);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex0);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      
      Complex complex4 = new Complex(complex3);
      assertNotNull(complex4);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0L, complex4.longValue());
      assertEquals((short)0, complex4.shortValue());
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertEquals(0, complex4.intValue());
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      complexImage0.divide(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(15, complexImage1.X());
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage3 = complexImage2.copy(rOI0);
      assertNotNull(complexImage3);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage2.Y());
      assertEquals(15, complexImage2.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.divide(2591.448F, (float) (-526));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      complexImage0.subtract(complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      double double0 = complex0.real();
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, double0, 0.01);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertFalse(complex1.equals((Object)complex0));
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(0, 12);
      assertNotNull(complexImage1);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      complexImage0.imag = realGrayImage0;
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, complexImage0.imag.min(), 0.01F);
      assertEquals((-32768.0F), complexImage0.imag.max(), 0.01F);
      assertEquals(0, complexImage0.imag.X());
      assertEquals(0.0F, complexImage0.imag.addSum(), 0.01F);
      assertEquals(0.0F, complexImage0.imag.absSum(), 0.01F);
      assertEquals(0, complexImage0.imag.Y());
      assertEquals(0.0, complexImage0.imag.sqrSum(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      complexImage1.multiply(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ComplexImage complexImage3 = complexImage1.divide(2604.5076F, (-2663.0F));
      assertNotNull(complexImage3);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      
      complexImage2.subtract(complexImage1);
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(12, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage4 = complexImage0.diff(complexImage3);
      assertNotNull(complexImage4);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(12, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage3.X());
      assertEquals(12, complexImage3.Y());
      assertEquals(0, complexImage4.Y());
      assertEquals(0, complexImage4.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage3, complexImage4);
      assertSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex1 = new Complex();
      assertNotNull(complex1);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = Complex.mult(complex1, complex2);
      assertNotNull(complex3);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      double double0 = complex3.magnitude();
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      
      Complex complex4 = new Complex(complex3);
      assertNotNull(complex4);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0F, complex4.floatValue(), 0.01F);
      assertEquals(0.0, complex4.real(), 0.01);
      assertEquals(0.0, complex4.arg(), 0.01);
      assertEquals(0.0, complex4.magnitude(), 0.01);
      assertEquals((short)0, complex4.shortValue());
      assertEquals(0.0, complex4.imag(), 0.01);
      assertEquals(0L, complex4.longValue());
      assertEquals(0, complex4.intValue());
      assertEquals((byte)0, complex4.byteValue());
      assertEquals(0.0, complex4.imaginary(), 0.01);
      assertEquals(0.0, complex4.doubleValue(), 0.01);
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex4.equals((Object)complex3));
      assertFalse(complex4.equals((Object)complex0));
      assertFalse(complex4.equals((Object)complex2));
      assertFalse(complex4.equals((Object)complex1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      complexImage1.divide(complexImage0);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.copy(rOI0);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(15, (-9), (-829.13885F), (float) 15, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertFalse(complexImage1.equals((Object)complexImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI1.X();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int0);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.Y();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertEquals(1, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      
      int int2 = rOI1.uy();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertNotSame(rOI1, rOI0);
      assertEquals(0, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ROI rOI2 = new ROI(2564, (-2974), 1, 0);
      assertNotNull(rOI2);
      assertEquals(2564, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals((-2974), rOI2.uy());
      assertEquals(2564, rOI2.X());
      assertEquals(2975, rOI2.Y());
      assertEquals(1, rOI2.ux());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      int int3 = rOI2.ly();
      assertEquals(2564, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals((-2974), rOI2.uy());
      assertEquals(2564, rOI2.X());
      assertEquals(2975, rOI2.Y());
      assertEquals(1, rOI2.ux());
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(0, int3);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = 1589;
      ComplexImage complexImage0 = new ComplexImage(1589, 1589);
      assertNotNull(complexImage0);
      assertEquals(1589, complexImage0.Y());
      assertEquals(1589, complexImage0.X());
      
      ROI rOI1 = new ROI(255, 1589, (-2052), (-2052));
      assertNotNull(rOI1);
      assertEquals(255, rOI1.lx());
      assertEquals(2308, rOI1.X());
      assertEquals((-2052), rOI1.uy());
      assertEquals(3642, rOI1.Y());
      assertEquals((-2052), rOI1.ux());
      assertEquals(1589, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.ly();
      assertEquals(255, rOI1.lx());
      assertEquals(2308, rOI1.X());
      assertEquals((-2052), rOI1.uy());
      assertEquals(3642, rOI1.Y());
      assertEquals((-2052), rOI1.ux());
      assertEquals(1589, rOI1.ly());
      assertNotSame(rOI1, rOI0);
      assertEquals(1589, int1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int1 == int0);
      
      int int2 = 1933;
      // Undeclared exception!
      complexImage0.addbuffer(255, 1933, 1589, 1, (float) 255, 0.0F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      assertNotNull(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertFalse(complex1.equals((Object)complex0));
      
      Complex complex2 = Complex.mult(complex0, complex1);
      assertNotNull(complex2);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex1, complex2);
      assertNotSame(complex1, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      
      Complex complex3 = new Complex(complex2);
      assertNotNull(complex3);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((short)0, complex2.shortValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals((byte)0, complex3.byteValue());
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex2));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      complexImage1.divide(complexImage0);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(15, complexImage1.X());
      assertEquals(15, complexImage1.Y());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      ComplexImage complexImage2 = complexImage0.copy(rOI0);
      assertNotNull(complexImage2);
      assertEquals(15, complexImage0.X());
      assertEquals(15, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add(1134.2058F, 1134.2058F);
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      
      // Undeclared exception!
      try { 
        complexImage1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.multiply((float) 36, (float) 36);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      int int0 = 15;
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      Complex complex0 = complexImage1.max();
      Complex complex1 = new Complex();
      Complex complex2 = new Complex(complex0);
      Complex complex3 = Complex.mult(complex1, complex2);
      double double0 = new Integer(1497);
      Complex complex4 = new Complex(complex3);
      complexImage0.copy();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.set(1497, 15, complex4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 12);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.divide((float) 0, (-2663.0F));
      complexImage1.subtract(complexImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.setImag((-2974), 12, (-2725.0696F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(0, 6, 6, 6);
      // Undeclared exception!
      try { 
        complexImage0.setImag(0, 6, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = 32767.0F;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.get(0, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(15, 15);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.max();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complex1.mult(complex0);
      Complex complex2 = Complex.mult(complex0, complex1);
      ComplexImage complexImage2 = complexImage0.clear();
      complex2.magnitude();
      Complex complex3 = new Complex(complex2);
      ROI rOI0 = new ROI();
      ComplexImage complexImage3 = complexImage2.divide(32767.0F, (-4564.0F));
      assertEquals(15, complexImage3.X());
  }
}

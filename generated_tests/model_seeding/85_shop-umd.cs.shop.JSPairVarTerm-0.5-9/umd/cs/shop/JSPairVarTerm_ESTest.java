/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 07 16:19:56 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSPairVarTerm;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPairVarTerm_ESTest extends JSPairVarTerm_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.add((Object) jSTerm0);
      JSPairVarTerm jSPairVarTerm1 = jSPairVarTerm0.clonePVT();
      JSPairVarTerm jSPairVarTerm2 = jSPairVarTerm1.standarizerPVT();
      assertNotSame(jSPairVarTerm2, jSPairVarTerm1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.clonePVT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPairVarTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.var = jSTerm0;
      // Undeclared exception!
      try { 
        jSPairVarTerm0.clonePVT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.add((Object) jSTerm0);
      jSPairVarTerm0.print();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPairVarTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSPairVarTerm0.var();
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.add((Object) jSTerm0);
      JSPairVarTerm jSPairVarTerm1 = jSPairVarTerm0.clonePVT();
      JSTerm jSTerm1 = jSPairVarTerm1.var();
      assertEquals(10, jSTerm1.capacity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.makeEval(true);
      JSTerm jSTerm1 = jSPairVarTerm0.var();
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.term.makeConstant();
      JSTerm jSTerm1 = jSPairVarTerm0.var();
      assertEquals(10, jSTerm1.capacity());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm1, jSTerm0);
      JSTerm jSTerm2 = jSPairVarTerm0.var();
      assertNotNull(jSTerm2);
      assertEquals(0, jSTerm2.capacity());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSPairVarTerm0.term();
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.makeEval(true);
      JSTerm jSTerm1 = jSPairVarTerm0.term();
      assertEquals(0, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.add((Object) jSTerm0);
      JSTerm jSTerm1 = jSPairVarTerm0.term();
      assertFalse(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = jSPairVarTerm0.term();
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.trimToSize();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      JSTerm jSTerm1 = jSPairVarTerm0.term();
      assertSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.add((Object) jSTerm0);
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.standarizerPVT();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "<PTExMr|FfY!W1");
      jSTerm0.add((Object) "<PTExMr|FfY!W1");
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.standarizerPVT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.standarizerPVT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) ": unexpected EOF");
      jSTerm0.add((Object) jSTerm0);
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "<PTExMr|FfY!W1");
      jSTerm0.add((Object) "<PTExMr|FfY!W1");
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      jSTerm0.add((Object) jSTerm0);
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.clonePVT();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      Object object0 = new Object();
      jSTerm0.add(object0);
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm(jSTerm0, jSTerm0);
      // Undeclared exception!
      try { 
        jSPairVarTerm0.clonePVT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      // Undeclared exception!
      try { 
        jSPairVarTerm0.standarizerPVT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPairVarTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = new JSTerm();
      jSPairVarTerm0.setTerm(jSTerm0);
      jSPairVarTerm0.var = jSTerm0;
      jSPairVarTerm0.var.add((Object) jSTerm0);
      JSPairVarTerm jSPairVarTerm1 = jSPairVarTerm0.clonePVT();
      JSTerm jSTerm1 = jSPairVarTerm1.term();
      assertEquals(10, jSTerm1.capacity());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = jSPairVarTerm0.term();
      assertNull(jSTerm0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSPairVarTerm jSPairVarTerm0 = new JSPairVarTerm();
      JSTerm jSTerm0 = jSPairVarTerm0.var();
      assertNull(jSTerm0);
  }
}

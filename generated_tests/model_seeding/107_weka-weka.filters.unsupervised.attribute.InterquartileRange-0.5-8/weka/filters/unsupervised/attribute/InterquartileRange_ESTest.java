/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:18:20 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.filters.unsupervised.attribute.InterquartileRange;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class InterquartileRange_ESTest extends InterquartileRange_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.calculateMultiplier((Instance) null, 6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertNotNull(interquartileRange0);
      
      double[] doubleArray0 = new double[5];
      interquartileRange0.m_IQR = doubleArray0;
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_OUTLIER_VALUES;
      double[] doubleArray1 = interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertNotNull(interquartileRange0);
      
      double[] doubleArray0 = new double[8];
      interquartileRange0.m_UpperExtremeValue = doubleArray0;
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_OUTLIER_VALUES;
      double[] doubleArray1 = interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertNull(doubleArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      double[] doubleArray0 = new double[9];
      interquartileRange0.m_UpperExtremeValue = doubleArray0;
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.UPPER_EXTREME_VALUES;
      double[] doubleArray1 = interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(9, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setExtremeValuesAsOutliers(true);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertTrue(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setExtremeValuesFactor(3);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setOutlierFactor(2733.78);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setAttributeIndices("");
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertNotNull(interquartileRange0);
      
      int[] intArray0 = new int[2];
      interquartileRange0.setAttributeIndicesArray(intArray0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertNotNull(interquartileRange0);
      
      double[] doubleArray0 = new double[5];
      interquartileRange0.m_LowerOutlier = doubleArray0;
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_OUTLIER_VALUES;
      double[] doubleArray1 = interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertSame(doubleArray1, doubleArray0);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.m_OutputOffsetMultiplier = true;
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      
      boolean boolean0 = interquartileRange0.getOutputOffsetMultiplier();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setOutlierFactor(0.0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals(0.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      
      double double0 = interquartileRange0.getOutlierFactor();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals(0.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setOutlierFactor((-2881.35));
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals((-2881.35), interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      
      double double0 = interquartileRange0.getOutlierFactor();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals((-2881.35), interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals((-2881.35), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      String[] stringArray0 = new String[1];
      try { 
        interquartileRange0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.isOutlier((Instance) null, (-2146526872));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertNotNull(interquartileRange0);
      
      int[] intArray0 = new int[1];
      interquartileRange0.m_AttributeIndices = intArray0;
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      
      double[] doubleArray0 = new double[7];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2336.43751812342, doubleArray0);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      assertEquals(7, binarySparseInstance0.numAttributes());
      assertEquals(0, binarySparseInstance0.numValues());
      assertEquals(2336.43751812342, binarySparseInstance0.weight(), 0.01);
      assertNotNull(binarySparseInstance0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        interquartileRange0.isOutlier(binarySparseInstance0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.isOutlier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.isExtremeValue((Instance) null, (-2146528149));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.isExtremeValue((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.getValues((InterquartileRange.ValueType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.m_Attributes = null;
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      
      // Undeclared exception!
      try { 
        interquartileRange0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertNotNull(arrayList0);
      
      Instances instances0 = new Instances("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", arrayList0, 5531);
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(0, instances0.numInstances());
      assertEquals(0.0, instances0.sumOfWeights(), 0.01);
      assertEquals(0, instances0.size());
      assertEquals(0, instances0.numAttributes());
      assertFalse(instances0.checkForStringAttributes());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", instances0.relationName());
      assertEquals((-1), instances0.classIndex());
      assertNotNull(instances0);
      
      try { 
        interquartileRange0.determineOutputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No upper limit has been specified for range
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertNotNull(interquartileRange0);
      
      try { 
        interquartileRange0.determineOutputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.computeThresholds((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertNotNull(interquartileRange0);
      
      int[] intArray0 = new int[4];
      interquartileRange0.m_AttributeIndices = intArray0;
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      
      // Undeclared exception!
      try { 
        interquartileRange0.calculateMultiplier((Instance) null, (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setOutputOffsetMultiplier(false);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setDetectionPerAttribute(false);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setExtremeValuesFactor(1063.34956829);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(1063.34956829, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      Enumeration enumeration0 = interquartileRange0.listOptions();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      boolean boolean0 = interquartileRange0.getOutputOffsetMultiplier();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertNotNull(interquartileRange0);
      
      boolean boolean0 = interquartileRange0.getDetectionPerAttribute();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      double double0 = interquartileRange0.getExtremeValuesFactor();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals(6.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      String string0 = interquartileRange0.getAttributeIndices();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(string0);
      assertEquals("first-last", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertNotNull(interquartileRange0);
      
      boolean boolean0 = interquartileRange0.getExtremeValuesAsOutliers();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertNotNull(interquartileRange0);
      
      double double0 = interquartileRange0.getOutlierFactor();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertNotNull(interquartileRange0);
      
      try { 
        interquartileRange0.process((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.InterquartileRange", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertNotNull(interquartileRange0);
      
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.IQR;
      double[] doubleArray0 = interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertNotNull(interquartileRange0);
      
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.LOWER_EXTREME_VALUES;
      double[] doubleArray0 = interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      InterquartileRange.ValueType interquartileRange_ValueType0 = InterquartileRange.ValueType.MEDIAN;
      double[] doubleArray0 = interquartileRange0.getValues(interquartileRange_ValueType0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNull(doubleArray0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setDetectionPerAttribute(true);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.getDebug());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setExtremeValuesFactor((-2839.8198321087348));
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.isFirstBatchDone());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setOutlierFactor(6.0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.setOutputOffsetMultiplier(true);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      
      String[] stringArray0 = interquartileRange0.getOptions();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertTrue(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertNotNull(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertNotNull(interquartileRange0);
      
      interquartileRange0.m_ExtremeValuesAsOutliers = true;
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertTrue(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      
      String[] stringArray0 = interquartileRange0.getOptions();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertTrue(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertNotNull(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertNotNull(interquartileRange0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "OutlierFactor must be smaller than ExtremeValueFactor";
      stringArray0[1] = "w4";
      stringArray0[2] = "{ expected at beginning of enumeration";
      stringArray0[3] = "R";
      stringArray0[4] = "'bcB25%^.#\"Eo";
      interquartileRange0.setOptions(stringArray0);
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertFalse(interquartileRange0.getDebug());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      assertEquals((-1), InterquartileRange.NON_NUMERIC);
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", interquartileRange0.attributeIndicesTipText());
      assertEquals("The factor for determining the thresholds for outliers.", interquartileRange0.outlierFactorTipText());
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", interquartileRange0.outputOffsetMultiplierTipText());
      assertFalse(interquartileRange0.isOutputFormatDefined());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", interquartileRange0.detectionPerAttributeTipText());
      assertTrue(interquartileRange0.isNewBatch());
      assertFalse(interquartileRange0.mayRemoveInstanceAfterFirstBatchDone());
      assertEquals("Whether to tag extreme values also as outliers.", interquartileRange0.extremeValuesAsOutliersTipText());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", interquartileRange0.globalInfo());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDebug());
      assertFalse(interquartileRange0.isFirstBatchDone());
      assertEquals("The factor for determining the thresholds for extreme values.", interquartileRange0.extremeValuesFactorTipText());
      assertEquals("Turns on output of debugging information.", interquartileRange0.debugTipText());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertNotNull(interquartileRange0);
      
      // Undeclared exception!
      try { 
        interquartileRange0.getCapabilities();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // weka/core/WekaPackageManager
         //
         verifyException("weka.core.Utils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.outputOffsetMultiplierTipText();
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("Generates an additional attribute 'Offset' that contains the multiplier the value is off the median: value = median + 'multiplier' * IQR", string0);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.extremeValuesAsOutliersTipText();
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("Whether to tag extreme values also as outliers.", string0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.extremeValuesFactorTipText();
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals("The factor for determining the thresholds for extreme values.", string0);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      // Undeclared exception!
      try { 
        interquartileRange0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.outlierFactorTipText();
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("The factor for determining the thresholds for outliers.", string0);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String[] stringArray0 = interquartileRange0.getOptions();
      InterquartileRange.main(stringArray0);
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertEquals(6, stringArray0.length);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.attributeIndicesTipText();
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertEquals("Specify range of attributes to act on;  this is a comma separated list of attribute indices, with \"first\" and \"last\" valid values; specify an inclusive range with \"-\", eg: \"first-3,5,6-10,last\".", string0);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.getRevision();
      assertEquals("8040", string0);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String[] stringArray0 = interquartileRange0.getOptions();
      interquartileRange0.setOptions(stringArray0);
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(3.0, interquartileRange0.getOutlierFactor(), 0.01);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.globalInfo();
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertEquals("A filter for detecting outliers and extreme values based on interquartile ranges. The filter skips the class attribute.\n\nOutliers:\n  Q3 + OF*IQR < x <= Q3 + EVF*IQR\n  or\n  Q1 - EVF*IQR <= x < Q1 - OF*IQR\n\nExtreme values:\n  x > Q3 + EVF*IQR\n  or\n  x < Q1 - EVF*IQR\n\nKey:\n  Q1  = 25% quartile\n  Q3  = 75% quartile\n  IQR = Interquartile Range, difference between Q1 and Q3\n  OF  = Outlier Factor\n  EVF = Extreme Value Factor", string0);
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
      assertFalse(interquartileRange0.getDetectionPerAttribute());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      InterquartileRange interquartileRange0 = new InterquartileRange();
      String string0 = interquartileRange0.detectionPerAttributeTipText();
      assertEquals("Generates Outlier/ExtremeValue attribute pair for each numeric attribute, not just a single pair for all numeric attributes together.", string0);
      assertFalse(interquartileRange0.getDetectionPerAttribute());
      assertEquals(6.0, interquartileRange0.getExtremeValuesFactor(), 0.01);
      assertFalse(interquartileRange0.getOutputOffsetMultiplier());
      assertFalse(interquartileRange0.getExtremeValuesAsOutliers());
  }
}
